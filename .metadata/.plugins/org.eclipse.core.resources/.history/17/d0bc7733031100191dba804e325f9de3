/*
 * nrf24.c
 *
 *  Created on: 5 янв. 2019 г.
 *      Author: Alexey
 */

#include "nrf24.h"

//------------------------------------------------

extern SPI_HandleTypeDef hspi1;

//------------------------------------------------

__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{

  micros *= (SystemCoreClock / 1000000) / 9;

  /* Wait till done */

  while (micros--) ;

}

void NRF24_ini(void)
{
	CE_RESET;
	DelayMicro(5000);
	NRF24_WriteReg(CONFIG, 0x0a);
	DelayMicro(5000);
	NRF24_WriteReg(EN_AA, 0x01);
	NRF24_WriteReg(EN_RXADDR, 0x01);
	NRF24_WriteReg(SETUP_AW, 0x01);
	NRF24_WriteReg(SETUP_RETR, 0x5F);
	NRF24_ToggleFeatures();
	NRF24_WriteReg(FEATURE, 0);
	NRF24_WriteReg(DYNPD, 0);
	NRF24_WriteReg(STATUS, 0x70);
	NRF24_WriteReg(RF_CH, 76);
}

uint8_t NRF24_ReadReg(uint8_t addr)
{
  uint8_t dt=0, cmd;
  CS_ON;
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
  if (addr!=STATUS)//если адрес равен адрес регистра статус то и возварщаем его состояние
  {
    cmd=0xFF;
    HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
  }
  CS_OFF;
  return dt;
}

void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
  addr |= W_REGISTER;//включим бит записи в адрес
  CS_ON;
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);//отправим адрес в шину
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);//отправим данные в шину
  CS_OFF;
}

void NRF24_ToggleFeatures(void)
{
  uint8_t dt[1] = {ACTIVATE};
  CS_ON;
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
  DelayMicro(1);
  dt[0] = 0x73;
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
  CS_OFF;
}
