
DAC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003564  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080036a8  080036a8  000136a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080038c0  080038c0  000138c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080038c4  080038c4  000138c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080038c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001f0  20000004  080038cc  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001f4  080038cc  000201f4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013373  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000263c  00000000  00000000  000333a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006093  00000000  00000000  000359dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000810  00000000  00000000  0003ba70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ca8  00000000  00000000  0003c280  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000051eb  00000000  00000000  0003cf28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000033c3  00000000  00000000  00042113  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000454d6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ab4  00000000  00000000  00045554  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000004 	.word	0x20000004
 800015c:	00000000 	.word	0x00000000
 8000160:	0800368c 	.word	0x0800368c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000008 	.word	0x20000008
 800017c:	0800368c 	.word	0x0800368c

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__gedf2>:
 8000914:	f04f 3cff 	mov.w	ip, #4294967295
 8000918:	e006      	b.n	8000928 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__ledf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	e002      	b.n	8000928 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__cmpdf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	f84d cd04 	str.w	ip, [sp, #-4]!
 800092c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000930:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000938:	bf18      	it	ne
 800093a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093e:	d01b      	beq.n	8000978 <__cmpdf2+0x54>
 8000940:	b001      	add	sp, #4
 8000942:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000946:	bf0c      	ite	eq
 8000948:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800094c:	ea91 0f03 	teqne	r1, r3
 8000950:	bf02      	ittt	eq
 8000952:	ea90 0f02 	teqeq	r0, r2
 8000956:	2000      	moveq	r0, #0
 8000958:	4770      	bxeq	lr
 800095a:	f110 0f00 	cmn.w	r0, #0
 800095e:	ea91 0f03 	teq	r1, r3
 8000962:	bf58      	it	pl
 8000964:	4299      	cmppl	r1, r3
 8000966:	bf08      	it	eq
 8000968:	4290      	cmpeq	r0, r2
 800096a:	bf2c      	ite	cs
 800096c:	17d8      	asrcs	r0, r3, #31
 800096e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000972:	f040 0001 	orr.w	r0, r0, #1
 8000976:	4770      	bx	lr
 8000978:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800097c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000980:	d102      	bne.n	8000988 <__cmpdf2+0x64>
 8000982:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000986:	d107      	bne.n	8000998 <__cmpdf2+0x74>
 8000988:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d1d6      	bne.n	8000940 <__cmpdf2+0x1c>
 8000992:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000996:	d0d3      	beq.n	8000940 <__cmpdf2+0x1c>
 8000998:	f85d 0b04 	ldr.w	r0, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <__aeabi_cdrcmple>:
 80009a0:	4684      	mov	ip, r0
 80009a2:	4610      	mov	r0, r2
 80009a4:	4662      	mov	r2, ip
 80009a6:	468c      	mov	ip, r1
 80009a8:	4619      	mov	r1, r3
 80009aa:	4663      	mov	r3, ip
 80009ac:	e000      	b.n	80009b0 <__aeabi_cdcmpeq>
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdcmpeq>:
 80009b0:	b501      	push	{r0, lr}
 80009b2:	f7ff ffb7 	bl	8000924 <__cmpdf2>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	bf48      	it	mi
 80009ba:	f110 0f00 	cmnmi.w	r0, #0
 80009be:	bd01      	pop	{r0, pc}

080009c0 <__aeabi_dcmpeq>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff fff4 	bl	80009b0 <__aeabi_cdcmpeq>
 80009c8:	bf0c      	ite	eq
 80009ca:	2001      	moveq	r0, #1
 80009cc:	2000      	movne	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmplt>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffea 	bl	80009b0 <__aeabi_cdcmpeq>
 80009dc:	bf34      	ite	cc
 80009de:	2001      	movcc	r0, #1
 80009e0:	2000      	movcs	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmple>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffe0 	bl	80009b0 <__aeabi_cdcmpeq>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpge>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffce 	bl	80009a0 <__aeabi_cdrcmple>
 8000a04:	bf94      	ite	ls
 8000a06:	2001      	movls	r0, #1
 8000a08:	2000      	movhi	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpgt>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff ffc4 	bl	80009a0 <__aeabi_cdrcmple>
 8000a18:	bf34      	ite	cc
 8000a1a:	2001      	movcc	r0, #1
 8000a1c:	2000      	movcs	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_d2iz>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d215      	bcs.n	8000a5a <__aeabi_d2iz+0x36>
 8000a2e:	d511      	bpl.n	8000a54 <__aeabi_d2iz+0x30>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d912      	bls.n	8000a60 <__aeabi_d2iz+0x3c>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_d2iz+0x48>
 8000a60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	bf08      	it	eq
 8000a66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_frsub>:
 8000a74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a78:	e002      	b.n	8000a80 <__addsf3>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_fsub>:
 8000a7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a80 <__addsf3>:
 8000a80:	0042      	lsls	r2, r0, #1
 8000a82:	bf1f      	itttt	ne
 8000a84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a88:	ea92 0f03 	teqne	r2, r3
 8000a8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a94:	d06a      	beq.n	8000b6c <__addsf3+0xec>
 8000a96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a9e:	bfc1      	itttt	gt
 8000aa0:	18d2      	addgt	r2, r2, r3
 8000aa2:	4041      	eorgt	r1, r0
 8000aa4:	4048      	eorgt	r0, r1
 8000aa6:	4041      	eorgt	r1, r0
 8000aa8:	bfb8      	it	lt
 8000aaa:	425b      	neglt	r3, r3
 8000aac:	2b19      	cmp	r3, #25
 8000aae:	bf88      	it	hi
 8000ab0:	4770      	bxhi	lr
 8000ab2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ab6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ace:	bf18      	it	ne
 8000ad0:	4249      	negne	r1, r1
 8000ad2:	ea92 0f03 	teq	r2, r3
 8000ad6:	d03f      	beq.n	8000b58 <__addsf3+0xd8>
 8000ad8:	f1a2 0201 	sub.w	r2, r2, #1
 8000adc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae0:	eb10 000c 	adds.w	r0, r0, ip
 8000ae4:	f1c3 0320 	rsb	r3, r3, #32
 8000ae8:	fa01 f103 	lsl.w	r1, r1, r3
 8000aec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af0:	d502      	bpl.n	8000af8 <__addsf3+0x78>
 8000af2:	4249      	negs	r1, r1
 8000af4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000af8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000afc:	d313      	bcc.n	8000b26 <__addsf3+0xa6>
 8000afe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b02:	d306      	bcc.n	8000b12 <__addsf3+0x92>
 8000b04:	0840      	lsrs	r0, r0, #1
 8000b06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b0a:	f102 0201 	add.w	r2, r2, #1
 8000b0e:	2afe      	cmp	r2, #254	; 0xfe
 8000b10:	d251      	bcs.n	8000bb6 <__addsf3+0x136>
 8000b12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1a:	bf08      	it	eq
 8000b1c:	f020 0001 	biceq.w	r0, r0, #1
 8000b20:	ea40 0003 	orr.w	r0, r0, r3
 8000b24:	4770      	bx	lr
 8000b26:	0049      	lsls	r1, r1, #1
 8000b28:	eb40 0000 	adc.w	r0, r0, r0
 8000b2c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b30:	f1a2 0201 	sub.w	r2, r2, #1
 8000b34:	d1ed      	bne.n	8000b12 <__addsf3+0x92>
 8000b36:	fab0 fc80 	clz	ip, r0
 8000b3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b46:	bfaa      	itet	ge
 8000b48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b4c:	4252      	neglt	r2, r2
 8000b4e:	4318      	orrge	r0, r3
 8000b50:	bfbc      	itt	lt
 8000b52:	40d0      	lsrlt	r0, r2
 8000b54:	4318      	orrlt	r0, r3
 8000b56:	4770      	bx	lr
 8000b58:	f092 0f00 	teq	r2, #0
 8000b5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b60:	bf06      	itte	eq
 8000b62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b66:	3201      	addeq	r2, #1
 8000b68:	3b01      	subne	r3, #1
 8000b6a:	e7b5      	b.n	8000ad8 <__addsf3+0x58>
 8000b6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b74:	bf18      	it	ne
 8000b76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7a:	d021      	beq.n	8000bc0 <__addsf3+0x140>
 8000b7c:	ea92 0f03 	teq	r2, r3
 8000b80:	d004      	beq.n	8000b8c <__addsf3+0x10c>
 8000b82:	f092 0f00 	teq	r2, #0
 8000b86:	bf08      	it	eq
 8000b88:	4608      	moveq	r0, r1
 8000b8a:	4770      	bx	lr
 8000b8c:	ea90 0f01 	teq	r0, r1
 8000b90:	bf1c      	itt	ne
 8000b92:	2000      	movne	r0, #0
 8000b94:	4770      	bxne	lr
 8000b96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b9a:	d104      	bne.n	8000ba6 <__addsf3+0x126>
 8000b9c:	0040      	lsls	r0, r0, #1
 8000b9e:	bf28      	it	cs
 8000ba0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	4770      	bx	lr
 8000ba6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000baa:	bf3c      	itt	cc
 8000bac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bxcc	lr
 8000bb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbe:	4770      	bx	lr
 8000bc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bc4:	bf16      	itet	ne
 8000bc6:	4608      	movne	r0, r1
 8000bc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bcc:	4601      	movne	r1, r0
 8000bce:	0242      	lsls	r2, r0, #9
 8000bd0:	bf06      	itte	eq
 8000bd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bd6:	ea90 0f01 	teqeq	r0, r1
 8000bda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_ui2f>:
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	e004      	b.n	8000bf0 <__aeabi_i2f+0x8>
 8000be6:	bf00      	nop

08000be8 <__aeabi_i2f>:
 8000be8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bec:	bf48      	it	mi
 8000bee:	4240      	negmi	r0, r0
 8000bf0:	ea5f 0c00 	movs.w	ip, r0
 8000bf4:	bf08      	it	eq
 8000bf6:	4770      	bxeq	lr
 8000bf8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bfc:	4601      	mov	r1, r0
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	e01c      	b.n	8000c3e <__aeabi_l2f+0x2a>

08000c04 <__aeabi_ul2f>:
 8000c04:	ea50 0201 	orrs.w	r2, r0, r1
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f04f 0300 	mov.w	r3, #0
 8000c10:	e00a      	b.n	8000c28 <__aeabi_l2f+0x14>
 8000c12:	bf00      	nop

08000c14 <__aeabi_l2f>:
 8000c14:	ea50 0201 	orrs.w	r2, r0, r1
 8000c18:	bf08      	it	eq
 8000c1a:	4770      	bxeq	lr
 8000c1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__aeabi_l2f+0x14>
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	ea5f 0c01 	movs.w	ip, r1
 8000c2c:	bf02      	ittt	eq
 8000c2e:	4684      	moveq	ip, r0
 8000c30:	4601      	moveq	r1, r0
 8000c32:	2000      	moveq	r0, #0
 8000c34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c38:	bf08      	it	eq
 8000c3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c42:	fabc f28c 	clz	r2, ip
 8000c46:	3a08      	subs	r2, #8
 8000c48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c4c:	db10      	blt.n	8000c70 <__aeabi_l2f+0x5c>
 8000c4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c52:	4463      	add	r3, ip
 8000c54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c58:	f1c2 0220 	rsb	r2, r2, #32
 8000c5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c60:	fa20 f202 	lsr.w	r2, r0, r2
 8000c64:	eb43 0002 	adc.w	r0, r3, r2
 8000c68:	bf08      	it	eq
 8000c6a:	f020 0001 	biceq.w	r0, r0, #1
 8000c6e:	4770      	bx	lr
 8000c70:	f102 0220 	add.w	r2, r2, #32
 8000c74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c78:	f1c2 0220 	rsb	r2, r2, #32
 8000c7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c80:	fa21 f202 	lsr.w	r2, r1, r2
 8000c84:	eb43 0002 	adc.w	r0, r3, r2
 8000c88:	bf08      	it	eq
 8000c8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c8e:	4770      	bx	lr

08000c90 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_InitTick+0x24>)
{
 8000c92:	b510      	push	{r4, lr}
 8000c94:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ca0:	f000 f876 	bl	8000d90 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4621      	mov	r1, r4
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f000 f830 	bl	8000d10 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	bd10      	pop	{r4, pc}
 8000cb4:	20000000 	.word	0x20000000

08000cb8 <HAL_Init>:
{
 8000cb8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cba:	2003      	movs	r0, #3
 8000cbc:	f000 f816 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f7ff ffe5 	bl	8000c90 <HAL_InitTick>
  HAL_MspInit();
 8000cc6:	f001 fb67 	bl	8002398 <HAL_MspInit>
}
 8000cca:	2000      	movs	r0, #0
 8000ccc:	bd08      	pop	{r3, pc}
	...

08000cd0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000cd0:	4a02      	ldr	r2, [pc, #8]	; (8000cdc <HAL_IncTick+0xc>)
 8000cd2:	6813      	ldr	r3, [r2, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000020 	.word	0x20000020

08000ce0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ce0:	4b01      	ldr	r3, [pc, #4]	; (8000ce8 <HAL_GetTick+0x8>)
 8000ce2:	6818      	ldr	r0, [r3, #0]
}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000020 	.word	0x20000020

08000cec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000cee:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000cf2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cfa:	041b      	lsls	r3, r3, #16
 8000cfc:	0c1b      	lsrs	r3, r3, #16
 8000cfe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000d06:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d08:	60d3      	str	r3, [r2, #12]
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d12:	b530      	push	{r4, r5, lr}
 8000d14:	68dc      	ldr	r4, [r3, #12]
 8000d16:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	2b04      	cmp	r3, #4
 8000d22:	bf28      	it	cs
 8000d24:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2c:	bf98      	it	ls
 8000d2e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	fa05 f303 	lsl.w	r3, r5, r3
 8000d34:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d38:	bf88      	it	hi
 8000d3a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4019      	ands	r1, r3
 8000d3e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	fa05 f404 	lsl.w	r4, r5, r4
 8000d44:	3c01      	subs	r4, #1
 8000d46:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000d48:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4a:	ea42 0201 	orr.w	r2, r2, r1
 8000d4e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	bfaf      	iteee	ge
 8000d54:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	4b06      	ldrlt	r3, [pc, #24]	; (8000d74 <HAL_NVIC_SetPriority+0x64>)
 8000d5a:	f000 000f 	andlt.w	r0, r0, #15
 8000d5e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	bfa5      	ittet	ge
 8000d62:	b2d2      	uxtbge	r2, r2
 8000d64:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000d6e:	bd30      	pop	{r4, r5, pc}
 8000d70:	e000ed00 	.word	0xe000ed00
 8000d74:	e000ed14 	.word	0xe000ed14

08000d78 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d78:	2301      	movs	r3, #1
 8000d7a:	0942      	lsrs	r2, r0, #5
 8000d7c:	f000 001f 	and.w	r0, r0, #31
 8000d80:	fa03 f000 	lsl.w	r0, r3, r0
 8000d84:	4b01      	ldr	r3, [pc, #4]	; (8000d8c <HAL_NVIC_EnableIRQ+0x14>)
 8000d86:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	3801      	subs	r0, #1
 8000d92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d96:	d20a      	bcs.n	8000dae <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000dae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000dbe:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	bf0c      	ite	eq
 8000dc4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000dc8:	f022 0204 	bicne.w	r2, r2, #4
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	4770      	bx	lr
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000dd4:	4770      	bx	lr

08000dd6 <HAL_SYSTICK_IRQHandler>:
{
 8000dd6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000dd8:	f7ff fffc 	bl	8000dd4 <HAL_SYSTICK_Callback>
 8000ddc:	bd08      	pop	{r3, pc}

08000dde <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000dde:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 8000de0:	4604      	mov	r4, r0
 8000de2:	b168      	cbz	r0, 8000e00 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000de4:	7903      	ldrb	r3, [r0, #4]
 8000de6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000dea:	b913      	cbnz	r3, 8000df2 <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000dec:	7142      	strb	r2, [r0, #5]
    
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000dee:	f001 fb23 	bl	8002438 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000df2:	2302      	movs	r3, #2
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000df4:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8000df6:	7123      	strb	r3, [r4, #4]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000df8:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000dfa:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8000dfc:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8000dfe:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000e00:	2001      	movs	r0, #1
}
 8000e02:	bd10      	pop	{r4, pc}

08000e04 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8000e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e06:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000e08:	7940      	ldrb	r0, [r0, #5]
{
 8000e0a:	460e      	mov	r6, r1
  __HAL_LOCK(hdac);
 8000e0c:	2801      	cmp	r0, #1
{
 8000e0e:	4611      	mov	r1, r2
 8000e10:	f04f 0002 	mov.w	r0, #2
 8000e14:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdac);
 8000e16:	d04c      	beq.n	8000eb2 <HAL_DAC_Start_DMA+0xae>
 8000e18:	2401      	movs	r4, #1
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e1a:	7128      	strb	r0, [r5, #4]
  __HAL_LOCK(hdac);
 8000e1c:	716c      	strb	r4, [r5, #5]
 8000e1e:	682c      	ldr	r4, [r5, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8000e20:	b9e6      	cbnz	r6, 8000e5c <HAL_DAC_Start_DMA+0x58>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000e22:	68a8      	ldr	r0, [r5, #8]
 8000e24:	4f23      	ldr	r7, [pc, #140]	; (8000eb4 <HAL_DAC_Start_DMA+0xb0>)
    
    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8000e26:	2a04      	cmp	r2, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000e28:	6287      	str	r7, [r0, #40]	; 0x28
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000e2a:	4f23      	ldr	r7, [pc, #140]	; (8000eb8 <HAL_DAC_Start_DMA+0xb4>)
 8000e2c:	62c7      	str	r7, [r0, #44]	; 0x2c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000e2e:	4f23      	ldr	r7, [pc, #140]	; (8000ebc <HAL_DAC_Start_DMA+0xb8>)
 8000e30:	6307      	str	r7, [r0, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000e32:	6827      	ldr	r7, [r4, #0]
 8000e34:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 8000e38:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 8000e3a:	d009      	beq.n	8000e50 <HAL_DAC_Start_DMA+0x4c>
 8000e3c:	2a08      	cmp	r2, #8
 8000e3e:	d00a      	beq.n	8000e56 <HAL_DAC_Start_DMA+0x52>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d134      	bne.n	8000eae <HAL_DAC_Start_DMA+0xaa>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000e44:	f104 0208 	add.w	r2, r4, #8
  
  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000e48:	6827      	ldr	r7, [r4, #0]
 8000e4a:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8000e4e:	e01a      	b.n	8000e86 <HAL_DAC_Start_DMA+0x82>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000e50:	f104 020c 	add.w	r2, r4, #12
        break;
 8000e54:	e7f8      	b.n	8000e48 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000e56:	f104 0210 	add.w	r2, r4, #16
        break;
 8000e5a:	e7f5      	b.n	8000e48 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000e5c:	68e8      	ldr	r0, [r5, #12]
 8000e5e:	4f18      	ldr	r7, [pc, #96]	; (8000ec0 <HAL_DAC_Start_DMA+0xbc>)
    switch(Alignment)
 8000e60:	2a04      	cmp	r2, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000e62:	6287      	str	r7, [r0, #40]	; 0x28
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000e64:	4f17      	ldr	r7, [pc, #92]	; (8000ec4 <HAL_DAC_Start_DMA+0xc0>)
 8000e66:	62c7      	str	r7, [r0, #44]	; 0x2c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000e68:	4f17      	ldr	r7, [pc, #92]	; (8000ec8 <HAL_DAC_Start_DMA+0xc4>)
 8000e6a:	6307      	str	r7, [r0, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000e6c:	6827      	ldr	r7, [r4, #0]
 8000e6e:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8000e72:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 8000e74:	d013      	beq.n	8000e9e <HAL_DAC_Start_DMA+0x9a>
 8000e76:	2a08      	cmp	r2, #8
 8000e78:	d014      	beq.n	8000ea4 <HAL_DAC_Start_DMA+0xa0>
 8000e7a:	b9b2      	cbnz	r2, 8000eaa <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000e7c:	f104 0214 	add.w	r2, r4, #20
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000e80:	6827      	ldr	r7, [r4, #0]
 8000e82:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000e86:	6027      	str	r7, [r4, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000e88:	f000 f8b0 	bl	8000fec <HAL_DMA_Start_IT>
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000e8c:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 8000e8e:	2000      	movs	r0, #0
  __HAL_DAC_ENABLE(hdac, Channel);
 8000e90:	682b      	ldr	r3, [r5, #0]
 8000e92:	40b1      	lsls	r1, r6
 8000e94:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdac);
 8000e96:	7168      	strb	r0, [r5, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8000e98:	4311      	orrs	r1, r2
 8000e9a:	6019      	str	r1, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8000e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000e9e:	f104 0218 	add.w	r2, r4, #24
        break;
 8000ea2:	e7ed      	b.n	8000e80 <HAL_DAC_Start_DMA+0x7c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000ea4:	f104 021c 	add.w	r2, r4, #28
        break;
 8000ea8:	e7ea      	b.n	8000e80 <HAL_DAC_Start_DMA+0x7c>
  uint32_t tmpreg = 0;
 8000eaa:	2200      	movs	r2, #0
 8000eac:	e7e8      	b.n	8000e80 <HAL_DAC_Start_DMA+0x7c>
 8000eae:	4632      	mov	r2, r6
 8000eb0:	e7ca      	b.n	8000e48 <HAL_DAC_Start_DMA+0x44>
}
 8000eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eb4:	08000ecf 	.word	0x08000ecf
 8000eb8:	08000ee1 	.word	0x08000ee1
 8000ebc:	08000eed 	.word	0x08000eed
 8000ec0:	08000f4b 	.word	0x08000f4b
 8000ec4:	08000f5b 	.word	0x08000f5b
 8000ec8:	08000f65 	.word	0x08000f65

08000ecc <HAL_DAC_ConvCpltCallbackCh1>:
 8000ecc:	4770      	bx	lr

08000ece <DAC_DMAConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000ece:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ed0:	6a44      	ldr	r4, [r0, #36]	; 0x24
  
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	f7ff fffa 	bl	8000ecc <HAL_DAC_ConvCpltCallbackCh1>
  
  hdac->State = HAL_DAC_STATE_READY;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	7123      	strb	r3, [r4, #4]
 8000edc:	bd10      	pop	{r4, pc}

08000ede <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8000ede:	4770      	bx	lr

08000ee0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000ee0:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8000ee2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000ee4:	f7ff fffb 	bl	8000ede <HAL_DAC_ConvHalfCpltCallbackCh1>
 8000ee8:	bd08      	pop	{r3, pc}

08000eea <HAL_DAC_ErrorCallbackCh1>:
 8000eea:	4770      	bx	lr

08000eec <DAC_DMAErrorCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8000eec:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000eee:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000ef0:	6923      	ldr	r3, [r4, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8000ef2:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8000efa:	f7ff fff6 	bl	8000eea <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State = HAL_DAC_STATE_READY;
 8000efe:	2301      	movs	r3, #1
 8000f00:	7123      	strb	r3, [r4, #4]
 8000f02:	bd10      	pop	{r4, pc}

08000f04 <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 8000f04:	7943      	ldrb	r3, [r0, #5]
{
 8000f06:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdac);
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	f04f 0302 	mov.w	r3, #2
 8000f0e:	d017      	beq.n	8000f40 <HAL_DAC_ConfigChannel+0x3c>
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f10:	7103      	strb	r3, [r0, #4]
  SET_BIT(tmpreg1, (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer));
 8000f12:	c90a      	ldmia	r1, {r1, r3}
 8000f14:	430b      	orrs	r3, r1
  MODIFY_REG(hdac->Instance->CR,
 8000f16:	f640 71fe 	movw	r1, #4094	; 0xffe
 8000f1a:	6804      	ldr	r4, [r0, #0]
 8000f1c:	4091      	lsls	r1, r2
 8000f1e:	6825      	ldr	r5, [r4, #0]
 8000f20:	4093      	lsls	r3, r2
 8000f22:	ea25 0101 	bic.w	r1, r5, r1
 8000f26:	430b      	orrs	r3, r1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000f28:	21c0      	movs	r1, #192	; 0xc0
  MODIFY_REG(hdac->Instance->CR,
 8000f2a:	6023      	str	r3, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f32:	ea23 0202 	bic.w	r2, r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 8000f36:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000f38:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8000f3a:	7103      	strb	r3, [r0, #4]
  __HAL_UNLOCK(hdac);
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8000f40:	4618      	mov	r0, r3
}
 8000f42:	bd30      	pop	{r4, r5, pc}

08000f44 <HAL_DACEx_ConvCpltCallbackCh2>:
 8000f44:	4770      	bx	lr

08000f46 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8000f46:	4770      	bx	lr

08000f48 <HAL_DACEx_ErrorCallbackCh2>:
 8000f48:	4770      	bx	lr

08000f4a <DAC_DMAConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000f4a:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f4c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f7ff fff8 	bl	8000f44 <HAL_DACEx_ConvCpltCallbackCh2>
  
  hdac->State= HAL_DAC_STATE_READY;
 8000f54:	2301      	movs	r3, #1
 8000f56:	7123      	strb	r3, [r4, #4]
 8000f58:	bd10      	pop	{r4, pc}

08000f5a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000f5a:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8000f5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000f5e:	f7ff fff2 	bl	8000f46 <HAL_DACEx_ConvHalfCpltCallbackCh2>
 8000f62:	bd08      	pop	{r3, pc}

08000f64 <DAC_DMAErrorCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8000f64:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f66:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000f68:	6923      	ldr	r3, [r4, #16]
    
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8000f6a:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8000f72:	f7ff ffe9 	bl	8000f48 <HAL_DACEx_ErrorCallbackCh2>
    
  hdac->State= HAL_DAC_STATE_READY;
 8000f76:	2301      	movs	r3, #1
 8000f78:	7123      	strb	r3, [r4, #4]
 8000f7a:	bd10      	pop	{r4, pc}

08000f7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000f7c:	b510      	push	{r4, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	d02d      	beq.n	8000fde <HAL_DMA_Init+0x62>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f82:	2214      	movs	r2, #20
 8000f84:	6801      	ldr	r1, [r0, #0]
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_DMA_Init+0x68>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f88:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f8a:	440b      	add	r3, r1
 8000f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <HAL_DMA_Init+0x6c>)
 8000f96:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp |=  hdma->Init.Direction        |
 8000f9e:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8000fa0:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000fa2:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa4:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fa6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000faa:	4323      	orrs	r3, r4
 8000fac:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fae:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb2:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb4:	6944      	ldr	r4, [r0, #20]
 8000fb6:	4323      	orrs	r3, r4
 8000fb8:	6984      	ldr	r4, [r0, #24]
 8000fba:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fbc:	69c4      	ldr	r4, [r0, #28]
 8000fbe:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000fc0:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000fc2:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fc4:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8000fc6:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fc8:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->XferCpltCallback = NULL;
 8000fca:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000fcc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000fce:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000fd0:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_READY;
 8000fd2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fd6:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fde:	2001      	movs	r0, #1
}
 8000fe0:	bd10      	pop	{r4, pc}
 8000fe2:	bf00      	nop
 8000fe4:	bffd9ff8 	.word	0xbffd9ff8
 8000fe8:	40026000 	.word	0x40026000

08000fec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fec:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fee:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000ff2:	2c01      	cmp	r4, #1
 8000ff4:	d036      	beq.n	8001064 <HAL_DMA_Start_IT+0x78>
 8000ff6:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8000ff8:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000ffc:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001000:	b2ed      	uxtb	r5, r5
 8001002:	42a5      	cmp	r5, r4
 8001004:	f04f 0600 	mov.w	r6, #0
 8001008:	f04f 0402 	mov.w	r4, #2
 800100c:	d128      	bne.n	8001060 <HAL_DMA_Start_IT+0x74>
  {
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800100e:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001012:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001014:	6386      	str	r6, [r0, #56]	; 0x38
  __HAL_DMA_DISABLE(hdma);
 8001016:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001018:	6c07      	ldr	r7, [r0, #64]	; 0x40
  __HAL_DMA_DISABLE(hdma);
 800101a:	f026 0601 	bic.w	r6, r6, #1
 800101e:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001020:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001022:	40bd      	lsls	r5, r7
 8001024:	6075      	str	r5, [r6, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001026:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001028:	6843      	ldr	r3, [r0, #4]
 800102a:	6805      	ldr	r5, [r0, #0]
 800102c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800102e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001030:	bf0b      	itete	eq
 8001032:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001034:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001036:	60e1      	streq	r1, [r4, #12]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001038:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800103a:	b14b      	cbz	r3, 8001050 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800103c:	6823      	ldr	r3, [r4, #0]
 800103e:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001042:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);
 8001044:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001046:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE(hdma);
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	602b      	str	r3, [r5, #0]
 800104e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	f023 0304 	bic.w	r3, r3, #4
 8001056:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	f043 030a 	orr.w	r3, r3, #10
 800105e:	e7f0      	b.n	8001042 <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 8001060:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001064:	2002      	movs	r0, #2
} 
 8001066:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001068 <HAL_DMA_IRQHandler>:
{
 8001068:	b470      	push	{r4, r5, r6}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800106a:	2404      	movs	r4, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800106c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800106e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001070:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001072:	6803      	ldr	r3, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001074:	4094      	lsls	r4, r2
 8001076:	4226      	tst	r6, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001078:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800107a:	d00e      	beq.n	800109a <HAL_DMA_IRQHandler+0x32>
 800107c:	f015 0f04 	tst.w	r5, #4
 8001080:	d00b      	beq.n	800109a <HAL_DMA_IRQHandler+0x32>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001086:	bf5e      	ittt	pl
 8001088:	681a      	ldrpl	r2, [r3, #0]
 800108a:	f022 0204 	bicpl.w	r2, r2, #4
 800108e:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001090:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      hdma->DmaBaseAddress->IFCR  = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8001092:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001094:	b373      	cbz	r3, 80010f4 <HAL_DMA_IRQHandler+0x8c>
}
 8001096:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001098:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800109a:	2402      	movs	r4, #2
 800109c:	4094      	lsls	r4, r2
 800109e:	4226      	tst	r6, r4
 80010a0:	d012      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x60>
 80010a2:	f015 0f02 	tst.w	r5, #2
 80010a6:	d00f      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	0695      	lsls	r5, r2, #26
 80010ac:	d406      	bmi.n	80010bc <HAL_DMA_IRQHandler+0x54>
    __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	f022 020a 	bic.w	r2, r2, #10
 80010b4:	601a      	str	r2, [r3, #0]
    hdma->State = HAL_DMA_STATE_READY;
 80010b6:	2301      	movs	r3, #1
 80010b8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80010bc:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 80010be:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80010c0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80010c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80010c6:	e7e5      	b.n	8001094 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80010c8:	2408      	movs	r4, #8
 80010ca:	4094      	lsls	r4, r2
 80010cc:	4234      	tst	r4, r6
 80010ce:	d011      	beq.n	80010f4 <HAL_DMA_IRQHandler+0x8c>
 80010d0:	072c      	lsls	r4, r5, #28
 80010d2:	d50f      	bpl.n	80010f4 <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d4:	681c      	ldr	r4, [r3, #0]
 80010d6:	f024 040e 	bic.w	r4, r4, #14
 80010da:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010dc:	2301      	movs	r3, #1
 80010de:	fa03 f202 	lsl.w	r2, r3, r2
 80010e2:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010e4:	6383      	str	r3, [r0, #56]	; 0x38
      hdma->State = HAL_DMA_STATE_READY;
 80010e6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_UNLOCK(hdma);
 80010ea:	2300      	movs	r3, #0
 80010ec:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80010f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80010f2:	e7cf      	b.n	8001094 <HAL_DMA_IRQHandler+0x2c>
}
 80010f4:	bc70      	pop	{r4, r5, r6}
 80010f6:	4770      	bx	lr

080010f8 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 80010f8:	2300      	movs	r3, #0
{ 
 80010fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010fe:	4a62      	ldr	r2, [pc, #392]	; (8001288 <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8001100:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001104:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8001290 <HAL_GPIO_Init+0x198>
{ 
 8001108:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 800110a:	fa38 f403 	lsrs.w	r4, r8, r3
 800110e:	d102      	bne.n	8001116 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 8001110:	b005      	add	sp, #20
 8001112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001116:	2401      	movs	r4, #1
 8001118:	409c      	lsls	r4, r3
    if(iocurrent)
 800111a:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800111e:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 8001120:	f000 80a7 	beq.w	8001272 <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001124:	684c      	ldr	r4, [r1, #4]
 8001126:	f024 0a10 	bic.w	sl, r4, #16
 800112a:	f1ba 0f02 	cmp.w	sl, #2
 800112e:	d116      	bne.n	800115e <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001130:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 8001134:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001138:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800113c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001140:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001144:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001148:	fa0e fe0b 	lsl.w	lr, lr, fp
 800114c:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001150:	690d      	ldr	r5, [r1, #16]
 8001152:	fa05 f50b 	lsl.w	r5, r5, fp
 8001156:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 800115a:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800115e:	2503      	movs	r5, #3
 8001160:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001164:	fa05 f50c 	lsl.w	r5, r5, ip
 8001168:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 800116a:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800116e:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001172:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001176:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800117a:	f10a 3aff 	add.w	sl, sl, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800117e:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001182:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001186:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800118a:	d816      	bhi.n	80011ba <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 800118c:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001190:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001192:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001196:	fa07 fa0c 	lsl.w	sl, r7, ip
 800119a:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800119e:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80011a2:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80011a6:	9f01      	ldr	r7, [sp, #4]
 80011a8:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80011ac:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80011b0:	fa0e fe03 	lsl.w	lr, lr, r3
 80011b4:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80011b8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80011ba:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80011bc:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80011be:	688f      	ldr	r7, [r1, #8]
 80011c0:	fa07 f70c 	lsl.w	r7, r7, ip
 80011c4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80011c6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80011c8:	00e5      	lsls	r5, r4, #3
 80011ca:	d552      	bpl.n	8001272 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80011cc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d0:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80011d4:	f023 0703 	bic.w	r7, r3, #3
 80011d8:	f045 0501 	orr.w	r5, r5, #1
 80011dc:	f8c9 5020 	str.w	r5, [r9, #32]
 80011e0:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80011e4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80011e8:	f005 0501 	and.w	r5, r5, #1
 80011ec:	9503      	str	r5, [sp, #12]
 80011ee:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80011f2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80011f8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80011fc:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80011fe:	fa0e fe0c 	lsl.w	lr, lr, ip
 8001202:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001206:	4d21      	ldr	r5, [pc, #132]	; (800128c <HAL_GPIO_Init+0x194>)
 8001208:	42a8      	cmp	r0, r5
 800120a:	d034      	beq.n	8001276 <HAL_GPIO_Init+0x17e>
 800120c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001210:	42a8      	cmp	r0, r5
 8001212:	d032      	beq.n	800127a <HAL_GPIO_Init+0x182>
 8001214:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001218:	42a8      	cmp	r0, r5
 800121a:	d030      	beq.n	800127e <HAL_GPIO_Init+0x186>
 800121c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001220:	42a8      	cmp	r0, r5
 8001222:	d02e      	beq.n	8001282 <HAL_GPIO_Init+0x18a>
 8001224:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001228:	42a8      	cmp	r0, r5
 800122a:	bf14      	ite	ne
 800122c:	2505      	movne	r5, #5
 800122e:	2504      	moveq	r5, #4
 8001230:	fa05 f50c 	lsl.w	r5, r5, ip
 8001234:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001238:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800123a:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 800123c:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800123e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001242:	bf0c      	ite	eq
 8001244:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001246:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8001248:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800124a:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800124c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001250:	bf0c      	ite	eq
 8001252:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001254:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8001256:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001258:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800125e:	bf0c      	ite	eq
 8001260:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001262:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8001264:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001266:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001268:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800126a:	bf54      	ite	pl
 800126c:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 800126e:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8001270:	60d5      	str	r5, [r2, #12]
    position++;
 8001272:	3301      	adds	r3, #1
 8001274:	e749      	b.n	800110a <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001276:	2500      	movs	r5, #0
 8001278:	e7da      	b.n	8001230 <HAL_GPIO_Init+0x138>
 800127a:	2501      	movs	r5, #1
 800127c:	e7d8      	b.n	8001230 <HAL_GPIO_Init+0x138>
 800127e:	2502      	movs	r5, #2
 8001280:	e7d6      	b.n	8001230 <HAL_GPIO_Init+0x138>
 8001282:	2503      	movs	r5, #3
 8001284:	e7d4      	b.n	8001230 <HAL_GPIO_Init+0x138>
 8001286:	bf00      	nop
 8001288:	40010400 	.word	0x40010400
 800128c:	40020000 	.word	0x40020000
 8001290:	40023800 	.word	0x40023800

08001294 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8001296:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800129e:	d00c      	beq.n	80012ba <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 80012a0:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 80012a2:	491a      	ldr	r1, [pc, #104]	; (800130c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80012a4:	680b      	ldr	r3, [r1, #0]
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80012ae:	6808      	ldr	r0, [r1, #0]
 80012b0:	f000 0001 	and.w	r0, r0, #1
 80012b4:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 80012b6:	b002      	add	sp, #8
 80012b8:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80012ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012bc:	4914      	ldr	r1, [pc, #80]	; (8001310 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80012be:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80012c2:	d00f      	beq.n	80012e4 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80012c4:	680a      	ldr	r2, [r1, #0]
 80012c6:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80012ca:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80012ce:	d1e7      	bne.n	80012a0 <RCC_SetFlashLatencyFromMSIRange+0xc>
 80012d0:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80012d4:	d1e4      	bne.n	80012a0 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 80012d6:	4a0d      	ldr	r2, [pc, #52]	; (800130c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80012d8:	6813      	ldr	r3, [r2, #0]
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 80012e0:	2201      	movs	r2, #1
 80012e2:	e7de      	b.n	80012a2 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
 80012ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ee:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80012f2:	9201      	str	r2, [sp, #4]
 80012f4:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80012f6:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80012fa:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80012fe:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8001302:	6259      	str	r1, [r3, #36]	; 0x24
 8001304:	e7e1      	b.n	80012ca <RCC_SetFlashLatencyFromMSIRange+0x36>
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40023c00 	.word	0x40023c00
 8001310:	40007000 	.word	0x40007000

08001314 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001314:	6803      	ldr	r3, [r0, #0]
{
 8001316:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131a:	07d9      	lsls	r1, r3, #31
{
 800131c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131e:	d46a      	bmi.n	80013f6 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	079a      	lsls	r2, r3, #30
 8001324:	f100 80e6 	bmi.w	80014f4 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	06de      	lsls	r6, r3, #27
 800132c:	d555      	bpl.n	80013da <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800132e:	4dc1      	ldr	r5, [pc, #772]	; (8001634 <HAL_RCC_OscConfig+0x320>)
 8001330:	68ab      	ldr	r3, [r5, #8]
 8001332:	f013 0f0c 	tst.w	r3, #12
 8001336:	f040 8183 	bne.w	8001640 <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001342:	6829      	ldr	r1, [r5, #0]
 8001344:	fa93 f3a3 	rbit	r3, r3
 8001348:	fab3 f383 	clz	r3, r3
 800134c:	2201      	movs	r2, #1
 800134e:	f003 031f 	and.w	r3, r3, #31
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	420b      	tst	r3, r1
 8001358:	d002      	beq.n	8001360 <HAL_RCC_OscConfig+0x4c>
 800135a:	69a3      	ldr	r3, [r4, #24]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d06e      	beq.n	800143e <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001360:	4db4      	ldr	r5, [pc, #720]	; (8001634 <HAL_RCC_OscConfig+0x320>)
 8001362:	6a20      	ldr	r0, [r4, #32]
 8001364:	686b      	ldr	r3, [r5, #4]
 8001366:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800136a:	4298      	cmp	r0, r3
 800136c:	f240 814a 	bls.w	8001604 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001370:	f7ff ff90 	bl	8001294 <RCC_SetFlashLatencyFromMSIRange>
 8001374:	2800      	cmp	r0, #0
 8001376:	d162      	bne.n	800143e <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001378:	686b      	ldr	r3, [r5, #4]
 800137a:	6a22      	ldr	r2, [r4, #32]
 800137c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001380:	4313      	orrs	r3, r2
 8001382:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001384:	6869      	ldr	r1, [r5, #4]
 8001386:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800138a:	fa93 f3a3 	rbit	r3, r3
 800138e:	fab3 f283 	clz	r2, r3
 8001392:	69e3      	ldr	r3, [r4, #28]
 8001394:	4093      	lsls	r3, r2
 8001396:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800139a:	4313      	orrs	r3, r2
 800139c:	606b      	str	r3, [r5, #4]
 800139e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013a2:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80013a6:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80013aa:	4ba2      	ldr	r3, [pc, #648]	; (8001634 <HAL_RCC_OscConfig+0x320>)
 80013ac:	21f0      	movs	r1, #240	; 0xf0
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	fa91 f1a1 	rbit	r1, r1
 80013b4:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80013b8:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80013ba:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80013be:	40c3      	lsrs	r3, r0
 80013c0:	1c58      	adds	r0, r3, #1
 80013c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80013c6:	40ca      	lsrs	r2, r1
 80013c8:	499b      	ldr	r1, [pc, #620]	; (8001638 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80013ca:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80013cc:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 80013ce:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80013d0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80013d2:	4a9a      	ldr	r2, [pc, #616]	; (800163c <HAL_RCC_OscConfig+0x328>)
 80013d4:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80013d6:	f7ff fc5b 	bl	8000c90 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	071d      	lsls	r5, r3, #28
 80013de:	f100 8191 	bmi.w	8001704 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e2:	6823      	ldr	r3, [r4, #0]
 80013e4:	0758      	lsls	r0, r3, #29
 80013e6:	f100 81d3 	bmi.w	8001790 <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013ec:	2a00      	cmp	r2, #0
 80013ee:	f040 8257 	bne.w	80018a0 <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 80013f2:	2000      	movs	r0, #0
 80013f4:	e024      	b.n	8001440 <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013f6:	4b8f      	ldr	r3, [pc, #572]	; (8001634 <HAL_RCC_OscConfig+0x320>)
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	f002 020c 	and.w	r2, r2, #12
 80013fe:	2a08      	cmp	r2, #8
 8001400:	d007      	beq.n	8001412 <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	f002 020c 	and.w	r2, r2, #12
 8001408:	2a0c      	cmp	r2, #12
 800140a:	d11c      	bne.n	8001446 <HAL_RCC_OscConfig+0x132>
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	03db      	lsls	r3, r3, #15
 8001410:	d519      	bpl.n	8001446 <HAL_RCC_OscConfig+0x132>
 8001412:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001416:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141a:	4a86      	ldr	r2, [pc, #536]	; (8001634 <HAL_RCC_OscConfig+0x320>)
 800141c:	6811      	ldr	r1, [r2, #0]
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	fab3 f383 	clz	r3, r3
 8001426:	2201      	movs	r2, #1
 8001428:	f003 031f 	and.w	r3, r3, #31
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	420b      	tst	r3, r1
 8001432:	f43f af75 	beq.w	8001320 <HAL_RCC_OscConfig+0xc>
 8001436:	6863      	ldr	r3, [r4, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f47f af71 	bne.w	8001320 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800143e:	2001      	movs	r0, #1
}
 8001440:	b003      	add	sp, #12
 8001442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001446:	6863      	ldr	r3, [r4, #4]
 8001448:	4d7a      	ldr	r5, [pc, #488]	; (8001634 <HAL_RCC_OscConfig+0x320>)
 800144a:	2b01      	cmp	r3, #1
 800144c:	d120      	bne.n	8001490 <HAL_RCC_OscConfig+0x17c>
 800144e:	682b      	ldr	r3, [r5, #0]
 8001450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001454:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001456:	f7ff fc43 	bl	8000ce0 <HAL_GetTick>
 800145a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800145e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001460:	2601      	movs	r6, #1
 8001462:	4f74      	ldr	r7, [pc, #464]	; (8001634 <HAL_RCC_OscConfig+0x320>)
 8001464:	fa95 f3a5 	rbit	r3, r5
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	fa95 f3a5 	rbit	r3, r5
 800146e:	fab3 f383 	clz	r3, r3
 8001472:	f003 031f 	and.w	r3, r3, #31
 8001476:	fa06 f303 	lsl.w	r3, r6, r3
 800147a:	4213      	tst	r3, r2
 800147c:	f47f af50 	bne.w	8001320 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fc2e 	bl	8000ce0 <HAL_GetTick>
 8001484:	eba0 0008 	sub.w	r0, r0, r8
 8001488:	2864      	cmp	r0, #100	; 0x64
 800148a:	d9eb      	bls.n	8001464 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 800148c:	2003      	movs	r0, #3
 800148e:	e7d7      	b.n	8001440 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001490:	bb13      	cbnz	r3, 80014d8 <HAL_RCC_OscConfig+0x1c4>
 8001492:	682b      	ldr	r3, [r5, #0]
 8001494:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149c:	602b      	str	r3, [r5, #0]
 800149e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a0:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014a8:	f7ff fc1a 	bl	8000ce0 <HAL_GetTick>
 80014ac:	4680      	mov	r8, r0
 80014ae:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b2:	682a      	ldr	r2, [r5, #0]
 80014b4:	fa96 f3a6 	rbit	r3, r6
 80014b8:	fab3 f383 	clz	r3, r3
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	fa07 f303 	lsl.w	r3, r7, r3
 80014c4:	4213      	tst	r3, r2
 80014c6:	f43f af2b 	beq.w	8001320 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ca:	f7ff fc09 	bl	8000ce0 <HAL_GetTick>
 80014ce:	eba0 0008 	sub.w	r0, r0, r8
 80014d2:	2864      	cmp	r0, #100	; 0x64
 80014d4:	d9eb      	bls.n	80014ae <HAL_RCC_OscConfig+0x19a>
 80014d6:	e7d9      	b.n	800148c <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d8:	2b05      	cmp	r3, #5
 80014da:	682b      	ldr	r3, [r5, #0]
 80014dc:	d103      	bne.n	80014e6 <HAL_RCC_OscConfig+0x1d2>
 80014de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e2:	602b      	str	r3, [r5, #0]
 80014e4:	e7b3      	b.n	800144e <HAL_RCC_OscConfig+0x13a>
 80014e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ea:	602b      	str	r3, [r5, #0]
 80014ec:	682b      	ldr	r3, [r5, #0]
 80014ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f2:	e7af      	b.n	8001454 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014f4:	4b4f      	ldr	r3, [pc, #316]	; (8001634 <HAL_RCC_OscConfig+0x320>)
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	f002 020c 	and.w	r2, r2, #12
 80014fc:	2a04      	cmp	r2, #4
 80014fe:	d007      	beq.n	8001510 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	f002 020c 	and.w	r2, r2, #12
 8001506:	2a0c      	cmp	r2, #12
 8001508:	d124      	bne.n	8001554 <HAL_RCC_OscConfig+0x240>
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	03df      	lsls	r7, r3, #15
 800150e:	d421      	bmi.n	8001554 <HAL_RCC_OscConfig+0x240>
 8001510:	2302      	movs	r3, #2
 8001512:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001516:	4a47      	ldr	r2, [pc, #284]	; (8001634 <HAL_RCC_OscConfig+0x320>)
 8001518:	6810      	ldr	r0, [r2, #0]
 800151a:	fa93 f3a3 	rbit	r3, r3
 800151e:	fab3 f383 	clz	r3, r3
 8001522:	2101      	movs	r1, #1
 8001524:	f003 031f 	and.w	r3, r3, #31
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	4203      	tst	r3, r0
 800152e:	4613      	mov	r3, r2
 8001530:	d002      	beq.n	8001538 <HAL_RCC_OscConfig+0x224>
 8001532:	68e2      	ldr	r2, [r4, #12]
 8001534:	428a      	cmp	r2, r1
 8001536:	d182      	bne.n	800143e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	6858      	ldr	r0, [r3, #4]
 800153a:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 800153e:	fa92 f2a2 	rbit	r2, r2
 8001542:	fab2 f182 	clz	r1, r2
 8001546:	6922      	ldr	r2, [r4, #16]
 8001548:	408a      	lsls	r2, r1
 800154a:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 800154e:	430a      	orrs	r2, r1
 8001550:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001552:	e6e9      	b.n	8001328 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001554:	68e2      	ldr	r2, [r4, #12]
 8001556:	2501      	movs	r5, #1
 8001558:	b382      	cbz	r2, 80015bc <HAL_RCC_OscConfig+0x2a8>
 800155a:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001566:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800156e:	f7ff fbb7 	bl	8000ce0 <HAL_GetTick>
 8001572:	2702      	movs	r7, #2
 8001574:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001576:	4e2f      	ldr	r6, [pc, #188]	; (8001634 <HAL_RCC_OscConfig+0x320>)
 8001578:	fa97 f3a7 	rbit	r3, r7
 800157c:	6832      	ldr	r2, [r6, #0]
 800157e:	fa97 f3a7 	rbit	r3, r7
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	fa05 f303 	lsl.w	r3, r5, r3
 800158e:	4213      	tst	r3, r2
 8001590:	d00d      	beq.n	80015ae <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001592:	6871      	ldr	r1, [r6, #4]
 8001594:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	fab3 f283 	clz	r2, r3
 80015a0:	6923      	ldr	r3, [r4, #16]
 80015a2:	4093      	lsls	r3, r2
 80015a4:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 80015a8:	4313      	orrs	r3, r2
 80015aa:	6073      	str	r3, [r6, #4]
 80015ac:	e6bc      	b.n	8001328 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ae:	f7ff fb97 	bl	8000ce0 <HAL_GetTick>
 80015b2:	eba0 0008 	sub.w	r0, r0, r8
 80015b6:	2802      	cmp	r0, #2
 80015b8:	d9de      	bls.n	8001578 <HAL_RCC_OscConfig+0x264>
 80015ba:	e767      	b.n	800148c <HAL_RCC_OscConfig+0x178>
 80015bc:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80015c0:	fab3 f383 	clz	r3, r3
 80015c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015c8:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015d0:	f7ff fb86 	bl	8000ce0 <HAL_GetTick>
 80015d4:	2602      	movs	r6, #2
 80015d6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d8:	4f16      	ldr	r7, [pc, #88]	; (8001634 <HAL_RCC_OscConfig+0x320>)
 80015da:	fa96 f3a6 	rbit	r3, r6
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	fa96 f3a6 	rbit	r3, r6
 80015e4:	fab3 f383 	clz	r3, r3
 80015e8:	f003 031f 	and.w	r3, r3, #31
 80015ec:	fa05 f303 	lsl.w	r3, r5, r3
 80015f0:	4213      	tst	r3, r2
 80015f2:	f43f ae99 	beq.w	8001328 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f6:	f7ff fb73 	bl	8000ce0 <HAL_GetTick>
 80015fa:	eba0 0008 	sub.w	r0, r0, r8
 80015fe:	2802      	cmp	r0, #2
 8001600:	d9eb      	bls.n	80015da <HAL_RCC_OscConfig+0x2c6>
 8001602:	e743      	b.n	800148c <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001604:	686b      	ldr	r3, [r5, #4]
 8001606:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800160a:	4303      	orrs	r3, r0
 800160c:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800160e:	6869      	ldr	r1, [r5, #4]
 8001610:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001614:	fa93 f3a3 	rbit	r3, r3
 8001618:	fab3 f283 	clz	r2, r3
 800161c:	69e3      	ldr	r3, [r4, #28]
 800161e:	4093      	lsls	r3, r2
 8001620:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001624:	4313      	orrs	r3, r2
 8001626:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001628:	f7ff fe34 	bl	8001294 <RCC_SetFlashLatencyFromMSIRange>
 800162c:	2800      	cmp	r0, #0
 800162e:	f43f aeb6 	beq.w	800139e <HAL_RCC_OscConfig+0x8a>
 8001632:	e704      	b.n	800143e <HAL_RCC_OscConfig+0x12a>
 8001634:	40023800 	.word	0x40023800
 8001638:	080036c3 	.word	0x080036c3
 800163c:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001640:	69a2      	ldr	r2, [r4, #24]
 8001642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001646:	2a00      	cmp	r2, #0
 8001648:	d037      	beq.n	80016ba <HAL_RCC_OscConfig+0x3a6>
 800164a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 800164e:	fab3 f383 	clz	r3, r3
 8001652:	2601      	movs	r6, #1
 8001654:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001658:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001660:	f7ff fb3e 	bl	8000ce0 <HAL_GetTick>
 8001664:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001668:	4680      	mov	r8, r0
 800166a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800166e:	682a      	ldr	r2, [r5, #0]
 8001670:	fa97 f3a7 	rbit	r3, r7
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	f003 031f 	and.w	r3, r3, #31
 800167c:	fa06 f303 	lsl.w	r3, r6, r3
 8001680:	4213      	tst	r3, r2
 8001682:	d013      	beq.n	80016ac <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001684:	686b      	ldr	r3, [r5, #4]
 8001686:	6a22      	ldr	r2, [r4, #32]
 8001688:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800168c:	4313      	orrs	r3, r2
 800168e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001690:	6869      	ldr	r1, [r5, #4]
 8001692:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001696:	fa93 f3a3 	rbit	r3, r3
 800169a:	fab3 f283 	clz	r2, r3
 800169e:	69e3      	ldr	r3, [r4, #28]
 80016a0:	4093      	lsls	r3, r2
 80016a2:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 80016a6:	4313      	orrs	r3, r2
 80016a8:	606b      	str	r3, [r5, #4]
 80016aa:	e696      	b.n	80013da <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ac:	f7ff fb18 	bl	8000ce0 <HAL_GetTick>
 80016b0:	eba0 0008 	sub.w	r0, r0, r8
 80016b4:	2802      	cmp	r0, #2
 80016b6:	d9d8      	bls.n	800166a <HAL_RCC_OscConfig+0x356>
 80016b8:	e6e8      	b.n	800148c <HAL_RCC_OscConfig+0x178>
 80016ba:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 80016be:	fab3 f383 	clz	r3, r3
 80016c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016c6:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb07 	bl	8000ce0 <HAL_GetTick>
 80016d2:	f44f 7600 	mov.w	r6, #512	; 0x200
 80016d6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80016d8:	2701      	movs	r7, #1
 80016da:	fa96 f3a6 	rbit	r3, r6
 80016de:	682a      	ldr	r2, [r5, #0]
 80016e0:	fa96 f3a6 	rbit	r3, r6
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	fa07 f303 	lsl.w	r3, r7, r3
 80016f0:	4213      	tst	r3, r2
 80016f2:	f43f ae72 	beq.w	80013da <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016f6:	f7ff faf3 	bl	8000ce0 <HAL_GetTick>
 80016fa:	eba0 0008 	sub.w	r0, r0, r8
 80016fe:	2802      	cmp	r0, #2
 8001700:	d9eb      	bls.n	80016da <HAL_RCC_OscConfig+0x3c6>
 8001702:	e6c3      	b.n	800148c <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001704:	6962      	ldr	r2, [r4, #20]
 8001706:	2501      	movs	r5, #1
 8001708:	49a9      	ldr	r1, [pc, #676]	; (80019b0 <HAL_RCC_OscConfig+0x69c>)
 800170a:	b302      	cbz	r2, 800174e <HAL_RCC_OscConfig+0x43a>
 800170c:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	440b      	add	r3, r1
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 800171a:	f7ff fae1 	bl	8000ce0 <HAL_GetTick>
 800171e:	2602      	movs	r6, #2
 8001720:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001722:	4fa4      	ldr	r7, [pc, #656]	; (80019b4 <HAL_RCC_OscConfig+0x6a0>)
 8001724:	fa96 f3a6 	rbit	r3, r6
 8001728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800172a:	fa96 f3a6 	rbit	r3, r6
 800172e:	fab3 f383 	clz	r3, r3
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	fa05 f303 	lsl.w	r3, r5, r3
 800173a:	4213      	tst	r3, r2
 800173c:	f47f ae51 	bne.w	80013e2 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001740:	f7ff face 	bl	8000ce0 <HAL_GetTick>
 8001744:	eba0 0008 	sub.w	r0, r0, r8
 8001748:	2802      	cmp	r0, #2
 800174a:	d9eb      	bls.n	8001724 <HAL_RCC_OscConfig+0x410>
 800174c:	e69e      	b.n	800148c <HAL_RCC_OscConfig+0x178>
 800174e:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 8001752:	fab3 f383 	clz	r3, r3
 8001756:	440b      	add	r3, r1
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800175c:	f7ff fac0 	bl	8000ce0 <HAL_GetTick>
 8001760:	2602      	movs	r6, #2
 8001762:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	4f93      	ldr	r7, [pc, #588]	; (80019b4 <HAL_RCC_OscConfig+0x6a0>)
 8001766:	fa96 f3a6 	rbit	r3, r6
 800176a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800176c:	fa96 f3a6 	rbit	r3, r6
 8001770:	fab3 f383 	clz	r3, r3
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	fa05 f303 	lsl.w	r3, r5, r3
 800177c:	4213      	tst	r3, r2
 800177e:	f43f ae30 	beq.w	80013e2 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001782:	f7ff faad 	bl	8000ce0 <HAL_GetTick>
 8001786:	eba0 0008 	sub.w	r0, r0, r8
 800178a:	2802      	cmp	r0, #2
 800178c:	d9eb      	bls.n	8001766 <HAL_RCC_OscConfig+0x452>
 800178e:	e67d      	b.n	800148c <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001790:	4b88      	ldr	r3, [pc, #544]	; (80019b4 <HAL_RCC_OscConfig+0x6a0>)
 8001792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001794:	00d1      	lsls	r1, r2, #3
 8001796:	d434      	bmi.n	8001802 <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8001798:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800179c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ac:	4d82      	ldr	r5, [pc, #520]	; (80019b8 <HAL_RCC_OscConfig+0x6a4>)
 80017ae:	682b      	ldr	r3, [r5, #0]
 80017b0:	05da      	lsls	r2, r3, #23
 80017b2:	d528      	bpl.n	8001806 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b4:	68a3      	ldr	r3, [r4, #8]
 80017b6:	4d7f      	ldr	r5, [pc, #508]	; (80019b4 <HAL_RCC_OscConfig+0x6a0>)
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d134      	bne.n	8001826 <HAL_RCC_OscConfig+0x512>
 80017bc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80017be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80017c4:	f7ff fa8c 	bl	8000ce0 <HAL_GetTick>
 80017c8:	f44f 7500 	mov.w	r5, #512	; 0x200
 80017cc:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ce:	2701      	movs	r7, #1
 80017d0:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 80019b4 <HAL_RCC_OscConfig+0x6a0>
 80017d4:	fa95 f3a5 	rbit	r3, r5
 80017d8:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80017dc:	fa95 f3a5 	rbit	r3, r5
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	fa07 f303 	lsl.w	r3, r7, r3
 80017ec:	4213      	tst	r3, r2
 80017ee:	d04e      	beq.n	800188e <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 80017f0:	2e00      	cmp	r6, #0
 80017f2:	f43f adfa 	beq.w	80013ea <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f6:	4a6f      	ldr	r2, [pc, #444]	; (80019b4 <HAL_RCC_OscConfig+0x6a0>)
 80017f8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80017fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017fe:	6253      	str	r3, [r2, #36]	; 0x24
 8001800:	e5f3      	b.n	80013ea <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 8001802:	2600      	movs	r6, #0
 8001804:	e7d2      	b.n	80017ac <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001806:	682b      	ldr	r3, [r5, #0]
 8001808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800180e:	f7ff fa67 	bl	8000ce0 <HAL_GetTick>
 8001812:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001814:	682b      	ldr	r3, [r5, #0]
 8001816:	05db      	lsls	r3, r3, #23
 8001818:	d4cc      	bmi.n	80017b4 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181a:	f7ff fa61 	bl	8000ce0 <HAL_GetTick>
 800181e:	1bc0      	subs	r0, r0, r7
 8001820:	2864      	cmp	r0, #100	; 0x64
 8001822:	d9f7      	bls.n	8001814 <HAL_RCC_OscConfig+0x500>
 8001824:	e632      	b.n	800148c <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001826:	bb23      	cbnz	r3, 8001872 <HAL_RCC_OscConfig+0x55e>
 8001828:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800182a:	f44f 7700 	mov.w	r7, #512	; 0x200
 800182e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001832:	636b      	str	r3, [r5, #52]	; 0x34
 8001834:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001836:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800183e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001840:	f7ff fa4e 	bl	8000ce0 <HAL_GetTick>
 8001844:	4681      	mov	r9, r0
 8001846:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800184c:	fa97 f3a7 	rbit	r3, r7
 8001850:	fab3 f383 	clz	r3, r3
 8001854:	f003 031f 	and.w	r3, r3, #31
 8001858:	fa08 f303 	lsl.w	r3, r8, r3
 800185c:	4213      	tst	r3, r2
 800185e:	d0c7      	beq.n	80017f0 <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001860:	f7ff fa3e 	bl	8000ce0 <HAL_GetTick>
 8001864:	f241 3388 	movw	r3, #5000	; 0x1388
 8001868:	eba0 0009 	sub.w	r0, r0, r9
 800186c:	4298      	cmp	r0, r3
 800186e:	d9ea      	bls.n	8001846 <HAL_RCC_OscConfig+0x532>
 8001870:	e60c      	b.n	800148c <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001872:	2b05      	cmp	r3, #5
 8001874:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001876:	d103      	bne.n	8001880 <HAL_RCC_OscConfig+0x56c>
 8001878:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800187c:	636b      	str	r3, [r5, #52]	; 0x34
 800187e:	e79d      	b.n	80017bc <HAL_RCC_OscConfig+0x4a8>
 8001880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001884:	636b      	str	r3, [r5, #52]	; 0x34
 8001886:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001888:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800188c:	e799      	b.n	80017c2 <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188e:	f7ff fa27 	bl	8000ce0 <HAL_GetTick>
 8001892:	f241 3388 	movw	r3, #5000	; 0x1388
 8001896:	eba0 0009 	sub.w	r0, r0, r9
 800189a:	4298      	cmp	r0, r3
 800189c:	d99a      	bls.n	80017d4 <HAL_RCC_OscConfig+0x4c0>
 800189e:	e5f5      	b.n	800148c <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018a0:	4d44      	ldr	r5, [pc, #272]	; (80019b4 <HAL_RCC_OscConfig+0x6a0>)
 80018a2:	68ab      	ldr	r3, [r5, #8]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b0c      	cmp	r3, #12
 80018aa:	f43f adc8 	beq.w	800143e <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ae:	2a02      	cmp	r2, #2
 80018b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b4:	d156      	bne.n	8001964 <HAL_RCC_OscConfig+0x650>
 80018b6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	2200      	movs	r2, #0
 80018c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018c4:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018cc:	f7ff fa08 	bl	8000ce0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d0:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 80018d2:	4680      	mov	r8, r0
 80018d4:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d8:	2501      	movs	r5, #1
 80018da:	fa97 f3a7 	rbit	r3, r7
 80018de:	6832      	ldr	r2, [r6, #0]
 80018e0:	fa97 f3a7 	rbit	r3, r7
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	fa05 f303 	lsl.w	r3, r5, r3
 80018f0:	4213      	tst	r3, r2
 80018f2:	d130      	bne.n	8001956 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f4:	68b2      	ldr	r2, [r6, #8]
 80018f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80018fa:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80018fe:	430b      	orrs	r3, r1
 8001900:	4313      	orrs	r3, r2
 8001902:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001904:	4313      	orrs	r3, r2
 8001906:	60b3      	str	r3, [r6, #8]
 8001908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800190c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001918:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001920:	f7ff f9de 	bl	8000ce0 <HAL_GetTick>
 8001924:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001928:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800192a:	2501      	movs	r5, #1
 800192c:	4e21      	ldr	r6, [pc, #132]	; (80019b4 <HAL_RCC_OscConfig+0x6a0>)
 800192e:	fa94 f3a4 	rbit	r3, r4
 8001932:	6832      	ldr	r2, [r6, #0]
 8001934:	fa94 f3a4 	rbit	r3, r4
 8001938:	fab3 f383 	clz	r3, r3
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	fa05 f303 	lsl.w	r3, r5, r3
 8001944:	4213      	tst	r3, r2
 8001946:	f47f ad54 	bne.w	80013f2 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff f9c9 	bl	8000ce0 <HAL_GetTick>
 800194e:	1bc0      	subs	r0, r0, r7
 8001950:	2802      	cmp	r0, #2
 8001952:	d9ec      	bls.n	800192e <HAL_RCC_OscConfig+0x61a>
 8001954:	e59a      	b.n	800148c <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001956:	f7ff f9c3 	bl	8000ce0 <HAL_GetTick>
 800195a:	eba0 0008 	sub.w	r0, r0, r8
 800195e:	2802      	cmp	r0, #2
 8001960:	d9bb      	bls.n	80018da <HAL_RCC_OscConfig+0x5c6>
 8001962:	e593      	b.n	800148c <HAL_RCC_OscConfig+0x178>
 8001964:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	2200      	movs	r2, #0
 800196e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001972:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800197a:	f7ff f9b1 	bl	8000ce0 <HAL_GetTick>
 800197e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001982:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001984:	2601      	movs	r6, #1
 8001986:	fa94 f3a4 	rbit	r3, r4
 800198a:	682a      	ldr	r2, [r5, #0]
 800198c:	fa94 f3a4 	rbit	r3, r4
 8001990:	fab3 f383 	clz	r3, r3
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	fa06 f303 	lsl.w	r3, r6, r3
 800199c:	4213      	tst	r3, r2
 800199e:	f43f ad28 	beq.w	80013f2 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff f99d 	bl	8000ce0 <HAL_GetTick>
 80019a6:	1bc0      	subs	r0, r0, r7
 80019a8:	2802      	cmp	r0, #2
 80019aa:	d9ec      	bls.n	8001986 <HAL_RCC_OscConfig+0x672>
 80019ac:	e56e      	b.n	800148c <HAL_RCC_OscConfig+0x178>
 80019ae:	bf00      	nop
 80019b0:	1091c1a0 	.word	0x1091c1a0
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40007000 	.word	0x40007000

080019bc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80019bc:	491e      	ldr	r1, [pc, #120]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 80019be:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80019c0:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 80019c2:	f003 020c 	and.w	r2, r3, #12
 80019c6:	2a08      	cmp	r2, #8
 80019c8:	d005      	beq.n	80019d6 <HAL_RCC_GetSysClockFreq+0x1a>
 80019ca:	2a0c      	cmp	r2, #12
 80019cc:	d005      	beq.n	80019da <HAL_RCC_GetSysClockFreq+0x1e>
 80019ce:	2a04      	cmp	r2, #4
 80019d0:	d122      	bne.n	8001a18 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 80019d2:	481a      	ldr	r0, [pc, #104]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x80>)
}
 80019d4:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80019d6:	481a      	ldr	r0, [pc, #104]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x84>)
 80019d8:	bd10      	pop	{r4, pc}
 80019da:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80019de:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019e2:	fab2 f282 	clz	r2, r2
 80019e6:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80019ea:	fa20 f202 	lsr.w	r2, r0, r2
 80019ee:	4815      	ldr	r0, [pc, #84]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x88>)
 80019f0:	5c84      	ldrb	r4, [r0, r2]
 80019f2:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80019f6:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80019fa:	fab0 f280 	clz	r2, r0
 80019fe:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a02:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001a04:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a06:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8001a08:	bf4c      	ite	mi
 8001a0a:	4b0d      	ldrmi	r3, [pc, #52]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8001a0c:	4b0b      	ldrpl	r3, [pc, #44]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001a0e:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8001a10:	4363      	muls	r3, r4
 8001a12:	fbb3 f0f0 	udiv	r0, r3, r0
 8001a16:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8001a18:	6848      	ldr	r0, [r1, #4]
 8001a1a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8001a2a:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8001a2c:	1c43      	adds	r3, r0, #1
 8001a2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a32:	4098      	lsls	r0, r3
 8001a34:	bd10      	pop	{r4, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	00f42400 	.word	0x00f42400
 8001a40:	007a1200 	.word	0x007a1200
 8001a44:	080036db 	.word	0x080036db

08001a48 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a48:	4b6a      	ldr	r3, [pc, #424]	; (8001bf4 <HAL_RCC_ClockConfig+0x1ac>)
{
 8001a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a4e:	681a      	ldr	r2, [r3, #0]
{
 8001a50:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a52:	f002 0201 	and.w	r2, r2, #1
 8001a56:	428a      	cmp	r2, r1
{
 8001a58:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a5a:	d330      	bcc.n	8001abe <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	6832      	ldr	r2, [r6, #0]
 8001a5e:	0794      	lsls	r4, r2, #30
 8001a60:	d440      	bmi.n	8001ae4 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a62:	07d0      	lsls	r0, r2, #31
 8001a64:	d446      	bmi.n	8001af4 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a66:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <HAL_RCC_ClockConfig+0x1ac>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	f002 0201 	and.w	r2, r2, #1
 8001a6e:	4295      	cmp	r5, r2
 8001a70:	f0c0 80ae 	bcc.w	8001bd0 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	6832      	ldr	r2, [r6, #0]
 8001a76:	0751      	lsls	r1, r2, #29
 8001a78:	f100 80b3 	bmi.w	8001be2 <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7c:	0713      	lsls	r3, r2, #28
 8001a7e:	d507      	bpl.n	8001a90 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a80:	4a5d      	ldr	r2, [pc, #372]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a82:	6931      	ldr	r1, [r6, #16]
 8001a84:	6893      	ldr	r3, [r2, #8]
 8001a86:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a8e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a90:	f7ff ff94 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 8001a94:	4b58      	ldr	r3, [pc, #352]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a96:	22f0      	movs	r2, #240	; 0xf0
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	fa92 f2a2 	rbit	r2, r2
 8001a9e:	fab2 f282 	clz	r2, r2
 8001aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aa6:	40d3      	lsrs	r3, r2
 8001aa8:	4a54      	ldr	r2, [pc, #336]	; (8001bfc <HAL_RCC_ClockConfig+0x1b4>)
 8001aaa:	5cd3      	ldrb	r3, [r2, r3]
 8001aac:	40d8      	lsrs	r0, r3
 8001aae:	4b54      	ldr	r3, [pc, #336]	; (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f7ff f8ec 	bl	8000c90 <HAL_InitTick>
  return HAL_OK;
 8001ab8:	2000      	movs	r0, #0
}
 8001aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	2901      	cmp	r1, #1
 8001ac0:	bf02      	ittt	eq
 8001ac2:	681a      	ldreq	r2, [r3, #0]
 8001ac4:	f042 0204 	orreq.w	r2, r2, #4
 8001ac8:	601a      	streq	r2, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	4299      	cmp	r1, r3
 8001adc:	d0be      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001ade:	2001      	movs	r0, #1
 8001ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4944      	ldr	r1, [pc, #272]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b0>)
 8001ae6:	68b0      	ldr	r0, [r6, #8]
 8001ae8:	688b      	ldr	r3, [r1, #8]
 8001aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aee:	4303      	orrs	r3, r0
 8001af0:	608b      	str	r3, [r1, #8]
 8001af2:	e7b6      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af4:	6872      	ldr	r2, [r6, #4]
 8001af6:	4940      	ldr	r1, [pc, #256]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b0>)
 8001af8:	2a02      	cmp	r2, #2
 8001afa:	d10f      	bne.n	8001b1c <HAL_RCC_ClockConfig+0xd4>
 8001afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b00:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001b04:	6808      	ldr	r0, [r1, #0]
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	2101      	movs	r1, #1
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	4203      	tst	r3, r0
 8001b1a:	e013      	b.n	8001b44 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1c:	2a03      	cmp	r2, #3
 8001b1e:	d102      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xde>
 8001b20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b24:	e7ec      	b.n	8001b00 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b26:	2a01      	cmp	r2, #1
 8001b28:	d129      	bne.n	8001b7e <HAL_RCC_ClockConfig+0x136>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b30:	6809      	ldr	r1, [r1, #0]
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001b44:	d0cb      	beq.n	8001ade <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b46:	4c2c      	ldr	r4, [pc, #176]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b48:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4c:	68a3      	ldr	r3, [r4, #8]
 8001b4e:	f023 0303 	bic.w	r3, r3, #3
 8001b52:	431a      	orrs	r2, r3
 8001b54:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001b56:	f7ff f8c3 	bl	8000ce0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001b5c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d110      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b62:	68a3      	ldr	r3, [r4, #8]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	f43f af7c 	beq.w	8001a66 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6e:	f7ff f8b7 	bl	8000ce0 <HAL_GetTick>
 8001b72:	1bc0      	subs	r0, r0, r7
 8001b74:	4540      	cmp	r0, r8
 8001b76:	d9f4      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8001b78:	2003      	movs	r0, #3
 8001b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b82:	e7bd      	b.n	8001b00 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d10b      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b88:	68a3      	ldr	r3, [r4, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	f43f af69 	beq.w	8001a66 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b94:	f7ff f8a4 	bl	8000ce0 <HAL_GetTick>
 8001b98:	1bc0      	subs	r0, r0, r7
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d9f4      	bls.n	8001b88 <HAL_RCC_ClockConfig+0x140>
 8001b9e:	e7eb      	b.n	8001b78 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d110      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba4:	68a3      	ldr	r3, [r4, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	f43f af5b 	beq.w	8001a66 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb0:	f7ff f896 	bl	8000ce0 <HAL_GetTick>
 8001bb4:	1bc0      	subs	r0, r0, r7
 8001bb6:	4540      	cmp	r0, r8
 8001bb8:	d9f4      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0x15c>
 8001bba:	e7dd      	b.n	8001b78 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbc:	f7ff f890 	bl	8000ce0 <HAL_GetTick>
 8001bc0:	1bc0      	subs	r0, r0, r7
 8001bc2:	4540      	cmp	r0, r8
 8001bc4:	d8d8      	bhi.n	8001b78 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bc6:	68a3      	ldr	r3, [r4, #8]
 8001bc8:	f013 0f0c 	tst.w	r3, #12
 8001bcc:	d1f6      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x174>
 8001bce:	e74a      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	f022 0201 	bic.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	07da      	lsls	r2, r3, #31
 8001bdc:	f53f af7f 	bmi.w	8001ade <HAL_RCC_ClockConfig+0x96>
 8001be0:	e748      	b.n	8001a74 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be2:	4905      	ldr	r1, [pc, #20]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b0>)
 8001be4:	68f0      	ldr	r0, [r6, #12]
 8001be6:	688b      	ldr	r3, [r1, #8]
 8001be8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bec:	4303      	orrs	r3, r0
 8001bee:	608b      	str	r3, [r1, #8]
 8001bf0:	e744      	b.n	8001a7c <HAL_RCC_ClockConfig+0x34>
 8001bf2:	bf00      	nop
 8001bf4:	40023c00 	.word	0x40023c00
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	080036c3 	.word	0x080036c3
 8001c00:	20000000 	.word	0x20000000

08001c04 <HAL_RCC_GetHCLKFreq>:
}
 8001c04:	4b01      	ldr	r3, [pc, #4]	; (8001c0c <HAL_RCC_GetHCLKFreq+0x8>)
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000000 	.word	0x20000000

08001c10 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	fa92 f2a2 	rbit	r2, r2
 8001c1c:	fab2 f282 	clz	r2, r2
 8001c20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c24:	40d3      	lsrs	r3, r2
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c28:	5cd3      	ldrb	r3, [r2, r3]
 8001c2a:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001c2c:	6810      	ldr	r0, [r2, #0]
}    
 8001c2e:	40d8      	lsrs	r0, r3
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	080036d3 	.word	0x080036d3
 8001c3c:	20000000 	.word	0x20000000

08001c40 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c42:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	fa92 f2a2 	rbit	r2, r2
 8001c4c:	fab2 f282 	clz	r2, r2
 8001c50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001c54:	40d3      	lsrs	r3, r2
 8001c56:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c58:	5cd3      	ldrb	r3, [r2, r3]
 8001c5a:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001c5c:	6810      	ldr	r0, [r2, #0]
} 
 8001c5e:	40d8      	lsrs	r0, r3
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	080036d3 	.word	0x080036d3
 8001c6c:	20000000 	.word	0x20000000

08001c70 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c70:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8001c74:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c76:	d006      	beq.n	8001c86 <TIM_Base_SetConfig+0x16>
 8001c78:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <TIM_Base_SetConfig+0x64>)
 8001c7a:	4290      	cmp	r0, r2
 8001c7c:	d003      	beq.n	8001c86 <TIM_Base_SetConfig+0x16>
 8001c7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c82:	4290      	cmp	r0, r2
 8001c84:	d10e      	bne.n	8001ca4 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001c86:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 8001c90:	ea43 0302 	orr.w	r3, r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c94:	d011      	beq.n	8001cba <TIM_Base_SetConfig+0x4a>
 8001c96:	4a0f      	ldr	r2, [pc, #60]	; (8001cd4 <TIM_Base_SetConfig+0x64>)
 8001c98:	4290      	cmp	r0, r2
 8001c9a:	d00e      	beq.n	8001cba <TIM_Base_SetConfig+0x4a>
 8001c9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ca0:	4290      	cmp	r0, r2
 8001ca2:	d00a      	beq.n	8001cba <TIM_Base_SetConfig+0x4a>
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <TIM_Base_SetConfig+0x68>)
 8001ca6:	4290      	cmp	r0, r2
 8001ca8:	d007      	beq.n	8001cba <TIM_Base_SetConfig+0x4a>
 8001caa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cae:	4290      	cmp	r0, r2
 8001cb0:	d003      	beq.n	8001cba <TIM_Base_SetConfig+0x4a>
 8001cb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cb6:	4290      	cmp	r0, r2
 8001cb8:	d103      	bne.n	8001cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cba:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cc0:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001cc2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cc4:	688b      	ldr	r3, [r1, #8]
 8001cc6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001cc8:	680b      	ldr	r3, [r1, #0]
 8001cca:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler */
  TIMx->EGR = TIM_EGR_UG;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	6143      	str	r3, [r0, #20]
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40000400 	.word	0x40000400
 8001cd8:	40010800 	.word	0x40010800

08001cdc <HAL_TIM_Base_Init>:
{
 8001cdc:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001cde:	4604      	mov	r4, r0
 8001ce0:	b1a0      	cbz	r0, 8001d0c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001ce2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001ce6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cea:	b91b      	cbnz	r3, 8001cf4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001cec:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_Base_MspInit(htim);
 8001cf0:	f000 fbe6 	bl	80024c0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001cf4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001cf8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cfc:	1d21      	adds	r1, r4, #4
 8001cfe:	f7ff ffb7 	bl	8001c70 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001d02:	2301      	movs	r3, #1
  return HAL_OK;
 8001d04:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001d06:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001d0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d0c:	2001      	movs	r0, #1
}
 8001d0e:	bd10      	pop	{r4, pc}

08001d10 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 8001d10:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8001d12:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001d14:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_TIM_ENABLE(htim);
 8001d18:	6813      	ldr	r3, [r2, #0]
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001d20:	2301      	movs	r3, #1
 8001d22:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
}
 8001d26:	2000      	movs	r0, #0
 8001d28:	4770      	bx	lr

08001d2a <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001d2a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8001d2e:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	f04f 0302 	mov.w	r3, #2
 8001d36:	d018      	beq.n	8001d6a <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001d38:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001d3c:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001d3e:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001d40:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001d42:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001d44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d48:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	4322      	orrs	r2, r4
 8001d4e:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d56:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  __HAL_UNLOCK(htim);
 8001d64:	2300      	movs	r3, #0
 8001d66:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(htim);
 8001d6a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001d6c:	bd10      	pop	{r4, pc}
	...

08001d70 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d74:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d76:	6805      	ldr	r5, [r0, #0]
 8001d78:	68c2      	ldr	r2, [r0, #12]
 8001d7a:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d7c:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d82:	4313      	orrs	r3, r2
 8001d84:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d86:	6883      	ldr	r3, [r0, #8]
 8001d88:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8001d8a:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d8c:	4303      	orrs	r3, r0
 8001d8e:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001d92:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d96:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8001d98:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d9c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001da2:	696b      	ldr	r3, [r5, #20]
 8001da4:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8001da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dac:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dae:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001db2:	616b      	str	r3, [r5, #20]
 8001db4:	4b7e      	ldr	r3, [pc, #504]	; (8001fb0 <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001db6:	d17f      	bne.n	8001eb8 <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8001db8:	429d      	cmp	r5, r3
 8001dba:	f04f 0419 	mov.w	r4, #25
 8001dbe:	d147      	bne.n	8001e50 <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001dc0:	f7ff ff3e 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
 8001dc4:	fb04 f300 	mul.w	r3, r4, r0
 8001dc8:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001dcc:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001dd0:	007f      	lsls	r7, r7, #1
 8001dd2:	fbb3 f3f7 	udiv	r3, r3, r7
 8001dd6:	fbb3 f3f8 	udiv	r3, r3, r8
 8001dda:	011f      	lsls	r7, r3, #4
 8001ddc:	f7ff ff30 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
 8001de0:	4360      	muls	r0, r4
 8001de2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fbb0 f6f3 	udiv	r6, r0, r3
 8001dec:	f7ff ff28 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
 8001df0:	4360      	muls	r0, r4
 8001df2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfc:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e00:	fb08 6313 	mls	r3, r8, r3, r6
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	3332      	adds	r3, #50	; 0x32
 8001e08:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001e12:	f7ff ff15 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
 8001e16:	4360      	muls	r0, r4
 8001e18:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001e1c:	0052      	lsls	r2, r2, #1
 8001e1e:	fbb0 faf2 	udiv	sl, r0, r2
 8001e22:	f7ff ff0d 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e26:	4360      	muls	r0, r4
 8001e28:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e32:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e36:	fb08 a313 	mls	r3, r8, r3, sl
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	3332      	adds	r3, #50	; 0x32
 8001e3e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e48:	4433      	add	r3, r6
 8001e4a:	60ab      	str	r3, [r5, #8]
 8001e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e50:	f7ff fede 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8001e54:	fb04 f300 	mul.w	r3, r4, r0
 8001e58:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001e5c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001e60:	007f      	lsls	r7, r7, #1
 8001e62:	fbb3 f3f7 	udiv	r3, r3, r7
 8001e66:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e6a:	011f      	lsls	r7, r3, #4
 8001e6c:	f7ff fed0 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8001e70:	4360      	muls	r0, r4
 8001e72:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fbb0 f6f3 	udiv	r6, r0, r3
 8001e7c:	f7ff fec8 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8001e80:	4360      	muls	r0, r4
 8001e82:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e90:	fb08 6313 	mls	r3, r8, r3, r6
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	3332      	adds	r3, #50	; 0x32
 8001e98:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001ea2:	f7ff feb5 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8001ea6:	4360      	muls	r0, r4
 8001ea8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001eac:	0052      	lsls	r2, r2, #1
 8001eae:	fbb0 faf2 	udiv	sl, r0, r2
 8001eb2:	f7ff fead 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8001eb6:	e7b6      	b.n	8001e26 <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 8001eb8:	429d      	cmp	r5, r3
 8001eba:	f04f 0419 	mov.w	r4, #25
 8001ebe:	d143      	bne.n	8001f48 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ec0:	f7ff febe 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
 8001ec4:	fb04 f300 	mul.w	r3, r4, r0
 8001ec8:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001ecc:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001ed0:	00b6      	lsls	r6, r6, #2
 8001ed2:	fbb3 f3f6 	udiv	r3, r3, r6
 8001ed6:	fbb3 f3f8 	udiv	r3, r3, r8
 8001eda:	011e      	lsls	r6, r3, #4
 8001edc:	f7ff feb0 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
 8001ee0:	4360      	muls	r0, r4
 8001ee2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	fbb0 f7f3 	udiv	r7, r0, r3
 8001eec:	f7ff fea8 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
 8001ef0:	4360      	muls	r0, r4
 8001ef2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efc:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f00:	fb08 7313 	mls	r3, r8, r3, r7
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	3332      	adds	r3, #50	; 0x32
 8001f08:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f0c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001f10:	f7ff fe96 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
 8001f14:	4360      	muls	r0, r4
 8001f16:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001f1a:	0092      	lsls	r2, r2, #2
 8001f1c:	fbb0 faf2 	udiv	sl, r0, r2
 8001f20:	f7ff fe8e 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f24:	4360      	muls	r0, r4
 8001f26:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f30:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f34:	fb08 a313 	mls	r3, r8, r3, sl
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	3332      	adds	r3, #50	; 0x32
 8001f3c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	433b      	orrs	r3, r7
 8001f46:	e77f      	b.n	8001e48 <UART_SetConfig+0xd8>
 8001f48:	f7ff fe62 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8001f4c:	fb04 f300 	mul.w	r3, r4, r0
 8001f50:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001f54:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001f58:	00b6      	lsls	r6, r6, #2
 8001f5a:	fbb3 f3f6 	udiv	r3, r3, r6
 8001f5e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f62:	011e      	lsls	r6, r3, #4
 8001f64:	f7ff fe54 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8001f68:	4360      	muls	r0, r4
 8001f6a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	fbb0 f7f3 	udiv	r7, r0, r3
 8001f74:	f7ff fe4c 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8001f78:	4360      	muls	r0, r4
 8001f7a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f84:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f88:	fb08 7313 	mls	r3, r8, r3, r7
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	3332      	adds	r3, #50	; 0x32
 8001f90:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f94:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001f98:	f7ff fe3a 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8001f9c:	4360      	muls	r0, r4
 8001f9e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001fa2:	0092      	lsls	r2, r2, #2
 8001fa4:	fbb0 faf2 	udiv	sl, r0, r2
 8001fa8:	f7ff fe32 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8001fac:	e7ba      	b.n	8001f24 <UART_SetConfig+0x1b4>
 8001fae:	bf00      	nop
 8001fb0:	40013800 	.word	0x40013800

08001fb4 <HAL_UART_Init>:
{
 8001fb4:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	b330      	cbz	r0, 8002008 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 8001fba:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001fbe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fc2:	b91b      	cbnz	r3, 8001fcc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001fc4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001fc8:	f000 fa8e 	bl	80024e8 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8001fcc:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8001fce:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8001fd0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001fd4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001fd6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fdc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001fde:	f7ff fec7 	bl	8001d70 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fe2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ff4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ffc:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 8001ffe:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002000:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8002002:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002006:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002008:	2001      	movs	r0, #1
}
 800200a:	bd10      	pop	{r4, pc}

0800200c <HAL_UART_TxCpltCallback>:
 800200c:	4770      	bx	lr

0800200e <HAL_UART_RxCpltCallback>:
 800200e:	4770      	bx	lr

08002010 <HAL_UART_ErrorCallback>:
{
 8002010:	4770      	bx	lr

08002012 <HAL_UART_IRQHandler>:
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8002012:	6802      	ldr	r2, [r0, #0]
{
 8002014:	b513      	push	{r0, r1, r4, lr}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8002016:	6811      	ldr	r1, [r2, #0]
{
 8002018:	4604      	mov	r4, r0
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800201a:	07c9      	lsls	r1, r1, #31
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 800201c:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800201e:	d505      	bpl.n	800202c <HAL_UART_IRQHandler+0x1a>
 8002020:	05db      	lsls	r3, r3, #23
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002022:	bf42      	ittt	mi
 8002024:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 8002026:	f043 0301 	orrmi.w	r3, r3, #1
 800202a:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 800202c:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800202e:	6953      	ldr	r3, [r2, #20]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002030:	0788      	lsls	r0, r1, #30
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002032:	f003 0301 	and.w	r3, r3, #1
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002036:	d504      	bpl.n	8002042 <HAL_UART_IRQHandler+0x30>
 8002038:	b11b      	cbz	r3, 8002042 <HAL_UART_IRQHandler+0x30>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 800203a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800203c:	f041 0104 	orr.w	r1, r1, #4
 8002040:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8002042:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002044:	0749      	lsls	r1, r1, #29
 8002046:	d504      	bpl.n	8002052 <HAL_UART_IRQHandler+0x40>
 8002048:	b11b      	cbz	r3, 8002052 <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 800204a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800204c:	f041 0102 	orr.w	r1, r1, #2
 8002050:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8002052:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002054:	0708      	lsls	r0, r1, #28
 8002056:	d504      	bpl.n	8002062 <HAL_UART_IRQHandler+0x50>
 8002058:	b11b      	cbz	r3, 8002062 <HAL_UART_IRQHandler+0x50>
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800205a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800205c:	f043 0308 	orr.w	r3, r3, #8
 8002060:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8002062:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8002064:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002066:	0689      	lsls	r1, r1, #26
 8002068:	d533      	bpl.n	80020d2 <HAL_UART_IRQHandler+0xc0>
 800206a:	0698      	lsls	r0, r3, #26
 800206c:	d531      	bpl.n	80020d2 <HAL_UART_IRQHandler+0xc0>
  tmp_state = huart->State; 
 800206e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8002072:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002076:	2b22      	cmp	r3, #34	; 0x22
 8002078:	d12b      	bne.n	80020d2 <HAL_UART_IRQHandler+0xc0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800207a:	68a3      	ldr	r3, [r4, #8]
 800207c:	6921      	ldr	r1, [r4, #16]
 800207e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002082:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002084:	d176      	bne.n	8002174 <HAL_UART_IRQHandler+0x162>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002086:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002088:	2900      	cmp	r1, #0
 800208a:	d16f      	bne.n	800216c <HAL_UART_IRQHandler+0x15a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800208c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002090:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1;
 8002094:	62a3      	str	r3, [r4, #40]	; 0x28
    if(--huart->RxXferCount == 0)
 8002096:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002098:	3b01      	subs	r3, #1
 800209a:	b29b      	uxth	r3, r3
 800209c:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800209e:	b9c3      	cbnz	r3, 80020d2 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80020a0:	6823      	ldr	r3, [r4, #0]
      HAL_UART_RxCpltCallback(huart);
 80020a2:	4620      	mov	r0, r4
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	f022 0220 	bic.w	r2, r2, #32
 80020aa:	60da      	str	r2, [r3, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80020ac:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80020b0:	2a32      	cmp	r2, #50	; 0x32
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80020b2:	bf17      	itett	ne
 80020b4:	68da      	ldrne	r2, [r3, #12]
        huart->State = HAL_UART_STATE_BUSY_TX;
 80020b6:	2312      	moveq	r3, #18
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80020b8:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 80020bc:	60da      	strne	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80020be:	bf1f      	itttt	ne
 80020c0:	695a      	ldrne	r2, [r3, #20]
 80020c2:	f022 0201 	bicne.w	r2, r2, #1
 80020c6:	615a      	strne	r2, [r3, #20]
        huart->State = HAL_UART_STATE_READY;
 80020c8:	2301      	movne	r3, #1
 80020ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 80020ce:	f7ff ff9e 	bl	800200e <HAL_UART_RxCpltCallback>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 80020d6:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80020d8:	0609      	lsls	r1, r1, #24
 80020da:	d522      	bpl.n	8002122 <HAL_UART_IRQHandler+0x110>
 80020dc:	0610      	lsls	r0, r2, #24
 80020de:	d520      	bpl.n	8002122 <HAL_UART_IRQHandler+0x110>
  tmp_state = huart->State;
 80020e0:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80020e4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80020e8:	2a12      	cmp	r2, #18
 80020ea:	d11a      	bne.n	8002122 <HAL_UART_IRQHandler+0x110>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80020ec:	68a2      	ldr	r2, [r4, #8]
 80020ee:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80020f2:	6a22      	ldr	r2, [r4, #32]
 80020f4:	d14c      	bne.n	8002190 <HAL_UART_IRQHandler+0x17e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80020f6:	8811      	ldrh	r1, [r2, #0]
 80020f8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80020fc:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80020fe:	6921      	ldr	r1, [r4, #16]
 8002100:	2900      	cmp	r1, #0
 8002102:	d143      	bne.n	800218c <HAL_UART_IRQHandler+0x17a>
        huart->pTxBuffPtr += 2;
 8002104:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1;
 8002106:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0)
 8002108:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800210a:	3a01      	subs	r2, #1
 800210c:	b292      	uxth	r2, r2
 800210e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002110:	b93a      	cbnz	r2, 8002122 <HAL_UART_IRQHandler+0x110>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002118:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002120:	60da      	str	r2, [r3, #12]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8002122:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8002124:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002126:	0649      	lsls	r1, r1, #25
 8002128:	d510      	bpl.n	800214c <HAL_UART_IRQHandler+0x13a>
 800212a:	0652      	lsls	r2, r2, #25
 800212c:	d50e      	bpl.n	800214c <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800212e:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002130:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002136:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002138:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800213c:	2b32      	cmp	r3, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 800213e:	bf0c      	ite	eq
 8002140:	2322      	moveq	r3, #34	; 0x22
    huart->State = HAL_UART_STATE_READY;
 8002142:	2301      	movne	r3, #1
 8002144:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002148:	f7ff ff60 	bl	800200c <HAL_UART_TxCpltCallback>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800214c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800214e:	b15b      	cbz	r3, 8002168 <HAL_UART_IRQHandler+0x156>
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002150:	6823      	ldr	r3, [r4, #0]
    HAL_UART_ErrorCallback(huart);
 8002152:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	9201      	str	r2, [sp, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	9b01      	ldr	r3, [sp, #4]
    huart->State = HAL_UART_STATE_READY;
 800215e:	2301      	movs	r3, #1
 8002160:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 8002164:	f7ff ff54 	bl	8002010 <HAL_UART_ErrorCallback>
}
 8002168:	b002      	add	sp, #8
 800216a:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f823 2b01 	strh.w	r2, [r3], #1
 8002172:	e78f      	b.n	8002094 <HAL_UART_IRQHandler+0x82>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002174:	b921      	cbnz	r1, 8002180 <HAL_UART_IRQHandler+0x16e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002176:	1c59      	adds	r1, r3, #1
 8002178:	6852      	ldr	r2, [r2, #4]
 800217a:	62a1      	str	r1, [r4, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800217c:	701a      	strb	r2, [r3, #0]
 800217e:	e78a      	b.n	8002096 <HAL_UART_IRQHandler+0x84>
 8002180:	6852      	ldr	r2, [r2, #4]
 8002182:	1c59      	adds	r1, r3, #1
 8002184:	62a1      	str	r1, [r4, #40]	; 0x28
 8002186:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800218a:	e7f7      	b.n	800217c <HAL_UART_IRQHandler+0x16a>
        huart->pTxBuffPtr += 1;
 800218c:	3201      	adds	r2, #1
 800218e:	e7ba      	b.n	8002106 <HAL_UART_IRQHandler+0xf4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002190:	1c51      	adds	r1, r2, #1
 8002192:	6221      	str	r1, [r4, #32]
 8002194:	7812      	ldrb	r2, [r2, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	e7b6      	b.n	8002108 <HAL_UART_IRQHandler+0xf6>
	...

0800219c <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800219c:	4a1e      	ldr	r2, [pc, #120]	; (8002218 <SystemClock_Config+0x7c>)
{
 800219e:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a0:	6813      	ldr	r3, [r2, #0]
{
 80021a2:	b092      	sub	sp, #72	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80021a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021ac:	6013      	str	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021ae:	2302      	movs	r3, #2
 80021b0:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021b2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021b4:	2300      	movs	r3, #0
 80021b6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80021b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021bc:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80021be:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80021c0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80021c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021c8:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80021ca:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80021cc:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ce:	f7ff f8a1 	bl	8001314 <HAL_RCC_OscConfig>
 80021d2:	b100      	cbz	r0, 80021d6 <SystemClock_Config+0x3a>
 80021d4:	e7fe      	b.n	80021d4 <SystemClock_Config+0x38>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021d6:	220f      	movs	r2, #15
 80021d8:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021da:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021dc:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021de:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021e0:	4621      	mov	r1, r4
 80021e2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021e4:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021e8:	f7ff fc2e 	bl	8001a48 <HAL_RCC_ClockConfig>
 80021ec:	4604      	mov	r4, r0
 80021ee:	b100      	cbz	r0, 80021f2 <SystemClock_Config+0x56>
 80021f0:	e7fe      	b.n	80021f0 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80021f2:	f7ff fd07 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 80021f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80021fe:	f7fe fdc7 	bl	8000d90 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002202:	2004      	movs	r0, #4
 8002204:	f7fe fdda 	bl	8000dbc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002208:	4622      	mov	r2, r4
 800220a:	4621      	mov	r1, r4
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f7fe fd7e 	bl	8000d10 <HAL_NVIC_SetPriority>
}
 8002214:	b012      	add	sp, #72	; 0x48
 8002216:	bd10      	pop	{r4, pc}
 8002218:	40007000 	.word	0x40007000
 800221c:	00000000 	.word	0x00000000

08002220 <main>:
{
 8002220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bv = (int)((1.0 + sin(((float)i)*M_PI/64))*2048);
 8002224:	f20f 1938 	addw	r9, pc, #312	; 0x138
 8002228:	e9d9 8900 	ldrd	r8, r9, [r9]
	for (int i=0; i<128; i++)
 800222c:	2400      	movs	r4, #0
		bv = (int)((1.0 + sin(((float)i)*M_PI/64))*2048);
 800222e:	2600      	movs	r6, #0
		buf_tr[i] = (uint32_t)bv;
 8002230:	f640 7aff 	movw	sl, #4095	; 0xfff
		bv = (int)((1.0 + sin(((float)i)*M_PI/64))*2048);
 8002234:	4f4c      	ldr	r7, [pc, #304]	; (8002368 <main+0x148>)
		buf_tr[i] = (uint32_t)bv;
 8002236:	4d4d      	ldr	r5, [pc, #308]	; (800236c <main+0x14c>)
{
 8002238:	b088      	sub	sp, #32
		bv = (int)((1.0 + sin(((float)i)*M_PI/64))*2048);
 800223a:	4620      	mov	r0, r4
 800223c:	f7fe fcd4 	bl	8000be8 <__aeabi_i2f>
 8002240:	f7fe f902 	bl	8000448 <__aeabi_f2d>
 8002244:	4642      	mov	r2, r8
 8002246:	464b      	mov	r3, r9
 8002248:	f7fe f952 	bl	80004f0 <__aeabi_dmul>
 800224c:	4632      	mov	r2, r6
 800224e:	463b      	mov	r3, r7
 8002250:	f7fe f94e 	bl	80004f0 <__aeabi_dmul>
 8002254:	f000 fa00 	bl	8002658 <sin>
 8002258:	2200      	movs	r2, #0
 800225a:	4b45      	ldr	r3, [pc, #276]	; (8002370 <main+0x150>)
 800225c:	f7fd ff96 	bl	800018c <__adddf3>
 8002260:	2200      	movs	r2, #0
 8002262:	4b44      	ldr	r3, [pc, #272]	; (8002374 <main+0x154>)
 8002264:	f7fe f944 	bl	80004f0 <__aeabi_dmul>
 8002268:	f7fe fbdc 	bl	8000a24 <__aeabi_d2iz>
 800226c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
		buf_tr[i] = (uint32_t)bv;
 8002270:	4550      	cmp	r0, sl
 8002272:	bfa8      	it	ge
 8002274:	4650      	movge	r0, sl
 8002276:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
	for (int i=0; i<128; i++)
 800227a:	3401      	adds	r4, #1
 800227c:	2c80      	cmp	r4, #128	; 0x80
 800227e:	d1dc      	bne.n	800223a <main+0x1a>
  HAL_Init();
 8002280:	f7fe fd1a 	bl	8000cb8 <HAL_Init>
  SystemClock_Config();
 8002284:	f7ff ff8a 	bl	800219c <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002288:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <main+0x158>)
  huart1.Init.BaudRate = 115200;
 800228a:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800228e:	69da      	ldr	r2, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002290:	200c      	movs	r0, #12
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002292:	f042 0220 	orr.w	r2, r2, #32
 8002296:	61da      	str	r2, [r3, #28]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	f002 0220 	and.w	r2, r2, #32
 800229e:	9204      	str	r2, [sp, #16]
 80022a0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a2:	69da      	ldr	r2, [r3, #28]
 80022a4:	f042 0201 	orr.w	r2, r2, #1
 80022a8:	61da      	str	r2, [r3, #28]
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	f002 0201 	and.w	r2, r2, #1
 80022b0:	9205      	str	r2, [sp, #20]
 80022b2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80022ba:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80022bc:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022be:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80022c0:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c6:	9303      	str	r3, [sp, #12]
 80022c8:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80022ca:	f7fe fd21 	bl	8000d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80022ce:	200c      	movs	r0, #12
 80022d0:	f7fe fd52 	bl	8000d78 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 80022d4:	4829      	ldr	r0, [pc, #164]	; (800237c <main+0x15c>)
  huart1.Init.BaudRate = 115200;
 80022d6:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <main+0x160>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022d8:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 80022da:	e880 0028 	stmia.w	r0, {r3, r5}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022e0:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022e2:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022e4:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022e6:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e8:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ea:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ec:	f7ff fe62 	bl	8001fb4 <HAL_UART_Init>
 80022f0:	b100      	cbz	r0, 80022f4 <main+0xd4>
 80022f2:	e7fe      	b.n	80022f2 <main+0xd2>
  hdac.Instance = DAC;
 80022f4:	4e23      	ldr	r6, [pc, #140]	; (8002384 <main+0x164>)
 80022f6:	4b24      	ldr	r3, [pc, #144]	; (8002388 <main+0x168>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80022f8:	4630      	mov	r0, r6
  hdac.Instance = DAC;
 80022fa:	6033      	str	r3, [r6, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80022fc:	f7fe fd6f 	bl	8000dde <HAL_DAC_Init>
 8002300:	4602      	mov	r2, r0
 8002302:	b100      	cbz	r0, 8002306 <main+0xe6>
 8002304:	e7fe      	b.n	8002304 <main+0xe4>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002306:	2304      	movs	r3, #4
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002308:	9007      	str	r0, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800230a:	a906      	add	r1, sp, #24
 800230c:	4630      	mov	r0, r6
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800230e:	9306      	str	r3, [sp, #24]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002310:	f7fe fdf8 	bl	8000f04 <HAL_DAC_ConfigChannel>
 8002314:	b100      	cbz	r0, 8002318 <main+0xf8>
 8002316:	e7fe      	b.n	8002316 <main+0xf6>
  htim6.Instance = TIM6;
 8002318:	4d1c      	ldr	r5, [pc, #112]	; (800238c <main+0x16c>)
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <main+0x170>)
  htim6.Init.Prescaler = 0;
 800231c:	6068      	str	r0, [r5, #4]
  htim6.Instance = TIM6;
 800231e:	602b      	str	r3, [r5, #0]
  htim6.Init.Period = 720;
 8002320:	f44f 7334 	mov.w	r3, #720	; 0x2d0
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002324:	60a8      	str	r0, [r5, #8]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002326:	4628      	mov	r0, r5
  htim6.Init.Period = 720;
 8002328:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800232a:	f7ff fcd7 	bl	8001cdc <HAL_TIM_Base_Init>
 800232e:	b100      	cbz	r0, 8002332 <main+0x112>
 8002330:	e7fe      	b.n	8002330 <main+0x110>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002332:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002334:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002336:	a906      	add	r1, sp, #24
 8002338:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800233a:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800233c:	f7ff fcf5 	bl	8001d2a <HAL_TIMEx_MasterConfigSynchronization>
 8002340:	4607      	mov	r7, r0
 8002342:	b100      	cbz	r0, 8002346 <main+0x126>
 8002344:	e7fe      	b.n	8002344 <main+0x124>
  HAL_TIM_Base_Start(&htim6);
 8002346:	4628      	mov	r0, r5
 8002348:	f7ff fce2 	bl	8001d10 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)buf_tr, 128, DAC_ALIGN_12B_R);
 800234c:	9700      	str	r7, [sp, #0]
 800234e:	4623      	mov	r3, r4
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <main+0x14c>)
 8002352:	4639      	mov	r1, r7
 8002354:	4630      	mov	r0, r6
 8002356:	f7fe fd55 	bl	8000e04 <HAL_DAC_Start_DMA>
 800235a:	e7fe      	b.n	800235a <main+0x13a>
 800235c:	f3af 8000 	nop.w
 8002360:	54442d18 	.word	0x54442d18
 8002364:	400921fb 	.word	0x400921fb
 8002368:	3f900000 	.word	0x3f900000
 800236c:	20000024 	.word	0x20000024
 8002370:	3ff00000 	.word	0x3ff00000
 8002374:	40a00000 	.word	0x40a00000
 8002378:	40023800 	.word	0x40023800
 800237c:	20000168 	.word	0x20000168
 8002380:	40013800 	.word	0x40013800
 8002384:	200001a8 	.word	0x200001a8
 8002388:	40007400 	.word	0x40007400
 800238c:	200001bc 	.word	0x200001bc
 8002390:	40001000 	.word	0x40001000

08002394 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002394:	e7fe      	b.n	8002394 <_Error_Handler>
	...

08002398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <HAL_MspInit+0x9c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800239c:	2003      	movs	r0, #3
  __HAL_RCC_COMP_CLK_ENABLE();
 800239e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
 80023a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023ac:	9201      	str	r2, [sp, #4]
 80023ae:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b0:	6a1a      	ldr	r2, [r3, #32]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	621a      	str	r2, [r3, #32]
 80023b8:	6a1a      	ldr	r2, [r3, #32]
 80023ba:	f002 0201 	and.w	r2, r2, #1
 80023be:	9202      	str	r2, [sp, #8]
 80023c0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d0:	9303      	str	r3, [sp, #12]
 80023d2:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d4:	f7fe fc8a 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80023d8:	2200      	movs	r2, #0
 80023da:	f06f 000b 	mvn.w	r0, #11
 80023de:	4611      	mov	r1, r2
 80023e0:	f7fe fc96 	bl	8000d10 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80023e4:	2200      	movs	r2, #0
 80023e6:	f06f 000a 	mvn.w	r0, #10
 80023ea:	4611      	mov	r1, r2
 80023ec:	f7fe fc90 	bl	8000d10 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80023f0:	2200      	movs	r2, #0
 80023f2:	f06f 0009 	mvn.w	r0, #9
 80023f6:	4611      	mov	r1, r2
 80023f8:	f7fe fc8a 	bl	8000d10 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80023fc:	2200      	movs	r2, #0
 80023fe:	f06f 0004 	mvn.w	r0, #4
 8002402:	4611      	mov	r1, r2
 8002404:	f7fe fc84 	bl	8000d10 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002408:	2200      	movs	r2, #0
 800240a:	f06f 0003 	mvn.w	r0, #3
 800240e:	4611      	mov	r1, r2
 8002410:	f7fe fc7e 	bl	8000d10 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	f06f 0001 	mvn.w	r0, #1
 800241a:	4611      	mov	r1, r2
 800241c:	f7fe fc78 	bl	8000d10 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	f04f 30ff 	mov.w	r0, #4294967295
 8002426:	4611      	mov	r1, r2
 8002428:	f7fe fc72 	bl	8000d10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242c:	b005      	add	sp, #20
 800242e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800

08002438 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002438:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC)
 800243a:	6802      	ldr	r2, [r0, #0]
 800243c:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <HAL_DAC_MspInit+0x74>)
{
 800243e:	b087      	sub	sp, #28
  if(hdac->Instance==DAC)
 8002440:	429a      	cmp	r2, r3
{
 8002442:	4605      	mov	r5, r0
  if(hdac->Instance==DAC)
 8002444:	d130      	bne.n	80024a8 <HAL_DAC_MspInit+0x70>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002446:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800244a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800244c:	2710      	movs	r7, #16
    __HAL_RCC_DAC_CLK_ENABLE();
 800244e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002452:	625a      	str	r2, [r3, #36]	; 0x24
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2600      	movs	r6, #0
    __HAL_RCC_DAC_CLK_ENABLE();
 8002458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002460:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002462:	4813      	ldr	r0, [pc, #76]	; (80024b0 <HAL_DAC_MspInit+0x78>)
 8002464:	a901      	add	r1, sp, #4

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel2;
 8002466:	4c13      	ldr	r4, [pc, #76]	; (80024b4 <HAL_DAC_MspInit+0x7c>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002468:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800246a:	9701      	str	r7, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246e:	f7fe fe43 	bl	80010f8 <HAL_GPIO_Init>
    hdma_dac_ch1.Instance = DMA1_Channel2;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_DAC_MspInit+0x80>)
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002474:	4620      	mov	r0, r4
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002476:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	60e3      	str	r3, [r4, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800247e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002482:	6123      	str	r3, [r4, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002488:	6163      	str	r3, [r4, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800248a:	2320      	movs	r3, #32
 800248c:	61a3      	str	r3, [r4, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800248e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002492:	60a6      	str	r6, [r4, #8]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002494:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002496:	f7fe fd71 	bl	8000f7c <HAL_DMA_Init>
 800249a:	b118      	cbz	r0, 80024a4 <HAL_DAC_MspInit+0x6c>
    {
      _Error_Handler(__FILE__, __LINE__);
 800249c:	2174      	movs	r1, #116	; 0x74
 800249e:	4807      	ldr	r0, [pc, #28]	; (80024bc <HAL_DAC_MspInit+0x84>)
 80024a0:	f7ff ff78 	bl	8002394 <_Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80024a4:	60ac      	str	r4, [r5, #8]
 80024a6:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80024a8:	b007      	add	sp, #28
 80024aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ac:	40007400 	.word	0x40007400
 80024b0:	40020000 	.word	0x40020000
 80024b4:	20000124 	.word	0x20000124
 80024b8:	4002601c 	.word	0x4002601c
 80024bc:	080036a8 	.word	0x080036a8

080024c0 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM6)
 80024c0:	6802      	ldr	r2, [r0, #0]
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_TIM_Base_MspInit+0x24>)
{
 80024c4:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM6)
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d10a      	bne.n	80024e0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80024ca:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 80024ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d0:	f042 0210 	orr.w	r2, r2, #16
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80024e0:	b002      	add	sp, #8
 80024e2:	4770      	bx	lr
 80024e4:	40001000 	.word	0x40001000

080024e8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80024ea:	6802      	ldr	r2, [r0, #0]
 80024ec:	4b13      	ldr	r3, [pc, #76]	; (800253c <HAL_UART_MspInit+0x54>)
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d121      	bne.n	8002536 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80024f6:	6a1a      	ldr	r2, [r3, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80024fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024fe:	621a      	str	r2, [r3, #32]
 8002500:	6a1b      	ldr	r3, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002502:	480f      	ldr	r0, [pc, #60]	; (8002540 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800250c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002510:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002516:	2301      	movs	r3, #1
 8002518:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800251e:	2307      	movs	r3, #7
 8002520:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	f7fe fde9 	bl	80010f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2025      	movs	r0, #37	; 0x25
 800252a:	4611      	mov	r1, r2
 800252c:	f7fe fbf0 	bl	8000d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002530:	2025      	movs	r0, #37	; 0x25
 8002532:	f7fe fc21 	bl	8000d78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002536:	b007      	add	sp, #28
 8002538:	f85d fb04 	ldr.w	pc, [sp], #4
 800253c:	40013800 	.word	0x40013800
 8002540:	40020000 	.word	0x40020000

08002544 <NMI_Handler>:
 8002544:	4770      	bx	lr

08002546 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002546:	e7fe      	b.n	8002546 <HardFault_Handler>

08002548 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002548:	e7fe      	b.n	8002548 <MemManage_Handler>

0800254a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800254a:	e7fe      	b.n	800254a <BusFault_Handler>

0800254c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800254c:	e7fe      	b.n	800254c <UsageFault_Handler>

0800254e <SVC_Handler>:
 800254e:	4770      	bx	lr

08002550 <DebugMon_Handler>:
 8002550:	4770      	bx	lr

08002552 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002552:	4770      	bx	lr

08002554 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002554:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002556:	f7fe fbbb 	bl	8000cd0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800255a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800255e:	f7fe bc3a 	b.w	8000dd6 <HAL_SYSTICK_IRQHandler>
	...

08002564 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002564:	4801      	ldr	r0, [pc, #4]	; (800256c <DMA1_Channel2_IRQHandler+0x8>)
 8002566:	f7fe bd7f 	b.w	8001068 <HAL_DMA_IRQHandler>
 800256a:	bf00      	nop
 800256c:	20000124 	.word	0x20000124

08002570 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002570:	4801      	ldr	r0, [pc, #4]	; (8002578 <USART1_IRQHandler+0x8>)
 8002572:	f7ff bd4e 	b.w	8002012 <HAL_UART_IRQHandler>
 8002576:	bf00      	nop
 8002578:	20000168 	.word	0x20000168

0800257c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800257c:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <SystemInit+0x3c>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002584:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8002586:	6899      	ldr	r1, [r3, #8]
 8002588:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <SystemInit+0x40>)
 800258a:	400a      	ands	r2, r1
 800258c:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8002594:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8002598:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025a0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80025a8:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80025aa:	2200      	movs	r2, #0
 80025ac:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80025ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025b2:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <SystemInit+0x44>)
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	4770      	bx	lr
 80025b8:	40023800 	.word	0x40023800
 80025bc:	88ffc00c 	.word	0x88ffc00c
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80025c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80025c6:	e003      	b.n	80025d0 <LoopCopyDataInit>

080025c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80025ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80025cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80025ce:	3104      	adds	r1, #4

080025d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80025d0:	480a      	ldr	r0, [pc, #40]	; (80025fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80025d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80025d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80025d8:	d3f6      	bcc.n	80025c8 <CopyDataInit>
  ldr r2, =_sbss
 80025da:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80025dc:	e002      	b.n	80025e4 <LoopFillZerobss>

080025de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80025de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80025e0:	f842 3b04 	str.w	r3, [r2], #4

080025e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80025e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80025e8:	d3f9      	bcc.n	80025de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025ea:	f7ff ffc7 	bl	800257c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ee:	f000 f80f 	bl	8002610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025f2:	f7ff fe15 	bl	8002220 <main>
  bx lr
 80025f6:	4770      	bx	lr
  ldr r3, =_sidata
 80025f8:	080038c8 	.word	0x080038c8
  ldr r0, =_sdata
 80025fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002600:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8002604:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8002608:	200001f4 	.word	0x200001f4

0800260c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800260c:	e7fe      	b.n	800260c <ADC1_IRQHandler>
	...

08002610 <__libc_init_array>:
 8002610:	b570      	push	{r4, r5, r6, lr}
 8002612:	2500      	movs	r5, #0
 8002614:	4e0c      	ldr	r6, [pc, #48]	; (8002648 <__libc_init_array+0x38>)
 8002616:	4c0d      	ldr	r4, [pc, #52]	; (800264c <__libc_init_array+0x3c>)
 8002618:	1ba4      	subs	r4, r4, r6
 800261a:	10a4      	asrs	r4, r4, #2
 800261c:	42a5      	cmp	r5, r4
 800261e:	d109      	bne.n	8002634 <__libc_init_array+0x24>
 8002620:	f001 f834 	bl	800368c <_init>
 8002624:	2500      	movs	r5, #0
 8002626:	4e0a      	ldr	r6, [pc, #40]	; (8002650 <__libc_init_array+0x40>)
 8002628:	4c0a      	ldr	r4, [pc, #40]	; (8002654 <__libc_init_array+0x44>)
 800262a:	1ba4      	subs	r4, r4, r6
 800262c:	10a4      	asrs	r4, r4, #2
 800262e:	42a5      	cmp	r5, r4
 8002630:	d105      	bne.n	800263e <__libc_init_array+0x2e>
 8002632:	bd70      	pop	{r4, r5, r6, pc}
 8002634:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002638:	4798      	blx	r3
 800263a:	3501      	adds	r5, #1
 800263c:	e7ee      	b.n	800261c <__libc_init_array+0xc>
 800263e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002642:	4798      	blx	r3
 8002644:	3501      	adds	r5, #1
 8002646:	e7f2      	b.n	800262e <__libc_init_array+0x1e>
 8002648:	080038c0 	.word	0x080038c0
 800264c:	080038c0 	.word	0x080038c0
 8002650:	080038c0 	.word	0x080038c0
 8002654:	080038c4 	.word	0x080038c4

08002658 <sin>:
 8002658:	b530      	push	{r4, r5, lr}
 800265a:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <sin+0x6c>)
 800265c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002660:	4293      	cmp	r3, r2
 8002662:	b087      	sub	sp, #28
 8002664:	dc06      	bgt.n	8002674 <sin+0x1c>
 8002666:	2300      	movs	r3, #0
 8002668:	2200      	movs	r2, #0
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2300      	movs	r3, #0
 800266e:	f000 fe57 	bl	8003320 <__kernel_sin>
 8002672:	e006      	b.n	8002682 <sin+0x2a>
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <sin+0x70>)
 8002676:	4293      	cmp	r3, r2
 8002678:	dd05      	ble.n	8002686 <sin+0x2e>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	f7fd fd83 	bl	8000188 <__aeabi_dsub>
 8002682:	b007      	add	sp, #28
 8002684:	bd30      	pop	{r4, r5, pc}
 8002686:	aa02      	add	r2, sp, #8
 8002688:	f000 f822 	bl	80026d0 <__ieee754_rem_pio2>
 800268c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002690:	f000 0403 	and.w	r4, r0, #3
 8002694:	2c01      	cmp	r4, #1
 8002696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800269a:	d005      	beq.n	80026a8 <sin+0x50>
 800269c:	2c02      	cmp	r4, #2
 800269e:	d006      	beq.n	80026ae <sin+0x56>
 80026a0:	b964      	cbnz	r4, 80026bc <sin+0x64>
 80026a2:	2401      	movs	r4, #1
 80026a4:	9400      	str	r4, [sp, #0]
 80026a6:	e7e2      	b.n	800266e <sin+0x16>
 80026a8:	f000 fa06 	bl	8002ab8 <__kernel_cos>
 80026ac:	e7e9      	b.n	8002682 <sin+0x2a>
 80026ae:	2401      	movs	r4, #1
 80026b0:	9400      	str	r4, [sp, #0]
 80026b2:	f000 fe35 	bl	8003320 <__kernel_sin>
 80026b6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80026ba:	e7e2      	b.n	8002682 <sin+0x2a>
 80026bc:	f000 f9fc 	bl	8002ab8 <__kernel_cos>
 80026c0:	e7f9      	b.n	80026b6 <sin+0x5e>
 80026c2:	bf00      	nop
 80026c4:	3fe921fb 	.word	0x3fe921fb
 80026c8:	7fefffff 	.word	0x7fefffff
 80026cc:	00000000 	.word	0x00000000

080026d0 <__ieee754_rem_pio2>:
 80026d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d4:	4614      	mov	r4, r2
 80026d6:	4ac4      	ldr	r2, [pc, #784]	; (80029e8 <__ieee754_rem_pio2+0x318>)
 80026d8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80026dc:	4592      	cmp	sl, r2
 80026de:	b08d      	sub	sp, #52	; 0x34
 80026e0:	468b      	mov	fp, r1
 80026e2:	dc07      	bgt.n	80026f4 <__ieee754_rem_pio2+0x24>
 80026e4:	2200      	movs	r2, #0
 80026e6:	2300      	movs	r3, #0
 80026e8:	e9c4 0100 	strd	r0, r1, [r4]
 80026ec:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80026f0:	2500      	movs	r5, #0
 80026f2:	e023      	b.n	800273c <__ieee754_rem_pio2+0x6c>
 80026f4:	4abd      	ldr	r2, [pc, #756]	; (80029ec <__ieee754_rem_pio2+0x31c>)
 80026f6:	4592      	cmp	sl, r2
 80026f8:	dc71      	bgt.n	80027de <__ieee754_rem_pio2+0x10e>
 80026fa:	a3ad      	add	r3, pc, #692	; (adr r3, 80029b0 <__ieee754_rem_pio2+0x2e0>)
 80026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002700:	2900      	cmp	r1, #0
 8002702:	4dbb      	ldr	r5, [pc, #748]	; (80029f0 <__ieee754_rem_pio2+0x320>)
 8002704:	dd36      	ble.n	8002774 <__ieee754_rem_pio2+0xa4>
 8002706:	f7fd fd3f 	bl	8000188 <__aeabi_dsub>
 800270a:	45aa      	cmp	sl, r5
 800270c:	4606      	mov	r6, r0
 800270e:	460f      	mov	r7, r1
 8002710:	d018      	beq.n	8002744 <__ieee754_rem_pio2+0x74>
 8002712:	a3a9      	add	r3, pc, #676	; (adr r3, 80029b8 <__ieee754_rem_pio2+0x2e8>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fd fd36 	bl	8000188 <__aeabi_dsub>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4630      	mov	r0, r6
 8002722:	e9c4 2300 	strd	r2, r3, [r4]
 8002726:	4639      	mov	r1, r7
 8002728:	f7fd fd2e 	bl	8000188 <__aeabi_dsub>
 800272c:	a3a2      	add	r3, pc, #648	; (adr r3, 80029b8 <__ieee754_rem_pio2+0x2e8>)
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002732:	f7fd fd29 	bl	8000188 <__aeabi_dsub>
 8002736:	2501      	movs	r5, #1
 8002738:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800273c:	4628      	mov	r0, r5
 800273e:	b00d      	add	sp, #52	; 0x34
 8002740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002744:	a39e      	add	r3, pc, #632	; (adr r3, 80029c0 <__ieee754_rem_pio2+0x2f0>)
 8002746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274a:	f7fd fd1d 	bl	8000188 <__aeabi_dsub>
 800274e:	a39e      	add	r3, pc, #632	; (adr r3, 80029c8 <__ieee754_rem_pio2+0x2f8>)
 8002750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002754:	4606      	mov	r6, r0
 8002756:	460f      	mov	r7, r1
 8002758:	f7fd fd16 	bl	8000188 <__aeabi_dsub>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4630      	mov	r0, r6
 8002762:	e9c4 2300 	strd	r2, r3, [r4]
 8002766:	4639      	mov	r1, r7
 8002768:	f7fd fd0e 	bl	8000188 <__aeabi_dsub>
 800276c:	a396      	add	r3, pc, #600	; (adr r3, 80029c8 <__ieee754_rem_pio2+0x2f8>)
 800276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002772:	e7de      	b.n	8002732 <__ieee754_rem_pio2+0x62>
 8002774:	f7fd fd0a 	bl	800018c <__adddf3>
 8002778:	45aa      	cmp	sl, r5
 800277a:	4606      	mov	r6, r0
 800277c:	460f      	mov	r7, r1
 800277e:	d016      	beq.n	80027ae <__ieee754_rem_pio2+0xde>
 8002780:	a38d      	add	r3, pc, #564	; (adr r3, 80029b8 <__ieee754_rem_pio2+0x2e8>)
 8002782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002786:	f7fd fd01 	bl	800018c <__adddf3>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4630      	mov	r0, r6
 8002790:	e9c4 2300 	strd	r2, r3, [r4]
 8002794:	4639      	mov	r1, r7
 8002796:	f7fd fcf7 	bl	8000188 <__aeabi_dsub>
 800279a:	a387      	add	r3, pc, #540	; (adr r3, 80029b8 <__ieee754_rem_pio2+0x2e8>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f7fd fcf4 	bl	800018c <__adddf3>
 80027a4:	f04f 35ff 	mov.w	r5, #4294967295
 80027a8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80027ac:	e7c6      	b.n	800273c <__ieee754_rem_pio2+0x6c>
 80027ae:	a384      	add	r3, pc, #528	; (adr r3, 80029c0 <__ieee754_rem_pio2+0x2f0>)
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	f7fd fcea 	bl	800018c <__adddf3>
 80027b8:	a383      	add	r3, pc, #524	; (adr r3, 80029c8 <__ieee754_rem_pio2+0x2f8>)
 80027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027be:	4606      	mov	r6, r0
 80027c0:	460f      	mov	r7, r1
 80027c2:	f7fd fce3 	bl	800018c <__adddf3>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4630      	mov	r0, r6
 80027cc:	e9c4 2300 	strd	r2, r3, [r4]
 80027d0:	4639      	mov	r1, r7
 80027d2:	f7fd fcd9 	bl	8000188 <__aeabi_dsub>
 80027d6:	a37c      	add	r3, pc, #496	; (adr r3, 80029c8 <__ieee754_rem_pio2+0x2f8>)
 80027d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027dc:	e7e0      	b.n	80027a0 <__ieee754_rem_pio2+0xd0>
 80027de:	4a85      	ldr	r2, [pc, #532]	; (80029f4 <__ieee754_rem_pio2+0x324>)
 80027e0:	4592      	cmp	sl, r2
 80027e2:	f300 80d6 	bgt.w	8002992 <__ieee754_rem_pio2+0x2c2>
 80027e6:	f000 fe51 	bl	800348c <fabs>
 80027ea:	a379      	add	r3, pc, #484	; (adr r3, 80029d0 <__ieee754_rem_pio2+0x300>)
 80027ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f0:	4606      	mov	r6, r0
 80027f2:	460f      	mov	r7, r1
 80027f4:	f7fd fe7c 	bl	80004f0 <__aeabi_dmul>
 80027f8:	2200      	movs	r2, #0
 80027fa:	4b7f      	ldr	r3, [pc, #508]	; (80029f8 <__ieee754_rem_pio2+0x328>)
 80027fc:	f7fd fcc6 	bl	800018c <__adddf3>
 8002800:	f7fe f910 	bl	8000a24 <__aeabi_d2iz>
 8002804:	4605      	mov	r5, r0
 8002806:	f7fd fe0d 	bl	8000424 <__aeabi_i2d>
 800280a:	a369      	add	r3, pc, #420	; (adr r3, 80029b0 <__ieee754_rem_pio2+0x2e0>)
 800280c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002810:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002814:	f7fd fe6c 	bl	80004f0 <__aeabi_dmul>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4630      	mov	r0, r6
 800281e:	4639      	mov	r1, r7
 8002820:	f7fd fcb2 	bl	8000188 <__aeabi_dsub>
 8002824:	a364      	add	r3, pc, #400	; (adr r3, 80029b8 <__ieee754_rem_pio2+0x2e8>)
 8002826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282a:	4606      	mov	r6, r0
 800282c:	460f      	mov	r7, r1
 800282e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002832:	f7fd fe5d 	bl	80004f0 <__aeabi_dmul>
 8002836:	2d1f      	cmp	r5, #31
 8002838:	4680      	mov	r8, r0
 800283a:	4689      	mov	r9, r1
 800283c:	dc2e      	bgt.n	800289c <__ieee754_rem_pio2+0x1cc>
 800283e:	4b6f      	ldr	r3, [pc, #444]	; (80029fc <__ieee754_rem_pio2+0x32c>)
 8002840:	1e6a      	subs	r2, r5, #1
 8002842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002846:	459a      	cmp	sl, r3
 8002848:	d028      	beq.n	800289c <__ieee754_rem_pio2+0x1cc>
 800284a:	4642      	mov	r2, r8
 800284c:	464b      	mov	r3, r9
 800284e:	4630      	mov	r0, r6
 8002850:	4639      	mov	r1, r7
 8002852:	f7fd fc99 	bl	8000188 <__aeabi_dsub>
 8002856:	e9c4 0100 	strd	r0, r1, [r4]
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8002860:	9302      	str	r3, [sp, #8]
 8002862:	9a02      	ldr	r2, [sp, #8]
 8002864:	4653      	mov	r3, sl
 8002866:	4630      	mov	r0, r6
 8002868:	4639      	mov	r1, r7
 800286a:	f7fd fc8d 	bl	8000188 <__aeabi_dsub>
 800286e:	4642      	mov	r2, r8
 8002870:	464b      	mov	r3, r9
 8002872:	f7fd fc89 	bl	8000188 <__aeabi_dsub>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	f1bb 0f00 	cmp.w	fp, #0
 800287e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8002882:	f6bf af5b 	bge.w	800273c <__ieee754_rem_pio2+0x6c>
 8002886:	9b02      	ldr	r3, [sp, #8]
 8002888:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800288c:	6023      	str	r3, [r4, #0]
 800288e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8002892:	6063      	str	r3, [r4, #4]
 8002894:	60a0      	str	r0, [r4, #8]
 8002896:	60e1      	str	r1, [r4, #12]
 8002898:	426d      	negs	r5, r5
 800289a:	e74f      	b.n	800273c <__ieee754_rem_pio2+0x6c>
 800289c:	4642      	mov	r2, r8
 800289e:	464b      	mov	r3, r9
 80028a0:	4630      	mov	r0, r6
 80028a2:	4639      	mov	r1, r7
 80028a4:	f7fd fc70 	bl	8000188 <__aeabi_dsub>
 80028a8:	460b      	mov	r3, r1
 80028aa:	4602      	mov	r2, r0
 80028ac:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80028b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80028b4:	ebaa 0101 	sub.w	r1, sl, r1
 80028b8:	2910      	cmp	r1, #16
 80028ba:	e9c4 2300 	strd	r2, r3, [r4]
 80028be:	ddcc      	ble.n	800285a <__ieee754_rem_pio2+0x18a>
 80028c0:	a33f      	add	r3, pc, #252	; (adr r3, 80029c0 <__ieee754_rem_pio2+0x2f0>)
 80028c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80028ca:	f7fd fe11 	bl	80004f0 <__aeabi_dmul>
 80028ce:	4680      	mov	r8, r0
 80028d0:	4689      	mov	r9, r1
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4630      	mov	r0, r6
 80028d8:	4639      	mov	r1, r7
 80028da:	f7fd fc55 	bl	8000188 <__aeabi_dsub>
 80028de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4630      	mov	r0, r6
 80028e8:	4639      	mov	r1, r7
 80028ea:	f7fd fc4d 	bl	8000188 <__aeabi_dsub>
 80028ee:	4642      	mov	r2, r8
 80028f0:	464b      	mov	r3, r9
 80028f2:	f7fd fc49 	bl	8000188 <__aeabi_dsub>
 80028f6:	a334      	add	r3, pc, #208	; (adr r3, 80029c8 <__ieee754_rem_pio2+0x2f8>)
 80028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fc:	4606      	mov	r6, r0
 80028fe:	460f      	mov	r7, r1
 8002900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002904:	f7fd fdf4 	bl	80004f0 <__aeabi_dmul>
 8002908:	4632      	mov	r2, r6
 800290a:	463b      	mov	r3, r7
 800290c:	f7fd fc3c 	bl	8000188 <__aeabi_dsub>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4680      	mov	r8, r0
 8002916:	4689      	mov	r9, r1
 8002918:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800291c:	f7fd fc34 	bl	8000188 <__aeabi_dsub>
 8002920:	460b      	mov	r3, r1
 8002922:	4602      	mov	r2, r0
 8002924:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8002928:	ebaa 0a01 	sub.w	sl, sl, r1
 800292c:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8002930:	e9c4 2300 	strd	r2, r3, [r4]
 8002934:	dd2a      	ble.n	800298c <__ieee754_rem_pio2+0x2bc>
 8002936:	a328      	add	r3, pc, #160	; (adr r3, 80029d8 <__ieee754_rem_pio2+0x308>)
 8002938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002940:	f7fd fdd6 	bl	80004f0 <__aeabi_dmul>
 8002944:	4680      	mov	r8, r0
 8002946:	4689      	mov	r9, r1
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002950:	f7fd fc1a 	bl	8000188 <__aeabi_dsub>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4606      	mov	r6, r0
 800295a:	460f      	mov	r7, r1
 800295c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002960:	f7fd fc12 	bl	8000188 <__aeabi_dsub>
 8002964:	4642      	mov	r2, r8
 8002966:	464b      	mov	r3, r9
 8002968:	f7fd fc0e 	bl	8000188 <__aeabi_dsub>
 800296c:	a31c      	add	r3, pc, #112	; (adr r3, 80029e0 <__ieee754_rem_pio2+0x310>)
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	4680      	mov	r8, r0
 8002974:	4689      	mov	r9, r1
 8002976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800297a:	f7fd fdb9 	bl	80004f0 <__aeabi_dmul>
 800297e:	4642      	mov	r2, r8
 8002980:	464b      	mov	r3, r9
 8002982:	f7fd fc01 	bl	8000188 <__aeabi_dsub>
 8002986:	4680      	mov	r8, r0
 8002988:	4689      	mov	r9, r1
 800298a:	e75e      	b.n	800284a <__ieee754_rem_pio2+0x17a>
 800298c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8002990:	e763      	b.n	800285a <__ieee754_rem_pio2+0x18a>
 8002992:	4a1b      	ldr	r2, [pc, #108]	; (8002a00 <__ieee754_rem_pio2+0x330>)
 8002994:	4592      	cmp	sl, r2
 8002996:	dd35      	ble.n	8002a04 <__ieee754_rem_pio2+0x334>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	f7fd fbf4 	bl	8000188 <__aeabi_dsub>
 80029a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80029a4:	e9c4 0100 	strd	r0, r1, [r4]
 80029a8:	e6a2      	b.n	80026f0 <__ieee754_rem_pio2+0x20>
 80029aa:	bf00      	nop
 80029ac:	f3af 8000 	nop.w
 80029b0:	54400000 	.word	0x54400000
 80029b4:	3ff921fb 	.word	0x3ff921fb
 80029b8:	1a626331 	.word	0x1a626331
 80029bc:	3dd0b461 	.word	0x3dd0b461
 80029c0:	1a600000 	.word	0x1a600000
 80029c4:	3dd0b461 	.word	0x3dd0b461
 80029c8:	2e037073 	.word	0x2e037073
 80029cc:	3ba3198a 	.word	0x3ba3198a
 80029d0:	6dc9c883 	.word	0x6dc9c883
 80029d4:	3fe45f30 	.word	0x3fe45f30
 80029d8:	2e000000 	.word	0x2e000000
 80029dc:	3ba3198a 	.word	0x3ba3198a
 80029e0:	252049c1 	.word	0x252049c1
 80029e4:	397b839a 	.word	0x397b839a
 80029e8:	3fe921fb 	.word	0x3fe921fb
 80029ec:	4002d97b 	.word	0x4002d97b
 80029f0:	3ff921fb 	.word	0x3ff921fb
 80029f4:	413921fb 	.word	0x413921fb
 80029f8:	3fe00000 	.word	0x3fe00000
 80029fc:	080036e4 	.word	0x080036e4
 8002a00:	7fefffff 	.word	0x7fefffff
 8002a04:	ea4f 552a 	mov.w	r5, sl, asr #20
 8002a08:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8002a0c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8002a10:	460f      	mov	r7, r1
 8002a12:	4606      	mov	r6, r0
 8002a14:	f7fe f806 	bl	8000a24 <__aeabi_d2iz>
 8002a18:	f7fd fd04 	bl	8000424 <__aeabi_i2d>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4630      	mov	r0, r6
 8002a22:	4639      	mov	r1, r7
 8002a24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002a28:	f7fd fbae 	bl	8000188 <__aeabi_dsub>
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <__ieee754_rem_pio2+0x3e0>)
 8002a30:	f7fd fd5e 	bl	80004f0 <__aeabi_dmul>
 8002a34:	460f      	mov	r7, r1
 8002a36:	4606      	mov	r6, r0
 8002a38:	f7fd fff4 	bl	8000a24 <__aeabi_d2iz>
 8002a3c:	f7fd fcf2 	bl	8000424 <__aeabi_i2d>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4630      	mov	r0, r6
 8002a46:	4639      	mov	r1, r7
 8002a48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002a4c:	f7fd fb9c 	bl	8000188 <__aeabi_dsub>
 8002a50:	2200      	movs	r2, #0
 8002a52:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <__ieee754_rem_pio2+0x3e0>)
 8002a54:	f7fd fd4c 	bl	80004f0 <__aeabi_dmul>
 8002a58:	f04f 0803 	mov.w	r8, #3
 8002a5c:	2600      	movs	r6, #0
 8002a5e:	2700      	movs	r7, #0
 8002a60:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002a64:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8002a68:	4632      	mov	r2, r6
 8002a6a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8002a6e:	463b      	mov	r3, r7
 8002a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8002a74:	f7fd ffa4 	bl	80009c0 <__aeabi_dcmpeq>
 8002a78:	b9b8      	cbnz	r0, 8002aaa <__ieee754_rem_pio2+0x3da>
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <__ieee754_rem_pio2+0x3e4>)
 8002a7c:	462a      	mov	r2, r5
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	2302      	movs	r3, #2
 8002a82:	4621      	mov	r1, r4
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	a806      	add	r0, sp, #24
 8002a88:	4643      	mov	r3, r8
 8002a8a:	f000 f8f3 	bl	8002c74 <__kernel_rem_pio2>
 8002a8e:	f1bb 0f00 	cmp.w	fp, #0
 8002a92:	4605      	mov	r5, r0
 8002a94:	f6bf ae52 	bge.w	800273c <__ieee754_rem_pio2+0x6c>
 8002a98:	6863      	ldr	r3, [r4, #4]
 8002a9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002a9e:	6063      	str	r3, [r4, #4]
 8002aa0:	68e3      	ldr	r3, [r4, #12]
 8002aa2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002aa6:	60e3      	str	r3, [r4, #12]
 8002aa8:	e6f6      	b.n	8002898 <__ieee754_rem_pio2+0x1c8>
 8002aaa:	46d0      	mov	r8, sl
 8002aac:	e7dc      	b.n	8002a68 <__ieee754_rem_pio2+0x398>
 8002aae:	bf00      	nop
 8002ab0:	41700000 	.word	0x41700000
 8002ab4:	08003764 	.word	0x08003764

08002ab8 <__kernel_cos>:
 8002ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002abc:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8002ac0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	4605      	mov	r5, r0
 8002ac8:	460c      	mov	r4, r1
 8002aca:	4692      	mov	sl, r2
 8002acc:	469b      	mov	fp, r3
 8002ace:	da04      	bge.n	8002ada <__kernel_cos+0x22>
 8002ad0:	f7fd ffa8 	bl	8000a24 <__aeabi_d2iz>
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	f000 80a8 	beq.w	8002c2a <__kernel_cos+0x172>
 8002ada:	462a      	mov	r2, r5
 8002adc:	4623      	mov	r3, r4
 8002ade:	4628      	mov	r0, r5
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	f7fd fd05 	bl	80004f0 <__aeabi_dmul>
 8002ae6:	a352      	add	r3, pc, #328	; (adr r3, 8002c30 <__kernel_cos+0x178>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	4680      	mov	r8, r0
 8002aee:	4689      	mov	r9, r1
 8002af0:	f7fd fcfe 	bl	80004f0 <__aeabi_dmul>
 8002af4:	a350      	add	r3, pc, #320	; (adr r3, 8002c38 <__kernel_cos+0x180>)
 8002af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afa:	f7fd fb47 	bl	800018c <__adddf3>
 8002afe:	4642      	mov	r2, r8
 8002b00:	464b      	mov	r3, r9
 8002b02:	f7fd fcf5 	bl	80004f0 <__aeabi_dmul>
 8002b06:	a34e      	add	r3, pc, #312	; (adr r3, 8002c40 <__kernel_cos+0x188>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	f7fd fb3c 	bl	8000188 <__aeabi_dsub>
 8002b10:	4642      	mov	r2, r8
 8002b12:	464b      	mov	r3, r9
 8002b14:	f7fd fcec 	bl	80004f0 <__aeabi_dmul>
 8002b18:	a34b      	add	r3, pc, #300	; (adr r3, 8002c48 <__kernel_cos+0x190>)
 8002b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1e:	f7fd fb35 	bl	800018c <__adddf3>
 8002b22:	4642      	mov	r2, r8
 8002b24:	464b      	mov	r3, r9
 8002b26:	f7fd fce3 	bl	80004f0 <__aeabi_dmul>
 8002b2a:	a349      	add	r3, pc, #292	; (adr r3, 8002c50 <__kernel_cos+0x198>)
 8002b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b30:	f7fd fb2a 	bl	8000188 <__aeabi_dsub>
 8002b34:	4642      	mov	r2, r8
 8002b36:	464b      	mov	r3, r9
 8002b38:	f7fd fcda 	bl	80004f0 <__aeabi_dmul>
 8002b3c:	a346      	add	r3, pc, #280	; (adr r3, 8002c58 <__kernel_cos+0x1a0>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f7fd fb23 	bl	800018c <__adddf3>
 8002b46:	464b      	mov	r3, r9
 8002b48:	4642      	mov	r2, r8
 8002b4a:	f7fd fcd1 	bl	80004f0 <__aeabi_dmul>
 8002b4e:	4b44      	ldr	r3, [pc, #272]	; (8002c60 <__kernel_cos+0x1a8>)
 8002b50:	e9cd 0100 	strd	r0, r1, [sp]
 8002b54:	429f      	cmp	r7, r3
 8002b56:	dc2a      	bgt.n	8002bae <__kernel_cos+0xf6>
 8002b58:	2200      	movs	r2, #0
 8002b5a:	4b42      	ldr	r3, [pc, #264]	; (8002c64 <__kernel_cos+0x1ac>)
 8002b5c:	4640      	mov	r0, r8
 8002b5e:	4649      	mov	r1, r9
 8002b60:	f7fd fcc6 	bl	80004f0 <__aeabi_dmul>
 8002b64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b68:	4606      	mov	r6, r0
 8002b6a:	460f      	mov	r7, r1
 8002b6c:	4640      	mov	r0, r8
 8002b6e:	4649      	mov	r1, r9
 8002b70:	f7fd fcbe 	bl	80004f0 <__aeabi_dmul>
 8002b74:	4652      	mov	r2, sl
 8002b76:	4680      	mov	r8, r0
 8002b78:	4689      	mov	r9, r1
 8002b7a:	465b      	mov	r3, fp
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	4621      	mov	r1, r4
 8002b80:	f7fd fcb6 	bl	80004f0 <__aeabi_dmul>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4640      	mov	r0, r8
 8002b8a:	4649      	mov	r1, r9
 8002b8c:	f7fd fafc 	bl	8000188 <__aeabi_dsub>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4630      	mov	r0, r6
 8002b96:	4639      	mov	r1, r7
 8002b98:	f7fd faf6 	bl	8000188 <__aeabi_dsub>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4931      	ldr	r1, [pc, #196]	; (8002c68 <__kernel_cos+0x1b0>)
 8002ba4:	f7fd faf0 	bl	8000188 <__aeabi_dsub>
 8002ba8:	b005      	add	sp, #20
 8002baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bae:	4b2f      	ldr	r3, [pc, #188]	; (8002c6c <__kernel_cos+0x1b4>)
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	429f      	cmp	r7, r3
 8002bb4:	bfdf      	itttt	le
 8002bb6:	2200      	movle	r2, #0
 8002bb8:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8002bbc:	4616      	movle	r6, r2
 8002bbe:	461f      	movle	r7, r3
 8002bc0:	bfc4      	itt	gt
 8002bc2:	2600      	movgt	r6, #0
 8002bc4:	4f2a      	ldrgt	r7, [pc, #168]	; (8002c70 <__kernel_cos+0x1b8>)
 8002bc6:	4632      	mov	r2, r6
 8002bc8:	463b      	mov	r3, r7
 8002bca:	4927      	ldr	r1, [pc, #156]	; (8002c68 <__kernel_cos+0x1b0>)
 8002bcc:	f7fd fadc 	bl	8000188 <__aeabi_dsub>
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002bd6:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <__kernel_cos+0x1ac>)
 8002bd8:	4640      	mov	r0, r8
 8002bda:	4649      	mov	r1, r9
 8002bdc:	f7fd fc88 	bl	80004f0 <__aeabi_dmul>
 8002be0:	4632      	mov	r2, r6
 8002be2:	463b      	mov	r3, r7
 8002be4:	f7fd fad0 	bl	8000188 <__aeabi_dsub>
 8002be8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002bec:	4606      	mov	r6, r0
 8002bee:	460f      	mov	r7, r1
 8002bf0:	4640      	mov	r0, r8
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	f7fd fc7c 	bl	80004f0 <__aeabi_dmul>
 8002bf8:	4652      	mov	r2, sl
 8002bfa:	4680      	mov	r8, r0
 8002bfc:	4689      	mov	r9, r1
 8002bfe:	465b      	mov	r3, fp
 8002c00:	4628      	mov	r0, r5
 8002c02:	4621      	mov	r1, r4
 8002c04:	f7fd fc74 	bl	80004f0 <__aeabi_dmul>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4640      	mov	r0, r8
 8002c0e:	4649      	mov	r1, r9
 8002c10:	f7fd faba 	bl	8000188 <__aeabi_dsub>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4630      	mov	r0, r6
 8002c1a:	4639      	mov	r1, r7
 8002c1c:	f7fd fab4 	bl	8000188 <__aeabi_dsub>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c28:	e7bc      	b.n	8002ba4 <__kernel_cos+0xec>
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	490e      	ldr	r1, [pc, #56]	; (8002c68 <__kernel_cos+0x1b0>)
 8002c2e:	e7bb      	b.n	8002ba8 <__kernel_cos+0xf0>
 8002c30:	be8838d4 	.word	0xbe8838d4
 8002c34:	bda8fae9 	.word	0xbda8fae9
 8002c38:	bdb4b1c4 	.word	0xbdb4b1c4
 8002c3c:	3e21ee9e 	.word	0x3e21ee9e
 8002c40:	809c52ad 	.word	0x809c52ad
 8002c44:	3e927e4f 	.word	0x3e927e4f
 8002c48:	19cb1590 	.word	0x19cb1590
 8002c4c:	3efa01a0 	.word	0x3efa01a0
 8002c50:	16c15177 	.word	0x16c15177
 8002c54:	3f56c16c 	.word	0x3f56c16c
 8002c58:	5555554c 	.word	0x5555554c
 8002c5c:	3fa55555 	.word	0x3fa55555
 8002c60:	3fd33332 	.word	0x3fd33332
 8002c64:	3fe00000 	.word	0x3fe00000
 8002c68:	3ff00000 	.word	0x3ff00000
 8002c6c:	3fe90000 	.word	0x3fe90000
 8002c70:	3fd20000 	.word	0x3fd20000

08002c74 <__kernel_rem_pio2>:
 8002c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8002c7c:	9306      	str	r3, [sp, #24]
 8002c7e:	9101      	str	r1, [sp, #4]
 8002c80:	4bc0      	ldr	r3, [pc, #768]	; (8002f84 <__kernel_rem_pio2+0x310>)
 8002c82:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8002c84:	1ed4      	subs	r4, r2, #3
 8002c86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c8a:	2500      	movs	r5, #0
 8002c8c:	9302      	str	r3, [sp, #8]
 8002c8e:	9b06      	ldr	r3, [sp, #24]
 8002c90:	900a      	str	r0, [sp, #40]	; 0x28
 8002c92:	3b01      	subs	r3, #1
 8002c94:	9308      	str	r3, [sp, #32]
 8002c96:	2318      	movs	r3, #24
 8002c98:	fb94 f4f3 	sdiv	r4, r4, r3
 8002c9c:	f06f 0317 	mvn.w	r3, #23
 8002ca0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8002ca4:	fb04 3303 	mla	r3, r4, r3, r3
 8002ca8:	eb03 0a02 	add.w	sl, r3, r2
 8002cac:	9a08      	ldr	r2, [sp, #32]
 8002cae:	9b02      	ldr	r3, [sp, #8]
 8002cb0:	1aa7      	subs	r7, r4, r2
 8002cb2:	eb03 0802 	add.w	r8, r3, r2
 8002cb6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8002cb8:	2200      	movs	r2, #0
 8002cba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	ae20      	add	r6, sp, #128	; 0x80
 8002cc2:	4545      	cmp	r5, r8
 8002cc4:	dd14      	ble.n	8002cf0 <__kernel_rem_pio2+0x7c>
 8002cc6:	2600      	movs	r6, #0
 8002cc8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8002ccc:	9b02      	ldr	r3, [sp, #8]
 8002cce:	429e      	cmp	r6, r3
 8002cd0:	dc39      	bgt.n	8002d46 <__kernel_rem_pio2+0xd2>
 8002cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cd4:	f04f 0800 	mov.w	r8, #0
 8002cd8:	3b08      	subs	r3, #8
 8002cda:	9304      	str	r3, [sp, #16]
 8002cdc:	9b06      	ldr	r3, [sp, #24]
 8002cde:	f04f 0900 	mov.w	r9, #0
 8002ce2:	199d      	adds	r5, r3, r6
 8002ce4:	ab22      	add	r3, sp, #136	; 0x88
 8002ce6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002cea:	9309      	str	r3, [sp, #36]	; 0x24
 8002cec:	2700      	movs	r7, #0
 8002cee:	e023      	b.n	8002d38 <__kernel_rem_pio2+0xc4>
 8002cf0:	42ef      	cmn	r7, r5
 8002cf2:	d40b      	bmi.n	8002d0c <__kernel_rem_pio2+0x98>
 8002cf4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8002cf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002cfc:	f7fd fb92 	bl	8000424 <__aeabi_i2d>
 8002d00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002d04:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8002d08:	3501      	adds	r5, #1
 8002d0a:	e7da      	b.n	8002cc2 <__kernel_rem_pio2+0x4e>
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	e7f8      	b.n	8002d04 <__kernel_rem_pio2+0x90>
 8002d12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d14:	9d04      	ldr	r5, [sp, #16]
 8002d16:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8002d1a:	9109      	str	r1, [sp, #36]	; 0x24
 8002d1c:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8002d20:	9504      	str	r5, [sp, #16]
 8002d22:	f7fd fbe5 	bl	80004f0 <__aeabi_dmul>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4640      	mov	r0, r8
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	f7fd fa2d 	bl	800018c <__adddf3>
 8002d32:	4680      	mov	r8, r0
 8002d34:	4689      	mov	r9, r1
 8002d36:	3701      	adds	r7, #1
 8002d38:	9b08      	ldr	r3, [sp, #32]
 8002d3a:	429f      	cmp	r7, r3
 8002d3c:	dde9      	ble.n	8002d12 <__kernel_rem_pio2+0x9e>
 8002d3e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8002d42:	3601      	adds	r6, #1
 8002d44:	e7c2      	b.n	8002ccc <__kernel_rem_pio2+0x58>
 8002d46:	9b02      	ldr	r3, [sp, #8]
 8002d48:	aa0e      	add	r2, sp, #56	; 0x38
 8002d4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002d4e:	930d      	str	r3, [sp, #52]	; 0x34
 8002d50:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8002d52:	9f02      	ldr	r7, [sp, #8]
 8002d54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002d58:	930c      	str	r3, [sp, #48]	; 0x30
 8002d5a:	2600      	movs	r6, #0
 8002d5c:	ab9a      	add	r3, sp, #616	; 0x268
 8002d5e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8002d62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002d66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002d6a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8002d6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d72:	9309      	str	r3, [sp, #36]	; 0x24
 8002d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d76:	ab9a      	add	r3, sp, #616	; 0x268
 8002d78:	4413      	add	r3, r2
 8002d7a:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8002d7e:	1bbb      	subs	r3, r7, r6
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	dc70      	bgt.n	8002e66 <__kernel_rem_pio2+0x1f2>
 8002d84:	4652      	mov	r2, sl
 8002d86:	4640      	mov	r0, r8
 8002d88:	4649      	mov	r1, r9
 8002d8a:	f000 fc09 	bl	80035a0 <scalbn>
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002d94:	4604      	mov	r4, r0
 8002d96:	460d      	mov	r5, r1
 8002d98:	f7fd fbaa 	bl	80004f0 <__aeabi_dmul>
 8002d9c:	f000 fb7c 	bl	8003498 <floor>
 8002da0:	2200      	movs	r2, #0
 8002da2:	4b79      	ldr	r3, [pc, #484]	; (8002f88 <__kernel_rem_pio2+0x314>)
 8002da4:	f7fd fba4 	bl	80004f0 <__aeabi_dmul>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4620      	mov	r0, r4
 8002dae:	4629      	mov	r1, r5
 8002db0:	f7fd f9ea 	bl	8000188 <__aeabi_dsub>
 8002db4:	460d      	mov	r5, r1
 8002db6:	4604      	mov	r4, r0
 8002db8:	f7fd fe34 	bl	8000a24 <__aeabi_d2iz>
 8002dbc:	9004      	str	r0, [sp, #16]
 8002dbe:	f7fd fb31 	bl	8000424 <__aeabi_i2d>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	4629      	mov	r1, r5
 8002dca:	f7fd f9dd 	bl	8000188 <__aeabi_dsub>
 8002dce:	f1ba 0f00 	cmp.w	sl, #0
 8002dd2:	4680      	mov	r8, r0
 8002dd4:	4689      	mov	r9, r1
 8002dd6:	dd6b      	ble.n	8002eb0 <__kernel_rem_pio2+0x23c>
 8002dd8:	1e7a      	subs	r2, r7, #1
 8002dda:	ab0e      	add	r3, sp, #56	; 0x38
 8002ddc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002de0:	f1ca 0118 	rsb	r1, sl, #24
 8002de4:	9c04      	ldr	r4, [sp, #16]
 8002de6:	fa40 f301 	asr.w	r3, r0, r1
 8002dea:	441c      	add	r4, r3
 8002dec:	408b      	lsls	r3, r1
 8002dee:	1ac0      	subs	r0, r0, r3
 8002df0:	ab0e      	add	r3, sp, #56	; 0x38
 8002df2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002df6:	f1ca 0317 	rsb	r3, sl, #23
 8002dfa:	9404      	str	r4, [sp, #16]
 8002dfc:	fa40 fb03 	asr.w	fp, r0, r3
 8002e00:	f1bb 0f00 	cmp.w	fp, #0
 8002e04:	dd62      	ble.n	8002ecc <__kernel_rem_pio2+0x258>
 8002e06:	2200      	movs	r2, #0
 8002e08:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002e0c:	4614      	mov	r4, r2
 8002e0e:	9b04      	ldr	r3, [sp, #16]
 8002e10:	3301      	adds	r3, #1
 8002e12:	9304      	str	r3, [sp, #16]
 8002e14:	4297      	cmp	r7, r2
 8002e16:	f300 8088 	bgt.w	8002f2a <__kernel_rem_pio2+0x2b6>
 8002e1a:	f1ba 0f00 	cmp.w	sl, #0
 8002e1e:	dd07      	ble.n	8002e30 <__kernel_rem_pio2+0x1bc>
 8002e20:	f1ba 0f01 	cmp.w	sl, #1
 8002e24:	f000 8095 	beq.w	8002f52 <__kernel_rem_pio2+0x2de>
 8002e28:	f1ba 0f02 	cmp.w	sl, #2
 8002e2c:	f000 809b 	beq.w	8002f66 <__kernel_rem_pio2+0x2f2>
 8002e30:	f1bb 0f02 	cmp.w	fp, #2
 8002e34:	d14a      	bne.n	8002ecc <__kernel_rem_pio2+0x258>
 8002e36:	4642      	mov	r2, r8
 8002e38:	464b      	mov	r3, r9
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	4953      	ldr	r1, [pc, #332]	; (8002f8c <__kernel_rem_pio2+0x318>)
 8002e3e:	f7fd f9a3 	bl	8000188 <__aeabi_dsub>
 8002e42:	4680      	mov	r8, r0
 8002e44:	4689      	mov	r9, r1
 8002e46:	2c00      	cmp	r4, #0
 8002e48:	d040      	beq.n	8002ecc <__kernel_rem_pio2+0x258>
 8002e4a:	4652      	mov	r2, sl
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	494f      	ldr	r1, [pc, #316]	; (8002f8c <__kernel_rem_pio2+0x318>)
 8002e50:	f000 fba6 	bl	80035a0 <scalbn>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4640      	mov	r0, r8
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	f7fd f994 	bl	8000188 <__aeabi_dsub>
 8002e60:	4680      	mov	r8, r0
 8002e62:	4689      	mov	r9, r1
 8002e64:	e032      	b.n	8002ecc <__kernel_rem_pio2+0x258>
 8002e66:	2200      	movs	r2, #0
 8002e68:	4b49      	ldr	r3, [pc, #292]	; (8002f90 <__kernel_rem_pio2+0x31c>)
 8002e6a:	4640      	mov	r0, r8
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	f7fd fb3f 	bl	80004f0 <__aeabi_dmul>
 8002e72:	f7fd fdd7 	bl	8000a24 <__aeabi_d2iz>
 8002e76:	f7fd fad5 	bl	8000424 <__aeabi_i2d>
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	4b45      	ldr	r3, [pc, #276]	; (8002f94 <__kernel_rem_pio2+0x320>)
 8002e7e:	4604      	mov	r4, r0
 8002e80:	460d      	mov	r5, r1
 8002e82:	f7fd fb35 	bl	80004f0 <__aeabi_dmul>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4640      	mov	r0, r8
 8002e8c:	4649      	mov	r1, r9
 8002e8e:	f7fd f97b 	bl	8000188 <__aeabi_dsub>
 8002e92:	f7fd fdc7 	bl	8000a24 <__aeabi_d2iz>
 8002e96:	ab0e      	add	r3, sp, #56	; 0x38
 8002e98:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f7fd f972 	bl	800018c <__adddf3>
 8002ea8:	3601      	adds	r6, #1
 8002eaa:	4680      	mov	r8, r0
 8002eac:	4689      	mov	r9, r1
 8002eae:	e766      	b.n	8002d7e <__kernel_rem_pio2+0x10a>
 8002eb0:	d106      	bne.n	8002ec0 <__kernel_rem_pio2+0x24c>
 8002eb2:	1e7b      	subs	r3, r7, #1
 8002eb4:	aa0e      	add	r2, sp, #56	; 0x38
 8002eb6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002eba:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8002ebe:	e79f      	b.n	8002e00 <__kernel_rem_pio2+0x18c>
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	4b35      	ldr	r3, [pc, #212]	; (8002f98 <__kernel_rem_pio2+0x324>)
 8002ec4:	f7fd fd9a 	bl	80009fc <__aeabi_dcmpge>
 8002ec8:	bb60      	cbnz	r0, 8002f24 <__kernel_rem_pio2+0x2b0>
 8002eca:	4683      	mov	fp, r0
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2300      	movs	r3, #0
 8002ed0:	4640      	mov	r0, r8
 8002ed2:	4649      	mov	r1, r9
 8002ed4:	f7fd fd74 	bl	80009c0 <__aeabi_dcmpeq>
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	f000 80c4 	beq.w	8003066 <__kernel_rem_pio2+0x3f2>
 8002ede:	1e7c      	subs	r4, r7, #1
 8002ee0:	4623      	mov	r3, r4
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	9902      	ldr	r1, [sp, #8]
 8002ee6:	428b      	cmp	r3, r1
 8002ee8:	da44      	bge.n	8002f74 <__kernel_rem_pio2+0x300>
 8002eea:	2a00      	cmp	r2, #0
 8002eec:	f040 8088 	bne.w	8003000 <__kernel_rem_pio2+0x38c>
 8002ef0:	2401      	movs	r4, #1
 8002ef2:	f06f 0203 	mvn.w	r2, #3
 8002ef6:	fb02 f304 	mul.w	r3, r2, r4
 8002efa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002efc:	58cb      	ldr	r3, [r1, r3]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d03e      	beq.n	8002f80 <__kernel_rem_pio2+0x30c>
 8002f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f04:	aa9a      	add	r2, sp, #616	; 0x268
 8002f06:	4413      	add	r3, r2
 8002f08:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8002f0c:	9b06      	ldr	r3, [sp, #24]
 8002f0e:	1c7e      	adds	r6, r7, #1
 8002f10:	19dd      	adds	r5, r3, r7
 8002f12:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8002f16:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 8002f1a:	443c      	add	r4, r7
 8002f1c:	42a6      	cmp	r6, r4
 8002f1e:	dd3d      	ble.n	8002f9c <__kernel_rem_pio2+0x328>
 8002f20:	4627      	mov	r7, r4
 8002f22:	e71a      	b.n	8002d5a <__kernel_rem_pio2+0xe6>
 8002f24:	f04f 0b02 	mov.w	fp, #2
 8002f28:	e76d      	b.n	8002e06 <__kernel_rem_pio2+0x192>
 8002f2a:	ab0e      	add	r3, sp, #56	; 0x38
 8002f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f30:	b94c      	cbnz	r4, 8002f46 <__kernel_rem_pio2+0x2d2>
 8002f32:	b12b      	cbz	r3, 8002f40 <__kernel_rem_pio2+0x2cc>
 8002f34:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8002f38:	a80e      	add	r0, sp, #56	; 0x38
 8002f3a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8002f3e:	2301      	movs	r3, #1
 8002f40:	3201      	adds	r2, #1
 8002f42:	461c      	mov	r4, r3
 8002f44:	e766      	b.n	8002e14 <__kernel_rem_pio2+0x1a0>
 8002f46:	1acb      	subs	r3, r1, r3
 8002f48:	a80e      	add	r0, sp, #56	; 0x38
 8002f4a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8002f4e:	4623      	mov	r3, r4
 8002f50:	e7f6      	b.n	8002f40 <__kernel_rem_pio2+0x2cc>
 8002f52:	1e7a      	subs	r2, r7, #1
 8002f54:	ab0e      	add	r3, sp, #56	; 0x38
 8002f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f5a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002f5e:	a90e      	add	r1, sp, #56	; 0x38
 8002f60:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8002f64:	e764      	b.n	8002e30 <__kernel_rem_pio2+0x1bc>
 8002f66:	1e7a      	subs	r2, r7, #1
 8002f68:	ab0e      	add	r3, sp, #56	; 0x38
 8002f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f6e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002f72:	e7f4      	b.n	8002f5e <__kernel_rem_pio2+0x2ea>
 8002f74:	a90e      	add	r1, sp, #56	; 0x38
 8002f76:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	e7b1      	b.n	8002ee4 <__kernel_rem_pio2+0x270>
 8002f80:	3401      	adds	r4, #1
 8002f82:	e7b8      	b.n	8002ef6 <__kernel_rem_pio2+0x282>
 8002f84:	080038b0 	.word	0x080038b0
 8002f88:	40200000 	.word	0x40200000
 8002f8c:	3ff00000 	.word	0x3ff00000
 8002f90:	3e700000 	.word	0x3e700000
 8002f94:	41700000 	.word	0x41700000
 8002f98:	3fe00000 	.word	0x3fe00000
 8002f9c:	f105 0308 	add.w	r3, r5, #8
 8002fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fa4:	2700      	movs	r7, #0
 8002fa6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8002faa:	f7fd fa3b 	bl	8000424 <__aeabi_i2d>
 8002fae:	f04f 0800 	mov.w	r8, #0
 8002fb2:	f04f 0900 	mov.w	r9, #0
 8002fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fb8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8002fbc:	3b08      	subs	r3, #8
 8002fbe:	9304      	str	r3, [sp, #16]
 8002fc0:	f105 0310 	add.w	r3, r5, #16
 8002fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8002fc6:	9b08      	ldr	r3, [sp, #32]
 8002fc8:	429f      	cmp	r7, r3
 8002fca:	dd04      	ble.n	8002fd6 <__kernel_rem_pio2+0x362>
 8002fcc:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8002fd0:	3601      	adds	r6, #1
 8002fd2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002fd4:	e7a2      	b.n	8002f1c <__kernel_rem_pio2+0x2a8>
 8002fd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002fd8:	9d04      	ldr	r5, [sp, #16]
 8002fda:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8002fde:	9109      	str	r1, [sp, #36]	; 0x24
 8002fe0:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8002fe4:	9504      	str	r5, [sp, #16]
 8002fe6:	f7fd fa83 	bl	80004f0 <__aeabi_dmul>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4640      	mov	r0, r8
 8002ff0:	4649      	mov	r1, r9
 8002ff2:	f7fd f8cb 	bl	800018c <__adddf3>
 8002ff6:	3701      	adds	r7, #1
 8002ff8:	4680      	mov	r8, r0
 8002ffa:	4689      	mov	r9, r1
 8002ffc:	e7e3      	b.n	8002fc6 <__kernel_rem_pio2+0x352>
 8002ffe:	3c01      	subs	r4, #1
 8003000:	ab0e      	add	r3, sp, #56	; 0x38
 8003002:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003006:	f1aa 0a18 	sub.w	sl, sl, #24
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f7      	beq.n	8002ffe <__kernel_rem_pio2+0x38a>
 800300e:	4652      	mov	r2, sl
 8003010:	2000      	movs	r0, #0
 8003012:	49b5      	ldr	r1, [pc, #724]	; (80032e8 <__kernel_rem_pio2+0x674>)
 8003014:	f000 fac4 	bl	80035a0 <scalbn>
 8003018:	4625      	mov	r5, r4
 800301a:	4606      	mov	r6, r0
 800301c:	460f      	mov	r7, r1
 800301e:	f04f 0900 	mov.w	r9, #0
 8003022:	00e3      	lsls	r3, r4, #3
 8003024:	aa9a      	add	r2, sp, #616	; 0x268
 8003026:	eb02 0803 	add.w	r8, r2, r3
 800302a:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 80032f0 <__kernel_rem_pio2+0x67c>
 800302e:	9308      	str	r3, [sp, #32]
 8003030:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8003034:	2d00      	cmp	r5, #0
 8003036:	da4c      	bge.n	80030d2 <__kernel_rem_pio2+0x45e>
 8003038:	2500      	movs	r5, #0
 800303a:	f104 5800 	add.w	r8, r4, #536870912	; 0x20000000
 800303e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8003042:	f108 38ff 	add.w	r8, r8, #4294967295
 8003046:	1b63      	subs	r3, r4, r5
 8003048:	2b00      	cmp	r3, #0
 800304a:	db71      	blt.n	8003130 <__kernel_rem_pio2+0x4bc>
 800304c:	ab72      	add	r3, sp, #456	; 0x1c8
 800304e:	eba8 0705 	sub.w	r7, r8, r5
 8003052:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003056:	2200      	movs	r2, #0
 8003058:	2300      	movs	r3, #0
 800305a:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80032f4 <__kernel_rem_pio2+0x680>
 800305e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003062:	2600      	movs	r6, #0
 8003064:	e059      	b.n	800311a <__kernel_rem_pio2+0x4a6>
 8003066:	f1ca 0200 	rsb	r2, sl, #0
 800306a:	4640      	mov	r0, r8
 800306c:	4649      	mov	r1, r9
 800306e:	f000 fa97 	bl	80035a0 <scalbn>
 8003072:	2200      	movs	r2, #0
 8003074:	4b9d      	ldr	r3, [pc, #628]	; (80032ec <__kernel_rem_pio2+0x678>)
 8003076:	4604      	mov	r4, r0
 8003078:	460d      	mov	r5, r1
 800307a:	f7fd fcbf 	bl	80009fc <__aeabi_dcmpge>
 800307e:	b1f8      	cbz	r0, 80030c0 <__kernel_rem_pio2+0x44c>
 8003080:	2200      	movs	r2, #0
 8003082:	4b9b      	ldr	r3, [pc, #620]	; (80032f0 <__kernel_rem_pio2+0x67c>)
 8003084:	4620      	mov	r0, r4
 8003086:	4629      	mov	r1, r5
 8003088:	f7fd fa32 	bl	80004f0 <__aeabi_dmul>
 800308c:	f7fd fcca 	bl	8000a24 <__aeabi_d2iz>
 8003090:	4606      	mov	r6, r0
 8003092:	f7fd f9c7 	bl	8000424 <__aeabi_i2d>
 8003096:	2200      	movs	r2, #0
 8003098:	4b94      	ldr	r3, [pc, #592]	; (80032ec <__kernel_rem_pio2+0x678>)
 800309a:	f7fd fa29 	bl	80004f0 <__aeabi_dmul>
 800309e:	460b      	mov	r3, r1
 80030a0:	4602      	mov	r2, r0
 80030a2:	4629      	mov	r1, r5
 80030a4:	4620      	mov	r0, r4
 80030a6:	f7fd f86f 	bl	8000188 <__aeabi_dsub>
 80030aa:	f7fd fcbb 	bl	8000a24 <__aeabi_d2iz>
 80030ae:	1c7c      	adds	r4, r7, #1
 80030b0:	ab0e      	add	r3, sp, #56	; 0x38
 80030b2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80030b6:	f10a 0a18 	add.w	sl, sl, #24
 80030ba:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80030be:	e7a6      	b.n	800300e <__kernel_rem_pio2+0x39a>
 80030c0:	4620      	mov	r0, r4
 80030c2:	4629      	mov	r1, r5
 80030c4:	f7fd fcae 	bl	8000a24 <__aeabi_d2iz>
 80030c8:	ab0e      	add	r3, sp, #56	; 0x38
 80030ca:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80030ce:	463c      	mov	r4, r7
 80030d0:	e79d      	b.n	800300e <__kernel_rem_pio2+0x39a>
 80030d2:	ab0e      	add	r3, sp, #56	; 0x38
 80030d4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80030d8:	f7fd f9a4 	bl	8000424 <__aeabi_i2d>
 80030dc:	4632      	mov	r2, r6
 80030de:	463b      	mov	r3, r7
 80030e0:	f7fd fa06 	bl	80004f0 <__aeabi_dmul>
 80030e4:	464a      	mov	r2, r9
 80030e6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80030ea:	4653      	mov	r3, sl
 80030ec:	4630      	mov	r0, r6
 80030ee:	4639      	mov	r1, r7
 80030f0:	f7fd f9fe 	bl	80004f0 <__aeabi_dmul>
 80030f4:	3d01      	subs	r5, #1
 80030f6:	4606      	mov	r6, r0
 80030f8:	460f      	mov	r7, r1
 80030fa:	e79b      	b.n	8003034 <__kernel_rem_pio2+0x3c0>
 80030fc:	e9f7 2302 	ldrd	r2, r3, [r7, #8]!
 8003100:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8003104:	f7fd f9f4 	bl	80004f0 <__aeabi_dmul>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003110:	f7fd f83c 	bl	800018c <__adddf3>
 8003114:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003118:	3601      	adds	r6, #1
 800311a:	9b02      	ldr	r3, [sp, #8]
 800311c:	429e      	cmp	r6, r3
 800311e:	dc01      	bgt.n	8003124 <__kernel_rem_pio2+0x4b0>
 8003120:	42ae      	cmp	r6, r5
 8003122:	ddeb      	ble.n	80030fc <__kernel_rem_pio2+0x488>
 8003124:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003128:	3501      	adds	r5, #1
 800312a:	e9ea 2302 	strd	r2, r3, [sl, #8]!
 800312e:	e78a      	b.n	8003046 <__kernel_rem_pio2+0x3d2>
 8003130:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003132:	2b03      	cmp	r3, #3
 8003134:	d86c      	bhi.n	8003210 <__kernel_rem_pio2+0x59c>
 8003136:	e8df f003 	tbb	[pc, r3]
 800313a:	2c58      	.short	0x2c58
 800313c:	022c      	.short	0x022c
 800313e:	9a08      	ldr	r2, [sp, #32]
 8003140:	ab4a      	add	r3, sp, #296	; 0x128
 8003142:	189d      	adds	r5, r3, r2
 8003144:	46aa      	mov	sl, r5
 8003146:	4626      	mov	r6, r4
 8003148:	2e00      	cmp	r6, #0
 800314a:	f300 8088 	bgt.w	800325e <__kernel_rem_pio2+0x5ea>
 800314e:	46a2      	mov	sl, r4
 8003150:	f1ba 0f01 	cmp.w	sl, #1
 8003154:	f300 80a1 	bgt.w	800329a <__kernel_rem_pio2+0x626>
 8003158:	2700      	movs	r7, #0
 800315a:	463e      	mov	r6, r7
 800315c:	9d08      	ldr	r5, [sp, #32]
 800315e:	ab4a      	add	r3, sp, #296	; 0x128
 8003160:	3508      	adds	r5, #8
 8003162:	441d      	add	r5, r3
 8003164:	2c01      	cmp	r4, #1
 8003166:	f300 80b5 	bgt.w	80032d4 <__kernel_rem_pio2+0x660>
 800316a:	f1bb 0f00 	cmp.w	fp, #0
 800316e:	f040 80c3 	bne.w	80032f8 <__kernel_rem_pio2+0x684>
 8003172:	9901      	ldr	r1, [sp, #4]
 8003174:	ab4a      	add	r3, sp, #296	; 0x128
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	e9c1 2300 	strd	r2, r3, [r1]
 800317e:	ab4c      	add	r3, sp, #304	; 0x130
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003188:	463a      	mov	r2, r7
 800318a:	4633      	mov	r3, r6
 800318c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003190:	e03e      	b.n	8003210 <__kernel_rem_pio2+0x59c>
 8003192:	f04f 0e00 	mov.w	lr, #0
 8003196:	4626      	mov	r6, r4
 8003198:	4677      	mov	r7, lr
 800319a:	9d08      	ldr	r5, [sp, #32]
 800319c:	ab4a      	add	r3, sp, #296	; 0x128
 800319e:	3508      	adds	r5, #8
 80031a0:	441d      	add	r5, r3
 80031a2:	2e00      	cmp	r6, #0
 80031a4:	da45      	bge.n	8003232 <__kernel_rem_pio2+0x5be>
 80031a6:	f1bb 0f00 	cmp.w	fp, #0
 80031aa:	d04c      	beq.n	8003246 <__kernel_rem_pio2+0x5d2>
 80031ac:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 80031b0:	4672      	mov	r2, lr
 80031b2:	460b      	mov	r3, r1
 80031b4:	9901      	ldr	r1, [sp, #4]
 80031b6:	2601      	movs	r6, #1
 80031b8:	e9c1 2300 	strd	r2, r3, [r1]
 80031bc:	a94a      	add	r1, sp, #296	; 0x128
 80031be:	4672      	mov	r2, lr
 80031c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031c4:	463b      	mov	r3, r7
 80031c6:	f7fc ffdf 	bl	8000188 <__aeabi_dsub>
 80031ca:	4686      	mov	lr, r0
 80031cc:	460f      	mov	r7, r1
 80031ce:	ad4a      	add	r5, sp, #296	; 0x128
 80031d0:	42b4      	cmp	r4, r6
 80031d2:	da3a      	bge.n	800324a <__kernel_rem_pio2+0x5d6>
 80031d4:	f1bb 0f00 	cmp.w	fp, #0
 80031d8:	d001      	beq.n	80031de <__kernel_rem_pio2+0x56a>
 80031da:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80031de:	4672      	mov	r2, lr
 80031e0:	463b      	mov	r3, r7
 80031e2:	9901      	ldr	r1, [sp, #4]
 80031e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80031e8:	e012      	b.n	8003210 <__kernel_rem_pio2+0x59c>
 80031ea:	2700      	movs	r7, #0
 80031ec:	463d      	mov	r5, r7
 80031ee:	9b08      	ldr	r3, [sp, #32]
 80031f0:	aa9a      	add	r2, sp, #616	; 0x268
 80031f2:	4413      	add	r3, r2
 80031f4:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 80031f8:	2c00      	cmp	r4, #0
 80031fa:	da10      	bge.n	800321e <__kernel_rem_pio2+0x5aa>
 80031fc:	f1bb 0f00 	cmp.w	fp, #0
 8003200:	d001      	beq.n	8003206 <__kernel_rem_pio2+0x592>
 8003202:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8003206:	463a      	mov	r2, r7
 8003208:	462b      	mov	r3, r5
 800320a:	9901      	ldr	r1, [sp, #4]
 800320c:	e9c1 2300 	strd	r2, r3, [r1]
 8003210:	9b04      	ldr	r3, [sp, #16]
 8003212:	f003 0007 	and.w	r0, r3, #7
 8003216:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800321a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800321e:	4638      	mov	r0, r7
 8003220:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8003224:	4629      	mov	r1, r5
 8003226:	f7fc ffb1 	bl	800018c <__adddf3>
 800322a:	3c01      	subs	r4, #1
 800322c:	4607      	mov	r7, r0
 800322e:	460d      	mov	r5, r1
 8003230:	e7e2      	b.n	80031f8 <__kernel_rem_pio2+0x584>
 8003232:	4670      	mov	r0, lr
 8003234:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003238:	4639      	mov	r1, r7
 800323a:	f7fc ffa7 	bl	800018c <__adddf3>
 800323e:	3e01      	subs	r6, #1
 8003240:	4686      	mov	lr, r0
 8003242:	460f      	mov	r7, r1
 8003244:	e7ad      	b.n	80031a2 <__kernel_rem_pio2+0x52e>
 8003246:	4639      	mov	r1, r7
 8003248:	e7b2      	b.n	80031b0 <__kernel_rem_pio2+0x53c>
 800324a:	4670      	mov	r0, lr
 800324c:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8003250:	4639      	mov	r1, r7
 8003252:	f7fc ff9b 	bl	800018c <__adddf3>
 8003256:	3601      	adds	r6, #1
 8003258:	4686      	mov	lr, r0
 800325a:	460f      	mov	r7, r1
 800325c:	e7b8      	b.n	80031d0 <__kernel_rem_pio2+0x55c>
 800325e:	e9da 2300 	ldrd	r2, r3, [sl]
 8003262:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8003266:	4640      	mov	r0, r8
 8003268:	4649      	mov	r1, r9
 800326a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800326e:	f7fc ff8d 	bl	800018c <__adddf3>
 8003272:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4640      	mov	r0, r8
 800327c:	4649      	mov	r1, r9
 800327e:	f7fc ff83 	bl	8000188 <__aeabi_dsub>
 8003282:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003286:	f7fc ff81 	bl	800018c <__adddf3>
 800328a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800328e:	e9ca 0100 	strd	r0, r1, [sl]
 8003292:	3e01      	subs	r6, #1
 8003294:	e96a 2302 	strd	r2, r3, [sl, #-8]!
 8003298:	e756      	b.n	8003148 <__kernel_rem_pio2+0x4d4>
 800329a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800329e:	e955 6702 	ldrd	r6, r7, [r5, #-8]
 80032a2:	4630      	mov	r0, r6
 80032a4:	4639      	mov	r1, r7
 80032a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032aa:	f7fc ff6f 	bl	800018c <__adddf3>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4680      	mov	r8, r0
 80032b4:	4689      	mov	r9, r1
 80032b6:	4630      	mov	r0, r6
 80032b8:	4639      	mov	r1, r7
 80032ba:	f7fc ff65 	bl	8000188 <__aeabi_dsub>
 80032be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80032c2:	f7fc ff63 	bl	800018c <__adddf3>
 80032c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80032ca:	e9c5 0100 	strd	r0, r1, [r5]
 80032ce:	e965 8902 	strd	r8, r9, [r5, #-8]!
 80032d2:	e73d      	b.n	8003150 <__kernel_rem_pio2+0x4dc>
 80032d4:	4638      	mov	r0, r7
 80032d6:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80032da:	4631      	mov	r1, r6
 80032dc:	f7fc ff56 	bl	800018c <__adddf3>
 80032e0:	3c01      	subs	r4, #1
 80032e2:	4607      	mov	r7, r0
 80032e4:	460e      	mov	r6, r1
 80032e6:	e73d      	b.n	8003164 <__kernel_rem_pio2+0x4f0>
 80032e8:	3ff00000 	.word	0x3ff00000
 80032ec:	41700000 	.word	0x41700000
 80032f0:	3e700000 	.word	0x3e700000
 80032f4:	08003868 	.word	0x08003868
 80032f8:	9a01      	ldr	r2, [sp, #4]
 80032fa:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 80032fc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8003304:	6117      	str	r7, [r2, #16]
 8003306:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800330a:	6053      	str	r3, [r2, #4]
 800330c:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 800330e:	6156      	str	r6, [r2, #20]
 8003310:	6093      	str	r3, [r2, #8]
 8003312:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8003314:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003318:	60d3      	str	r3, [r2, #12]
 800331a:	e779      	b.n	8003210 <__kernel_rem_pio2+0x59c>
 800331c:	0000      	movs	r0, r0
	...

08003320 <__kernel_sin>:
 8003320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	e9cd 2300 	strd	r2, r3, [sp]
 800332a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800332e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003332:	4682      	mov	sl, r0
 8003334:	460c      	mov	r4, r1
 8003336:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003338:	da03      	bge.n	8003342 <__kernel_sin+0x22>
 800333a:	f7fd fb73 	bl	8000a24 <__aeabi_d2iz>
 800333e:	2800      	cmp	r0, #0
 8003340:	d050      	beq.n	80033e4 <__kernel_sin+0xc4>
 8003342:	4652      	mov	r2, sl
 8003344:	4623      	mov	r3, r4
 8003346:	4650      	mov	r0, sl
 8003348:	4621      	mov	r1, r4
 800334a:	f7fd f8d1 	bl	80004f0 <__aeabi_dmul>
 800334e:	4606      	mov	r6, r0
 8003350:	460f      	mov	r7, r1
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4650      	mov	r0, sl
 8003358:	4621      	mov	r1, r4
 800335a:	f7fd f8c9 	bl	80004f0 <__aeabi_dmul>
 800335e:	a33e      	add	r3, pc, #248	; (adr r3, 8003458 <__kernel_sin+0x138>)
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	4680      	mov	r8, r0
 8003366:	4689      	mov	r9, r1
 8003368:	4630      	mov	r0, r6
 800336a:	4639      	mov	r1, r7
 800336c:	f7fd f8c0 	bl	80004f0 <__aeabi_dmul>
 8003370:	a33b      	add	r3, pc, #236	; (adr r3, 8003460 <__kernel_sin+0x140>)
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	f7fc ff07 	bl	8000188 <__aeabi_dsub>
 800337a:	4632      	mov	r2, r6
 800337c:	463b      	mov	r3, r7
 800337e:	f7fd f8b7 	bl	80004f0 <__aeabi_dmul>
 8003382:	a339      	add	r3, pc, #228	; (adr r3, 8003468 <__kernel_sin+0x148>)
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	f7fc ff00 	bl	800018c <__adddf3>
 800338c:	4632      	mov	r2, r6
 800338e:	463b      	mov	r3, r7
 8003390:	f7fd f8ae 	bl	80004f0 <__aeabi_dmul>
 8003394:	a336      	add	r3, pc, #216	; (adr r3, 8003470 <__kernel_sin+0x150>)
 8003396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339a:	f7fc fef5 	bl	8000188 <__aeabi_dsub>
 800339e:	4632      	mov	r2, r6
 80033a0:	463b      	mov	r3, r7
 80033a2:	f7fd f8a5 	bl	80004f0 <__aeabi_dmul>
 80033a6:	a334      	add	r3, pc, #208	; (adr r3, 8003478 <__kernel_sin+0x158>)
 80033a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ac:	f7fc feee 	bl	800018c <__adddf3>
 80033b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033b4:	b9dd      	cbnz	r5, 80033ee <__kernel_sin+0xce>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4630      	mov	r0, r6
 80033bc:	4639      	mov	r1, r7
 80033be:	f7fd f897 	bl	80004f0 <__aeabi_dmul>
 80033c2:	a32f      	add	r3, pc, #188	; (adr r3, 8003480 <__kernel_sin+0x160>)
 80033c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c8:	f7fc fede 	bl	8000188 <__aeabi_dsub>
 80033cc:	4642      	mov	r2, r8
 80033ce:	464b      	mov	r3, r9
 80033d0:	f7fd f88e 	bl	80004f0 <__aeabi_dmul>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4650      	mov	r0, sl
 80033da:	4621      	mov	r1, r4
 80033dc:	f7fc fed6 	bl	800018c <__adddf3>
 80033e0:	4682      	mov	sl, r0
 80033e2:	460c      	mov	r4, r1
 80033e4:	4650      	mov	r0, sl
 80033e6:	4621      	mov	r1, r4
 80033e8:	b006      	add	sp, #24
 80033ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ee:	2200      	movs	r2, #0
 80033f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033f4:	4b24      	ldr	r3, [pc, #144]	; (8003488 <__kernel_sin+0x168>)
 80033f6:	f7fd f87b 	bl	80004f0 <__aeabi_dmul>
 80033fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80033fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003402:	4640      	mov	r0, r8
 8003404:	4649      	mov	r1, r9
 8003406:	f7fd f873 	bl	80004f0 <__aeabi_dmul>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003412:	f7fc feb9 	bl	8000188 <__aeabi_dsub>
 8003416:	4632      	mov	r2, r6
 8003418:	463b      	mov	r3, r7
 800341a:	f7fd f869 	bl	80004f0 <__aeabi_dmul>
 800341e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003422:	f7fc feb1 	bl	8000188 <__aeabi_dsub>
 8003426:	a316      	add	r3, pc, #88	; (adr r3, 8003480 <__kernel_sin+0x160>)
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	4606      	mov	r6, r0
 800342e:	460f      	mov	r7, r1
 8003430:	4640      	mov	r0, r8
 8003432:	4649      	mov	r1, r9
 8003434:	f7fd f85c 	bl	80004f0 <__aeabi_dmul>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4630      	mov	r0, r6
 800343e:	4639      	mov	r1, r7
 8003440:	f7fc fea4 	bl	800018c <__adddf3>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4650      	mov	r0, sl
 800344a:	4621      	mov	r1, r4
 800344c:	f7fc fe9c 	bl	8000188 <__aeabi_dsub>
 8003450:	e7c6      	b.n	80033e0 <__kernel_sin+0xc0>
 8003452:	bf00      	nop
 8003454:	f3af 8000 	nop.w
 8003458:	5acfd57c 	.word	0x5acfd57c
 800345c:	3de5d93a 	.word	0x3de5d93a
 8003460:	8a2b9ceb 	.word	0x8a2b9ceb
 8003464:	3e5ae5e6 	.word	0x3e5ae5e6
 8003468:	57b1fe7d 	.word	0x57b1fe7d
 800346c:	3ec71de3 	.word	0x3ec71de3
 8003470:	19c161d5 	.word	0x19c161d5
 8003474:	3f2a01a0 	.word	0x3f2a01a0
 8003478:	1110f8a6 	.word	0x1110f8a6
 800347c:	3f811111 	.word	0x3f811111
 8003480:	55555549 	.word	0x55555549
 8003484:	3fc55555 	.word	0x3fc55555
 8003488:	3fe00000 	.word	0x3fe00000

0800348c <fabs>:
 800348c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003490:	4770      	bx	lr
 8003492:	0000      	movs	r0, r0
 8003494:	0000      	movs	r0, r0
	...

08003498 <floor>:
 8003498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800349c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80034a0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80034a4:	2e13      	cmp	r6, #19
 80034a6:	4607      	mov	r7, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	460c      	mov	r4, r1
 80034ac:	4605      	mov	r5, r0
 80034ae:	dc35      	bgt.n	800351c <floor+0x84>
 80034b0:	2e00      	cmp	r6, #0
 80034b2:	da16      	bge.n	80034e2 <floor+0x4a>
 80034b4:	a336      	add	r3, pc, #216	; (adr r3, 8003590 <floor+0xf8>)
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f7fc fe67 	bl	800018c <__adddf3>
 80034be:	2200      	movs	r2, #0
 80034c0:	2300      	movs	r3, #0
 80034c2:	f7fd faa5 	bl	8000a10 <__aeabi_dcmpgt>
 80034c6:	b148      	cbz	r0, 80034dc <floor+0x44>
 80034c8:	2c00      	cmp	r4, #0
 80034ca:	da5c      	bge.n	8003586 <floor+0xee>
 80034cc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80034d0:	433b      	orrs	r3, r7
 80034d2:	4b31      	ldr	r3, [pc, #196]	; (8003598 <floor+0x100>)
 80034d4:	f04f 0500 	mov.w	r5, #0
 80034d8:	bf18      	it	ne
 80034da:	461c      	movne	r4, r3
 80034dc:	4623      	mov	r3, r4
 80034de:	462f      	mov	r7, r5
 80034e0:	e027      	b.n	8003532 <floor+0x9a>
 80034e2:	4a2e      	ldr	r2, [pc, #184]	; (800359c <floor+0x104>)
 80034e4:	fa42 f806 	asr.w	r8, r2, r6
 80034e8:	ea01 0208 	and.w	r2, r1, r8
 80034ec:	4302      	orrs	r2, r0
 80034ee:	d020      	beq.n	8003532 <floor+0x9a>
 80034f0:	a327      	add	r3, pc, #156	; (adr r3, 8003590 <floor+0xf8>)
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	f7fc fe49 	bl	800018c <__adddf3>
 80034fa:	2200      	movs	r2, #0
 80034fc:	2300      	movs	r3, #0
 80034fe:	f7fd fa87 	bl	8000a10 <__aeabi_dcmpgt>
 8003502:	2800      	cmp	r0, #0
 8003504:	d0ea      	beq.n	80034dc <floor+0x44>
 8003506:	2c00      	cmp	r4, #0
 8003508:	bfbe      	ittt	lt
 800350a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800350e:	fa43 f606 	asrlt.w	r6, r3, r6
 8003512:	19a4      	addlt	r4, r4, r6
 8003514:	ea24 0408 	bic.w	r4, r4, r8
 8003518:	2500      	movs	r5, #0
 800351a:	e7df      	b.n	80034dc <floor+0x44>
 800351c:	2e33      	cmp	r6, #51	; 0x33
 800351e:	dd0c      	ble.n	800353a <floor+0xa2>
 8003520:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003524:	d105      	bne.n	8003532 <floor+0x9a>
 8003526:	460b      	mov	r3, r1
 8003528:	4602      	mov	r2, r0
 800352a:	f7fc fe2f 	bl	800018c <__adddf3>
 800352e:	4607      	mov	r7, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4638      	mov	r0, r7
 8003534:	4619      	mov	r1, r3
 8003536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800353a:	f04f 32ff 	mov.w	r2, #4294967295
 800353e:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8003542:	fa22 f808 	lsr.w	r8, r2, r8
 8003546:	ea10 0f08 	tst.w	r0, r8
 800354a:	d0f2      	beq.n	8003532 <floor+0x9a>
 800354c:	a310      	add	r3, pc, #64	; (adr r3, 8003590 <floor+0xf8>)
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	f7fc fe1b 	bl	800018c <__adddf3>
 8003556:	2200      	movs	r2, #0
 8003558:	2300      	movs	r3, #0
 800355a:	f7fd fa59 	bl	8000a10 <__aeabi_dcmpgt>
 800355e:	2800      	cmp	r0, #0
 8003560:	d0bc      	beq.n	80034dc <floor+0x44>
 8003562:	2c00      	cmp	r4, #0
 8003564:	da02      	bge.n	800356c <floor+0xd4>
 8003566:	2e14      	cmp	r6, #20
 8003568:	d103      	bne.n	8003572 <floor+0xda>
 800356a:	3401      	adds	r4, #1
 800356c:	ea25 0508 	bic.w	r5, r5, r8
 8003570:	e7b4      	b.n	80034dc <floor+0x44>
 8003572:	2301      	movs	r3, #1
 8003574:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003578:	fa03 f606 	lsl.w	r6, r3, r6
 800357c:	4435      	add	r5, r6
 800357e:	42af      	cmp	r7, r5
 8003580:	bf88      	it	hi
 8003582:	18e4      	addhi	r4, r4, r3
 8003584:	e7f2      	b.n	800356c <floor+0xd4>
 8003586:	2500      	movs	r5, #0
 8003588:	462c      	mov	r4, r5
 800358a:	e7a7      	b.n	80034dc <floor+0x44>
 800358c:	f3af 8000 	nop.w
 8003590:	8800759c 	.word	0x8800759c
 8003594:	7e37e43c 	.word	0x7e37e43c
 8003598:	bff00000 	.word	0xbff00000
 800359c:	000fffff 	.word	0x000fffff

080035a0 <scalbn>:
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a2:	4616      	mov	r6, r2
 80035a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80035a8:	4604      	mov	r4, r0
 80035aa:	460d      	mov	r5, r1
 80035ac:	460b      	mov	r3, r1
 80035ae:	b98a      	cbnz	r2, 80035d4 <scalbn+0x34>
 80035b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80035b4:	4303      	orrs	r3, r0
 80035b6:	d035      	beq.n	8003624 <scalbn+0x84>
 80035b8:	2200      	movs	r2, #0
 80035ba:	4b2d      	ldr	r3, [pc, #180]	; (8003670 <scalbn+0xd0>)
 80035bc:	f7fc ff98 	bl	80004f0 <__aeabi_dmul>
 80035c0:	4a2c      	ldr	r2, [pc, #176]	; (8003674 <scalbn+0xd4>)
 80035c2:	4604      	mov	r4, r0
 80035c4:	4296      	cmp	r6, r2
 80035c6:	460d      	mov	r5, r1
 80035c8:	460b      	mov	r3, r1
 80035ca:	da0e      	bge.n	80035ea <scalbn+0x4a>
 80035cc:	a324      	add	r3, pc, #144	; (adr r3, 8003660 <scalbn+0xc0>)
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	e01c      	b.n	800360e <scalbn+0x6e>
 80035d4:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80035d8:	42ba      	cmp	r2, r7
 80035da:	d109      	bne.n	80035f0 <scalbn+0x50>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	f7fc fdd4 	bl	800018c <__adddf3>
 80035e4:	4604      	mov	r4, r0
 80035e6:	460d      	mov	r5, r1
 80035e8:	e01c      	b.n	8003624 <scalbn+0x84>
 80035ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80035ee:	3a36      	subs	r2, #54	; 0x36
 80035f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80035f4:	4432      	add	r2, r6
 80035f6:	428a      	cmp	r2, r1
 80035f8:	dd0c      	ble.n	8003614 <scalbn+0x74>
 80035fa:	4622      	mov	r2, r4
 80035fc:	462b      	mov	r3, r5
 80035fe:	a11a      	add	r1, pc, #104	; (adr r1, 8003668 <scalbn+0xc8>)
 8003600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003604:	f000 f83a 	bl	800367c <copysign>
 8003608:	a317      	add	r3, pc, #92	; (adr r3, 8003668 <scalbn+0xc8>)
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	f7fc ff6f 	bl	80004f0 <__aeabi_dmul>
 8003612:	e7e7      	b.n	80035e4 <scalbn+0x44>
 8003614:	2a00      	cmp	r2, #0
 8003616:	dd08      	ble.n	800362a <scalbn+0x8a>
 8003618:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800361c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003620:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003624:	4620      	mov	r0, r4
 8003626:	4629      	mov	r1, r5
 8003628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800362a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800362e:	da0b      	bge.n	8003648 <scalbn+0xa8>
 8003630:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003634:	429e      	cmp	r6, r3
 8003636:	4622      	mov	r2, r4
 8003638:	462b      	mov	r3, r5
 800363a:	dce0      	bgt.n	80035fe <scalbn+0x5e>
 800363c:	a108      	add	r1, pc, #32	; (adr r1, 8003660 <scalbn+0xc0>)
 800363e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003642:	f000 f81b 	bl	800367c <copysign>
 8003646:	e7c1      	b.n	80035cc <scalbn+0x2c>
 8003648:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800364c:	3236      	adds	r2, #54	; 0x36
 800364e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003652:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003656:	4620      	mov	r0, r4
 8003658:	4629      	mov	r1, r5
 800365a:	2200      	movs	r2, #0
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <scalbn+0xd8>)
 800365e:	e7d6      	b.n	800360e <scalbn+0x6e>
 8003660:	c2f8f359 	.word	0xc2f8f359
 8003664:	01a56e1f 	.word	0x01a56e1f
 8003668:	8800759c 	.word	0x8800759c
 800366c:	7e37e43c 	.word	0x7e37e43c
 8003670:	43500000 	.word	0x43500000
 8003674:	ffff3cb0 	.word	0xffff3cb0
 8003678:	3c900000 	.word	0x3c900000

0800367c <copysign>:
 800367c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003684:	ea42 0103 	orr.w	r1, r2, r3
 8003688:	4770      	bx	lr
	...

0800368c <_init>:
 800368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368e:	bf00      	nop
 8003690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003692:	bc08      	pop	{r3}
 8003694:	469e      	mov	lr, r3
 8003696:	4770      	bx	lr

08003698 <_fini>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	bf00      	nop
 800369c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369e:	bc08      	pop	{r3}
 80036a0:	469e      	mov	lr, r3
 80036a2:	4770      	bx	lr
