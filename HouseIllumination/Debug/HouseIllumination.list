
HouseIllumination.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080021cc  080021cc  000121cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002204  08002204  00012204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002208  08002208  00012208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  0800220c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000180  20000010  0800221c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000190  0800221c  00020190  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001662f  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e8d  00000000  00000000  00036668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000076df  00000000  00000000  000394f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ab8  00000000  00000000  00040bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000da0  00000000  00000000  00041690  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000622d  00000000  00000000  00042430  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003e23  00000000  00000000  0004865d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004c480  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e68  00000000  00000000  0004c4fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080021b4 	.word	0x080021b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080021b4 	.word	0x080021b4

0800014c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800014c:	4b08      	ldr	r3, [pc, #32]	; (8000170 <HAL_InitTick+0x24>)
{
 800014e:	b510      	push	{r4, lr}
 8000150:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000152:	6818      	ldr	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb0 f0f3 	udiv	r0, r0, r3
 800015c:	f000 f87c 	bl	8000258 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295
 8000168:	f000 f836 	bl	80001d8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}
 8000170:	2000000c 	.word	0x2000000c

08000174 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	4a07      	ldr	r2, [pc, #28]	; (8000194 <HAL_Init+0x20>)
{
 8000176:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000178:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800017a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800017c:	f043 0310 	orr.w	r3, r3, #16
 8000180:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000182:	f000 f817 	bl	80001b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2000      	movs	r0, #0
 8000188:	f7ff ffe0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 800018c:	f001 fe54 	bl	8001e38 <HAL_MspInit>
}
 8000190:	2000      	movs	r0, #0
 8000192:	bd08      	pop	{r3, pc}
 8000194:	40022000 	.word	0x40022000

08000198 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000198:	4a02      	ldr	r2, [pc, #8]	; (80001a4 <HAL_IncTick+0xc>)
 800019a:	6813      	ldr	r3, [r2, #0]
 800019c:	3301      	adds	r3, #1
 800019e:	6013      	str	r3, [r2, #0]
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	20000030 	.word	0x20000030

080001a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001a8:	4b01      	ldr	r3, [pc, #4]	; (80001b0 <HAL_GetTick+0x8>)
 80001aa:	6818      	ldr	r0, [r3, #0]
}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000030 	.word	0x20000030

080001b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001b4:	4a07      	ldr	r2, [pc, #28]	; (80001d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001b6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001b8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001c2:	041b      	lsls	r3, r3, #16
 80001c4:	0c1b      	lsrs	r3, r3, #16
 80001c6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001ce:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001d0:	60d3      	str	r3, [r2, #12]
 80001d2:	4770      	bx	lr
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001d8:	4b17      	ldr	r3, [pc, #92]	; (8000238 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80001da:	b530      	push	{r4, r5, lr}
 80001dc:	68dc      	ldr	r4, [r3, #12]
 80001de:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001e2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001e6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001e8:	2b04      	cmp	r3, #4
 80001ea:	bf28      	it	cs
 80001ec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001ee:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001f0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001f4:	bf98      	it	ls
 80001f6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001f8:	fa05 f303 	lsl.w	r3, r5, r3
 80001fc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000200:	bf88      	it	hi
 8000202:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000204:	4019      	ands	r1, r3
 8000206:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000208:	fa05 f404 	lsl.w	r4, r5, r4
 800020c:	3c01      	subs	r4, #1
 800020e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000210:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000212:	ea42 0201 	orr.w	r2, r2, r1
 8000216:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800021a:	bfaf      	iteee	ge
 800021c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000220:	4b06      	ldrlt	r3, [pc, #24]	; (800023c <HAL_NVIC_SetPriority+0x64>)
 8000222:	f000 000f 	andlt.w	r0, r0, #15
 8000226:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000228:	bfa5      	ittet	ge
 800022a:	b2d2      	uxtbge	r2, r2
 800022c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000230:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000232:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000236:	bd30      	pop	{r4, r5, pc}
 8000238:	e000ed00 	.word	0xe000ed00
 800023c:	e000ed14 	.word	0xe000ed14

08000240 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000240:	2301      	movs	r3, #1
 8000242:	0942      	lsrs	r2, r0, #5
 8000244:	f000 001f 	and.w	r0, r0, #31
 8000248:	fa03 f000 	lsl.w	r0, r3, r0
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_NVIC_EnableIRQ+0x14>)
 800024e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000252:	4770      	bx	lr
 8000254:	e000e100 	.word	0xe000e100

08000258 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000258:	3801      	subs	r0, #1
 800025a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800025e:	d20a      	bcs.n	8000276 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000262:	4b06      	ldr	r3, [pc, #24]	; (800027c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000264:	4a06      	ldr	r2, [pc, #24]	; (8000280 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000266:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800026c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800026e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000270:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000276:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	e000e010 	.word	0xe000e010
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000286:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	bf0c      	ite	eq
 800028c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000290:	f022 0204 	bicne.w	r2, r2, #4
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	4770      	bx	lr
 8000298:	e000e010 	.word	0xe000e010

0800029c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800029c:	4770      	bx	lr

0800029e <HAL_SYSTICK_IRQHandler>:
{
 800029e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002a0:	f7ff fffc 	bl	800029c <HAL_SYSTICK_Callback>
 80002a4:	bd08      	pop	{r3, pc}
	...

080002a8 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002a8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80002ac:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d003      	beq.n	80002ba <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80002b2:	2304      	movs	r3, #4
 80002b4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80002b6:	2001      	movs	r0, #1
 80002b8:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80002ba:	6803      	ldr	r3, [r0, #0]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	f022 020e 	bic.w	r2, r2, #14
 80002c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	f022 0201 	bic.w	r2, r2, #1
 80002ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <HAL_DMA_Abort_IT+0x88>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d01f      	beq.n	8000312 <HAL_DMA_Abort_IT+0x6a>
 80002d2:	3214      	adds	r2, #20
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d01e      	beq.n	8000316 <HAL_DMA_Abort_IT+0x6e>
 80002d8:	3214      	adds	r2, #20
 80002da:	4293      	cmp	r3, r2
 80002dc:	d01d      	beq.n	800031a <HAL_DMA_Abort_IT+0x72>
 80002de:	3214      	adds	r2, #20
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d01d      	beq.n	8000320 <HAL_DMA_Abort_IT+0x78>
 80002e4:	3214      	adds	r2, #20
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d01d      	beq.n	8000326 <HAL_DMA_Abort_IT+0x7e>
 80002ea:	3214      	adds	r2, #20
 80002ec:	4293      	cmp	r3, r2
 80002ee:	bf0c      	ite	eq
 80002f0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80002f4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80002f8:	4a0e      	ldr	r2, [pc, #56]	; (8000334 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80002fa:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80002fc:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80002fe:	2301      	movs	r3, #1
 8000300:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000304:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000306:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800030a:	b17b      	cbz	r3, 800032c <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 800030c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800030e:	4620      	mov	r0, r4
 8000310:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000312:	2301      	movs	r3, #1
 8000314:	e7f0      	b.n	80002f8 <HAL_DMA_Abort_IT+0x50>
 8000316:	2310      	movs	r3, #16
 8000318:	e7ee      	b.n	80002f8 <HAL_DMA_Abort_IT+0x50>
 800031a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800031e:	e7eb      	b.n	80002f8 <HAL_DMA_Abort_IT+0x50>
 8000320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000324:	e7e8      	b.n	80002f8 <HAL_DMA_Abort_IT+0x50>
 8000326:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032a:	e7e5      	b.n	80002f8 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800032c:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800032e:	bd10      	pop	{r4, pc}
 8000330:	40020008 	.word	0x40020008
 8000334:	40020000 	.word	0x40020000

08000338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800033c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800033e:	4616      	mov	r6, r2
 8000340:	4b65      	ldr	r3, [pc, #404]	; (80004d8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000342:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80004e8 <HAL_GPIO_Init+0x1b0>
 8000346:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80004ec <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800034a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800034e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000350:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000354:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000358:	45a0      	cmp	r8, r4
 800035a:	d17f      	bne.n	800045c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800035c:	684d      	ldr	r5, [r1, #4]
 800035e:	2d12      	cmp	r5, #18
 8000360:	f000 80af 	beq.w	80004c2 <HAL_GPIO_Init+0x18a>
 8000364:	f200 8088 	bhi.w	8000478 <HAL_GPIO_Init+0x140>
 8000368:	2d02      	cmp	r5, #2
 800036a:	f000 80a7 	beq.w	80004bc <HAL_GPIO_Init+0x184>
 800036e:	d87c      	bhi.n	800046a <HAL_GPIO_Init+0x132>
 8000370:	2d00      	cmp	r5, #0
 8000372:	f000 808e 	beq.w	8000492 <HAL_GPIO_Init+0x15a>
 8000376:	2d01      	cmp	r5, #1
 8000378:	f000 809e 	beq.w	80004b8 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800037c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000380:	2cff      	cmp	r4, #255	; 0xff
 8000382:	bf93      	iteet	ls
 8000384:	4682      	movls	sl, r0
 8000386:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800038a:	3d08      	subhi	r5, #8
 800038c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000390:	bf92      	itee	ls
 8000392:	00b5      	lslls	r5, r6, #2
 8000394:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000398:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800039a:	fa09 f805 	lsl.w	r8, r9, r5
 800039e:	ea2b 0808 	bic.w	r8, fp, r8
 80003a2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003a6:	bf88      	it	hi
 80003a8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80003ac:	ea48 0505 	orr.w	r5, r8, r5
 80003b0:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003b4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80003b8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80003bc:	d04e      	beq.n	800045c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003be:	4d47      	ldr	r5, [pc, #284]	; (80004dc <HAL_GPIO_Init+0x1a4>)
 80003c0:	4f46      	ldr	r7, [pc, #280]	; (80004dc <HAL_GPIO_Init+0x1a4>)
 80003c2:	69ad      	ldr	r5, [r5, #24]
 80003c4:	f026 0803 	bic.w	r8, r6, #3
 80003c8:	f045 0501 	orr.w	r5, r5, #1
 80003cc:	61bd      	str	r5, [r7, #24]
 80003ce:	69bd      	ldr	r5, [r7, #24]
 80003d0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80003d4:	f005 0501 	and.w	r5, r5, #1
 80003d8:	9501      	str	r5, [sp, #4]
 80003da:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003de:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003e2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003e4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80003e8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003ec:	fa09 f90b 	lsl.w	r9, r9, fp
 80003f0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003f4:	4d3a      	ldr	r5, [pc, #232]	; (80004e0 <HAL_GPIO_Init+0x1a8>)
 80003f6:	42a8      	cmp	r0, r5
 80003f8:	d068      	beq.n	80004cc <HAL_GPIO_Init+0x194>
 80003fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003fe:	42a8      	cmp	r0, r5
 8000400:	d066      	beq.n	80004d0 <HAL_GPIO_Init+0x198>
 8000402:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000406:	42a8      	cmp	r0, r5
 8000408:	d064      	beq.n	80004d4 <HAL_GPIO_Init+0x19c>
 800040a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800040e:	42a8      	cmp	r0, r5
 8000410:	bf0c      	ite	eq
 8000412:	2503      	moveq	r5, #3
 8000414:	2504      	movne	r5, #4
 8000416:	fa05 f50b 	lsl.w	r5, r5, fp
 800041a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800041e:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000422:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000424:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8000428:	bf14      	ite	ne
 800042a:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800042c:	43a5      	biceq	r5, r4
 800042e:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000430:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000432:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 8000436:	bf14      	ite	ne
 8000438:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800043a:	43a5      	biceq	r5, r4
 800043c:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800043e:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000440:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000444:	bf14      	ite	ne
 8000446:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000448:	43a5      	biceq	r5, r4
 800044a:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800044c:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800044e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000452:	bf14      	ite	ne
 8000454:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000456:	ea25 0404 	biceq.w	r4, r5, r4
 800045a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800045c:	3601      	adds	r6, #1
 800045e:	2e10      	cmp	r6, #16
 8000460:	f47f af73 	bne.w	800034a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000464:	b003      	add	sp, #12
 8000466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800046a:	2d03      	cmp	r5, #3
 800046c:	d022      	beq.n	80004b4 <HAL_GPIO_Init+0x17c>
 800046e:	2d11      	cmp	r5, #17
 8000470:	d184      	bne.n	800037c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000472:	68ca      	ldr	r2, [r1, #12]
 8000474:	3204      	adds	r2, #4
          break;
 8000476:	e781      	b.n	800037c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000478:	4f1a      	ldr	r7, [pc, #104]	; (80004e4 <HAL_GPIO_Init+0x1ac>)
 800047a:	42bd      	cmp	r5, r7
 800047c:	d009      	beq.n	8000492 <HAL_GPIO_Init+0x15a>
 800047e:	d812      	bhi.n	80004a6 <HAL_GPIO_Init+0x16e>
 8000480:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80004f0 <HAL_GPIO_Init+0x1b8>
 8000484:	454d      	cmp	r5, r9
 8000486:	d004      	beq.n	8000492 <HAL_GPIO_Init+0x15a>
 8000488:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800048c:	454d      	cmp	r5, r9
 800048e:	f47f af75 	bne.w	800037c <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000492:	688a      	ldr	r2, [r1, #8]
 8000494:	b1c2      	cbz	r2, 80004c8 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000496:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000498:	bf0c      	ite	eq
 800049a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800049e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004a2:	2208      	movs	r2, #8
 80004a4:	e76a      	b.n	800037c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80004a6:	4575      	cmp	r5, lr
 80004a8:	d0f3      	beq.n	8000492 <HAL_GPIO_Init+0x15a>
 80004aa:	4565      	cmp	r5, ip
 80004ac:	d0f1      	beq.n	8000492 <HAL_GPIO_Init+0x15a>
 80004ae:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004f4 <HAL_GPIO_Init+0x1bc>
 80004b2:	e7eb      	b.n	800048c <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004b4:	2200      	movs	r2, #0
 80004b6:	e761      	b.n	800037c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004b8:	68ca      	ldr	r2, [r1, #12]
          break;
 80004ba:	e75f      	b.n	800037c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004bc:	68ca      	ldr	r2, [r1, #12]
 80004be:	3208      	adds	r2, #8
          break;
 80004c0:	e75c      	b.n	800037c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004c2:	68ca      	ldr	r2, [r1, #12]
 80004c4:	320c      	adds	r2, #12
          break;
 80004c6:	e759      	b.n	800037c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004c8:	2204      	movs	r2, #4
 80004ca:	e757      	b.n	800037c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004cc:	2500      	movs	r5, #0
 80004ce:	e7a2      	b.n	8000416 <HAL_GPIO_Init+0xde>
 80004d0:	2501      	movs	r5, #1
 80004d2:	e7a0      	b.n	8000416 <HAL_GPIO_Init+0xde>
 80004d4:	2502      	movs	r5, #2
 80004d6:	e79e      	b.n	8000416 <HAL_GPIO_Init+0xde>
 80004d8:	40010400 	.word	0x40010400
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010800 	.word	0x40010800
 80004e4:	10210000 	.word	0x10210000
 80004e8:	10310000 	.word	0x10310000
 80004ec:	10320000 	.word	0x10320000
 80004f0:	10110000 	.word	0x10110000
 80004f4:	10220000 	.word	0x10220000

080004f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004f8:	b10a      	cbz	r2, 80004fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004fa:	6101      	str	r1, [r0, #16]
 80004fc:	4770      	bx	lr
 80004fe:	0409      	lsls	r1, r1, #16
 8000500:	e7fb      	b.n	80004fa <HAL_GPIO_WritePin+0x2>

08000502 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000502:	68c3      	ldr	r3, [r0, #12]
 8000504:	4059      	eors	r1, r3
 8000506:	60c1      	str	r1, [r0, #12]
 8000508:	4770      	bx	lr
	...

0800050c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800050c:	2201      	movs	r2, #1
 800050e:	4b01      	ldr	r3, [pc, #4]	; (8000514 <HAL_PWR_EnableBkUpAccess+0x8>)
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	4770      	bx	lr
 8000514:	420e0020 	.word	0x420e0020

08000518 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000518:	6803      	ldr	r3, [r0, #0]
{
 800051a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800051e:	07db      	lsls	r3, r3, #31
{
 8000520:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000522:	d410      	bmi.n	8000546 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000524:	682b      	ldr	r3, [r5, #0]
 8000526:	079f      	lsls	r7, r3, #30
 8000528:	d45e      	bmi.n	80005e8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800052a:	682b      	ldr	r3, [r5, #0]
 800052c:	0719      	lsls	r1, r3, #28
 800052e:	f100 8095 	bmi.w	800065c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000532:	682b      	ldr	r3, [r5, #0]
 8000534:	075a      	lsls	r2, r3, #29
 8000536:	f100 80bf 	bmi.w	80006b8 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800053a:	69ea      	ldr	r2, [r5, #28]
 800053c:	2a00      	cmp	r2, #0
 800053e:	f040 812d 	bne.w	800079c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000542:	2000      	movs	r0, #0
 8000544:	e014      	b.n	8000570 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000546:	4c90      	ldr	r4, [pc, #576]	; (8000788 <HAL_RCC_OscConfig+0x270>)
 8000548:	6863      	ldr	r3, [r4, #4]
 800054a:	f003 030c 	and.w	r3, r3, #12
 800054e:	2b04      	cmp	r3, #4
 8000550:	d007      	beq.n	8000562 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000552:	6863      	ldr	r3, [r4, #4]
 8000554:	f003 030c 	and.w	r3, r3, #12
 8000558:	2b08      	cmp	r3, #8
 800055a:	d10c      	bne.n	8000576 <HAL_RCC_OscConfig+0x5e>
 800055c:	6863      	ldr	r3, [r4, #4]
 800055e:	03de      	lsls	r6, r3, #15
 8000560:	d509      	bpl.n	8000576 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	039c      	lsls	r4, r3, #14
 8000566:	d5dd      	bpl.n	8000524 <HAL_RCC_OscConfig+0xc>
 8000568:	686b      	ldr	r3, [r5, #4]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d1da      	bne.n	8000524 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800056e:	2001      	movs	r0, #1
}
 8000570:	b002      	add	sp, #8
 8000572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000576:	686b      	ldr	r3, [r5, #4]
 8000578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800057c:	d110      	bne.n	80005a0 <HAL_RCC_OscConfig+0x88>
 800057e:	6823      	ldr	r3, [r4, #0]
 8000580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000584:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000586:	f7ff fe0f 	bl	80001a8 <HAL_GetTick>
 800058a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	0398      	lsls	r0, r3, #14
 8000590:	d4c8      	bmi.n	8000524 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000592:	f7ff fe09 	bl	80001a8 <HAL_GetTick>
 8000596:	1b80      	subs	r0, r0, r6
 8000598:	2864      	cmp	r0, #100	; 0x64
 800059a:	d9f7      	bls.n	800058c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800059c:	2003      	movs	r0, #3
 800059e:	e7e7      	b.n	8000570 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005a0:	b99b      	cbnz	r3, 80005ca <HAL_RCC_OscConfig+0xb2>
 80005a2:	6823      	ldr	r3, [r4, #0]
 80005a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005a8:	6023      	str	r3, [r4, #0]
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005b2:	f7ff fdf9 	bl	80001a8 <HAL_GetTick>
 80005b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005b8:	6823      	ldr	r3, [r4, #0]
 80005ba:	0399      	lsls	r1, r3, #14
 80005bc:	d5b2      	bpl.n	8000524 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005be:	f7ff fdf3 	bl	80001a8 <HAL_GetTick>
 80005c2:	1b80      	subs	r0, r0, r6
 80005c4:	2864      	cmp	r0, #100	; 0x64
 80005c6:	d9f7      	bls.n	80005b8 <HAL_RCC_OscConfig+0xa0>
 80005c8:	e7e8      	b.n	800059c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005ce:	6823      	ldr	r3, [r4, #0]
 80005d0:	d103      	bne.n	80005da <HAL_RCC_OscConfig+0xc2>
 80005d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d6:	6023      	str	r3, [r4, #0]
 80005d8:	e7d1      	b.n	800057e <HAL_RCC_OscConfig+0x66>
 80005da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005de:	6023      	str	r3, [r4, #0]
 80005e0:	6823      	ldr	r3, [r4, #0]
 80005e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005e6:	e7cd      	b.n	8000584 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005e8:	4c67      	ldr	r4, [pc, #412]	; (8000788 <HAL_RCC_OscConfig+0x270>)
 80005ea:	6863      	ldr	r3, [r4, #4]
 80005ec:	f013 0f0c 	tst.w	r3, #12
 80005f0:	d007      	beq.n	8000602 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005f2:	6863      	ldr	r3, [r4, #4]
 80005f4:	f003 030c 	and.w	r3, r3, #12
 80005f8:	2b08      	cmp	r3, #8
 80005fa:	d110      	bne.n	800061e <HAL_RCC_OscConfig+0x106>
 80005fc:	6863      	ldr	r3, [r4, #4]
 80005fe:	03da      	lsls	r2, r3, #15
 8000600:	d40d      	bmi.n	800061e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000602:	6823      	ldr	r3, [r4, #0]
 8000604:	079b      	lsls	r3, r3, #30
 8000606:	d502      	bpl.n	800060e <HAL_RCC_OscConfig+0xf6>
 8000608:	692b      	ldr	r3, [r5, #16]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d1af      	bne.n	800056e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800060e:	6823      	ldr	r3, [r4, #0]
 8000610:	696a      	ldr	r2, [r5, #20]
 8000612:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000616:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800061a:	6023      	str	r3, [r4, #0]
 800061c:	e785      	b.n	800052a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800061e:	692a      	ldr	r2, [r5, #16]
 8000620:	4b5a      	ldr	r3, [pc, #360]	; (800078c <HAL_RCC_OscConfig+0x274>)
 8000622:	b16a      	cbz	r2, 8000640 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000624:	2201      	movs	r2, #1
 8000626:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000628:	f7ff fdbe 	bl	80001a8 <HAL_GetTick>
 800062c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800062e:	6823      	ldr	r3, [r4, #0]
 8000630:	079f      	lsls	r7, r3, #30
 8000632:	d4ec      	bmi.n	800060e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000634:	f7ff fdb8 	bl	80001a8 <HAL_GetTick>
 8000638:	1b80      	subs	r0, r0, r6
 800063a:	2802      	cmp	r0, #2
 800063c:	d9f7      	bls.n	800062e <HAL_RCC_OscConfig+0x116>
 800063e:	e7ad      	b.n	800059c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000640:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000642:	f7ff fdb1 	bl	80001a8 <HAL_GetTick>
 8000646:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000648:	6823      	ldr	r3, [r4, #0]
 800064a:	0798      	lsls	r0, r3, #30
 800064c:	f57f af6d 	bpl.w	800052a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000650:	f7ff fdaa 	bl	80001a8 <HAL_GetTick>
 8000654:	1b80      	subs	r0, r0, r6
 8000656:	2802      	cmp	r0, #2
 8000658:	d9f6      	bls.n	8000648 <HAL_RCC_OscConfig+0x130>
 800065a:	e79f      	b.n	800059c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800065c:	69aa      	ldr	r2, [r5, #24]
 800065e:	4c4a      	ldr	r4, [pc, #296]	; (8000788 <HAL_RCC_OscConfig+0x270>)
 8000660:	4b4b      	ldr	r3, [pc, #300]	; (8000790 <HAL_RCC_OscConfig+0x278>)
 8000662:	b1da      	cbz	r2, 800069c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000664:	2201      	movs	r2, #1
 8000666:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000668:	f7ff fd9e 	bl	80001a8 <HAL_GetTick>
 800066c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800066e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000670:	079b      	lsls	r3, r3, #30
 8000672:	d50d      	bpl.n	8000690 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000674:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000678:	4b46      	ldr	r3, [pc, #280]	; (8000794 <HAL_RCC_OscConfig+0x27c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000680:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000682:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000684:	9b01      	ldr	r3, [sp, #4]
 8000686:	1e5a      	subs	r2, r3, #1
 8000688:	9201      	str	r2, [sp, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1f9      	bne.n	8000682 <HAL_RCC_OscConfig+0x16a>
 800068e:	e750      	b.n	8000532 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000690:	f7ff fd8a 	bl	80001a8 <HAL_GetTick>
 8000694:	1b80      	subs	r0, r0, r6
 8000696:	2802      	cmp	r0, #2
 8000698:	d9e9      	bls.n	800066e <HAL_RCC_OscConfig+0x156>
 800069a:	e77f      	b.n	800059c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800069c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800069e:	f7ff fd83 	bl	80001a8 <HAL_GetTick>
 80006a2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006a6:	079f      	lsls	r7, r3, #30
 80006a8:	f57f af43 	bpl.w	8000532 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006ac:	f7ff fd7c 	bl	80001a8 <HAL_GetTick>
 80006b0:	1b80      	subs	r0, r0, r6
 80006b2:	2802      	cmp	r0, #2
 80006b4:	d9f6      	bls.n	80006a4 <HAL_RCC_OscConfig+0x18c>
 80006b6:	e771      	b.n	800059c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006b8:	4c33      	ldr	r4, [pc, #204]	; (8000788 <HAL_RCC_OscConfig+0x270>)
 80006ba:	69e3      	ldr	r3, [r4, #28]
 80006bc:	00d8      	lsls	r0, r3, #3
 80006be:	d424      	bmi.n	800070a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80006c0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	69e3      	ldr	r3, [r4, #28]
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	61e3      	str	r3, [r4, #28]
 80006ca:	69e3      	ldr	r3, [r4, #28]
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006d4:	4e30      	ldr	r6, [pc, #192]	; (8000798 <HAL_RCC_OscConfig+0x280>)
 80006d6:	6833      	ldr	r3, [r6, #0]
 80006d8:	05d9      	lsls	r1, r3, #23
 80006da:	d518      	bpl.n	800070e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006dc:	68eb      	ldr	r3, [r5, #12]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d126      	bne.n	8000730 <HAL_RCC_OscConfig+0x218>
 80006e2:	6a23      	ldr	r3, [r4, #32]
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006ea:	f7ff fd5d 	bl	80001a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006ee:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80006f2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80006f4:	6a23      	ldr	r3, [r4, #32]
 80006f6:	079b      	lsls	r3, r3, #30
 80006f8:	d53f      	bpl.n	800077a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80006fa:	2f00      	cmp	r7, #0
 80006fc:	f43f af1d 	beq.w	800053a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000700:	69e3      	ldr	r3, [r4, #28]
 8000702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000706:	61e3      	str	r3, [r4, #28]
 8000708:	e717      	b.n	800053a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800070a:	2700      	movs	r7, #0
 800070c:	e7e2      	b.n	80006d4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800070e:	6833      	ldr	r3, [r6, #0]
 8000710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000714:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000716:	f7ff fd47 	bl	80001a8 <HAL_GetTick>
 800071a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800071c:	6833      	ldr	r3, [r6, #0]
 800071e:	05da      	lsls	r2, r3, #23
 8000720:	d4dc      	bmi.n	80006dc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000722:	f7ff fd41 	bl	80001a8 <HAL_GetTick>
 8000726:	eba0 0008 	sub.w	r0, r0, r8
 800072a:	2864      	cmp	r0, #100	; 0x64
 800072c:	d9f6      	bls.n	800071c <HAL_RCC_OscConfig+0x204>
 800072e:	e735      	b.n	800059c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000730:	b9ab      	cbnz	r3, 800075e <HAL_RCC_OscConfig+0x246>
 8000732:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000734:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000738:	f023 0301 	bic.w	r3, r3, #1
 800073c:	6223      	str	r3, [r4, #32]
 800073e:	6a23      	ldr	r3, [r4, #32]
 8000740:	f023 0304 	bic.w	r3, r3, #4
 8000744:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000746:	f7ff fd2f 	bl	80001a8 <HAL_GetTick>
 800074a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800074c:	6a23      	ldr	r3, [r4, #32]
 800074e:	0798      	lsls	r0, r3, #30
 8000750:	d5d3      	bpl.n	80006fa <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000752:	f7ff fd29 	bl	80001a8 <HAL_GetTick>
 8000756:	1b80      	subs	r0, r0, r6
 8000758:	4540      	cmp	r0, r8
 800075a:	d9f7      	bls.n	800074c <HAL_RCC_OscConfig+0x234>
 800075c:	e71e      	b.n	800059c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800075e:	2b05      	cmp	r3, #5
 8000760:	6a23      	ldr	r3, [r4, #32]
 8000762:	d103      	bne.n	800076c <HAL_RCC_OscConfig+0x254>
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6223      	str	r3, [r4, #32]
 800076a:	e7ba      	b.n	80006e2 <HAL_RCC_OscConfig+0x1ca>
 800076c:	f023 0301 	bic.w	r3, r3, #1
 8000770:	6223      	str	r3, [r4, #32]
 8000772:	6a23      	ldr	r3, [r4, #32]
 8000774:	f023 0304 	bic.w	r3, r3, #4
 8000778:	e7b6      	b.n	80006e8 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800077a:	f7ff fd15 	bl	80001a8 <HAL_GetTick>
 800077e:	eba0 0008 	sub.w	r0, r0, r8
 8000782:	42b0      	cmp	r0, r6
 8000784:	d9b6      	bls.n	80006f4 <HAL_RCC_OscConfig+0x1dc>
 8000786:	e709      	b.n	800059c <HAL_RCC_OscConfig+0x84>
 8000788:	40021000 	.word	0x40021000
 800078c:	42420000 	.word	0x42420000
 8000790:	42420480 	.word	0x42420480
 8000794:	2000000c 	.word	0x2000000c
 8000798:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800079c:	4c22      	ldr	r4, [pc, #136]	; (8000828 <HAL_RCC_OscConfig+0x310>)
 800079e:	6863      	ldr	r3, [r4, #4]
 80007a0:	f003 030c 	and.w	r3, r3, #12
 80007a4:	2b08      	cmp	r3, #8
 80007a6:	f43f aee2 	beq.w	800056e <HAL_RCC_OscConfig+0x56>
 80007aa:	2300      	movs	r3, #0
 80007ac:	4e1f      	ldr	r6, [pc, #124]	; (800082c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007ae:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80007b0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007b2:	d12b      	bne.n	800080c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80007b4:	f7ff fcf8 	bl	80001a8 <HAL_GetTick>
 80007b8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007ba:	6823      	ldr	r3, [r4, #0]
 80007bc:	0199      	lsls	r1, r3, #6
 80007be:	d41f      	bmi.n	8000800 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80007c0:	6a2b      	ldr	r3, [r5, #32]
 80007c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007c6:	d105      	bne.n	80007d4 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80007c8:	6862      	ldr	r2, [r4, #4]
 80007ca:	68a9      	ldr	r1, [r5, #8]
 80007cc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80007d0:	430a      	orrs	r2, r1
 80007d2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80007d4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80007d6:	6862      	ldr	r2, [r4, #4]
 80007d8:	430b      	orrs	r3, r1
 80007da:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80007de:	4313      	orrs	r3, r2
 80007e0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80007e2:	2301      	movs	r3, #1
 80007e4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80007e6:	f7ff fcdf 	bl	80001a8 <HAL_GetTick>
 80007ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80007ec:	6823      	ldr	r3, [r4, #0]
 80007ee:	019a      	lsls	r2, r3, #6
 80007f0:	f53f aea7 	bmi.w	8000542 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007f4:	f7ff fcd8 	bl	80001a8 <HAL_GetTick>
 80007f8:	1b40      	subs	r0, r0, r5
 80007fa:	2802      	cmp	r0, #2
 80007fc:	d9f6      	bls.n	80007ec <HAL_RCC_OscConfig+0x2d4>
 80007fe:	e6cd      	b.n	800059c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000800:	f7ff fcd2 	bl	80001a8 <HAL_GetTick>
 8000804:	1bc0      	subs	r0, r0, r7
 8000806:	2802      	cmp	r0, #2
 8000808:	d9d7      	bls.n	80007ba <HAL_RCC_OscConfig+0x2a2>
 800080a:	e6c7      	b.n	800059c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800080c:	f7ff fccc 	bl	80001a8 <HAL_GetTick>
 8000810:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000812:	6823      	ldr	r3, [r4, #0]
 8000814:	019b      	lsls	r3, r3, #6
 8000816:	f57f ae94 	bpl.w	8000542 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800081a:	f7ff fcc5 	bl	80001a8 <HAL_GetTick>
 800081e:	1b40      	subs	r0, r0, r5
 8000820:	2802      	cmp	r0, #2
 8000822:	d9f6      	bls.n	8000812 <HAL_RCC_OscConfig+0x2fa>
 8000824:	e6ba      	b.n	800059c <HAL_RCC_OscConfig+0x84>
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000
 800082c:	42420060 	.word	0x42420060

08000830 <HAL_RCC_GetSysClockFreq>:
{
 8000830:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <HAL_RCC_GetSysClockFreq+0x6c>)
{
 8000834:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000836:	ac02      	add	r4, sp, #8
 8000838:	f103 0510 	add.w	r5, r3, #16
 800083c:	4622      	mov	r2, r4
 800083e:	6818      	ldr	r0, [r3, #0]
 8000840:	6859      	ldr	r1, [r3, #4]
 8000842:	3308      	adds	r3, #8
 8000844:	c203      	stmia	r2!, {r0, r1}
 8000846:	42ab      	cmp	r3, r5
 8000848:	4614      	mov	r4, r2
 800084a:	d1f7      	bne.n	800083c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800084c:	2301      	movs	r3, #1
 800084e:	f88d 3004 	strb.w	r3, [sp, #4]
 8000852:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000854:	4912      	ldr	r1, [pc, #72]	; (80008a0 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000856:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800085a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800085c:	f003 020c 	and.w	r2, r3, #12
 8000860:	2a08      	cmp	r2, #8
 8000862:	d118      	bne.n	8000896 <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000864:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000868:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800086a:	bf48      	it	mi
 800086c:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800086e:	a806      	add	r0, sp, #24
 8000870:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000872:	bf48      	it	mi
 8000874:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000878:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800087c:	bf41      	itttt	mi
 800087e:	aa06      	addmi	r2, sp, #24
 8000880:	189b      	addmi	r3, r3, r2
 8000882:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000886:	4b07      	ldrmi	r3, [pc, #28]	; (80008a4 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000888:	bf54      	ite	pl
 800088a:	4b07      	ldrpl	r3, [pc, #28]	; (80008a8 <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800088c:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000890:	4358      	muls	r0, r3
}
 8000892:	b007      	add	sp, #28
 8000894:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8000896:	4803      	ldr	r0, [pc, #12]	; (80008a4 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000898:	e7fb      	b.n	8000892 <HAL_RCC_GetSysClockFreq+0x62>
 800089a:	bf00      	nop
 800089c:	080021cc 	.word	0x080021cc
 80008a0:	40021000 	.word	0x40021000
 80008a4:	007a1200 	.word	0x007a1200
 80008a8:	003d0900 	.word	0x003d0900

080008ac <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ac:	4a4d      	ldr	r2, [pc, #308]	; (80009e4 <HAL_RCC_ClockConfig+0x138>)
{
 80008ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008b2:	6813      	ldr	r3, [r2, #0]
{
 80008b4:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	428b      	cmp	r3, r1
{
 80008bc:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008be:	d328      	bcc.n	8000912 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008c0:	682a      	ldr	r2, [r5, #0]
 80008c2:	0791      	lsls	r1, r2, #30
 80008c4:	d432      	bmi.n	800092c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008c6:	07d2      	lsls	r2, r2, #31
 80008c8:	d438      	bmi.n	800093c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ca:	4a46      	ldr	r2, [pc, #280]	; (80009e4 <HAL_RCC_ClockConfig+0x138>)
 80008cc:	6813      	ldr	r3, [r2, #0]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	429e      	cmp	r6, r3
 80008d4:	d373      	bcc.n	80009be <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008d6:	682a      	ldr	r2, [r5, #0]
 80008d8:	4c43      	ldr	r4, [pc, #268]	; (80009e8 <HAL_RCC_ClockConfig+0x13c>)
 80008da:	f012 0f04 	tst.w	r2, #4
 80008de:	d179      	bne.n	80009d4 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008e0:	0713      	lsls	r3, r2, #28
 80008e2:	d506      	bpl.n	80008f2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80008e4:	6863      	ldr	r3, [r4, #4]
 80008e6:	692a      	ldr	r2, [r5, #16]
 80008e8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80008ec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008f0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80008f2:	f7ff ff9d 	bl	8000830 <HAL_RCC_GetSysClockFreq>
 80008f6:	6863      	ldr	r3, [r4, #4]
 80008f8:	4a3c      	ldr	r2, [pc, #240]	; (80009ec <HAL_RCC_ClockConfig+0x140>)
 80008fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008fe:	5cd3      	ldrb	r3, [r2, r3]
 8000900:	40d8      	lsrs	r0, r3
 8000902:	4b3b      	ldr	r3, [pc, #236]	; (80009f0 <HAL_RCC_ClockConfig+0x144>)
 8000904:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff fc20 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 800090c:	2000      	movs	r0, #0
}
 800090e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000912:	6813      	ldr	r3, [r2, #0]
 8000914:	f023 0307 	bic.w	r3, r3, #7
 8000918:	430b      	orrs	r3, r1
 800091a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800091c:	6813      	ldr	r3, [r2, #0]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	4299      	cmp	r1, r3
 8000924:	d0cc      	beq.n	80008c0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000926:	2001      	movs	r0, #1
 8000928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800092c:	492e      	ldr	r1, [pc, #184]	; (80009e8 <HAL_RCC_ClockConfig+0x13c>)
 800092e:	68a8      	ldr	r0, [r5, #8]
 8000930:	684b      	ldr	r3, [r1, #4]
 8000932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000936:	4303      	orrs	r3, r0
 8000938:	604b      	str	r3, [r1, #4]
 800093a:	e7c4      	b.n	80008c6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800093c:	686a      	ldr	r2, [r5, #4]
 800093e:	4c2a      	ldr	r4, [pc, #168]	; (80009e8 <HAL_RCC_ClockConfig+0x13c>)
 8000940:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000942:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000944:	d11c      	bne.n	8000980 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000946:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800094a:	d0ec      	beq.n	8000926 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800094c:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800094e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000952:	f023 0303 	bic.w	r3, r3, #3
 8000956:	4313      	orrs	r3, r2
 8000958:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800095a:	f7ff fc25 	bl	80001a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800095e:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000960:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000962:	2b01      	cmp	r3, #1
 8000964:	d114      	bne.n	8000990 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000966:	6863      	ldr	r3, [r4, #4]
 8000968:	f003 030c 	and.w	r3, r3, #12
 800096c:	2b04      	cmp	r3, #4
 800096e:	d0ac      	beq.n	80008ca <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000970:	f7ff fc1a 	bl	80001a8 <HAL_GetTick>
 8000974:	1bc0      	subs	r0, r0, r7
 8000976:	4540      	cmp	r0, r8
 8000978:	d9f5      	bls.n	8000966 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800097a:	2003      	movs	r0, #3
 800097c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000980:	2a02      	cmp	r2, #2
 8000982:	d102      	bne.n	800098a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000984:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000988:	e7df      	b.n	800094a <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800098a:	f013 0f02 	tst.w	r3, #2
 800098e:	e7dc      	b.n	800094a <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000990:	2b02      	cmp	r3, #2
 8000992:	d10f      	bne.n	80009b4 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000994:	6863      	ldr	r3, [r4, #4]
 8000996:	f003 030c 	and.w	r3, r3, #12
 800099a:	2b08      	cmp	r3, #8
 800099c:	d095      	beq.n	80008ca <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800099e:	f7ff fc03 	bl	80001a8 <HAL_GetTick>
 80009a2:	1bc0      	subs	r0, r0, r7
 80009a4:	4540      	cmp	r0, r8
 80009a6:	d9f5      	bls.n	8000994 <HAL_RCC_ClockConfig+0xe8>
 80009a8:	e7e7      	b.n	800097a <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009aa:	f7ff fbfd 	bl	80001a8 <HAL_GetTick>
 80009ae:	1bc0      	subs	r0, r0, r7
 80009b0:	4540      	cmp	r0, r8
 80009b2:	d8e2      	bhi.n	800097a <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009b4:	6863      	ldr	r3, [r4, #4]
 80009b6:	f013 0f0c 	tst.w	r3, #12
 80009ba:	d1f6      	bne.n	80009aa <HAL_RCC_ClockConfig+0xfe>
 80009bc:	e785      	b.n	80008ca <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009be:	6813      	ldr	r3, [r2, #0]
 80009c0:	f023 0307 	bic.w	r3, r3, #7
 80009c4:	4333      	orrs	r3, r6
 80009c6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009c8:	6813      	ldr	r3, [r2, #0]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	429e      	cmp	r6, r3
 80009d0:	d1a9      	bne.n	8000926 <HAL_RCC_ClockConfig+0x7a>
 80009d2:	e780      	b.n	80008d6 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80009d4:	6863      	ldr	r3, [r4, #4]
 80009d6:	68e9      	ldr	r1, [r5, #12]
 80009d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009dc:	430b      	orrs	r3, r1
 80009de:	6063      	str	r3, [r4, #4]
 80009e0:	e77e      	b.n	80008e0 <HAL_RCC_ClockConfig+0x34>
 80009e2:	bf00      	nop
 80009e4:	40022000 	.word	0x40022000
 80009e8:	40021000 	.word	0x40021000
 80009ec:	080021ec 	.word	0x080021ec
 80009f0:	2000000c 	.word	0x2000000c

080009f4 <HAL_RCC_GetHCLKFreq>:
}
 80009f4:	4b01      	ldr	r3, [pc, #4]	; (80009fc <HAL_RCC_GetHCLKFreq+0x8>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	2000000c 	.word	0x2000000c

08000a00 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000a0a:	5cd3      	ldrb	r3, [r2, r3]
 8000a0c:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a0e:	6810      	ldr	r0, [r2, #0]
}    
 8000a10:	40d8      	lsrs	r0, r3
 8000a12:	4770      	bx	lr
 8000a14:	40021000 	.word	0x40021000
 8000a18:	080021fc 	.word	0x080021fc
 8000a1c:	2000000c 	.word	0x2000000c

08000a20 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000a2a:	5cd3      	ldrb	r3, [r2, r3]
 8000a2c:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a2e:	6810      	ldr	r0, [r2, #0]
} 
 8000a30:	40d8      	lsrs	r0, r3
 8000a32:	4770      	bx	lr
 8000a34:	40021000 	.word	0x40021000
 8000a38:	080021fc 	.word	0x080021fc
 8000a3c:	2000000c 	.word	0x2000000c

08000a40 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000a40:	6803      	ldr	r3, [r0, #0]
{
 8000a42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000a46:	07d9      	lsls	r1, r3, #31
{
 8000a48:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000a4a:	d520      	bpl.n	8000a8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a4c:	4c35      	ldr	r4, [pc, #212]	; (8000b24 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000a4e:	69e3      	ldr	r3, [r4, #28]
 8000a50:	00da      	lsls	r2, r3, #3
 8000a52:	d432      	bmi.n	8000aba <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000a54:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	69e3      	ldr	r3, [r4, #28]
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	61e3      	str	r3, [r4, #28]
 8000a5e:	69e3      	ldr	r3, [r4, #28]
 8000a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a68:	4e2f      	ldr	r6, [pc, #188]	; (8000b28 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000a6a:	6833      	ldr	r3, [r6, #0]
 8000a6c:	05db      	lsls	r3, r3, #23
 8000a6e:	d526      	bpl.n	8000abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000a70:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000a72:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000a76:	d136      	bne.n	8000ae6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000a78:	6a23      	ldr	r3, [r4, #32]
 8000a7a:	686a      	ldr	r2, [r5, #4]
 8000a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a80:	4313      	orrs	r3, r2
 8000a82:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000a84:	b11f      	cbz	r7, 8000a8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a86:	69e3      	ldr	r3, [r4, #28]
 8000a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000a8e:	6828      	ldr	r0, [r5, #0]
 8000a90:	0783      	lsls	r3, r0, #30
 8000a92:	d506      	bpl.n	8000aa2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000a94:	4a23      	ldr	r2, [pc, #140]	; (8000b24 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000a96:	68a9      	ldr	r1, [r5, #8]
 8000a98:	6853      	ldr	r3, [r2, #4]
 8000a9a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a9e:	430b      	orrs	r3, r1
 8000aa0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000aa2:	f010 0010 	ands.w	r0, r0, #16
 8000aa6:	d01b      	beq.n	8000ae0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000aa8:	4a1e      	ldr	r2, [pc, #120]	; (8000b24 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000aaa:	68e9      	ldr	r1, [r5, #12]
 8000aac:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000aae:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000ab0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	6053      	str	r3, [r2, #4]
 8000ab8:	e012      	b.n	8000ae0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000aba:	2700      	movs	r7, #0
 8000abc:	e7d4      	b.n	8000a68 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000abe:	6833      	ldr	r3, [r6, #0]
 8000ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ac6:	f7ff fb6f 	bl	80001a8 <HAL_GetTick>
 8000aca:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000acc:	6833      	ldr	r3, [r6, #0]
 8000ace:	05d8      	lsls	r0, r3, #23
 8000ad0:	d4ce      	bmi.n	8000a70 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ad2:	f7ff fb69 	bl	80001a8 <HAL_GetTick>
 8000ad6:	eba0 0008 	sub.w	r0, r0, r8
 8000ada:	2864      	cmp	r0, #100	; 0x64
 8000adc:	d9f6      	bls.n	8000acc <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000ade:	2003      	movs	r0, #3
}
 8000ae0:	b002      	add	sp, #8
 8000ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000ae6:	686a      	ldr	r2, [r5, #4]
 8000ae8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d0c3      	beq.n	8000a78 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000af0:	2001      	movs	r0, #1
 8000af2:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000af4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000af6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000af8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000afa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000afe:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000b00:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000b02:	07d9      	lsls	r1, r3, #31
 8000b04:	d5b8      	bpl.n	8000a78 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000b06:	f7ff fb4f 	bl	80001a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b0a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000b0e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b10:	6a23      	ldr	r3, [r4, #32]
 8000b12:	079a      	lsls	r2, r3, #30
 8000b14:	d4b0      	bmi.n	8000a78 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b16:	f7ff fb47 	bl	80001a8 <HAL_GetTick>
 8000b1a:	1b80      	subs	r0, r0, r6
 8000b1c:	4540      	cmp	r0, r8
 8000b1e:	d9f7      	bls.n	8000b10 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000b20:	e7dd      	b.n	8000ade <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40007000 	.word	0x40007000
 8000b2c:	42420440 	.word	0x42420440

08000b30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8000b30:	b570      	push	{r4, r5, r6, lr}
 8000b32:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b34:	4b35      	ldr	r3, [pc, #212]	; (8000c0c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8000b36:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b38:	ad02      	add	r5, sp, #8
 8000b3a:	f103 0610 	add.w	r6, r3, #16
 8000b3e:	462a      	mov	r2, r5
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	6859      	ldr	r1, [r3, #4]
 8000b44:	3308      	adds	r3, #8
 8000b46:	c203      	stmia	r2!, {r0, r1}
 8000b48:	42b3      	cmp	r3, r6
 8000b4a:	4615      	mov	r5, r2
 8000b4c:	d1f7      	bne.n	8000b3e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b4e:	2301      	movs	r3, #1
 8000b50:	f88d 3004 	strb.w	r3, [sp, #4]
 8000b54:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8000b56:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b58:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8000b5c:	d047      	beq.n	8000bee <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8000b5e:	2c10      	cmp	r4, #16
 8000b60:	d017      	beq.n	8000b92 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8000b62:	2c01      	cmp	r4, #1
 8000b64:	d14f      	bne.n	8000c06 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000b66:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8000b6a:	4a29      	ldr	r2, [pc, #164]	; (8000c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000b6c:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000b6e:	4019      	ands	r1, r3
 8000b70:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8000b74:	d044      	beq.n	8000c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b7e:	d12d      	bne.n	8000bdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8000b80:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000b84:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8000b86:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8000b8a:	bf08      	it	eq
 8000b8c:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8000b8e:	b006      	add	sp, #24
 8000b90:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000b94:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8000b9c:	d0f7      	beq.n	8000b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b9e:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8000ba2:	a806      	add	r0, sp, #24
 8000ba4:	4402      	add	r2, r0
 8000ba6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000baa:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000bac:	bf41      	itttt	mi
 8000bae:	685a      	ldrmi	r2, [r3, #4]
 8000bb0:	a906      	addmi	r1, sp, #24
 8000bb2:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8000bb6:	1852      	addmi	r2, r2, r1
 8000bb8:	bf44      	itt	mi
 8000bba:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000bbe:	4a15      	ldrmi	r2, [pc, #84]	; (8000c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000bc0:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000bc2:	bf4c      	ite	mi
 8000bc4:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000bc8:	4a13      	ldrpl	r2, [pc, #76]	; (8000c18 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000bca:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000bcc:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000bd0:	d4dd      	bmi.n	8000b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8000bd6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000bda:	e7d8      	b.n	8000b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8000bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000be0:	d111      	bne.n	8000c06 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8000be2:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8000be4:	f24f 4024 	movw	r0, #62500	; 0xf424
 8000be8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000bec:	e7cd      	b.n	8000b8a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8000bee:	f7ff ff17 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	e7ea      	b.n	8000bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8000c00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c04:	e7c3      	b.n	8000b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8000c06:	2000      	movs	r0, #0
 8000c08:	e7c1      	b.n	8000b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8000c0a:	bf00      	nop
 8000c0c:	080021dc 	.word	0x080021dc
 8000c10:	40021000 	.word	0x40021000
 8000c14:	007a1200 	.word	0x007a1200
 8000c18:	003d0900 	.word	0x003d0900

08000c1c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8000c1c:	b538      	push	{r3, r4, r5, lr}
 8000c1e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;
  
  tickstart = HAL_GetTick();
 8000c20:	f7ff fac2 	bl	80001a8 <HAL_GetTick>
 8000c24:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8000c26:	6823      	ldr	r3, [r4, #0]
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	0692      	lsls	r2, r2, #26
 8000c2c:	d505      	bpl.n	8000c3a <RTC_EnterInitMode+0x1e>
      return HAL_TIMEOUT;
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c2e:	685a      	ldr	r2, [r3, #4]
  
  
  return HAL_OK;  
 8000c30:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c32:	f042 0210 	orr.w	r2, r2, #16
 8000c36:	605a      	str	r2, [r3, #4]
  return HAL_OK;  
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000c3a:	f7ff fab5 	bl	80001a8 <HAL_GetTick>
 8000c3e:	1b40      	subs	r0, r0, r5
 8000c40:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c44:	d9ef      	bls.n	8000c26 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8000c46:	2003      	movs	r0, #3
}
 8000c48:	bd38      	pop	{r3, r4, r5, pc}

08000c4a <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c4a:	6802      	ldr	r2, [r0, #0]
{
 8000c4c:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c4e:	6853      	ldr	r3, [r2, #4]
{
 8000c50:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c52:	f023 0310 	bic.w	r3, r3, #16
 8000c56:	6053      	str	r3, [r2, #4]
  
  tickstart = HAL_GetTick();
 8000c58:	f7ff faa6 	bl	80001a8 <HAL_GetTick>
 8000c5c:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	069b      	lsls	r3, r3, #26
 8000c64:	d501      	bpl.n	8000c6a <RTC_ExitInitMode+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }
  
  return HAL_OK;  
 8000c66:	2000      	movs	r0, #0
 8000c68:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000c6a:	f7ff fa9d 	bl	80001a8 <HAL_GetTick>
 8000c6e:	1b40      	subs	r0, r0, r5
 8000c70:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c74:	d9f3      	bls.n	8000c5e <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8000c76:	2003      	movs	r0, #3
}
 8000c78:	bd38      	pop	{r3, r4, r5, pc}

08000c7a <HAL_RTC_WaitForSynchro>:
{
 8000c7a:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	b1a8      	cbz	r0, 8000cac <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8000c80:	6802      	ldr	r2, [r0, #0]
 8000c82:	6853      	ldr	r3, [r2, #4]
 8000c84:	f023 0308 	bic.w	r3, r3, #8
 8000c88:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8000c8a:	f7ff fa8d 	bl	80001a8 <HAL_GetTick>
 8000c8e:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8000c90:	6823      	ldr	r3, [r4, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	071b      	lsls	r3, r3, #28
 8000c96:	d501      	bpl.n	8000c9c <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8000c98:	2000      	movs	r0, #0
 8000c9a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8000c9c:	f7ff fa84 	bl	80001a8 <HAL_GetTick>
 8000ca0:	1b40      	subs	r0, r0, r5
 8000ca2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ca6:	d9f3      	bls.n	8000c90 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8000ca8:	2003      	movs	r0, #3
}
 8000caa:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8000cac:	2001      	movs	r0, #1
 8000cae:	bd38      	pop	{r3, r4, r5, pc}

08000cb0 <HAL_RTC_Init>:
{
 8000cb0:	b510      	push	{r4, lr}
  if(hrtc == NULL)
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	b170      	cbz	r0, 8000cd4 <HAL_RTC_Init+0x24>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8000cb6:	7c43      	ldrb	r3, [r0, #17]
 8000cb8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000cbc:	b913      	cbnz	r3, 8000cc4 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8000cbe:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8000cc0:	f001 f902 	bl	8001ec8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8000cc4:	2302      	movs	r3, #2
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8000cc6:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8000cc8:	7463      	strb	r3, [r4, #17]
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8000cca:	f7ff ffd6 	bl	8000c7a <HAL_RTC_WaitForSynchro>
 8000cce:	b118      	cbz	r0, 8000cd8 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	7463      	strb	r3, [r4, #17]
     return HAL_ERROR;
 8000cd4:	2001      	movs	r0, #1
}
 8000cd6:	bd10      	pop	{r4, pc}
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f7ff ff9f 	bl	8000c1c <RTC_EnterInitMode>
 8000cde:	2800      	cmp	r0, #0
 8000ce0:	d1f6      	bne.n	8000cd0 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8000ce2:	6822      	ldr	r2, [r4, #0]
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8000ce4:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8000ce6:	6853      	ldr	r3, [r2, #4]
 8000ce8:	f023 0307 	bic.w	r3, r3, #7
 8000cec:	6053      	str	r3, [r2, #4]
 8000cee:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <HAL_RTC_Init+0x9c>)
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8000cf0:	b118      	cbz	r0, 8000cfa <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8000cf2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000cf4:	f021 0101 	bic.w	r1, r1, #1
 8000cf8:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8000cfa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000cfc:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8000d00:	4303      	orrs	r3, r0
 8000d02:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8000d04:	6860      	ldr	r0, [r4, #4]
 8000d06:	1c43      	adds	r3, r0, #1
 8000d08:	d105      	bne.n	8000d16 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f7ff ff10 	bl	8000b30 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d0dd      	beq.n	8000cd0 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8000d14:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8000d16:	6822      	ldr	r2, [r4, #0]
 8000d18:	6893      	ldr	r3, [r2, #8]
 8000d1a:	f023 030f 	bic.w	r3, r3, #15
 8000d1e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8000d22:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8000d24:	68d3      	ldr	r3, [r2, #12]
 8000d26:	b280      	uxth	r0, r0
 8000d28:	0c1b      	lsrs	r3, r3, #16
 8000d2a:	041b      	lsls	r3, r3, #16
 8000d2c:	4318      	orrs	r0, r3
 8000d2e:	60d0      	str	r0, [r2, #12]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000d30:	4620      	mov	r0, r4
 8000d32:	f7ff ff8a 	bl	8000c4a <RTC_ExitInitMode>
 8000d36:	2301      	movs	r3, #1
 8000d38:	b110      	cbz	r0, 8000d40 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	7462      	strb	r2, [r4, #17]
 8000d3e:	e7c9      	b.n	8000cd4 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 8000d40:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000d42:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8000d44:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8000d46:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8000d48:	bd10      	pop	{r4, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40006c00 	.word	0x40006c00

08000d50 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8000d50:	4770      	bx	lr

08000d52 <HAL_RTCEx_RTCIRQHandler>:
  if(__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8000d52:	6803      	ldr	r3, [r0, #0]
{
 8000d54:	b510      	push	{r4, lr}
  if(__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8000d56:	681a      	ldr	r2, [r3, #0]
{
 8000d58:	4604      	mov	r4, r0
  if(__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8000d5a:	07d1      	lsls	r1, r2, #31
 8000d5c:	d511      	bpl.n	8000d82 <HAL_RTCEx_RTCIRQHandler+0x30>
    if(__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	07d2      	lsls	r2, r2, #31
 8000d62:	d50e      	bpl.n	8000d82 <HAL_RTCEx_RTCIRQHandler+0x30>
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	d50c      	bpl.n	8000d84 <HAL_RTCEx_RTCIRQHandler+0x32>
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8000d6a:	f7ff fff1 	bl	8000d50 <HAL_RTCEx_RTCEventErrorCallback>
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8000d6e:	f06f 0204 	mvn.w	r2, #4
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	605a      	str	r2, [r3, #4]
        hrtc->State = HAL_RTC_STATE_ERROR; 
 8000d76:	2304      	movs	r3, #4
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8000d78:	f06f 0201 	mvn.w	r2, #1
        hrtc->State = HAL_RTC_STATE_READY; 
 8000d7c:	7463      	strb	r3, [r4, #17]
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	bd10      	pop	{r4, pc}
        HAL_RTCEx_RTCEventCallback(hrtc);
 8000d84:	f000 fe1c 	bl	80019c0 <HAL_RTCEx_RTCEventCallback>
        hrtc->State = HAL_RTC_STATE_READY; 
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e7f5      	b.n	8000d78 <HAL_RTCEx_RTCIRQHandler+0x26>

08000d8c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d8c:	6a03      	ldr	r3, [r0, #32]
{
 8000d8e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d90:	f023 0301 	bic.w	r3, r3, #1
 8000d94:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d96:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000d98:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000d9a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000d9c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000d9e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000da2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000da4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000da6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000daa:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000dac:	4d0a      	ldr	r5, [pc, #40]	; (8000dd8 <TIM_OC1_SetConfig+0x4c>)
 8000dae:	42a8      	cmp	r0, r5
 8000db0:	d10b      	bne.n	8000dca <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000db2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000db4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000db8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000dba:	698e      	ldr	r6, [r1, #24]
 8000dbc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000dbe:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000dc2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000dc4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000dc8:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000dca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000dcc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000dce:	684a      	ldr	r2, [r1, #4]
 8000dd0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000dd2:	6203      	str	r3, [r0, #32]
 8000dd4:	bd70      	pop	{r4, r5, r6, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40012c00 	.word	0x40012c00

08000ddc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000ddc:	6a03      	ldr	r3, [r0, #32]
{
 8000dde:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000de4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000de6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000de8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000dea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000dec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000dee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000df2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000df4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000df6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000dfa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000dfe:	4d0b      	ldr	r5, [pc, #44]	; (8000e2c <TIM_OC3_SetConfig+0x50>)
 8000e00:	42a8      	cmp	r0, r5
 8000e02:	d10d      	bne.n	8000e20 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e04:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000e06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e0a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e0e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000e10:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000e12:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e16:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000e18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e1c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e20:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000e22:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000e24:	684a      	ldr	r2, [r1, #4]
 8000e26:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e28:	6203      	str	r3, [r0, #32]
 8000e2a:	bd70      	pop	{r4, r5, r6, pc}
 8000e2c:	40012c00 	.word	0x40012c00

08000e30 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000e30:	6a03      	ldr	r3, [r0, #32]
{
 8000e32:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e38:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e3a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000e3c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e3e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e40:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000e42:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e46:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e4a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000e4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e50:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000e54:	4d06      	ldr	r5, [pc, #24]	; (8000e70 <TIM_OC4_SetConfig+0x40>)
 8000e56:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000e58:	bf02      	ittt	eq
 8000e5a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000e5c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000e60:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e64:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000e66:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000e68:	684a      	ldr	r2, [r1, #4]
 8000e6a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e6c:	6203      	str	r3, [r0, #32]
 8000e6e:	bd30      	pop	{r4, r5, pc}
 8000e70:	40012c00 	.word	0x40012c00

08000e74 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000e74:	6803      	ldr	r3, [r0, #0]
}
 8000e76:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	f042 0201 	orr.w	r2, r2, #1
 8000e7e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	f042 0201 	orr.w	r2, r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
}
 8000e88:	4770      	bx	lr

08000e8a <HAL_TIM_PWM_MspInit>:
 8000e8a:	4770      	bx	lr

08000e8c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000e8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000e90:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	f04f 0302 	mov.w	r3, #2
 8000e98:	d01c      	beq.n	8000ed4 <HAL_TIM_ConfigClockSource+0x48>
 8000e9a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000e9c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000ea0:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000ea2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000ea6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000ea8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000eac:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000eb0:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8000eb2:	680a      	ldr	r2, [r1, #0]
 8000eb4:	2a40      	cmp	r2, #64	; 0x40
 8000eb6:	d079      	beq.n	8000fac <HAL_TIM_ConfigClockSource+0x120>
 8000eb8:	d819      	bhi.n	8000eee <HAL_TIM_ConfigClockSource+0x62>
 8000eba:	2a10      	cmp	r2, #16
 8000ebc:	f000 8093 	beq.w	8000fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8000ec0:	d80a      	bhi.n	8000ed8 <HAL_TIM_ConfigClockSource+0x4c>
 8000ec2:	2a00      	cmp	r2, #0
 8000ec4:	f000 8089 	beq.w	8000fda <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000ed4:	4618      	mov	r0, r3
}
 8000ed6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000ed8:	2a20      	cmp	r2, #32
 8000eda:	f000 808a 	beq.w	8000ff2 <HAL_TIM_ConfigClockSource+0x166>
 8000ede:	2a30      	cmp	r2, #48	; 0x30
 8000ee0:	d1f2      	bne.n	8000ec8 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000ee2:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ee4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ee8:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000eec:	e036      	b.n	8000f5c <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000eee:	2a70      	cmp	r2, #112	; 0x70
 8000ef0:	d036      	beq.n	8000f60 <HAL_TIM_ConfigClockSource+0xd4>
 8000ef2:	d81b      	bhi.n	8000f2c <HAL_TIM_ConfigClockSource+0xa0>
 8000ef4:	2a50      	cmp	r2, #80	; 0x50
 8000ef6:	d042      	beq.n	8000f7e <HAL_TIM_ConfigClockSource+0xf2>
 8000ef8:	2a60      	cmp	r2, #96	; 0x60
 8000efa:	d1e5      	bne.n	8000ec8 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000efc:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000efe:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f00:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000f04:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f06:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f08:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000f0a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000f0c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000f10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000f14:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000f18:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000f1c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000f1e:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000f20:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f26:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000f2a:	e017      	b.n	8000f5c <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000f2c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000f30:	d011      	beq.n	8000f56 <HAL_TIM_ConfigClockSource+0xca>
 8000f32:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000f36:	d1c7      	bne.n	8000ec8 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f38:	688a      	ldr	r2, [r1, #8]
 8000f3a:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000f3c:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f3e:	68c9      	ldr	r1, [r1, #12]
 8000f40:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f42:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f4a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000f4c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f54:	e002      	b.n	8000f5c <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	e7b3      	b.n	8000ec8 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f60:	688a      	ldr	r2, [r1, #8]
 8000f62:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000f64:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f66:	68c9      	ldr	r1, [r1, #12]
 8000f68:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f6a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f6e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f72:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000f74:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000f76:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000f78:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000f7c:	e7ee      	b.n	8000f5c <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000f7e:	684c      	ldr	r4, [r1, #4]
 8000f80:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000f82:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f84:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f86:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f8a:	f025 0501 	bic.w	r5, r5, #1
 8000f8e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f90:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000f92:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f94:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f98:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000f9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000f9e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000fa0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fa2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000fa6:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000faa:	e7d7      	b.n	8000f5c <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000fac:	684c      	ldr	r4, [r1, #4]
 8000fae:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000fb0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fb2:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000fb4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fb8:	f025 0501 	bic.w	r5, r5, #1
 8000fbc:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000fbe:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000fc0:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000fc2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000fc6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000fcc:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000fce:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fd0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000fd4:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000fd8:	e7c0      	b.n	8000f5c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000fda:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fdc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000fe0:	f042 0207 	orr.w	r2, r2, #7
 8000fe4:	e7ba      	b.n	8000f5c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000fe6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fe8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000fec:	f042 0217 	orr.w	r2, r2, #23
 8000ff0:	e7b4      	b.n	8000f5c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000ff2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ff4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ff8:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000ffc:	e7ae      	b.n	8000f5c <HAL_TIM_ConfigClockSource+0xd0>

08000ffe <HAL_TIM_OC_DelayElapsedCallback>:
 8000ffe:	4770      	bx	lr

08001000 <HAL_TIM_IC_CaptureCallback>:
 8001000:	4770      	bx	lr

08001002 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001002:	4770      	bx	lr

08001004 <HAL_TIM_TriggerCallback>:
 8001004:	4770      	bx	lr

08001006 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001006:	6803      	ldr	r3, [r0, #0]
{
 8001008:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800100a:	691a      	ldr	r2, [r3, #16]
{
 800100c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800100e:	0791      	lsls	r1, r2, #30
 8001010:	d50e      	bpl.n	8001030 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	0792      	lsls	r2, r2, #30
 8001016:	d50b      	bpl.n	8001030 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001018:	f06f 0202 	mvn.w	r2, #2
 800101c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800101e:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001020:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001022:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001024:	079b      	lsls	r3, r3, #30
 8001026:	d077      	beq.n	8001118 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001028:	f7ff ffea 	bl	8001000 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800102c:	2300      	movs	r3, #0
 800102e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001030:	6823      	ldr	r3, [r4, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	0750      	lsls	r0, r2, #29
 8001036:	d510      	bpl.n	800105a <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	0751      	lsls	r1, r2, #29
 800103c:	d50d      	bpl.n	800105a <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800103e:	f06f 0204 	mvn.w	r2, #4
 8001042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001044:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001046:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001048:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800104a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800104e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001050:	d068      	beq.n	8001124 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001052:	f7ff ffd5 	bl	8001000 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001056:	2300      	movs	r3, #0
 8001058:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	0712      	lsls	r2, r2, #28
 8001060:	d50f      	bpl.n	8001082 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	0710      	lsls	r0, r2, #28
 8001066:	d50c      	bpl.n	8001082 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001068:	f06f 0208 	mvn.w	r2, #8
 800106c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800106e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001070:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001072:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001074:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001076:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001078:	d05a      	beq.n	8001130 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800107a:	f7ff ffc1 	bl	8001000 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800107e:	2300      	movs	r3, #0
 8001080:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001082:	6823      	ldr	r3, [r4, #0]
 8001084:	691a      	ldr	r2, [r3, #16]
 8001086:	06d2      	lsls	r2, r2, #27
 8001088:	d510      	bpl.n	80010ac <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	06d0      	lsls	r0, r2, #27
 800108e:	d50d      	bpl.n	80010ac <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001090:	f06f 0210 	mvn.w	r2, #16
 8001094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001096:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001098:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800109a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800109c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80010a0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010a2:	d04b      	beq.n	800113c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80010a4:	f7ff ffac 	bl	8001000 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010a8:	2300      	movs	r3, #0
 80010aa:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	07d1      	lsls	r1, r2, #31
 80010b2:	d508      	bpl.n	80010c6 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	07d2      	lsls	r2, r2, #31
 80010b8:	d505      	bpl.n	80010c6 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80010ba:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80010be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80010c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80010c2:	f000 fc97 	bl	80019f4 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	691a      	ldr	r2, [r3, #16]
 80010ca:	0610      	lsls	r0, r2, #24
 80010cc:	d508      	bpl.n	80010e0 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	0611      	lsls	r1, r2, #24
 80010d2:	d505      	bpl.n	80010e0 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80010d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80010d8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80010da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80010dc:	f000 f9a3 	bl	8001426 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80010e0:	6823      	ldr	r3, [r4, #0]
 80010e2:	691a      	ldr	r2, [r3, #16]
 80010e4:	0652      	lsls	r2, r2, #25
 80010e6:	d508      	bpl.n	80010fa <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	0650      	lsls	r0, r2, #25
 80010ec:	d505      	bpl.n	80010fa <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80010ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80010f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80010f4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80010f6:	f7ff ff85 	bl	8001004 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80010fa:	6823      	ldr	r3, [r4, #0]
 80010fc:	691a      	ldr	r2, [r3, #16]
 80010fe:	0691      	lsls	r1, r2, #26
 8001100:	d522      	bpl.n	8001148 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	0692      	lsls	r2, r2, #26
 8001106:	d51f      	bpl.n	8001148 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001108:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800110c:	4620      	mov	r0, r4
}
 800110e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001112:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001114:	f000 b986 	b.w	8001424 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001118:	f7ff ff71 	bl	8000ffe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800111c:	4620      	mov	r0, r4
 800111e:	f7ff ff70 	bl	8001002 <HAL_TIM_PWM_PulseFinishedCallback>
 8001122:	e783      	b.n	800102c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001124:	f7ff ff6b 	bl	8000ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001128:	4620      	mov	r0, r4
 800112a:	f7ff ff6a 	bl	8001002 <HAL_TIM_PWM_PulseFinishedCallback>
 800112e:	e792      	b.n	8001056 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001130:	f7ff ff65 	bl	8000ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001134:	4620      	mov	r0, r4
 8001136:	f7ff ff64 	bl	8001002 <HAL_TIM_PWM_PulseFinishedCallback>
 800113a:	e7a0      	b.n	800107e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800113c:	f7ff ff5f 	bl	8000ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001140:	4620      	mov	r0, r4
 8001142:	f7ff ff5e 	bl	8001002 <HAL_TIM_PWM_PulseFinishedCallback>
 8001146:	e7af      	b.n	80010a8 <HAL_TIM_IRQHandler+0xa2>
 8001148:	bd10      	pop	{r4, pc}
	...

0800114c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800114c:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800114e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001150:	4290      	cmp	r0, r2
 8001152:	d00a      	beq.n	800116a <TIM_Base_SetConfig+0x1e>
 8001154:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001158:	d007      	beq.n	800116a <TIM_Base_SetConfig+0x1e>
 800115a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800115e:	4290      	cmp	r0, r2
 8001160:	d003      	beq.n	800116a <TIM_Base_SetConfig+0x1e>
 8001162:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001166:	4290      	cmp	r0, r2
 8001168:	d115      	bne.n	8001196 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800116a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800116c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001170:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001172:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <TIM_Base_SetConfig+0x6c>)
 8001174:	4290      	cmp	r0, r2
 8001176:	d00a      	beq.n	800118e <TIM_Base_SetConfig+0x42>
 8001178:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800117c:	d007      	beq.n	800118e <TIM_Base_SetConfig+0x42>
 800117e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001182:	4290      	cmp	r0, r2
 8001184:	d003      	beq.n	800118e <TIM_Base_SetConfig+0x42>
 8001186:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800118a:	4290      	cmp	r0, r2
 800118c:	d103      	bne.n	8001196 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800118e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001194:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001196:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800119c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800119e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011a0:	688b      	ldr	r3, [r1, #8]
 80011a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80011a4:	680b      	ldr	r3, [r1, #0]
 80011a6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <TIM_Base_SetConfig+0x6c>)
 80011aa:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80011ac:	bf04      	itt	eq
 80011ae:	690b      	ldreq	r3, [r1, #16]
 80011b0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80011b2:	2301      	movs	r3, #1
 80011b4:	6143      	str	r3, [r0, #20]
 80011b6:	4770      	bx	lr
 80011b8:	40012c00 	.word	0x40012c00

080011bc <HAL_TIM_Base_Init>:
{
 80011bc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80011be:	4604      	mov	r4, r0
 80011c0:	b1a0      	cbz	r0, 80011ec <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80011c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80011c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011ca:	b91b      	cbnz	r3, 80011d4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80011cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80011d0:	f000 fea0 	bl	8001f14 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80011d4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011d6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80011d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011dc:	1d21      	adds	r1, r4, #4
 80011de:	f7ff ffb5 	bl	800114c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80011e2:	2301      	movs	r3, #1
  return HAL_OK;
 80011e4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80011e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80011ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011ec:	2001      	movs	r0, #1
}
 80011ee:	bd10      	pop	{r4, pc}

080011f0 <HAL_TIM_PWM_Init>:
{
 80011f0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80011f2:	4604      	mov	r4, r0
 80011f4:	b1a0      	cbz	r0, 8001220 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80011f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80011fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011fe:	b91b      	cbnz	r3, 8001208 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001200:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001204:	f7ff fe41 	bl	8000e8a <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001208:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800120a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800120c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001210:	1d21      	adds	r1, r4, #4
 8001212:	f7ff ff9b 	bl	800114c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001216:	2301      	movs	r3, #1
  return HAL_OK;
 8001218:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800121a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800121e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001220:	2001      	movs	r0, #1
}
 8001222:	bd10      	pop	{r4, pc}

08001224 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001224:	6a03      	ldr	r3, [r0, #32]
{
 8001226:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001228:	f023 0310 	bic.w	r3, r3, #16
 800122c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800122e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001230:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001232:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001234:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001236:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800123a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800123e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001240:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001244:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001248:	4d0b      	ldr	r5, [pc, #44]	; (8001278 <TIM_OC2_SetConfig+0x54>)
 800124a:	42a8      	cmp	r0, r5
 800124c:	d10d      	bne.n	800126a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800124e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001254:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001258:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800125a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800125c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001260:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001266:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800126a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800126c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800126e:	684a      	ldr	r2, [r1, #4]
 8001270:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001272:	6203      	str	r3, [r0, #32]
 8001274:	bd70      	pop	{r4, r5, r6, pc}
 8001276:	bf00      	nop
 8001278:	40012c00 	.word	0x40012c00

0800127c <HAL_TIM_PWM_ConfigChannel>:
{
 800127c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800127e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001282:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001284:	2b01      	cmp	r3, #1
 8001286:	f04f 0002 	mov.w	r0, #2
 800128a:	d025      	beq.n	80012d8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800128c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800128e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001292:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001296:	2a0c      	cmp	r2, #12
 8001298:	d818      	bhi.n	80012cc <HAL_TIM_PWM_ConfigChannel+0x50>
 800129a:	e8df f002 	tbb	[pc, r2]
 800129e:	1707      	.short	0x1707
 80012a0:	171e1717 	.word	0x171e1717
 80012a4:	172f1717 	.word	0x172f1717
 80012a8:	1717      	.short	0x1717
 80012aa:	40          	.byte	0x40
 80012ab:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80012ac:	6820      	ldr	r0, [r4, #0]
 80012ae:	f7ff fd6d 	bl	8000d8c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80012b2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80012b4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80012b6:	699a      	ldr	r2, [r3, #24]
 80012b8:	f042 0208 	orr.w	r2, r2, #8
 80012bc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	f022 0204 	bic.w	r2, r2, #4
 80012c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80012c6:	699a      	ldr	r2, [r3, #24]
 80012c8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80012ca:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80012cc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80012ce:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80012d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80012d4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80012d8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80012da:	6820      	ldr	r0, [r4, #0]
 80012dc:	f7ff ffa2 	bl	8001224 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80012e0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80012e2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80012e4:	699a      	ldr	r2, [r3, #24]
 80012e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80012ec:	699a      	ldr	r2, [r3, #24]
 80012ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80012f4:	699a      	ldr	r2, [r3, #24]
 80012f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012fa:	e7e6      	b.n	80012ca <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80012fc:	6820      	ldr	r0, [r4, #0]
 80012fe:	f7ff fd6d 	bl	8000ddc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001302:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001304:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001306:	69da      	ldr	r2, [r3, #28]
 8001308:	f042 0208 	orr.w	r2, r2, #8
 800130c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800130e:	69da      	ldr	r2, [r3, #28]
 8001310:	f022 0204 	bic.w	r2, r2, #4
 8001314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001316:	69da      	ldr	r2, [r3, #28]
 8001318:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800131a:	61da      	str	r2, [r3, #28]
    break;
 800131c:	e7d6      	b.n	80012cc <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800131e:	6820      	ldr	r0, [r4, #0]
 8001320:	f7ff fd86 	bl	8000e30 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001324:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001326:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001328:	69da      	ldr	r2, [r3, #28]
 800132a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800132e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001330:	69da      	ldr	r2, [r3, #28]
 8001332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001336:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001338:	69da      	ldr	r2, [r3, #28]
 800133a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800133e:	e7ec      	b.n	800131a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001340 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001340:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001342:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001344:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001346:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001348:	ea23 0304 	bic.w	r3, r3, r4
 800134c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800134e:	6a03      	ldr	r3, [r0, #32]
 8001350:	408a      	lsls	r2, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	6202      	str	r2, [r0, #32]
 8001356:	bd10      	pop	{r4, pc}

08001358 <HAL_TIM_PWM_Start>:
{
 8001358:	b510      	push	{r4, lr}
 800135a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800135c:	2201      	movs	r2, #1
 800135e:	6800      	ldr	r0, [r0, #0]
 8001360:	f7ff ffee 	bl	8001340 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001364:	6823      	ldr	r3, [r4, #0]
 8001366:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_TIM_PWM_Start+0x28>)
}
 8001368:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800136a:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800136c:	bf02      	ittt	eq
 800136e:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001370:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001374:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	f042 0201 	orr.w	r2, r2, #1
 800137c:	601a      	str	r2, [r3, #0]
}
 800137e:	bd10      	pop	{r4, pc}
 8001380:	40012c00 	.word	0x40012c00

08001384 <HAL_TIM_PWM_Stop>:
{
 8001384:	b510      	push	{r4, lr}
 8001386:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001388:	2200      	movs	r2, #0
 800138a:	6800      	ldr	r0, [r0, #0]
 800138c:	f7ff ffd8 	bl	8001340 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <HAL_TIM_PWM_Stop+0x58>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d10d      	bne.n	80013b4 <HAL_TIM_PWM_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 8001398:	f241 1211 	movw	r2, #4369	; 0x1111
 800139c:	6a19      	ldr	r1, [r3, #32]
 800139e:	4211      	tst	r1, r2
 80013a0:	d108      	bne.n	80013b4 <HAL_TIM_PWM_Stop+0x30>
 80013a2:	f240 4244 	movw	r2, #1092	; 0x444
 80013a6:	6a19      	ldr	r1, [r3, #32]
 80013a8:	4211      	tst	r1, r2
 80013aa:	bf02      	ittt	eq
 80013ac:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80013ae:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80013b2:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80013b4:	f241 1211 	movw	r2, #4369	; 0x1111
 80013b8:	6a19      	ldr	r1, [r3, #32]
 80013ba:	4211      	tst	r1, r2
 80013bc:	d108      	bne.n	80013d0 <HAL_TIM_PWM_Stop+0x4c>
 80013be:	f240 4244 	movw	r2, #1092	; 0x444
 80013c2:	6a19      	ldr	r1, [r3, #32]
 80013c4:	4211      	tst	r1, r2
 80013c6:	bf02      	ittt	eq
 80013c8:	681a      	ldreq	r2, [r3, #0]
 80013ca:	f022 0201 	biceq.w	r2, r2, #1
 80013ce:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80013d0:	2301      	movs	r3, #1
}
 80013d2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80013d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80013d8:	bd10      	pop	{r4, pc}
 80013da:	bf00      	nop
 80013dc:	40012c00 	.word	0x40012c00

080013e0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80013e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80013e4:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	f04f 0302 	mov.w	r3, #2
 80013ec:	d018      	beq.n	8001420 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80013ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80013f2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80013f4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80013f6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80013f8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80013fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013fe:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4322      	orrs	r2, r4
 8001404:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800140c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	430a      	orrs	r2, r1
 8001412:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001414:	2301      	movs	r3, #1
 8001416:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800141a:	2300      	movs	r3, #0
 800141c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001420:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001422:	bd10      	pop	{r4, pc}

08001424 <HAL_TIMEx_CommutationCallback>:
 8001424:	4770      	bx	lr

08001426 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001426:	4770      	bx	lr

08001428 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001428:	6803      	ldr	r3, [r0, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001430:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001432:	695a      	ldr	r2, [r3, #20]
 8001434:	f022 0201 	bic.w	r2, r2, #1
 8001438:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800143a:	2320      	movs	r3, #32
 800143c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001440:	4770      	bx	lr
	...

08001444 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001448:	6805      	ldr	r5, [r0, #0]
 800144a:	68c2      	ldr	r2, [r0, #12]
 800144c:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800144e:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001450:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001454:	4313      	orrs	r3, r2
 8001456:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001458:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800145a:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800145c:	430b      	orrs	r3, r1
 800145e:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001460:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001464:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001468:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800146a:	4313      	orrs	r3, r2
 800146c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800146e:	696b      	ldr	r3, [r5, #20]
 8001470:	6982      	ldr	r2, [r0, #24]
 8001472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001476:	4313      	orrs	r3, r2
 8001478:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800147a:	4b40      	ldr	r3, [pc, #256]	; (800157c <UART_SetConfig+0x138>)
{
 800147c:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800147e:	429d      	cmp	r5, r3
 8001480:	f04f 0419 	mov.w	r4, #25
 8001484:	d146      	bne.n	8001514 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001486:	f7ff facb 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 800148a:	fb04 f300 	mul.w	r3, r4, r0
 800148e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001492:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001496:	00b6      	lsls	r6, r6, #2
 8001498:	fbb3 f3f6 	udiv	r3, r3, r6
 800149c:	fbb3 f3f8 	udiv	r3, r3, r8
 80014a0:	011e      	lsls	r6, r3, #4
 80014a2:	f7ff fabd 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 80014a6:	4360      	muls	r0, r4
 80014a8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	fbb0 f7f3 	udiv	r7, r0, r3
 80014b2:	f7ff fab5 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 80014b6:	4360      	muls	r0, r4
 80014b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c2:	fbb3 f3f8 	udiv	r3, r3, r8
 80014c6:	fb08 7313 	mls	r3, r8, r3, r7
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	3332      	adds	r3, #50	; 0x32
 80014ce:	fbb3 f3f8 	udiv	r3, r3, r8
 80014d2:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80014d6:	f7ff faa3 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 80014da:	4360      	muls	r0, r4
 80014dc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80014e0:	0092      	lsls	r2, r2, #2
 80014e2:	fbb0 faf2 	udiv	sl, r0, r2
 80014e6:	f7ff fa9b 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014ea:	4360      	muls	r0, r4
 80014ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f6:	fbb3 f3f8 	udiv	r3, r3, r8
 80014fa:	fb08 a313 	mls	r3, r8, r3, sl
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	3332      	adds	r3, #50	; 0x32
 8001502:	fbb3 f3f8 	udiv	r3, r3, r8
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	433b      	orrs	r3, r7
 800150c:	4433      	add	r3, r6
 800150e:	60ab      	str	r3, [r5, #8]
 8001510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001514:	f7ff fa74 	bl	8000a00 <HAL_RCC_GetPCLK1Freq>
 8001518:	fb04 f300 	mul.w	r3, r4, r0
 800151c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001520:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001524:	00b6      	lsls	r6, r6, #2
 8001526:	fbb3 f3f6 	udiv	r3, r3, r6
 800152a:	fbb3 f3f8 	udiv	r3, r3, r8
 800152e:	011e      	lsls	r6, r3, #4
 8001530:	f7ff fa66 	bl	8000a00 <HAL_RCC_GetPCLK1Freq>
 8001534:	4360      	muls	r0, r4
 8001536:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001540:	f7ff fa5e 	bl	8000a00 <HAL_RCC_GetPCLK1Freq>
 8001544:	4360      	muls	r0, r4
 8001546:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001550:	fbb3 f3f8 	udiv	r3, r3, r8
 8001554:	fb08 7313 	mls	r3, r8, r3, r7
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	3332      	adds	r3, #50	; 0x32
 800155c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001560:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001564:	f7ff fa4c 	bl	8000a00 <HAL_RCC_GetPCLK1Freq>
 8001568:	4360      	muls	r0, r4
 800156a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	fbb0 faf2 	udiv	sl, r0, r2
 8001574:	f7ff fa44 	bl	8000a00 <HAL_RCC_GetPCLK1Freq>
 8001578:	e7b7      	b.n	80014ea <UART_SetConfig+0xa6>
 800157a:	bf00      	nop
 800157c:	40013800 	.word	0x40013800

08001580 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001582:	4604      	mov	r4, r0
 8001584:	460e      	mov	r6, r1
 8001586:	4617      	mov	r7, r2
 8001588:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800158a:	6821      	ldr	r1, [r4, #0]
 800158c:	680b      	ldr	r3, [r1, #0]
 800158e:	ea36 0303 	bics.w	r3, r6, r3
 8001592:	d101      	bne.n	8001598 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001594:	2000      	movs	r0, #0
}
 8001596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001598:	1c6b      	adds	r3, r5, #1
 800159a:	d0f7      	beq.n	800158c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800159c:	b995      	cbnz	r5, 80015c4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800159e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80015a0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80015a8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015aa:	695a      	ldr	r2, [r3, #20]
 80015ac:	f022 0201 	bic.w	r2, r2, #1
 80015b0:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80015b2:	2320      	movs	r3, #32
 80015b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80015b8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80015bc:	2300      	movs	r3, #0
 80015be:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80015c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80015c4:	f7fe fdf0 	bl	80001a8 <HAL_GetTick>
 80015c8:	1bc0      	subs	r0, r0, r7
 80015ca:	4285      	cmp	r5, r0
 80015cc:	d2dd      	bcs.n	800158a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80015ce:	e7e6      	b.n	800159e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080015d0 <HAL_UART_Init>:
{
 80015d0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80015d2:	4604      	mov	r4, r0
 80015d4:	b340      	cbz	r0, 8001628 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80015d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015de:	b91b      	cbnz	r3, 80015e8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80015e0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80015e4:	f000 fcf8 	bl	8001fd8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80015e8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80015ea:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80015ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80015f0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80015f2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80015f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015f8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80015fa:	f7ff ff23 	bl	8001444 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015fe:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001600:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001610:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001618:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800161a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800161c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800161e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001622:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001626:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001628:	2001      	movs	r0, #1
}
 800162a:	bd10      	pop	{r4, pc}

0800162c <HAL_UART_Transmit>:
{
 800162c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001630:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001632:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001636:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001638:	2b20      	cmp	r3, #32
{
 800163a:	460d      	mov	r5, r1
 800163c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800163e:	d14e      	bne.n	80016de <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001640:	2900      	cmp	r1, #0
 8001642:	d049      	beq.n	80016d8 <HAL_UART_Transmit+0xac>
 8001644:	2a00      	cmp	r2, #0
 8001646:	d047      	beq.n	80016d8 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001648:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800164c:	2b01      	cmp	r3, #1
 800164e:	d046      	beq.n	80016de <HAL_UART_Transmit+0xb2>
 8001650:	2301      	movs	r3, #1
 8001652:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001656:	2300      	movs	r3, #0
 8001658:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800165a:	2321      	movs	r3, #33	; 0x21
 800165c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001660:	f7fe fda2 	bl	80001a8 <HAL_GetTick>
 8001664:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001666:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800166a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800166e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001670:	b29b      	uxth	r3, r3
 8001672:	b96b      	cbnz	r3, 8001690 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001674:	463b      	mov	r3, r7
 8001676:	4632      	mov	r2, r6
 8001678:	2140      	movs	r1, #64	; 0x40
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff ff80 	bl	8001580 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001680:	b9a8      	cbnz	r0, 80016ae <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001682:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001684:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001688:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800168c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001690:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001692:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001694:	3b01      	subs	r3, #1
 8001696:	b29b      	uxth	r3, r3
 8001698:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800169a:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800169c:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800169e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016a2:	4620      	mov	r0, r4
 80016a4:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016a6:	d10e      	bne.n	80016c6 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016a8:	f7ff ff6a 	bl	8001580 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80016ac:	b110      	cbz	r0, 80016b4 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80016ae:	2003      	movs	r0, #3
 80016b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80016b4:	882b      	ldrh	r3, [r5, #0]
 80016b6:	6822      	ldr	r2, [r4, #0]
 80016b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016bc:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80016be:	6923      	ldr	r3, [r4, #16]
 80016c0:	b943      	cbnz	r3, 80016d4 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80016c2:	3502      	adds	r5, #2
 80016c4:	e7d3      	b.n	800166e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016c6:	f7ff ff5b 	bl	8001580 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80016ca:	2800      	cmp	r0, #0
 80016cc:	d1ef      	bne.n	80016ae <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	782a      	ldrb	r2, [r5, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	3501      	adds	r5, #1
 80016d6:	e7ca      	b.n	800166e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80016d8:	2001      	movs	r0, #1
 80016da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80016de:	2002      	movs	r0, #2
}
 80016e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080016e4 <HAL_UART_TxCpltCallback>:
 80016e4:	4770      	bx	lr

080016e6 <HAL_UART_RxCpltCallback>:
 80016e6:	4770      	bx	lr

080016e8 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80016e8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80016ec:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80016ee:	2b22      	cmp	r3, #34	; 0x22
 80016f0:	d136      	bne.n	8001760 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016f2:	6883      	ldr	r3, [r0, #8]
 80016f4:	6901      	ldr	r1, [r0, #16]
 80016f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016fa:	6802      	ldr	r2, [r0, #0]
 80016fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80016fe:	d123      	bne.n	8001748 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001700:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001702:	b9e9      	cbnz	r1, 8001740 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001708:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800170c:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800170e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001710:	3c01      	subs	r4, #1
 8001712:	b2a4      	uxth	r4, r4
 8001714:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001716:	b98c      	cbnz	r4, 800173c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001718:	6803      	ldr	r3, [r0, #0]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	f022 0220 	bic.w	r2, r2, #32
 8001720:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001728:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800172a:	695a      	ldr	r2, [r3, #20]
 800172c:	f022 0201 	bic.w	r2, r2, #1
 8001730:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001732:	2320      	movs	r3, #32
 8001734:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001738:	f7ff ffd5 	bl	80016e6 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800173c:	2000      	movs	r0, #0
}
 800173e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	f823 2b01 	strh.w	r2, [r3], #1
 8001746:	e7e1      	b.n	800170c <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001748:	b921      	cbnz	r1, 8001754 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800174a:	1c59      	adds	r1, r3, #1
 800174c:	6852      	ldr	r2, [r2, #4]
 800174e:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001750:	701a      	strb	r2, [r3, #0]
 8001752:	e7dc      	b.n	800170e <UART_Receive_IT+0x26>
 8001754:	6852      	ldr	r2, [r2, #4]
 8001756:	1c59      	adds	r1, r3, #1
 8001758:	6281      	str	r1, [r0, #40]	; 0x28
 800175a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800175e:	e7f7      	b.n	8001750 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001760:	2002      	movs	r0, #2
 8001762:	bd10      	pop	{r4, pc}

08001764 <HAL_UART_ErrorCallback>:
 8001764:	4770      	bx	lr
	...

08001768 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001768:	6803      	ldr	r3, [r0, #0]
{
 800176a:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800176c:	681a      	ldr	r2, [r3, #0]
{
 800176e:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8001770:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001772:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001774:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001776:	d107      	bne.n	8001788 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001778:	0696      	lsls	r6, r2, #26
 800177a:	d55a      	bpl.n	8001832 <HAL_UART_IRQHandler+0xca>
 800177c:	068d      	lsls	r5, r1, #26
 800177e:	d558      	bpl.n	8001832 <HAL_UART_IRQHandler+0xca>
}
 8001780:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001784:	f7ff bfb0 	b.w	80016e8 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001788:	f015 0501 	ands.w	r5, r5, #1
 800178c:	d102      	bne.n	8001794 <HAL_UART_IRQHandler+0x2c>
 800178e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001792:	d04e      	beq.n	8001832 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001794:	07d3      	lsls	r3, r2, #31
 8001796:	d505      	bpl.n	80017a4 <HAL_UART_IRQHandler+0x3c>
 8001798:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800179a:	bf42      	ittt	mi
 800179c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800179e:	f043 0301 	orrmi.w	r3, r3, #1
 80017a2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017a4:	0750      	lsls	r0, r2, #29
 80017a6:	d504      	bpl.n	80017b2 <HAL_UART_IRQHandler+0x4a>
 80017a8:	b11d      	cbz	r5, 80017b2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017b2:	0793      	lsls	r3, r2, #30
 80017b4:	d504      	bpl.n	80017c0 <HAL_UART_IRQHandler+0x58>
 80017b6:	b11d      	cbz	r5, 80017c0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017ba:	f043 0304 	orr.w	r3, r3, #4
 80017be:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017c0:	0716      	lsls	r6, r2, #28
 80017c2:	d504      	bpl.n	80017ce <HAL_UART_IRQHandler+0x66>
 80017c4:	b11d      	cbz	r5, 80017ce <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d066      	beq.n	80018a2 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017d4:	0695      	lsls	r5, r2, #26
 80017d6:	d504      	bpl.n	80017e2 <HAL_UART_IRQHandler+0x7a>
 80017d8:	0688      	lsls	r0, r1, #26
 80017da:	d502      	bpl.n	80017e2 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80017dc:	4620      	mov	r0, r4
 80017de:	f7ff ff83 	bl	80016e8 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80017e2:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80017e4:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80017e6:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80017e8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80017ea:	0711      	lsls	r1, r2, #28
 80017ec:	d402      	bmi.n	80017f4 <HAL_UART_IRQHandler+0x8c>
 80017ee:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80017f2:	d01a      	beq.n	800182a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80017f4:	f7ff fe18 	bl	8001428 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	0652      	lsls	r2, r2, #25
 80017fe:	d510      	bpl.n	8001822 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001800:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001802:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001808:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800180a:	b150      	cbz	r0, 8001822 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800180c:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <HAL_UART_IRQHandler+0x13c>)
 800180e:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001810:	f7fe fd4a 	bl	80002a8 <HAL_DMA_Abort_IT>
 8001814:	2800      	cmp	r0, #0
 8001816:	d044      	beq.n	80018a2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001818:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800181a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800181e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001820:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff ff9e 	bl	8001764 <HAL_UART_ErrorCallback>
 8001828:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800182a:	f7ff ff9b 	bl	8001764 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800182e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001830:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001832:	0616      	lsls	r6, r2, #24
 8001834:	d527      	bpl.n	8001886 <HAL_UART_IRQHandler+0x11e>
 8001836:	060d      	lsls	r5, r1, #24
 8001838:	d525      	bpl.n	8001886 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800183a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800183e:	2a21      	cmp	r2, #33	; 0x21
 8001840:	d12f      	bne.n	80018a2 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001842:	68a2      	ldr	r2, [r4, #8]
 8001844:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001848:	6a22      	ldr	r2, [r4, #32]
 800184a:	d117      	bne.n	800187c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800184c:	8811      	ldrh	r1, [r2, #0]
 800184e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001852:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001854:	6921      	ldr	r1, [r4, #16]
 8001856:	b979      	cbnz	r1, 8001878 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001858:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800185a:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 800185c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800185e:	3a01      	subs	r2, #1
 8001860:	b292      	uxth	r2, r2
 8001862:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001864:	b9ea      	cbnz	r2, 80018a2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800186c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001878:	3201      	adds	r2, #1
 800187a:	e7ee      	b.n	800185a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800187c:	1c51      	adds	r1, r2, #1
 800187e:	6221      	str	r1, [r4, #32]
 8001880:	7812      	ldrb	r2, [r2, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	e7ea      	b.n	800185c <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001886:	0650      	lsls	r0, r2, #25
 8001888:	d50b      	bpl.n	80018a2 <HAL_UART_IRQHandler+0x13a>
 800188a:	064a      	lsls	r2, r1, #25
 800188c:	d509      	bpl.n	80018a2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800188e:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001890:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001896:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001898:	2320      	movs	r3, #32
 800189a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800189e:	f7ff ff21 	bl	80016e4 <HAL_UART_TxCpltCallback>
 80018a2:	bd70      	pop	{r4, r5, r6, pc}
 80018a4:	080018a9 	.word	0x080018a9

080018a8 <UART_DMAAbortOnError>:
{
 80018a8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80018aa:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80018ae:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80018b0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80018b2:	f7ff ff57 	bl	8001764 <HAL_UART_ErrorCallback>
 80018b6:	bd08      	pop	{r3, pc}

080018b8 <HandleUARTCommand>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void HandleUARTCommand(char * CMD_String, int String_Length)
{
 80018b8:	b510      	push	{r4, lr}
 80018ba:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart1, (uint8_t *)CMD_String, String_Length, 100);
 80018bc:	2364      	movs	r3, #100	; 0x64
 80018be:	b28a      	uxth	r2, r1
 80018c0:	4601      	mov	r1, r0
 80018c2:	4837      	ldr	r0, [pc, #220]	; (80019a0 <HandleUARTCommand+0xe8>)
 80018c4:	f7ff feb2 	bl	800162c <HAL_UART_Transmit>

	switch (CMD_String[0])
 80018c8:	7823      	ldrb	r3, [r4, #0]
 80018ca:	2b77      	cmp	r3, #119	; 0x77
 80018cc:	d048      	beq.n	8001960 <HandleUARTCommand+0xa8>
 80018ce:	2b79      	cmp	r3, #121	; 0x79
 80018d0:	d010      	beq.n	80018f4 <HandleUARTCommand+0x3c>
 80018d2:	2b72      	cmp	r3, #114	; 0x72
 80018d4:	d162      	bne.n	800199c <HandleUARTCommand+0xe4>
				__HAL_RTC_SECOND_ENABLE_IT(&hrtc, RTC_IT_SEC);
			}
			break;

		case 'r':
			if (CMD_String[1]=='0'){
 80018d6:	7863      	ldrb	r3, [r4, #1]
				HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 80018d8:	2100      	movs	r1, #0
			if (CMD_String[1]=='0'){
 80018da:	2b30      	cmp	r3, #48	; 0x30
				HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 80018dc:	4831      	ldr	r0, [pc, #196]	; (80019a4 <HandleUARTCommand+0xec>)
 80018de:	4c32      	ldr	r4, [pc, #200]	; (80019a8 <HandleUARTCommand+0xf0>)
			if (CMD_String[1]=='0'){
 80018e0:	d136      	bne.n	8001950 <HandleUARTCommand+0x98>
				HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 80018e2:	f7ff fd4f 	bl	8001384 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_1);
 80018e6:	2100      	movs	r1, #0
 80018e8:	4830      	ldr	r0, [pc, #192]	; (80019ac <HandleUARTCommand+0xf4>)
 80018ea:	f7ff fd4b 	bl	8001384 <HAL_TIM_PWM_Stop>
				R_ON = 0;
 80018ee:	2300      	movs	r3, #0
			}
			else{
				HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
				HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
				R_ON = 1;
 80018f0:	7023      	strb	r3, [r4, #0]
 80018f2:	bd10      	pop	{r4, pc}
			if (CMD_String[1]=='0'){
 80018f4:	7863      	ldrb	r3, [r4, #1]
 80018f6:	4c2e      	ldr	r4, [pc, #184]	; (80019b0 <HandleUARTCommand+0xf8>)
 80018f8:	2b30      	cmp	r3, #48	; 0x30
 80018fa:	d11b      	bne.n	8001934 <HandleUARTCommand+0x7c>
				HAL_GPIO_WritePin(K3_GPIO_Port, K3_Pin, RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2110      	movs	r1, #16
 8001900:	482c      	ldr	r0, [pc, #176]	; (80019b4 <HandleUARTCommand+0xfc>)
 8001902:	f7fe fdf9 	bl	80004f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(K5_GPIO_Port, K5_Pin, RESET);	//yellow
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800190c:	4829      	ldr	r0, [pc, #164]	; (80019b4 <HandleUARTCommand+0xfc>)
 800190e:	f7fe fdf3 	bl	80004f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(K6_GPIO_Port, K6_Pin, RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001918:	4826      	ldr	r0, [pc, #152]	; (80019b4 <HandleUARTCommand+0xfc>)
 800191a:	f7fe fded 	bl	80004f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(K8_GPIO_Port, K8_Pin, RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2120      	movs	r1, #32
 8001922:	4825      	ldr	r0, [pc, #148]	; (80019b8 <HandleUARTCommand+0x100>)
 8001924:	f7fe fde8 	bl	80004f8 <HAL_GPIO_WritePin>
				__HAL_RTC_SECOND_DISABLE_IT(&hrtc, RTC_IT_SEC);
 8001928:	6822      	ldr	r2, [r4, #0]
 800192a:	6813      	ldr	r3, [r2, #0]
 800192c:	f023 0301 	bic.w	r3, r3, #1
				__HAL_RTC_SECOND_ENABLE_IT(&hrtc, RTC_IT_SEC);
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	bd10      	pop	{r4, pc}
				HAL_GPIO_TogglePin(K3_GPIO_Port,K3_Pin); //Yellow light on one side - ON
 8001934:	2110      	movs	r1, #16
 8001936:	481f      	ldr	r0, [pc, #124]	; (80019b4 <HandleUARTCommand+0xfc>)
 8001938:	f7fe fde3 	bl	8000502 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(K5_GPIO_Port,K5_Pin);
 800193c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001940:	481c      	ldr	r0, [pc, #112]	; (80019b4 <HandleUARTCommand+0xfc>)
 8001942:	f7fe fdde 	bl	8000502 <HAL_GPIO_TogglePin>
				__HAL_RTC_SECOND_ENABLE_IT(&hrtc, RTC_IT_SEC);
 8001946:	6822      	ldr	r2, [r4, #0]
 8001948:	6813      	ldr	r3, [r2, #0]
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	e7ef      	b.n	8001930 <HandleUARTCommand+0x78>
				HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001950:	f7ff fd02 	bl	8001358 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001954:	2100      	movs	r1, #0
 8001956:	4815      	ldr	r0, [pc, #84]	; (80019ac <HandleUARTCommand+0xf4>)
 8001958:	f7ff fcfe 	bl	8001358 <HAL_TIM_PWM_Start>
				R_ON = 1;
 800195c:	2301      	movs	r3, #1
 800195e:	e7c7      	b.n	80018f0 <HandleUARTCommand+0x38>
			}
			break;

		case 'w':
			if (CMD_String[1]=='0'){
 8001960:	7863      	ldrb	r3, [r4, #1]
 8001962:	2b30      	cmp	r3, #48	; 0x30
 8001964:	4b15      	ldr	r3, [pc, #84]	; (80019bc <HandleUARTCommand+0x104>)
 8001966:	d117      	bne.n	8001998 <HandleUARTCommand+0xe0>
				W_ON = 0;
 8001968:	2400      	movs	r4, #0
				HAL_GPIO_WritePin(K2_GPIO_Port,K2_Pin,RESET);
 800196a:	2120      	movs	r1, #32
 800196c:	4622      	mov	r2, r4
 800196e:	4811      	ldr	r0, [pc, #68]	; (80019b4 <HandleUARTCommand+0xfc>)
				W_ON = 0;
 8001970:	701c      	strb	r4, [r3, #0]
				HAL_GPIO_WritePin(K2_GPIO_Port,K2_Pin,RESET);
 8001972:	f7fe fdc1 	bl	80004f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(K4_GPIO_Port,K4_Pin,RESET);
 8001976:	4622      	mov	r2, r4
 8001978:	2108      	movs	r1, #8
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <HandleUARTCommand+0xfc>)
 800197c:	f7fe fdbc 	bl	80004f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(K9_GPIO_Port,K9_Pin,RESET);
 8001980:	4622      	mov	r2, r4
 8001982:	2110      	movs	r1, #16
 8001984:	480c      	ldr	r0, [pc, #48]	; (80019b8 <HandleUARTCommand+0x100>)
 8001986:	f7fe fdb7 	bl	80004f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(K10_GPIO_Port,K10_Pin,RESET);
 800198a:	4622      	mov	r2, r4
			break;

		default:
			break;
	}
}
 800198c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				HAL_GPIO_WritePin(K10_GPIO_Port,K10_Pin,RESET);
 8001990:	2108      	movs	r1, #8
 8001992:	4809      	ldr	r0, [pc, #36]	; (80019b8 <HandleUARTCommand+0x100>)
 8001994:	f7fe bdb0 	b.w	80004f8 <HAL_GPIO_WritePin>
				W_ON = 1;
 8001998:	2201      	movs	r2, #1
 800199a:	701a      	strb	r2, [r3, #0]
 800199c:	bd10      	pop	{r4, pc}
 800199e:	bf00      	nop
 80019a0:	200000b4 	.word	0x200000b4
 80019a4:	20000074 	.word	0x20000074
 80019a8:	20000008 	.word	0x20000008
 80019ac:	20000034 	.word	0x20000034
 80019b0:	200000f4 	.word	0x200000f4
 80019b4:	40010c00 	.word	0x40010c00
 80019b8:	40010800 	.word	0x40010800
 80019bc:	20000009 	.word	0x20000009

080019c0 <HAL_RTCEx_RTCEventCallback>:
K8 //yellow right1
K9 //white right
K10 //white front*/

void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 80019c0:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(K3_GPIO_Port,K3_Pin);
 80019c2:	4c0a      	ldr	r4, [pc, #40]	; (80019ec <HAL_RTCEx_RTCEventCallback+0x2c>)
 80019c4:	2110      	movs	r1, #16
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7fe fd9b 	bl	8000502 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(K5_GPIO_Port,K5_Pin);	//yellow
 80019cc:	4620      	mov	r0, r4
 80019ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019d2:	f7fe fd96 	bl	8000502 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(K6_GPIO_Port,K6_Pin);
 80019d6:	4620      	mov	r0, r4
 80019d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019dc:	f7fe fd91 	bl	8000502 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(K8_GPIO_Port,K8_Pin);
}
 80019e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_TogglePin(K8_GPIO_Port,K8_Pin);
 80019e4:	2120      	movs	r1, #32
 80019e6:	4802      	ldr	r0, [pc, #8]	; (80019f0 <HAL_RTCEx_RTCEventCallback+0x30>)
 80019e8:	f7fe bd8b 	b.w	8000502 <HAL_GPIO_TogglePin>
 80019ec:	40010c00 	.word	0x40010c00
 80019f0:	40010800 	.word	0x40010800

080019f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019f4:	b538      	push	{r3, r4, r5, lr}
	if (R_ON==1)
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80019f8:	781d      	ldrb	r5, [r3, #0]
 80019fa:	2d01      	cmp	r5, #1
 80019fc:	d131      	bne.n	8001a62 <HAL_TIM_PeriodElapsedCallback+0x6e>
	{
		PWM_pos1 += PWM_inc1;
 80019fe:	4c37      	ldr	r4, [pc, #220]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001a00:	4a37      	ldr	r2, [pc, #220]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001a02:	8823      	ldrh	r3, [r4, #0]
 8001a04:	8811      	ldrh	r1, [r2, #0]
 8001a06:	4419      	add	r1, r3
 8001a08:	b209      	sxth	r1, r1
		if (PWM_pos1 > 320)
 8001a0a:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
 8001a0e:	dd05      	ble.n	8001a1c <HAL_TIM_PeriodElapsedCallback+0x28>
		{
			PWM_pos1 = 320;
 8001a10:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001a14:	8011      	strh	r1, [r2, #0]
			PWM_inc1 *= -1;
		}
		else if (PWM_pos1 <= 0)
		{
			PWM_pos1 = 1;
			PWM_inc1 *= -1;
 8001a16:	425b      	negs	r3, r3
 8001a18:	8023      	strh	r3, [r4, #0]
 8001a1a:	e002      	b.n	8001a22 <HAL_TIM_PeriodElapsedCallback+0x2e>
		else if (PWM_pos1 <= 0)
 8001a1c:	2900      	cmp	r1, #0
 8001a1e:	dd0f      	ble.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x4c>
		PWM_pos1 += PWM_inc1;
 8001a20:	8011      	strh	r1, [r2, #0]
		}

		PWM_pos2 += PWM_inc2;
 8001a22:	4d30      	ldr	r5, [pc, #192]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a24:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001a26:	8829      	ldrh	r1, [r5, #0]
 8001a28:	881c      	ldrh	r4, [r3, #0]
 8001a2a:	440c      	add	r4, r1
 8001a2c:	b224      	sxth	r4, r4
		if (PWM_pos2 > 320)
 8001a2e:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 8001a32:	dd07      	ble.n	8001a44 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			PWM_pos2 = 320;
 8001a34:	f44f 74a0 	mov.w	r4, #320	; 0x140
			PWM_inc2 *= -1;
		}
		else if (PWM_pos2 <= 0)
		{
			PWM_pos2 = 1;
			PWM_inc2 *= -1;
 8001a38:	4249      	negs	r1, r1
			PWM_pos2 = 1;
 8001a3a:	801c      	strh	r4, [r3, #0]
			PWM_inc2 *= -1;
 8001a3c:	8029      	strh	r1, [r5, #0]
 8001a3e:	e004      	b.n	8001a4a <HAL_TIM_PeriodElapsedCallback+0x56>
			PWM_pos1 = 1;
 8001a40:	8015      	strh	r5, [r2, #0]
 8001a42:	e7e8      	b.n	8001a16 <HAL_TIM_PeriodElapsedCallback+0x22>
		else if (PWM_pos2 <= 0)
 8001a44:	2c00      	cmp	r4, #0
 8001a46:	dd1c      	ble.n	8001a82 <HAL_TIM_PeriodElapsedCallback+0x8e>
		PWM_pos2 += PWM_inc2;
 8001a48:	801c      	strh	r4, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_pos1 - 1);
 8001a4a:	4928      	ldr	r1, [pc, #160]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001a4c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a50:	6809      	ldr	r1, [r1, #0]
 8001a52:	3a01      	subs	r2, #1
 8001a54:	634a      	str	r2, [r1, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM_pos2 - 1);
 8001a56:	4a26      	ldr	r2, [pc, #152]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6353      	str	r3, [r2, #52]	; 0x34
	}

	if (htim->Instance==TIM2 && W_ON==1)
 8001a62:	6803      	ldr	r3, [r0, #0]
 8001a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a68:	d115      	bne.n	8001a96 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8001a6a:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d111      	bne.n	8001a96 <HAL_TIM_PeriodElapsedCallback+0xa2>
	{
		switch (white_counter)
 8001a72:	4c21      	ldr	r4, [pc, #132]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001a74:	7823      	ldrb	r3, [r4, #0]
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d827      	bhi.n	8001aca <HAL_TIM_PeriodElapsedCallback+0xd6>
 8001a7a:	e8df f003 	tbb	[pc, r3]
 8001a7e:	0d04      	.short	0x0d04
 8001a80:	1e15      	.short	0x1e15
			PWM_pos2 = 1;
 8001a82:	2401      	movs	r4, #1
 8001a84:	e7d8      	b.n	8001a38 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
		case 0:
			HAL_GPIO_WritePin(K2_GPIO_Port,K2_Pin,SET);	//white left
 8001a86:	2201      	movs	r2, #1
 8001a88:	2120      	movs	r1, #32
			white_counter++;
			break;
		case 1:
			HAL_GPIO_WritePin(K2_GPIO_Port,K2_Pin,RESET);
			HAL_GPIO_WritePin(K4_GPIO_Port,K4_Pin,SET);	//white back
 8001a8a:	481c      	ldr	r0, [pc, #112]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x108>)
			HAL_GPIO_WritePin(K9_GPIO_Port,K9_Pin,SET);	//white right
			white_counter++;
			break;
		case 3:
			HAL_GPIO_WritePin(K9_GPIO_Port,K9_Pin,RESET);
			HAL_GPIO_WritePin(K10_GPIO_Port,K10_Pin,SET);	//white front
 8001a8c:	f7fe fd34 	bl	80004f8 <HAL_GPIO_WritePin>
			white_counter++;
 8001a90:	7823      	ldrb	r3, [r4, #0]
 8001a92:	3301      	adds	r3, #1
			break;
		default:
			HAL_GPIO_WritePin(K10_GPIO_Port,K10_Pin,RESET);
			white_counter = 0;
 8001a94:	7023      	strb	r3, [r4, #0]
 8001a96:	bd38      	pop	{r3, r4, r5, pc}
			HAL_GPIO_WritePin(K2_GPIO_Port,K2_Pin,RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2120      	movs	r1, #32
 8001a9c:	4817      	ldr	r0, [pc, #92]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001a9e:	f7fe fd2b 	bl	80004f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(K4_GPIO_Port,K4_Pin,SET);	//white back
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	2108      	movs	r1, #8
 8001aa6:	e7f0      	b.n	8001a8a <HAL_TIM_PeriodElapsedCallback+0x96>
			HAL_GPIO_WritePin(K4_GPIO_Port,K4_Pin,RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2108      	movs	r1, #8
 8001aac:	4813      	ldr	r0, [pc, #76]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001aae:	f7fe fd23 	bl	80004f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(K9_GPIO_Port,K9_Pin,SET);	//white right
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2110      	movs	r1, #16
			HAL_GPIO_WritePin(K10_GPIO_Port,K10_Pin,SET);	//white front
 8001ab6:	4812      	ldr	r0, [pc, #72]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001ab8:	e7e8      	b.n	8001a8c <HAL_TIM_PeriodElapsedCallback+0x98>
			HAL_GPIO_WritePin(K9_GPIO_Port,K9_Pin,RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2110      	movs	r1, #16
 8001abe:	4810      	ldr	r0, [pc, #64]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001ac0:	f7fe fd1a 	bl	80004f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(K10_GPIO_Port,K10_Pin,SET);	//white front
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2108      	movs	r1, #8
 8001ac8:	e7f5      	b.n	8001ab6 <HAL_TIM_PeriodElapsedCallback+0xc2>
			HAL_GPIO_WritePin(K10_GPIO_Port,K10_Pin,RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2108      	movs	r1, #8
 8001ace:	480c      	ldr	r0, [pc, #48]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001ad0:	f7fe fd12 	bl	80004f8 <HAL_GPIO_WritePin>
			white_counter = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e7dd      	b.n	8001a94 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	20000002 	.word	0x20000002
 8001ae8:	20000006 	.word	0x20000006
 8001aec:	20000074 	.word	0x20000074
 8001af0:	20000034 	.word	0x20000034
 8001af4:	20000009 	.word	0x20000009
 8001af8:	2000002c 	.word	0x2000002c
 8001afc:	40010c00 	.word	0x40010c00
 8001b00:	40010800 	.word	0x40010800

08001b04 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001b04:	2306      	movs	r3, #6
{
 8001b06:	b530      	push	{r4, r5, lr}
 8001b08:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001b0a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001b0c:	2310      	movs	r3, #16
 8001b0e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001b10:	2300      	movs	r3, #0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b12:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b14:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001b16:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001b18:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b1e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b20:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b22:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001b24:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b26:	f7fe fcf7 	bl	8000518 <HAL_RCC_OscConfig>
 8001b2a:	b100      	cbz	r0, 8001b2e <SystemClock_Config+0x2a>
 8001b2c:	e7fe      	b.n	8001b2c <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b2e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b30:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b32:	9008      	str	r0, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b34:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b36:	4621      	mov	r1, r4
 8001b38:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b3a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b3c:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b3e:	f7fe feb5 	bl	80008ac <HAL_RCC_ClockConfig>
 8001b42:	b100      	cbz	r0, 8001b46 <SystemClock_Config+0x42>
 8001b44:	e7fe      	b.n	8001b44 <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b46:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b4a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b4c:	9401      	str	r4, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b4e:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b50:	f7fe ff76 	bl	8000a40 <HAL_RCCEx_PeriphCLKConfig>
 8001b54:	4604      	mov	r4, r0
 8001b56:	b100      	cbz	r0, 8001b5a <SystemClock_Config+0x56>
 8001b58:	e7fe      	b.n	8001b58 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001b5a:	f7fe ff4b 	bl	80009f4 <HAL_RCC_GetHCLKFreq>
 8001b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b62:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b66:	f7fe fb77 	bl	8000258 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b6a:	2004      	movs	r0, #4
 8001b6c:	f7fe fb8a 	bl	8000284 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b70:	4622      	mov	r2, r4
 8001b72:	4621      	mov	r1, r4
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f7fe fb2e 	bl	80001d8 <HAL_NVIC_SetPriority>
}
 8001b7c:	b015      	add	sp, #84	; 0x54
 8001b7e:	bd30      	pop	{r4, r5, pc}

08001b80 <main>:
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 8001b84:	f7fe faf6 	bl	8000174 <HAL_Init>
  SystemClock_Config();
 8001b88:	f7ff ffbc 	bl	8001b04 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8c:	4b9b      	ldr	r3, [pc, #620]	; (8001dfc <main+0x27c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, K10_Pin|K9_Pin|K8_Pin, GPIO_PIN_RESET);
 8001b8e:	2138      	movs	r1, #56	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b90:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, K10_Pin|K9_Pin|K8_Pin, GPIO_PIN_RESET);
 8001b92:	489b      	ldr	r0, [pc, #620]	; (8001e00 <main+0x280>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b94:	f042 0210 	orr.w	r2, r2, #16
 8001b98:	619a      	str	r2, [r3, #24]
 8001b9a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, K6_Pin|K5_Pin|K4_Pin|K3_Pin 
                          |K2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9c:	2403      	movs	r4, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	f002 0210 	and.w	r2, r2, #16
 8001ba2:	9201      	str	r2, [sp, #4]
 8001ba4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : K10_Pin K9_Pin K8_Pin */
  GPIO_InitStruct.Pin = K10_Pin|K9_Pin|K8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001baa:	f042 0220 	orr.w	r2, r2, #32
 8001bae:	619a      	str	r2, [r3, #24]
 8001bb0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb4:	f002 0220 	and.w	r2, r2, #32
 8001bb8:	9202      	str	r2, [sp, #8]
 8001bba:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	f042 0204 	orr.w	r2, r2, #4
 8001bc2:	619a      	str	r2, [r3, #24]
 8001bc4:	699a      	ldr	r2, [r3, #24]
 8001bc6:	f002 0204 	and.w	r2, r2, #4
 8001bca:	9203      	str	r2, [sp, #12]
 8001bcc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	f042 0208 	orr.w	r2, r2, #8
 8001bd4:	619a      	str	r2, [r3, #24]
 8001bd6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, K10_Pin|K9_Pin|K8_Pin, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	9304      	str	r3, [sp, #16]
 8001be0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, K10_Pin|K9_Pin|K8_Pin, GPIO_PIN_RESET);
 8001be2:	f7fe fc89 	bl	80004f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, K6_Pin|K5_Pin|K4_Pin|K3_Pin 
 8001be6:	2200      	movs	r2, #0
 8001be8:	f243 0138 	movw	r1, #12344	; 0x3038
 8001bec:	4885      	ldr	r0, [pc, #532]	; (8001e04 <main+0x284>)
 8001bee:	f7fe fc83 	bl	80004f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf6:	a90b      	add	r1, sp, #44	; 0x2c
 8001bf8:	4883      	ldr	r0, [pc, #524]	; (8001e08 <main+0x288>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bfa:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfc:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfe:	f7fe fb9b 	bl	8000338 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c02:	a90b      	add	r1, sp, #44	; 0x2c
 8001c04:	4881      	ldr	r0, [pc, #516]	; (8001e0c <main+0x28c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c06:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c08:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c0a:	f7fe fb95 	bl	8000338 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7 
 8001c0e:	f649 1387 	movw	r3, #39303	; 0x9987
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	a90b      	add	r1, sp, #44	; 0x2c
 8001c14:	487a      	ldr	r0, [pc, #488]	; (8001e00 <main+0x280>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7 
 8001c16:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c18:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f7fe fb8d 	bl	8000338 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = K10_Pin|K9_Pin|K8_Pin;
 8001c1e:	2338      	movs	r3, #56	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	a90b      	add	r1, sp, #44	; 0x2c
 8001c22:	4877      	ldr	r0, [pc, #476]	; (8001e00 <main+0x280>)
  GPIO_InitStruct.Pin = K10_Pin|K9_Pin|K8_Pin;
 8001c24:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c28:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f7fe fb85 	bl	8000338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB14 PB15 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8001c2e:	f64c 7387 	movw	r3, #53127	; 0xcf87
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c32:	a90b      	add	r1, sp, #44	; 0x2c
 8001c34:	4873      	ldr	r0, [pc, #460]	; (8001e04 <main+0x284>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8001c36:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c38:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	f7fe fb7d 	bl	8000338 <HAL_GPIO_Init>

  /*Configure GPIO pins : K6_Pin K5_Pin K4_Pin K3_Pin 
                           K2_Pin */
  GPIO_InitStruct.Pin = K6_Pin|K5_Pin|K4_Pin|K3_Pin 
 8001c3e:	f243 0338 	movw	r3, #12344	; 0x3038
  huart1.Init.BaudRate = 115200;
 8001c42:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
                          |K2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c46:	486f      	ldr	r0, [pc, #444]	; (8001e04 <main+0x284>)
 8001c48:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = K6_Pin|K5_Pin|K4_Pin|K3_Pin 
 8001c4a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4e:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	f7fe fb72 	bl	8000338 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001c54:	4a6e      	ldr	r2, [pc, #440]	; (8001e10 <main+0x290>)
  huart1.Instance = USART1;
 8001c56:	4d6f      	ldr	r5, [pc, #444]	; (8001e14 <main+0x294>)
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001c58:	6853      	ldr	r3, [r2, #4]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c5a:	4628      	mov	r0, r5
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c60:	6053      	str	r3, [r2, #4]
  huart1.Init.BaudRate = 115200;
 8001c62:	4b6d      	ldr	r3, [pc, #436]	; (8001e18 <main+0x298>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c64:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8001c66:	e885 0018 	stmia.w	r5, {r3, r4}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c6c:	616a      	str	r2, [r5, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6e:	60ab      	str	r3, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c70:	60eb      	str	r3, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c72:	612b      	str	r3, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c74:	61ab      	str	r3, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c76:	61eb      	str	r3, [r5, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c78:	f7ff fcaa 	bl	80015d0 <HAL_UART_Init>
 8001c7c:	b100      	cbz	r0, 8001c80 <main+0x100>
 8001c7e:	e7fe      	b.n	8001c7e <main+0xfe>
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295
 8001c84:	f44f 7880 	mov.w	r8, #256	; 0x100
  hrtc.Instance = RTC;
 8001c88:	4e64      	ldr	r6, [pc, #400]	; (8001e1c <main+0x29c>)
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001c8a:	4a65      	ldr	r2, [pc, #404]	; (8001e20 <main+0x2a0>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c8c:	4630      	mov	r0, r6
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001c8e:	e886 010c 	stmia.w	r6, {r2, r3, r8}
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c92:	f7ff f80d 	bl	8000cb0 <HAL_RTC_Init>
 8001c96:	b100      	cbz	r0, 8001c9a <main+0x11a>
 8001c98:	e7fe      	b.n	8001c98 <main+0x118>
  htim2.Init.Prescaler = 999;
 8001c9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c9e:	f240 37e7 	movw	r7, #999	; 0x3e7
  htim2.Instance = TIM2;
 8001ca2:	4c60      	ldr	r4, [pc, #384]	; (8001e24 <main+0x2a4>)
  htim2.Init.Prescaler = 999;
 8001ca4:	e884 0088 	stmia.w	r4, {r3, r7}
  htim2.Init.Period = 3199;
 8001ca8:	f640 437f 	movw	r3, #3199	; 0xc7f
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cac:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cae:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb0:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cb2:	4620      	mov	r0, r4
  htim2.Init.Period = 3199;
 8001cb4:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cb6:	f7ff fa81 	bl	80011bc <HAL_TIM_Base_Init>
 8001cba:	b100      	cbz	r0, 8001cbe <main+0x13e>
 8001cbc:	e7fe      	b.n	8001cbc <main+0x13c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbe:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cc2:	a90b      	add	r1, sp, #44	; 0x2c
 8001cc4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cca:	f7ff f8df 	bl	8000e8c <HAL_TIM_ConfigClockSource>
 8001cce:	b100      	cbz	r0, 8001cd2 <main+0x152>
 8001cd0:	e7fe      	b.n	8001cd0 <main+0x150>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd2:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd4:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cd6:	a907      	add	r1, sp, #28
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f7ff fb81 	bl	80013e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cde:	b100      	cbz	r0, 8001ce2 <main+0x162>
 8001ce0:	e7fe      	b.n	8001ce0 <main+0x160>
  htim3.Instance = TIM3;
 8001ce2:	4c51      	ldr	r4, [pc, #324]	; (8001e28 <main+0x2a8>)
 8001ce4:	4b51      	ldr	r3, [pc, #324]	; (8001e2c <main+0x2ac>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce6:	60a0      	str	r0, [r4, #8]
  htim3.Init.Prescaler = 999;
 8001ce8:	e884 0088 	stmia.w	r4, {r3, r7}
  htim3.Init.Period = 319;
 8001cec:	f240 133f 	movw	r3, #319	; 0x13f
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf0:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf2:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cf4:	4620      	mov	r0, r4
  htim3.Init.Period = 319;
 8001cf6:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cf8:	f7ff fa60 	bl	80011bc <HAL_TIM_Base_Init>
 8001cfc:	b100      	cbz	r0, 8001d00 <main+0x180>
 8001cfe:	e7fe      	b.n	8001cfe <main+0x17e>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d00:	a907      	add	r1, sp, #28
 8001d02:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d04:	f8cd 801c 	str.w	r8, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d08:	f7ff f8c0 	bl	8000e8c <HAL_TIM_ConfigClockSource>
 8001d0c:	b100      	cbz	r0, 8001d10 <main+0x190>
 8001d0e:	e7fe      	b.n	8001d0e <main+0x18e>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d10:	4620      	mov	r0, r4
 8001d12:	f7ff fa6d 	bl	80011f0 <HAL_TIM_PWM_Init>
 8001d16:	b100      	cbz	r0, 8001d1a <main+0x19a>
 8001d18:	e7fe      	b.n	8001d18 <main+0x198>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d1a:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1c:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d1e:	a905      	add	r1, sp, #20
 8001d20:	4620      	mov	r0, r4
 8001d22:	f7ff fb5d 	bl	80013e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d26:	4602      	mov	r2, r0
 8001d28:	b100      	cbz	r0, 8001d2c <main+0x1ac>
 8001d2a:	e7fe      	b.n	8001d2a <main+0x1aa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d2c:	2360      	movs	r3, #96	; 0x60
 8001d2e:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 159;
 8001d30:	239f      	movs	r3, #159	; 0x9f
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d32:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d34:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d36:	a90b      	add	r1, sp, #44	; 0x2c
 8001d38:	4620      	mov	r0, r4
  sConfigOC.Pulse = 159;
 8001d3a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d3c:	f7ff fa9e 	bl	800127c <HAL_TIM_PWM_ConfigChannel>
 8001d40:	b100      	cbz	r0, 8001d44 <main+0x1c4>
 8001d42:	e7fe      	b.n	8001d42 <main+0x1c2>
  HAL_TIM_MspPostInit(&htim3);
 8001d44:	4838      	ldr	r0, [pc, #224]	; (8001e28 <main+0x2a8>)
 8001d46:	f000 f923 	bl	8001f90 <HAL_TIM_MspPostInit>
  htim4.Init.Prescaler = 999;
 8001d4a:	f240 3ce7 	movw	ip, #999	; 0x3e7
  htim4.Instance = TIM4;
 8001d4e:	4c38      	ldr	r4, [pc, #224]	; (8001e30 <main+0x2b0>)
  htim4.Init.Prescaler = 999;
 8001d50:	4b38      	ldr	r3, [pc, #224]	; (8001e34 <main+0x2b4>)
  htim4.Init.Period = 319;
 8001d52:	f240 123f 	movw	r2, #319	; 0x13f
  htim4.Init.Prescaler = 999;
 8001d56:	e884 1008 	stmia.w	r4, {r3, ip}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5a:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d5c:	4620      	mov	r0, r4
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5e:	60a3      	str	r3, [r4, #8]
  htim4.Init.Period = 319;
 8001d60:	60e2      	str	r2, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d62:	6123      	str	r3, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d64:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d66:	f7ff fa29 	bl	80011bc <HAL_TIM_Base_Init>
 8001d6a:	b100      	cbz	r0, 8001d6e <main+0x1ee>
 8001d6c:	e7fe      	b.n	8001d6c <main+0x1ec>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d72:	a907      	add	r1, sp, #28
 8001d74:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d76:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d78:	f7ff f888 	bl	8000e8c <HAL_TIM_ConfigClockSource>
 8001d7c:	b100      	cbz	r0, 8001d80 <main+0x200>
 8001d7e:	e7fe      	b.n	8001d7e <main+0x1fe>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7ff fa35 	bl	80011f0 <HAL_TIM_PWM_Init>
 8001d86:	b100      	cbz	r0, 8001d8a <main+0x20a>
 8001d88:	e7fe      	b.n	8001d88 <main+0x208>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8a:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8c:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d8e:	a905      	add	r1, sp, #20
 8001d90:	4620      	mov	r0, r4
 8001d92:	f7ff fb25 	bl	80013e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d96:	4602      	mov	r2, r0
 8001d98:	b100      	cbz	r0, 8001d9c <main+0x21c>
 8001d9a:	e7fe      	b.n	8001d9a <main+0x21a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d9c:	2360      	movs	r3, #96	; 0x60
 8001d9e:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 159;
 8001da0:	239f      	movs	r3, #159	; 0x9f
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001da2:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da4:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da6:	a90b      	add	r1, sp, #44	; 0x2c
 8001da8:	4620      	mov	r0, r4
  sConfigOC.Pulse = 159;
 8001daa:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dac:	f7ff fa66 	bl	800127c <HAL_TIM_PWM_ConfigChannel>
 8001db0:	4607      	mov	r7, r0
 8001db2:	b100      	cbz	r0, 8001db6 <main+0x236>
 8001db4:	e7fe      	b.n	8001db4 <main+0x234>
  HAL_TIM_MspPostInit(&htim4);
 8001db6:	4620      	mov	r0, r4
 8001db8:	f000 f8ea 	bl	8001f90 <HAL_TIM_MspPostInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8001dbc:	4819      	ldr	r0, [pc, #100]	; (8001e24 <main+0x2a4>)
 8001dbe:	f7ff f859 	bl	8000e74 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001dc2:	4639      	mov	r1, r7
 8001dc4:	4818      	ldr	r0, [pc, #96]	; (8001e28 <main+0x2a8>)
 8001dc6:	f7ff fac7 	bl	8001358 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001dca:	4639      	mov	r1, r7
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f7ff fac3 	bl	8001358 <HAL_TIM_PWM_Start>
  __HAL_RTC_SECOND_ENABLE_IT(&hrtc, RTC_IT_SEC);
 8001dd2:	6832      	ldr	r2, [r6, #0]
  HAL_GPIO_TogglePin(K3_GPIO_Port,K3_Pin); //Yellow light on one side - ON
 8001dd4:	2110      	movs	r1, #16
  __HAL_RTC_SECOND_ENABLE_IT(&hrtc, RTC_IT_SEC);
 8001dd6:	6813      	ldr	r3, [r2, #0]
  HAL_GPIO_TogglePin(K3_GPIO_Port,K3_Pin); //Yellow light on one side - ON
 8001dd8:	480a      	ldr	r0, [pc, #40]	; (8001e04 <main+0x284>)
  __HAL_RTC_SECOND_ENABLE_IT(&hrtc, RTC_IT_SEC);
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6013      	str	r3, [r2, #0]
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001de0:	682a      	ldr	r2, [r5, #0]
 8001de2:	68d3      	ldr	r3, [r2, #12]
 8001de4:	f043 0320 	orr.w	r3, r3, #32
 8001de8:	60d3      	str	r3, [r2, #12]
  HAL_GPIO_TogglePin(K3_GPIO_Port,K3_Pin); //Yellow light on one side - ON
 8001dea:	f7fe fb8a 	bl	8000502 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(K5_GPIO_Port,K5_Pin);
 8001dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001df2:	4804      	ldr	r0, [pc, #16]	; (8001e04 <main+0x284>)
 8001df4:	f7fe fb85 	bl	8000502 <HAL_GPIO_TogglePin>
 8001df8:	e7fe      	b.n	8001df8 <main+0x278>
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40010800 	.word	0x40010800
 8001e04:	40010c00 	.word	0x40010c00
 8001e08:	40011000 	.word	0x40011000
 8001e0c:	40011400 	.word	0x40011400
 8001e10:	40010000 	.word	0x40010000
 8001e14:	200000b4 	.word	0x200000b4
 8001e18:	40013800 	.word	0x40013800
 8001e1c:	200000f4 	.word	0x200000f4
 8001e20:	40002800 	.word	0x40002800
 8001e24:	20000108 	.word	0x20000108
 8001e28:	20000074 	.word	0x20000074
 8001e2c:	40000400 	.word	0x40000400
 8001e30:	20000034 	.word	0x20000034
 8001e34:	40000800 	.word	0x40000800

08001e38 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e38:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <HAL_MspInit+0x88>)
{
 8001e3a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e3c:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e3e:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e40:	f042 0201 	orr.w	r2, r2, #1
 8001e44:	619a      	str	r2, [r3, #24]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	f7fe f9b0 	bl	80001b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	f06f 000b 	mvn.w	r0, #11
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	f7fe f9bc 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	f06f 000a 	mvn.w	r0, #10
 8001e66:	4611      	mov	r1, r2
 8001e68:	f7fe f9b6 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f06f 0009 	mvn.w	r0, #9
 8001e72:	4611      	mov	r1, r2
 8001e74:	f7fe f9b0 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f06f 0004 	mvn.w	r0, #4
 8001e7e:	4611      	mov	r1, r2
 8001e80:	f7fe f9aa 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001e84:	2200      	movs	r2, #0
 8001e86:	f06f 0003 	mvn.w	r0, #3
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	f7fe f9a4 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	f06f 0001 	mvn.w	r0, #1
 8001e96:	4611      	mov	r1, r2
 8001e98:	f7fe f99e 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	f7fe f998 	bl	80001d8 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_MspInit+0x8c>)
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001eb8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eba:	b003      	add	sp, #12
 8001ebc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40010000 	.word	0x40010000

08001ec8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ec8:	b507      	push	{r0, r1, r2, lr}

  if(hrtc->Instance==RTC)
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_RTC_MspInit+0x40>)
 8001ecc:	6802      	ldr	r2, [r0, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d116      	bne.n	8001f00 <HAL_RTC_MspInit+0x38>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001ed2:	f7fe fb1b 	bl	800050c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <HAL_RTC_MspInit+0x44>)
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001ed8:	2003      	movs	r0, #3
    __HAL_RCC_BKP_CLK_ENABLE();
 8001eda:	69da      	ldr	r2, [r3, #28]
 8001edc:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001ee0:	61da      	str	r2, [r3, #28]
    __HAL_RCC_RTC_ENABLE();
 8001ee2:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_RTC_MspInit+0x48>)
 8001ef0:	601a      	str	r2, [r3, #0]
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	f7fe f96f 	bl	80001d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001efa:	2003      	movs	r0, #3
 8001efc:	f7fe f9a0 	bl	8000240 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f00:	b003      	add	sp, #12
 8001f02:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f06:	bf00      	nop
 8001f08:	40002800 	.word	0x40002800
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	4242043c 	.word	0x4242043c

08001f14 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM2)
 8001f16:	6803      	ldr	r3, [r0, #0]
 8001f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1c:	d115      	bne.n	8001f4a <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f1e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001f22:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f24:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f2c:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f2e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f30:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f3a:	f7fe f94d 	bl	80001d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f3e:	201c      	movs	r0, #28
 8001f40:	f7fe f97e 	bl	8000240 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f44:	b005      	add	sp, #20
 8001f46:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <HAL_TIM_Base_MspInit+0x70>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d10a      	bne.n	8001f66 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f50:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <HAL_TIM_Base_MspInit+0x74>)
 8001f52:	69da      	ldr	r2, [r3, #28]
 8001f54:	f042 0202 	orr.w	r2, r2, #2
 8001f58:	61da      	str	r2, [r3, #28]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	9302      	str	r3, [sp, #8]
 8001f62:	9b02      	ldr	r3, [sp, #8]
 8001f64:	e7ee      	b.n	8001f44 <HAL_TIM_Base_MspInit+0x30>
  else if(htim_base->Instance==TIM4)
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <HAL_TIM_Base_MspInit+0x78>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d1eb      	bne.n	8001f44 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_TIM_Base_MspInit+0x74>)
 8001f6e:	69da      	ldr	r2, [r3, #28]
 8001f70:	f042 0204 	orr.w	r2, r2, #4
 8001f74:	61da      	str	r2, [r3, #28]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	9303      	str	r3, [sp, #12]
 8001f7e:	9b03      	ldr	r3, [sp, #12]
}
 8001f80:	e7e0      	b.n	8001f44 <HAL_TIM_Base_MspInit+0x30>
 8001f82:	bf00      	nop
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40000800 	.word	0x40000800

08001f90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f90:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 8001f92:	6803      	ldr	r3, [r0, #0]
 8001f94:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <HAL_TIM_MspPostInit+0x38>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d10b      	bne.n	8001fb2 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE END TIM3_MspPostInit 0 */
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f9a:	2340      	movs	r3, #64	; 0x40
 8001f9c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa0:	4669      	mov	r1, sp
 8001fa2:	480a      	ldr	r0, [pc, #40]	; (8001fcc <HAL_TIM_MspPostInit+0x3c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	9303      	str	r3, [sp, #12]
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa8:	f7fe f9c6 	bl	8000338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001fac:	b005      	add	sp, #20
 8001fae:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM4)
 8001fb2:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <HAL_TIM_MspPostInit+0x40>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d1f9      	bne.n	8001fac <HAL_TIM_MspPostInit+0x1c>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fb8:	2340      	movs	r3, #64	; 0x40
 8001fba:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbe:	4669      	mov	r1, sp
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc4:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <HAL_TIM_MspPostInit+0x44>)
 8001fc6:	e7ef      	b.n	8001fa8 <HAL_TIM_MspPostInit+0x18>
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	40010800 	.word	0x40010800
 8001fd0:	40000800 	.word	0x40000800
 8001fd4:	40010c00 	.word	0x40010c00

08001fd8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fd8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001fda:	6802      	ldr	r2, [r0, #0]
 8001fdc:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_UART_MspInit+0x60>)
{
 8001fde:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d127      	bne.n	8002034 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fe4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001fe8:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ff0:	619a      	str	r2, [r3, #24]
 8001ff2:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	4811      	ldr	r0, [pc, #68]	; (800203c <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002002:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002008:	2303      	movs	r3, #3

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800200c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200e:	f7fe f993 	bl	8000338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002012:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	a902      	add	r1, sp, #8
 8002018:	4808      	ldr	r0, [pc, #32]	; (800203c <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800201a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002020:	f7fe f98a 	bl	8000338 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002024:	2025      	movs	r0, #37	; 0x25
 8002026:	4622      	mov	r2, r4
 8002028:	4621      	mov	r1, r4
 800202a:	f7fe f8d5 	bl	80001d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800202e:	2025      	movs	r0, #37	; 0x25
 8002030:	f7fe f906 	bl	8000240 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002034:	b006      	add	sp, #24
 8002036:	bd10      	pop	{r4, pc}
 8002038:	40013800 	.word	0x40013800
 800203c:	40010800 	.word	0x40010800

08002040 <NMI_Handler>:
 8002040:	4770      	bx	lr

08002042 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002042:	e7fe      	b.n	8002042 <HardFault_Handler>

08002044 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002044:	e7fe      	b.n	8002044 <MemManage_Handler>

08002046 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002046:	e7fe      	b.n	8002046 <BusFault_Handler>

08002048 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002048:	e7fe      	b.n	8002048 <UsageFault_Handler>

0800204a <SVC_Handler>:
 800204a:	4770      	bx	lr

0800204c <DebugMon_Handler>:
 800204c:	4770      	bx	lr

0800204e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800204e:	4770      	bx	lr

08002050 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002050:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002052:	f7fe f8a1 	bl	8000198 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002056:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800205a:	f7fe b920 	b.w	800029e <HAL_SYSTICK_IRQHandler>
	...

08002060 <RTC_IRQHandler>:
void RTC_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8002060:	4801      	ldr	r0, [pc, #4]	; (8002068 <RTC_IRQHandler+0x8>)
 8002062:	f7fe be76 	b.w	8000d52 <HAL_RTCEx_RTCIRQHandler>
 8002066:	bf00      	nop
 8002068:	200000f4 	.word	0x200000f4

0800206c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800206c:	4801      	ldr	r0, [pc, #4]	; (8002074 <TIM2_IRQHandler+0x8>)
 800206e:	f7fe bfca 	b.w	8001006 <HAL_TIM_IRQHandler>
 8002072:	bf00      	nop
 8002074:	20000108 	.word	0x20000108

08002078 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8002078:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800207a:	4c10      	ldr	r4, [pc, #64]	; (80020bc <USART1_IRQHandler+0x44>)
 800207c:	4620      	mov	r0, r4
 800207e:	f7ff fb73 	bl	8001768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_IT_SOURCE(&huart1,UART_IT_RXNE))
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	0692      	lsls	r2, r2, #26
 8002088:	d517      	bpl.n	80020ba <USART1_IRQHandler+0x42>
  {
	  __HAL_UART_CLEAR_FLAG(&huart1,UART_IT_RXNE);
 800208a:	4a0d      	ldr	r2, [pc, #52]	; (80020c0 <USART1_IRQHandler+0x48>)
	  byte_data = USART1->DR;

	  CMD[CMD_Length] = (char)byte_data;
 800208c:	480d      	ldr	r0, [pc, #52]	; (80020c4 <USART1_IRQHandler+0x4c>)
	  __HAL_UART_CLEAR_FLAG(&huart1,UART_IT_RXNE);
 800208e:	601a      	str	r2, [r3, #0]
	  byte_data = USART1->DR;
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <USART1_IRQHandler+0x50>)
 8002092:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <USART1_IRQHandler+0x54>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	7013      	strb	r3, [r2, #0]
	  CMD[CMD_Length] = (char)byte_data;
 800209a:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <USART1_IRQHandler+0x58>)

	  if (byte_data==10 || byte_data==13)
 800209c:	2b0a      	cmp	r3, #10
	  CMD[CMD_Length] = (char)byte_data;
 800209e:	6811      	ldr	r1, [r2, #0]
 80020a0:	4614      	mov	r4, r2
 80020a2:	5443      	strb	r3, [r0, r1]
	  if (byte_data==10 || byte_data==13)
 80020a4:	d001      	beq.n	80020aa <USART1_IRQHandler+0x32>
 80020a6:	2b0d      	cmp	r3, #13
 80020a8:	d105      	bne.n	80020b6 <USART1_IRQHandler+0x3e>
	  {
		//  CMD_Flag = 1;
		  HandleUARTCommand(CMD, CMD_Length);
 80020aa:	4806      	ldr	r0, [pc, #24]	; (80020c4 <USART1_IRQHandler+0x4c>)
 80020ac:	f7ff fc04 	bl	80018b8 <HandleUARTCommand>
		  CMD_Length = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	6023      	str	r3, [r4, #0]
 80020b4:	bd10      	pop	{r4, pc}
		//  CMD_Flag = 0;
	  }
	  else
	  {
		  CMD_Length++;
 80020b6:	3101      	adds	r1, #1
 80020b8:	6011      	str	r1, [r2, #0]
 80020ba:	bd10      	pop	{r4, pc}
 80020bc:	200000b4 	.word	0x200000b4
 80020c0:	efffffdf 	.word	0xefffffdf
 80020c4:	20000150 	.word	0x20000150
 80020c8:	40013800 	.word	0x40013800
 80020cc:	20000148 	.word	0x20000148
 80020d0:	2000014c 	.word	0x2000014c

080020d4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <SystemInit+0x40>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f042 0201 	orr.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80020de:	6859      	ldr	r1, [r3, #4]
 80020e0:	4a0d      	ldr	r2, [pc, #52]	; (8002118 <SystemInit+0x44>)
 80020e2:	400a      	ands	r2, r1
 80020e4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80020ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020f0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020f8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002100:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002102:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002106:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002108:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <SystemInit+0x48>)
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	f8ff0000 	.word	0xf8ff0000
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002120:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002122:	e003      	b.n	800212c <LoopCopyDataInit>

08002124 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002126:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002128:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800212a:	3104      	adds	r1, #4

0800212c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800212c:	480a      	ldr	r0, [pc, #40]	; (8002158 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002130:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002132:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002134:	d3f6      	bcc.n	8002124 <CopyDataInit>
  ldr r2, =_sbss
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002138:	e002      	b.n	8002140 <LoopFillZerobss>

0800213a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800213c:	f842 3b04 	str.w	r3, [r2], #4

08002140 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002142:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002144:	d3f9      	bcc.n	800213a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002146:	f7ff ffc5 	bl	80020d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214a:	f000 f80f 	bl	800216c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800214e:	f7ff fd17 	bl	8001b80 <main>
  bx lr
 8002152:	4770      	bx	lr
  ldr r3, =_sidata
 8002154:	0800220c 	.word	0x0800220c
  ldr r0, =_sdata
 8002158:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800215c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8002160:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8002164:	20000190 	.word	0x20000190

08002168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002168:	e7fe      	b.n	8002168 <ADC1_2_IRQHandler>
	...

0800216c <__libc_init_array>:
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	2500      	movs	r5, #0
 8002170:	4e0c      	ldr	r6, [pc, #48]	; (80021a4 <__libc_init_array+0x38>)
 8002172:	4c0d      	ldr	r4, [pc, #52]	; (80021a8 <__libc_init_array+0x3c>)
 8002174:	1ba4      	subs	r4, r4, r6
 8002176:	10a4      	asrs	r4, r4, #2
 8002178:	42a5      	cmp	r5, r4
 800217a:	d109      	bne.n	8002190 <__libc_init_array+0x24>
 800217c:	f000 f81a 	bl	80021b4 <_init>
 8002180:	2500      	movs	r5, #0
 8002182:	4e0a      	ldr	r6, [pc, #40]	; (80021ac <__libc_init_array+0x40>)
 8002184:	4c0a      	ldr	r4, [pc, #40]	; (80021b0 <__libc_init_array+0x44>)
 8002186:	1ba4      	subs	r4, r4, r6
 8002188:	10a4      	asrs	r4, r4, #2
 800218a:	42a5      	cmp	r5, r4
 800218c:	d105      	bne.n	800219a <__libc_init_array+0x2e>
 800218e:	bd70      	pop	{r4, r5, r6, pc}
 8002190:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002194:	4798      	blx	r3
 8002196:	3501      	adds	r5, #1
 8002198:	e7ee      	b.n	8002178 <__libc_init_array+0xc>
 800219a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800219e:	4798      	blx	r3
 80021a0:	3501      	adds	r5, #1
 80021a2:	e7f2      	b.n	800218a <__libc_init_array+0x1e>
 80021a4:	08002204 	.word	0x08002204
 80021a8:	08002204 	.word	0x08002204
 80021ac:	08002204 	.word	0x08002204
 80021b0:	08002208 	.word	0x08002208

080021b4 <_init>:
 80021b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b6:	bf00      	nop
 80021b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ba:	bc08      	pop	{r3}
 80021bc:	469e      	mov	lr, r3
 80021be:	4770      	bx	lr

080021c0 <_fini>:
 80021c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c2:	bf00      	nop
 80021c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021c6:	bc08      	pop	{r3}
 80021c8:	469e      	mov	lr, r3
 80021ca:	4770      	bx	lr
