
PressureSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029cc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002b08  08002b08  00012b08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002b30  08002b30  00012b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002b34  08002b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d8  2000000c  08002b44  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000e4  08002b44  000200e4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000122f2  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002865  00000000  00000000  00032327  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ba3  00000000  00000000  00034b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000700  00000000  00000000  00038730  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a70  00000000  00000000  00038e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004df4  00000000  00000000  000398a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000029a5  00000000  00000000  0003e694  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00041039  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000012cc  00000000  00000000  000410b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002af0 	.word	0x08002af0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08002af0 	.word	0x08002af0

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ba:	f1a4 0401 	sub.w	r4, r4, #1
 80002be:	d1e9      	bne.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f092 0f00 	teq	r2, #0
 8000466:	bf14      	ite	ne
 8000468:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e720      	b.n	80002c0 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aedc 	beq.w	800026e <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6c1      	b.n	800026e <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__aeabi_d2iz>:
 8000910:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000914:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000918:	d215      	bcs.n	8000946 <__aeabi_d2iz+0x36>
 800091a:	d511      	bpl.n	8000940 <__aeabi_d2iz+0x30>
 800091c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000920:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000924:	d912      	bls.n	800094c <__aeabi_d2iz+0x3c>
 8000926:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800092a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000932:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000936:	fa23 f002 	lsr.w	r0, r3, r2
 800093a:	bf18      	it	ne
 800093c:	4240      	negne	r0, r0
 800093e:	4770      	bx	lr
 8000940:	f04f 0000 	mov.w	r0, #0
 8000944:	4770      	bx	lr
 8000946:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800094a:	d105      	bne.n	8000958 <__aeabi_d2iz+0x48>
 800094c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000950:	bf08      	it	eq
 8000952:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000956:	4770      	bx	lr
 8000958:	f04f 0000 	mov.w	r0, #0
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_InitTick+0x24>)
{
 8000962:	b510      	push	{r4, lr}
 8000964:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000970:	f000 f878 	bl	8000a64 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000974:	2200      	movs	r2, #0
 8000976:	4621      	mov	r1, r4
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f000 f83e 	bl	80009fc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000980:	2000      	movs	r0, #0
 8000982:	bd10      	pop	{r4, pc}
 8000984:	20000008 	.word	0x20000008

08000988 <HAL_Init>:
{
 8000988:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098a:	2003      	movs	r0, #3
 800098c:	f000 f824 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff ffe5 	bl	8000960 <HAL_InitTick>
  HAL_MspInit();
 8000996:	f001 ff75 	bl	8002884 <HAL_MspInit>
}
 800099a:	2000      	movs	r0, #0
 800099c:	bd08      	pop	{r3, pc}
	...

080009a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80009a0:	4a02      	ldr	r2, [pc, #8]	; (80009ac <HAL_IncTick+0xc>)
 80009a2:	6813      	ldr	r3, [r2, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000028 	.word	0x20000028

080009b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009b0:	4b01      	ldr	r3, [pc, #4]	; (80009b8 <HAL_GetTick+0x8>)
 80009b2:	6818      	ldr	r0, [r3, #0]
}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000028 	.word	0x20000028

080009bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80009bc:	b513      	push	{r0, r1, r4, lr}
 80009be:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80009c0:	f7ff fff6 	bl	80009b0 <HAL_GetTick>
 80009c4:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80009c6:	f7ff fff3 	bl	80009b0 <HAL_GetTick>
 80009ca:	9b01      	ldr	r3, [sp, #4]
 80009cc:	1b00      	subs	r0, r0, r4
 80009ce:	4298      	cmp	r0, r3
 80009d0:	d3f9      	bcc.n	80009c6 <HAL_Delay+0xa>
  {
  }
}
 80009d2:	b002      	add	sp, #8
 80009d4:	bd10      	pop	{r4, pc}
	...

080009d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80009da:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009dc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80009de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009e6:	041b      	lsls	r3, r3, #16
 80009e8:	0c1b      	lsrs	r3, r3, #16
 80009ea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80009f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80009f4:	60d3      	str	r3, [r2, #12]
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fe:	b530      	push	{r4, r5, lr}
 8000a00:	68dc      	ldr	r4, [r3, #12]
 8000a02:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a06:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a0c:	2b04      	cmp	r3, #4
 8000a0e:	bf28      	it	cs
 8000a10:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a12:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a18:	bf98      	it	ls
 8000a1a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	fa05 f303 	lsl.w	r3, r5, r3
 8000a20:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a24:	bf88      	it	hi
 8000a26:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	4019      	ands	r1, r3
 8000a2a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2c:	fa05 f404 	lsl.w	r4, r5, r4
 8000a30:	3c01      	subs	r4, #1
 8000a32:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000a34:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a36:	ea42 0201 	orr.w	r2, r2, r1
 8000a3a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	bfaf      	iteee	ge
 8000a40:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	4b06      	ldrlt	r3, [pc, #24]	; (8000a60 <HAL_NVIC_SetPriority+0x64>)
 8000a46:	f000 000f 	andlt.w	r0, r0, #15
 8000a4a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	bfa5      	ittet	ge
 8000a4e:	b2d2      	uxtbge	r2, r2
 8000a50:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000a5a:	bd30      	pop	{r4, r5, pc}
 8000a5c:	e000ed00 	.word	0xe000ed00
 8000a60:	e000ed14 	.word	0xe000ed14

08000a64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a64:	3801      	subs	r0, #1
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d20a      	bcs.n	8000a82 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a72:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a78:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a7c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a82:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000e010 	.word	0xe000e010
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a92:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	bf0c      	ite	eq
 8000a98:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a9c:	f022 0204 	bicne.w	r2, r2, #4
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e010 	.word	0xe000e010

08000aa8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000aa8:	4770      	bx	lr

08000aaa <HAL_SYSTICK_IRQHandler>:
{
 8000aaa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000aac:	f7ff fffc 	bl	8000aa8 <HAL_SYSTICK_Callback>
 8000ab0:	bd08      	pop	{r3, pc}
	...

08000ab4 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 8000ab4:	2300      	movs	r3, #0
{ 
 8000ab6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aba:	4a62      	ldr	r2, [pc, #392]	; (8000c44 <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000abc:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac0:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8000c4c <HAL_GPIO_Init+0x198>
{ 
 8000ac4:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ac6:	fa38 f403 	lsrs.w	r4, r8, r3
 8000aca:	d102      	bne.n	8000ad2 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 8000acc:	b005      	add	sp, #20
 8000ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ad2:	2401      	movs	r4, #1
 8000ad4:	409c      	lsls	r4, r3
    if(iocurrent)
 8000ad6:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ada:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 8000adc:	f000 80a7 	beq.w	8000c2e <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000ae0:	684c      	ldr	r4, [r1, #4]
 8000ae2:	f024 0a10 	bic.w	sl, r4, #16
 8000ae6:	f1ba 0f02 	cmp.w	sl, #2
 8000aea:	d116      	bne.n	8000b1a <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000aec:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 8000af0:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000af4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000af8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000afc:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000b00:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000b04:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000b08:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000b0c:	690d      	ldr	r5, [r1, #16]
 8000b0e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000b12:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 8000b16:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000b1a:	2503      	movs	r5, #3
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b24:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 8000b26:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b2a:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000b2e:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b32:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b36:	f10a 3aff 	add.w	sl, sl, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b3a:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b3e:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8000b42:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b46:	d816      	bhi.n	8000b76 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 8000b48:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000b4c:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b4e:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000b52:	fa07 fa0c 	lsl.w	sl, r7, ip
 8000b56:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000b5a:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b5e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000b62:	9f01      	ldr	r7, [sp, #4]
 8000b64:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b68:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000b6c:	fa0e fe03 	lsl.w	lr, lr, r3
 8000b70:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000b74:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b76:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b78:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000b7a:	688f      	ldr	r7, [r1, #8]
 8000b7c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000b80:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000b82:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000b84:	00e5      	lsls	r5, r4, #3
 8000b86:	d552      	bpl.n	8000c2e <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000b88:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8c:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000b90:	f023 0703 	bic.w	r7, r3, #3
 8000b94:	f045 0501 	orr.w	r5, r5, #1
 8000b98:	f8c9 5020 	str.w	r5, [r9, #32]
 8000b9c:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000ba0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ba4:	f005 0501 	and.w	r5, r5, #1
 8000ba8:	9503      	str	r5, [sp, #12]
 8000baa:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000bae:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000bb4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8000bb8:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000bba:	fa0e fe0c 	lsl.w	lr, lr, ip
 8000bbe:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bc2:	4d21      	ldr	r5, [pc, #132]	; (8000c48 <HAL_GPIO_Init+0x194>)
 8000bc4:	42a8      	cmp	r0, r5
 8000bc6:	d034      	beq.n	8000c32 <HAL_GPIO_Init+0x17e>
 8000bc8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bcc:	42a8      	cmp	r0, r5
 8000bce:	d032      	beq.n	8000c36 <HAL_GPIO_Init+0x182>
 8000bd0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bd4:	42a8      	cmp	r0, r5
 8000bd6:	d030      	beq.n	8000c3a <HAL_GPIO_Init+0x186>
 8000bd8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bdc:	42a8      	cmp	r0, r5
 8000bde:	d02e      	beq.n	8000c3e <HAL_GPIO_Init+0x18a>
 8000be0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000be4:	42a8      	cmp	r0, r5
 8000be6:	bf14      	ite	ne
 8000be8:	2505      	movne	r5, #5
 8000bea:	2504      	moveq	r5, #4
 8000bec:	fa05 f50c 	lsl.w	r5, r5, ip
 8000bf0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bf4:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bf6:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8000bf8:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bfa:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bfe:	bf0c      	ite	eq
 8000c00:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000c02:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000c04:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000c06:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c08:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000c0c:	bf0c      	ite	eq
 8000c0e:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000c10:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000c12:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000c14:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c16:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000c1a:	bf0c      	ite	eq
 8000c1c:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000c1e:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000c20:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000c22:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c24:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000c26:	bf54      	ite	pl
 8000c28:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 8000c2a:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000c2c:	60d5      	str	r5, [r2, #12]
    position++;
 8000c2e:	3301      	adds	r3, #1
 8000c30:	e749      	b.n	8000ac6 <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c32:	2500      	movs	r5, #0
 8000c34:	e7da      	b.n	8000bec <HAL_GPIO_Init+0x138>
 8000c36:	2501      	movs	r5, #1
 8000c38:	e7d8      	b.n	8000bec <HAL_GPIO_Init+0x138>
 8000c3a:	2502      	movs	r5, #2
 8000c3c:	e7d6      	b.n	8000bec <HAL_GPIO_Init+0x138>
 8000c3e:	2503      	movs	r5, #3
 8000c40:	e7d4      	b.n	8000bec <HAL_GPIO_Init+0x138>
 8000c42:	bf00      	nop
 8000c44:	40010400 	.word	0x40010400
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40023800 	.word	0x40023800

08000c50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c50:	b10a      	cbz	r2, 8000c56 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000c52:	6181      	str	r1, [r0, #24]
 8000c54:	4770      	bx	lr
 8000c56:	0409      	lsls	r1, r1, #16
 8000c58:	e7fb      	b.n	8000c52 <HAL_GPIO_WritePin+0x2>
	...

08000c5c <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8000c5e:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8000c66:	d00c      	beq.n	8000c82 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8000c68:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8000c6a:	491a      	ldr	r1, [pc, #104]	; (8000cd4 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000c6c:	680b      	ldr	r3, [r1, #0]
 8000c6e:	f023 0301 	bic.w	r3, r3, #1
 8000c72:	4313      	orrs	r3, r2
 8000c74:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000c76:	6808      	ldr	r0, [r1, #0]
 8000c78:	f000 0001 	and.w	r0, r0, #1
 8000c7c:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8000c7e:	b002      	add	sp, #8
 8000c80:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c84:	4914      	ldr	r1, [pc, #80]	; (8000cd8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000c86:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000c8a:	d00f      	beq.n	8000cac <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000c8c:	680a      	ldr	r2, [r1, #0]
 8000c8e:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8000c92:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8000c96:	d1e7      	bne.n	8000c68 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000c98:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8000c9c:	d1e4      	bne.n	8000c68 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8000c9e:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000ca0:	6813      	ldr	r3, [r2, #0]
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8000ca8:	2201      	movs	r2, #1
 8000caa:	e7de      	b.n	8000c6a <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cb2:	625a      	str	r2, [r3, #36]	; 0x24
 8000cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cb6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000cba:	9201      	str	r2, [sp, #4]
 8000cbc:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000cbe:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cc0:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000cc2:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cc6:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8000cca:	6259      	str	r1, [r3, #36]	; 0x24
 8000ccc:	e7e1      	b.n	8000c92 <RCC_SetFlashLatencyFromMSIRange+0x36>
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40023c00 	.word	0x40023c00
 8000cd8:	40007000 	.word	0x40007000

08000cdc <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cdc:	6803      	ldr	r3, [r0, #0]
{
 8000cde:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce2:	07d9      	lsls	r1, r3, #31
{
 8000ce4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce6:	d46a      	bmi.n	8000dbe <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	079a      	lsls	r2, r3, #30
 8000cec:	f100 80e6 	bmi.w	8000ebc <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	06de      	lsls	r6, r3, #27
 8000cf4:	d555      	bpl.n	8000da2 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000cf6:	4dc1      	ldr	r5, [pc, #772]	; (8000ffc <HAL_RCC_OscConfig+0x320>)
 8000cf8:	68ab      	ldr	r3, [r5, #8]
 8000cfa:	f013 0f0c 	tst.w	r3, #12
 8000cfe:	f040 8183 	bne.w	8001008 <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d06:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d0a:	6829      	ldr	r1, [r5, #0]
 8000d0c:	fa93 f3a3 	rbit	r3, r3
 8000d10:	fab3 f383 	clz	r3, r3
 8000d14:	2201      	movs	r2, #1
 8000d16:	f003 031f 	and.w	r3, r3, #31
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	420b      	tst	r3, r1
 8000d20:	d002      	beq.n	8000d28 <HAL_RCC_OscConfig+0x4c>
 8000d22:	69a3      	ldr	r3, [r4, #24]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d06e      	beq.n	8000e06 <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d28:	4db4      	ldr	r5, [pc, #720]	; (8000ffc <HAL_RCC_OscConfig+0x320>)
 8000d2a:	6a20      	ldr	r0, [r4, #32]
 8000d2c:	686b      	ldr	r3, [r5, #4]
 8000d2e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d32:	4298      	cmp	r0, r3
 8000d34:	f240 814a 	bls.w	8000fcc <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d38:	f7ff ff90 	bl	8000c5c <RCC_SetFlashLatencyFromMSIRange>
 8000d3c:	2800      	cmp	r0, #0
 8000d3e:	d162      	bne.n	8000e06 <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d40:	686b      	ldr	r3, [r5, #4]
 8000d42:	6a22      	ldr	r2, [r4, #32]
 8000d44:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d4c:	6869      	ldr	r1, [r5, #4]
 8000d4e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000d52:	fa93 f3a3 	rbit	r3, r3
 8000d56:	fab3 f283 	clz	r2, r3
 8000d5a:	69e3      	ldr	r3, [r4, #28]
 8000d5c:	4093      	lsls	r3, r2
 8000d5e:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000d62:	4313      	orrs	r3, r2
 8000d64:	606b      	str	r3, [r5, #4]
 8000d66:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d6a:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000d6e:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000d72:	4ba2      	ldr	r3, [pc, #648]	; (8000ffc <HAL_RCC_OscConfig+0x320>)
 8000d74:	21f0      	movs	r1, #240	; 0xf0
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	fa91 f1a1 	rbit	r1, r1
 8000d7c:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000d80:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000d82:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000d86:	40c3      	lsrs	r3, r0
 8000d88:	1c58      	adds	r0, r3, #1
 8000d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000d8e:	40ca      	lsrs	r2, r1
 8000d90:	499b      	ldr	r1, [pc, #620]	; (8001000 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000d92:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000d94:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000d96:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000d98:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000d9a:	4a9a      	ldr	r2, [pc, #616]	; (8001004 <HAL_RCC_OscConfig+0x328>)
 8000d9c:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000d9e:	f7ff fddf 	bl	8000960 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	071d      	lsls	r5, r3, #28
 8000da6:	f100 8191 	bmi.w	80010cc <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	0758      	lsls	r0, r3, #29
 8000dae:	f100 81d3 	bmi.w	8001158 <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000db2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 8257 	bne.w	8001268 <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 8000dba:	2000      	movs	r0, #0
 8000dbc:	e024      	b.n	8000e08 <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dbe:	4b8f      	ldr	r3, [pc, #572]	; (8000ffc <HAL_RCC_OscConfig+0x320>)
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	f002 020c 	and.w	r2, r2, #12
 8000dc6:	2a08      	cmp	r2, #8
 8000dc8:	d007      	beq.n	8000dda <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	f002 020c 	and.w	r2, r2, #12
 8000dd0:	2a0c      	cmp	r2, #12
 8000dd2:	d11c      	bne.n	8000e0e <HAL_RCC_OscConfig+0x132>
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	03db      	lsls	r3, r3, #15
 8000dd8:	d519      	bpl.n	8000e0e <HAL_RCC_OscConfig+0x132>
 8000dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dde:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de2:	4a86      	ldr	r2, [pc, #536]	; (8000ffc <HAL_RCC_OscConfig+0x320>)
 8000de4:	6811      	ldr	r1, [r2, #0]
 8000de6:	fa93 f3a3 	rbit	r3, r3
 8000dea:	fab3 f383 	clz	r3, r3
 8000dee:	2201      	movs	r2, #1
 8000df0:	f003 031f 	and.w	r3, r3, #31
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	420b      	tst	r3, r1
 8000dfa:	f43f af75 	beq.w	8000ce8 <HAL_RCC_OscConfig+0xc>
 8000dfe:	6863      	ldr	r3, [r4, #4]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f47f af71 	bne.w	8000ce8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000e06:	2001      	movs	r0, #1
}
 8000e08:	b003      	add	sp, #12
 8000e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e0e:	6863      	ldr	r3, [r4, #4]
 8000e10:	4d7a      	ldr	r5, [pc, #488]	; (8000ffc <HAL_RCC_OscConfig+0x320>)
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d120      	bne.n	8000e58 <HAL_RCC_OscConfig+0x17c>
 8000e16:	682b      	ldr	r3, [r5, #0]
 8000e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e1e:	f7ff fdc7 	bl	80009b0 <HAL_GetTick>
 8000e22:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000e26:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e28:	2601      	movs	r6, #1
 8000e2a:	4f74      	ldr	r7, [pc, #464]	; (8000ffc <HAL_RCC_OscConfig+0x320>)
 8000e2c:	fa95 f3a5 	rbit	r3, r5
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	fa95 f3a5 	rbit	r3, r5
 8000e36:	fab3 f383 	clz	r3, r3
 8000e3a:	f003 031f 	and.w	r3, r3, #31
 8000e3e:	fa06 f303 	lsl.w	r3, r6, r3
 8000e42:	4213      	tst	r3, r2
 8000e44:	f47f af50 	bne.w	8000ce8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e48:	f7ff fdb2 	bl	80009b0 <HAL_GetTick>
 8000e4c:	eba0 0008 	sub.w	r0, r0, r8
 8000e50:	2864      	cmp	r0, #100	; 0x64
 8000e52:	d9eb      	bls.n	8000e2c <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8000e54:	2003      	movs	r0, #3
 8000e56:	e7d7      	b.n	8000e08 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e58:	bb13      	cbnz	r3, 8000ea0 <HAL_RCC_OscConfig+0x1c4>
 8000e5a:	682b      	ldr	r3, [r5, #0]
 8000e5c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e64:	602b      	str	r3, [r5, #0]
 8000e66:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e68:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e70:	f7ff fd9e 	bl	80009b0 <HAL_GetTick>
 8000e74:	4680      	mov	r8, r0
 8000e76:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7a:	682a      	ldr	r2, [r5, #0]
 8000e7c:	fa96 f3a6 	rbit	r3, r6
 8000e80:	fab3 f383 	clz	r3, r3
 8000e84:	f003 031f 	and.w	r3, r3, #31
 8000e88:	fa07 f303 	lsl.w	r3, r7, r3
 8000e8c:	4213      	tst	r3, r2
 8000e8e:	f43f af2b 	beq.w	8000ce8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e92:	f7ff fd8d 	bl	80009b0 <HAL_GetTick>
 8000e96:	eba0 0008 	sub.w	r0, r0, r8
 8000e9a:	2864      	cmp	r0, #100	; 0x64
 8000e9c:	d9eb      	bls.n	8000e76 <HAL_RCC_OscConfig+0x19a>
 8000e9e:	e7d9      	b.n	8000e54 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea0:	2b05      	cmp	r3, #5
 8000ea2:	682b      	ldr	r3, [r5, #0]
 8000ea4:	d103      	bne.n	8000eae <HAL_RCC_OscConfig+0x1d2>
 8000ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eaa:	602b      	str	r3, [r5, #0]
 8000eac:	e7b3      	b.n	8000e16 <HAL_RCC_OscConfig+0x13a>
 8000eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb2:	602b      	str	r3, [r5, #0]
 8000eb4:	682b      	ldr	r3, [r5, #0]
 8000eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eba:	e7af      	b.n	8000e1c <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ebc:	4b4f      	ldr	r3, [pc, #316]	; (8000ffc <HAL_RCC_OscConfig+0x320>)
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	f002 020c 	and.w	r2, r2, #12
 8000ec4:	2a04      	cmp	r2, #4
 8000ec6:	d007      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	f002 020c 	and.w	r2, r2, #12
 8000ece:	2a0c      	cmp	r2, #12
 8000ed0:	d124      	bne.n	8000f1c <HAL_RCC_OscConfig+0x240>
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	03df      	lsls	r7, r3, #15
 8000ed6:	d421      	bmi.n	8000f1c <HAL_RCC_OscConfig+0x240>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ede:	4a47      	ldr	r2, [pc, #284]	; (8000ffc <HAL_RCC_OscConfig+0x320>)
 8000ee0:	6810      	ldr	r0, [r2, #0]
 8000ee2:	fa93 f3a3 	rbit	r3, r3
 8000ee6:	fab3 f383 	clz	r3, r3
 8000eea:	2101      	movs	r1, #1
 8000eec:	f003 031f 	and.w	r3, r3, #31
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	4203      	tst	r3, r0
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	d002      	beq.n	8000f00 <HAL_RCC_OscConfig+0x224>
 8000efa:	68e2      	ldr	r2, [r4, #12]
 8000efc:	428a      	cmp	r2, r1
 8000efe:	d182      	bne.n	8000e06 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f00:	6858      	ldr	r0, [r3, #4]
 8000f02:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8000f06:	fa92 f2a2 	rbit	r2, r2
 8000f0a:	fab2 f182 	clz	r1, r2
 8000f0e:	6922      	ldr	r2, [r4, #16]
 8000f10:	408a      	lsls	r2, r1
 8000f12:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 8000f16:	430a      	orrs	r2, r1
 8000f18:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1a:	e6e9      	b.n	8000cf0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f1c:	68e2      	ldr	r2, [r4, #12]
 8000f1e:	2501      	movs	r5, #1
 8000f20:	b382      	cbz	r2, 8000f84 <HAL_RCC_OscConfig+0x2a8>
 8000f22:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8000f26:	fab3 f383 	clz	r3, r3
 8000f2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f2e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000f36:	f7ff fd3b 	bl	80009b0 <HAL_GetTick>
 8000f3a:	2702      	movs	r7, #2
 8000f3c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f3e:	4e2f      	ldr	r6, [pc, #188]	; (8000ffc <HAL_RCC_OscConfig+0x320>)
 8000f40:	fa97 f3a7 	rbit	r3, r7
 8000f44:	6832      	ldr	r2, [r6, #0]
 8000f46:	fa97 f3a7 	rbit	r3, r7
 8000f4a:	fab3 f383 	clz	r3, r3
 8000f4e:	f003 031f 	and.w	r3, r3, #31
 8000f52:	fa05 f303 	lsl.w	r3, r5, r3
 8000f56:	4213      	tst	r3, r2
 8000f58:	d00d      	beq.n	8000f76 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5a:	6871      	ldr	r1, [r6, #4]
 8000f5c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000f60:	fa93 f3a3 	rbit	r3, r3
 8000f64:	fab3 f283 	clz	r2, r3
 8000f68:	6923      	ldr	r3, [r4, #16]
 8000f6a:	4093      	lsls	r3, r2
 8000f6c:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 8000f70:	4313      	orrs	r3, r2
 8000f72:	6073      	str	r3, [r6, #4]
 8000f74:	e6bc      	b.n	8000cf0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f76:	f7ff fd1b 	bl	80009b0 <HAL_GetTick>
 8000f7a:	eba0 0008 	sub.w	r0, r0, r8
 8000f7e:	2802      	cmp	r0, #2
 8000f80:	d9de      	bls.n	8000f40 <HAL_RCC_OscConfig+0x264>
 8000f82:	e767      	b.n	8000e54 <HAL_RCC_OscConfig+0x178>
 8000f84:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000f88:	fab3 f383 	clz	r3, r3
 8000f8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f90:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f98:	f7ff fd0a 	bl	80009b0 <HAL_GetTick>
 8000f9c:	2602      	movs	r6, #2
 8000f9e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa0:	4f16      	ldr	r7, [pc, #88]	; (8000ffc <HAL_RCC_OscConfig+0x320>)
 8000fa2:	fa96 f3a6 	rbit	r3, r6
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	fa96 f3a6 	rbit	r3, r6
 8000fac:	fab3 f383 	clz	r3, r3
 8000fb0:	f003 031f 	and.w	r3, r3, #31
 8000fb4:	fa05 f303 	lsl.w	r3, r5, r3
 8000fb8:	4213      	tst	r3, r2
 8000fba:	f43f ae99 	beq.w	8000cf0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fcf7 	bl	80009b0 <HAL_GetTick>
 8000fc2:	eba0 0008 	sub.w	r0, r0, r8
 8000fc6:	2802      	cmp	r0, #2
 8000fc8:	d9eb      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x2c6>
 8000fca:	e743      	b.n	8000e54 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fcc:	686b      	ldr	r3, [r5, #4]
 8000fce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000fd2:	4303      	orrs	r3, r0
 8000fd4:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fd6:	6869      	ldr	r1, [r5, #4]
 8000fd8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	fab3 f283 	clz	r2, r3
 8000fe4:	69e3      	ldr	r3, [r4, #28]
 8000fe6:	4093      	lsls	r3, r2
 8000fe8:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000fec:	4313      	orrs	r3, r2
 8000fee:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ff0:	f7ff fe34 	bl	8000c5c <RCC_SetFlashLatencyFromMSIRange>
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	f43f aeb6 	beq.w	8000d66 <HAL_RCC_OscConfig+0x8a>
 8000ffa:	e704      	b.n	8000e06 <HAL_RCC_OscConfig+0x12a>
 8000ffc:	40023800 	.word	0x40023800
 8001000:	08002b0e 	.word	0x08002b0e
 8001004:	20000008 	.word	0x20000008
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001008:	69a2      	ldr	r2, [r4, #24]
 800100a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800100e:	2a00      	cmp	r2, #0
 8001010:	d037      	beq.n	8001082 <HAL_RCC_OscConfig+0x3a6>
 8001012:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 8001016:	fab3 f383 	clz	r3, r3
 800101a:	2601      	movs	r6, #1
 800101c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001020:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001028:	f7ff fcc2 	bl	80009b0 <HAL_GetTick>
 800102c:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001030:	4680      	mov	r8, r0
 8001032:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001036:	682a      	ldr	r2, [r5, #0]
 8001038:	fa97 f3a7 	rbit	r3, r7
 800103c:	fab3 f383 	clz	r3, r3
 8001040:	f003 031f 	and.w	r3, r3, #31
 8001044:	fa06 f303 	lsl.w	r3, r6, r3
 8001048:	4213      	tst	r3, r2
 800104a:	d013      	beq.n	8001074 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800104c:	686b      	ldr	r3, [r5, #4]
 800104e:	6a22      	ldr	r2, [r4, #32]
 8001050:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001054:	4313      	orrs	r3, r2
 8001056:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001058:	6869      	ldr	r1, [r5, #4]
 800105a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800105e:	fa93 f3a3 	rbit	r3, r3
 8001062:	fab3 f283 	clz	r2, r3
 8001066:	69e3      	ldr	r3, [r4, #28]
 8001068:	4093      	lsls	r3, r2
 800106a:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800106e:	4313      	orrs	r3, r2
 8001070:	606b      	str	r3, [r5, #4]
 8001072:	e696      	b.n	8000da2 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001074:	f7ff fc9c 	bl	80009b0 <HAL_GetTick>
 8001078:	eba0 0008 	sub.w	r0, r0, r8
 800107c:	2802      	cmp	r0, #2
 800107e:	d9d8      	bls.n	8001032 <HAL_RCC_OscConfig+0x356>
 8001080:	e6e8      	b.n	8000e54 <HAL_RCC_OscConfig+0x178>
 8001082:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 8001086:	fab3 f383 	clz	r3, r3
 800108a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800108e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001096:	f7ff fc8b 	bl	80009b0 <HAL_GetTick>
 800109a:	f44f 7600 	mov.w	r6, #512	; 0x200
 800109e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80010a0:	2701      	movs	r7, #1
 80010a2:	fa96 f3a6 	rbit	r3, r6
 80010a6:	682a      	ldr	r2, [r5, #0]
 80010a8:	fa96 f3a6 	rbit	r3, r6
 80010ac:	fab3 f383 	clz	r3, r3
 80010b0:	f003 031f 	and.w	r3, r3, #31
 80010b4:	fa07 f303 	lsl.w	r3, r7, r3
 80010b8:	4213      	tst	r3, r2
 80010ba:	f43f ae72 	beq.w	8000da2 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010be:	f7ff fc77 	bl	80009b0 <HAL_GetTick>
 80010c2:	eba0 0008 	sub.w	r0, r0, r8
 80010c6:	2802      	cmp	r0, #2
 80010c8:	d9eb      	bls.n	80010a2 <HAL_RCC_OscConfig+0x3c6>
 80010ca:	e6c3      	b.n	8000e54 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010cc:	6962      	ldr	r2, [r4, #20]
 80010ce:	2501      	movs	r5, #1
 80010d0:	49a9      	ldr	r1, [pc, #676]	; (8001378 <HAL_RCC_OscConfig+0x69c>)
 80010d2:	b302      	cbz	r2, 8001116 <HAL_RCC_OscConfig+0x43a>
 80010d4:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 80010d8:	fab3 f383 	clz	r3, r3
 80010dc:	440b      	add	r3, r1
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 80010e2:	f7ff fc65 	bl	80009b0 <HAL_GetTick>
 80010e6:	2602      	movs	r6, #2
 80010e8:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ea:	4fa4      	ldr	r7, [pc, #656]	; (800137c <HAL_RCC_OscConfig+0x6a0>)
 80010ec:	fa96 f3a6 	rbit	r3, r6
 80010f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010f2:	fa96 f3a6 	rbit	r3, r6
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	f003 031f 	and.w	r3, r3, #31
 80010fe:	fa05 f303 	lsl.w	r3, r5, r3
 8001102:	4213      	tst	r3, r2
 8001104:	f47f ae51 	bne.w	8000daa <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001108:	f7ff fc52 	bl	80009b0 <HAL_GetTick>
 800110c:	eba0 0008 	sub.w	r0, r0, r8
 8001110:	2802      	cmp	r0, #2
 8001112:	d9eb      	bls.n	80010ec <HAL_RCC_OscConfig+0x410>
 8001114:	e69e      	b.n	8000e54 <HAL_RCC_OscConfig+0x178>
 8001116:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 800111a:	fab3 f383 	clz	r3, r3
 800111e:	440b      	add	r3, r1
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001124:	f7ff fc44 	bl	80009b0 <HAL_GetTick>
 8001128:	2602      	movs	r6, #2
 800112a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800112c:	4f93      	ldr	r7, [pc, #588]	; (800137c <HAL_RCC_OscConfig+0x6a0>)
 800112e:	fa96 f3a6 	rbit	r3, r6
 8001132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001134:	fa96 f3a6 	rbit	r3, r6
 8001138:	fab3 f383 	clz	r3, r3
 800113c:	f003 031f 	and.w	r3, r3, #31
 8001140:	fa05 f303 	lsl.w	r3, r5, r3
 8001144:	4213      	tst	r3, r2
 8001146:	f43f ae30 	beq.w	8000daa <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800114a:	f7ff fc31 	bl	80009b0 <HAL_GetTick>
 800114e:	eba0 0008 	sub.w	r0, r0, r8
 8001152:	2802      	cmp	r0, #2
 8001154:	d9eb      	bls.n	800112e <HAL_RCC_OscConfig+0x452>
 8001156:	e67d      	b.n	8000e54 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001158:	4b88      	ldr	r3, [pc, #544]	; (800137c <HAL_RCC_OscConfig+0x6a0>)
 800115a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800115c:	00d1      	lsls	r1, r2, #3
 800115e:	d434      	bmi.n	80011ca <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8001160:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001164:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
 800116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001174:	4d82      	ldr	r5, [pc, #520]	; (8001380 <HAL_RCC_OscConfig+0x6a4>)
 8001176:	682b      	ldr	r3, [r5, #0]
 8001178:	05da      	lsls	r2, r3, #23
 800117a:	d528      	bpl.n	80011ce <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800117c:	68a3      	ldr	r3, [r4, #8]
 800117e:	4d7f      	ldr	r5, [pc, #508]	; (800137c <HAL_RCC_OscConfig+0x6a0>)
 8001180:	2b01      	cmp	r3, #1
 8001182:	d134      	bne.n	80011ee <HAL_RCC_OscConfig+0x512>
 8001184:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800118c:	f7ff fc10 	bl	80009b0 <HAL_GetTick>
 8001190:	f44f 7500 	mov.w	r5, #512	; 0x200
 8001194:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001196:	2701      	movs	r7, #1
 8001198:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 800137c <HAL_RCC_OscConfig+0x6a0>
 800119c:	fa95 f3a5 	rbit	r3, r5
 80011a0:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80011a4:	fa95 f3a5 	rbit	r3, r5
 80011a8:	fab3 f383 	clz	r3, r3
 80011ac:	f003 031f 	and.w	r3, r3, #31
 80011b0:	fa07 f303 	lsl.w	r3, r7, r3
 80011b4:	4213      	tst	r3, r2
 80011b6:	d04e      	beq.n	8001256 <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 80011b8:	2e00      	cmp	r6, #0
 80011ba:	f43f adfa 	beq.w	8000db2 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011be:	4a6f      	ldr	r2, [pc, #444]	; (800137c <HAL_RCC_OscConfig+0x6a0>)
 80011c0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80011c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011c6:	6253      	str	r3, [r2, #36]	; 0x24
 80011c8:	e5f3      	b.n	8000db2 <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 80011ca:	2600      	movs	r6, #0
 80011cc:	e7d2      	b.n	8001174 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ce:	682b      	ldr	r3, [r5, #0]
 80011d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80011d6:	f7ff fbeb 	bl	80009b0 <HAL_GetTick>
 80011da:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	05db      	lsls	r3, r3, #23
 80011e0:	d4cc      	bmi.n	800117c <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e2:	f7ff fbe5 	bl	80009b0 <HAL_GetTick>
 80011e6:	1bc0      	subs	r0, r0, r7
 80011e8:	2864      	cmp	r0, #100	; 0x64
 80011ea:	d9f7      	bls.n	80011dc <HAL_RCC_OscConfig+0x500>
 80011ec:	e632      	b.n	8000e54 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ee:	bb23      	cbnz	r3, 800123a <HAL_RCC_OscConfig+0x55e>
 80011f0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80011f2:	f44f 7700 	mov.w	r7, #512	; 0x200
 80011f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011fa:	636b      	str	r3, [r5, #52]	; 0x34
 80011fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011fe:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001202:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001206:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001208:	f7ff fbd2 	bl	80009b0 <HAL_GetTick>
 800120c:	4681      	mov	r9, r0
 800120e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001212:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001214:	fa97 f3a7 	rbit	r3, r7
 8001218:	fab3 f383 	clz	r3, r3
 800121c:	f003 031f 	and.w	r3, r3, #31
 8001220:	fa08 f303 	lsl.w	r3, r8, r3
 8001224:	4213      	tst	r3, r2
 8001226:	d0c7      	beq.n	80011b8 <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001228:	f7ff fbc2 	bl	80009b0 <HAL_GetTick>
 800122c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001230:	eba0 0009 	sub.w	r0, r0, r9
 8001234:	4298      	cmp	r0, r3
 8001236:	d9ea      	bls.n	800120e <HAL_RCC_OscConfig+0x532>
 8001238:	e60c      	b.n	8000e54 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800123a:	2b05      	cmp	r3, #5
 800123c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800123e:	d103      	bne.n	8001248 <HAL_RCC_OscConfig+0x56c>
 8001240:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001244:	636b      	str	r3, [r5, #52]	; 0x34
 8001246:	e79d      	b.n	8001184 <HAL_RCC_OscConfig+0x4a8>
 8001248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800124c:	636b      	str	r3, [r5, #52]	; 0x34
 800124e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001250:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001254:	e799      	b.n	800118a <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001256:	f7ff fbab 	bl	80009b0 <HAL_GetTick>
 800125a:	f241 3388 	movw	r3, #5000	; 0x1388
 800125e:	eba0 0009 	sub.w	r0, r0, r9
 8001262:	4298      	cmp	r0, r3
 8001264:	d99a      	bls.n	800119c <HAL_RCC_OscConfig+0x4c0>
 8001266:	e5f5      	b.n	8000e54 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001268:	4d44      	ldr	r5, [pc, #272]	; (800137c <HAL_RCC_OscConfig+0x6a0>)
 800126a:	68ab      	ldr	r3, [r5, #8]
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	2b0c      	cmp	r3, #12
 8001272:	f43f adc8 	beq.w	8000e06 <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001276:	2a02      	cmp	r2, #2
 8001278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800127c:	d156      	bne.n	800132c <HAL_RCC_OscConfig+0x650>
 800127e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	2200      	movs	r2, #0
 8001288:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800128c:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001294:	f7ff fb8c 	bl	80009b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001298:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 800129a:	4680      	mov	r8, r0
 800129c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a0:	2501      	movs	r5, #1
 80012a2:	fa97 f3a7 	rbit	r3, r7
 80012a6:	6832      	ldr	r2, [r6, #0]
 80012a8:	fa97 f3a7 	rbit	r3, r7
 80012ac:	fab3 f383 	clz	r3, r3
 80012b0:	f003 031f 	and.w	r3, r3, #31
 80012b4:	fa05 f303 	lsl.w	r3, r5, r3
 80012b8:	4213      	tst	r3, r2
 80012ba:	d130      	bne.n	800131e <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012bc:	68b2      	ldr	r2, [r6, #8]
 80012be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80012c2:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80012c6:	430b      	orrs	r3, r1
 80012c8:	4313      	orrs	r3, r2
 80012ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80012cc:	4313      	orrs	r3, r2
 80012ce:	60b3      	str	r3, [r6, #8]
 80012d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012d4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80012d8:	fab3 f383 	clz	r3, r3
 80012dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012e0:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb62 	bl	80009b0 <HAL_GetTick>
 80012ec:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80012f0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f2:	2501      	movs	r5, #1
 80012f4:	4e21      	ldr	r6, [pc, #132]	; (800137c <HAL_RCC_OscConfig+0x6a0>)
 80012f6:	fa94 f3a4 	rbit	r3, r4
 80012fa:	6832      	ldr	r2, [r6, #0]
 80012fc:	fa94 f3a4 	rbit	r3, r4
 8001300:	fab3 f383 	clz	r3, r3
 8001304:	f003 031f 	and.w	r3, r3, #31
 8001308:	fa05 f303 	lsl.w	r3, r5, r3
 800130c:	4213      	tst	r3, r2
 800130e:	f47f ad54 	bne.w	8000dba <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001312:	f7ff fb4d 	bl	80009b0 <HAL_GetTick>
 8001316:	1bc0      	subs	r0, r0, r7
 8001318:	2802      	cmp	r0, #2
 800131a:	d9ec      	bls.n	80012f6 <HAL_RCC_OscConfig+0x61a>
 800131c:	e59a      	b.n	8000e54 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fb47 	bl	80009b0 <HAL_GetTick>
 8001322:	eba0 0008 	sub.w	r0, r0, r8
 8001326:	2802      	cmp	r0, #2
 8001328:	d9bb      	bls.n	80012a2 <HAL_RCC_OscConfig+0x5c6>
 800132a:	e593      	b.n	8000e54 <HAL_RCC_OscConfig+0x178>
 800132c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001330:	fab3 f383 	clz	r3, r3
 8001334:	2200      	movs	r2, #0
 8001336:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800133a:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001342:	f7ff fb35 	bl	80009b0 <HAL_GetTick>
 8001346:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800134a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134c:	2601      	movs	r6, #1
 800134e:	fa94 f3a4 	rbit	r3, r4
 8001352:	682a      	ldr	r2, [r5, #0]
 8001354:	fa94 f3a4 	rbit	r3, r4
 8001358:	fab3 f383 	clz	r3, r3
 800135c:	f003 031f 	and.w	r3, r3, #31
 8001360:	fa06 f303 	lsl.w	r3, r6, r3
 8001364:	4213      	tst	r3, r2
 8001366:	f43f ad28 	beq.w	8000dba <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800136a:	f7ff fb21 	bl	80009b0 <HAL_GetTick>
 800136e:	1bc0      	subs	r0, r0, r7
 8001370:	2802      	cmp	r0, #2
 8001372:	d9ec      	bls.n	800134e <HAL_RCC_OscConfig+0x672>
 8001374:	e56e      	b.n	8000e54 <HAL_RCC_OscConfig+0x178>
 8001376:	bf00      	nop
 8001378:	1091c1a0 	.word	0x1091c1a0
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000

08001384 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001384:	491e      	ldr	r1, [pc, #120]	; (8001400 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8001386:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001388:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 800138a:	f003 020c 	and.w	r2, r3, #12
 800138e:	2a08      	cmp	r2, #8
 8001390:	d005      	beq.n	800139e <HAL_RCC_GetSysClockFreq+0x1a>
 8001392:	2a0c      	cmp	r2, #12
 8001394:	d005      	beq.n	80013a2 <HAL_RCC_GetSysClockFreq+0x1e>
 8001396:	2a04      	cmp	r2, #4
 8001398:	d122      	bne.n	80013e0 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 800139a:	481a      	ldr	r0, [pc, #104]	; (8001404 <HAL_RCC_GetSysClockFreq+0x80>)
}
 800139c:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 800139e:	481a      	ldr	r0, [pc, #104]	; (8001408 <HAL_RCC_GetSysClockFreq+0x84>)
 80013a0:	bd10      	pop	{r4, pc}
 80013a2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80013a6:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013aa:	fab2 f282 	clz	r2, r2
 80013ae:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80013b2:	fa20 f202 	lsr.w	r2, r0, r2
 80013b6:	4815      	ldr	r0, [pc, #84]	; (800140c <HAL_RCC_GetSysClockFreq+0x88>)
 80013b8:	5c84      	ldrb	r4, [r0, r2]
 80013ba:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80013be:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80013c2:	fab0 f280 	clz	r2, r0
 80013c6:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013ca:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80013cc:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013ce:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 80013d0:	bf4c      	ite	mi
 80013d2:	4b0d      	ldrmi	r3, [pc, #52]	; (8001408 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 80013d4:	4b0b      	ldrpl	r3, [pc, #44]	; (8001404 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80013d6:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 80013d8:	4363      	muls	r3, r4
 80013da:	fbb3 f0f0 	udiv	r0, r3, r0
 80013de:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 80013e0:	6848      	ldr	r0, [r1, #4]
 80013e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	fab3 f383 	clz	r3, r3
 80013ee:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 80013f2:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 80013f4:	1c43      	adds	r3, r0, #1
 80013f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013fa:	4098      	lsls	r0, r3
 80013fc:	bd10      	pop	{r4, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	00f42400 	.word	0x00f42400
 8001408:	007a1200 	.word	0x007a1200
 800140c:	08002b26 	.word	0x08002b26

08001410 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001410:	4b6a      	ldr	r3, [pc, #424]	; (80015bc <HAL_RCC_ClockConfig+0x1ac>)
{
 8001412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001416:	681a      	ldr	r2, [r3, #0]
{
 8001418:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800141a:	f002 0201 	and.w	r2, r2, #1
 800141e:	428a      	cmp	r2, r1
{
 8001420:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001422:	d330      	bcc.n	8001486 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001424:	6832      	ldr	r2, [r6, #0]
 8001426:	0794      	lsls	r4, r2, #30
 8001428:	d440      	bmi.n	80014ac <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142a:	07d0      	lsls	r0, r2, #31
 800142c:	d446      	bmi.n	80014bc <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800142e:	4b63      	ldr	r3, [pc, #396]	; (80015bc <HAL_RCC_ClockConfig+0x1ac>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	f002 0201 	and.w	r2, r2, #1
 8001436:	4295      	cmp	r5, r2
 8001438:	f0c0 80ae 	bcc.w	8001598 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800143c:	6832      	ldr	r2, [r6, #0]
 800143e:	0751      	lsls	r1, r2, #29
 8001440:	f100 80b3 	bmi.w	80015aa <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001444:	0713      	lsls	r3, r2, #28
 8001446:	d507      	bpl.n	8001458 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001448:	4a5d      	ldr	r2, [pc, #372]	; (80015c0 <HAL_RCC_ClockConfig+0x1b0>)
 800144a:	6931      	ldr	r1, [r6, #16]
 800144c:	6893      	ldr	r3, [r2, #8]
 800144e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001452:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001456:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001458:	f7ff ff94 	bl	8001384 <HAL_RCC_GetSysClockFreq>
 800145c:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <HAL_RCC_ClockConfig+0x1b0>)
 800145e:	22f0      	movs	r2, #240	; 0xf0
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	fa92 f2a2 	rbit	r2, r2
 8001466:	fab2 f282 	clz	r2, r2
 800146a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800146e:	40d3      	lsrs	r3, r2
 8001470:	4a54      	ldr	r2, [pc, #336]	; (80015c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	40d8      	lsrs	r0, r3
 8001476:	4b54      	ldr	r3, [pc, #336]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001478:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff fa70 	bl	8000960 <HAL_InitTick>
  return HAL_OK;
 8001480:	2000      	movs	r0, #0
}
 8001482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001486:	2901      	cmp	r1, #1
 8001488:	bf02      	ittt	eq
 800148a:	681a      	ldreq	r2, [r3, #0]
 800148c:	f042 0204 	orreq.w	r2, r2, #4
 8001490:	601a      	streq	r2, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	f022 0201 	bic.w	r2, r2, #1
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	4299      	cmp	r1, r3
 80014a4:	d0be      	beq.n	8001424 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
 80014a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ac:	4944      	ldr	r1, [pc, #272]	; (80015c0 <HAL_RCC_ClockConfig+0x1b0>)
 80014ae:	68b0      	ldr	r0, [r6, #8]
 80014b0:	688b      	ldr	r3, [r1, #8]
 80014b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014b6:	4303      	orrs	r3, r0
 80014b8:	608b      	str	r3, [r1, #8]
 80014ba:	e7b6      	b.n	800142a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014bc:	6872      	ldr	r2, [r6, #4]
 80014be:	4940      	ldr	r1, [pc, #256]	; (80015c0 <HAL_RCC_ClockConfig+0x1b0>)
 80014c0:	2a02      	cmp	r2, #2
 80014c2:	d10f      	bne.n	80014e4 <HAL_RCC_ClockConfig+0xd4>
 80014c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c8:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80014cc:	6808      	ldr	r0, [r1, #0]
 80014ce:	fa93 f3a3 	rbit	r3, r3
 80014d2:	fab3 f383 	clz	r3, r3
 80014d6:	2101      	movs	r1, #1
 80014d8:	f003 031f 	and.w	r3, r3, #31
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	4203      	tst	r3, r0
 80014e2:	e013      	b.n	800150c <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014e4:	2a03      	cmp	r2, #3
 80014e6:	d102      	bne.n	80014ee <HAL_RCC_ClockConfig+0xde>
 80014e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014ec:	e7ec      	b.n	80014c8 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80014ee:	2a01      	cmp	r2, #1
 80014f0:	d129      	bne.n	8001546 <HAL_RCC_ClockConfig+0x136>
 80014f2:	2302      	movs	r3, #2
 80014f4:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f8:	6809      	ldr	r1, [r1, #0]
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	fab3 f383 	clz	r3, r3
 8001502:	f003 031f 	and.w	r3, r3, #31
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800150c:	d0cb      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800150e:	4c2c      	ldr	r4, [pc, #176]	; (80015c0 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001510:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001514:	68a3      	ldr	r3, [r4, #8]
 8001516:	f023 0303 	bic.w	r3, r3, #3
 800151a:	431a      	orrs	r2, r3
 800151c:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800151e:	f7ff fa47 	bl	80009b0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001522:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001524:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001526:	2b02      	cmp	r3, #2
 8001528:	d110      	bne.n	800154c <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800152a:	68a3      	ldr	r3, [r4, #8]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b08      	cmp	r3, #8
 8001532:	f43f af7c 	beq.w	800142e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001536:	f7ff fa3b 	bl	80009b0 <HAL_GetTick>
 800153a:	1bc0      	subs	r0, r0, r7
 800153c:	4540      	cmp	r0, r8
 800153e:	d9f4      	bls.n	800152a <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8001540:	2003      	movs	r0, #3
 8001542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800154a:	e7bd      	b.n	80014c8 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800154c:	2b03      	cmp	r3, #3
 800154e:	d10b      	bne.n	8001568 <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001550:	68a3      	ldr	r3, [r4, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b0c      	cmp	r3, #12
 8001558:	f43f af69 	beq.w	800142e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155c:	f7ff fa28 	bl	80009b0 <HAL_GetTick>
 8001560:	1bc0      	subs	r0, r0, r7
 8001562:	4540      	cmp	r0, r8
 8001564:	d9f4      	bls.n	8001550 <HAL_RCC_ClockConfig+0x140>
 8001566:	e7eb      	b.n	8001540 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001568:	2b01      	cmp	r3, #1
 800156a:	d110      	bne.n	800158e <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800156c:	68a3      	ldr	r3, [r4, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b04      	cmp	r3, #4
 8001574:	f43f af5b 	beq.w	800142e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001578:	f7ff fa1a 	bl	80009b0 <HAL_GetTick>
 800157c:	1bc0      	subs	r0, r0, r7
 800157e:	4540      	cmp	r0, r8
 8001580:	d9f4      	bls.n	800156c <HAL_RCC_ClockConfig+0x15c>
 8001582:	e7dd      	b.n	8001540 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001584:	f7ff fa14 	bl	80009b0 <HAL_GetTick>
 8001588:	1bc0      	subs	r0, r0, r7
 800158a:	4540      	cmp	r0, r8
 800158c:	d8d8      	bhi.n	8001540 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800158e:	68a3      	ldr	r3, [r4, #8]
 8001590:	f013 0f0c 	tst.w	r3, #12
 8001594:	d1f6      	bne.n	8001584 <HAL_RCC_ClockConfig+0x174>
 8001596:	e74a      	b.n	800142e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	f022 0201 	bic.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	07da      	lsls	r2, r3, #31
 80015a4:	f53f af7f 	bmi.w	80014a6 <HAL_RCC_ClockConfig+0x96>
 80015a8:	e748      	b.n	800143c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015aa:	4905      	ldr	r1, [pc, #20]	; (80015c0 <HAL_RCC_ClockConfig+0x1b0>)
 80015ac:	68f0      	ldr	r0, [r6, #12]
 80015ae:	688b      	ldr	r3, [r1, #8]
 80015b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015b4:	4303      	orrs	r3, r0
 80015b6:	608b      	str	r3, [r1, #8]
 80015b8:	e744      	b.n	8001444 <HAL_RCC_ClockConfig+0x34>
 80015ba:	bf00      	nop
 80015bc:	40023c00 	.word	0x40023c00
 80015c0:	40023800 	.word	0x40023800
 80015c4:	08002b0e 	.word	0x08002b0e
 80015c8:	20000008 	.word	0x20000008

080015cc <HAL_RCC_GetHCLKFreq>:
}
 80015cc:	4b01      	ldr	r3, [pc, #4]	; (80015d4 <HAL_RCC_GetHCLKFreq+0x8>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000008 	.word	0x20000008

080015d8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	fa92 f2a2 	rbit	r2, r2
 80015e4:	fab2 f282 	clz	r2, r2
 80015e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80015ec:	40d3      	lsrs	r3, r2
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80015f0:	5cd3      	ldrb	r3, [r2, r3]
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80015f4:	6810      	ldr	r0, [r2, #0]
}    
 80015f6:	40d8      	lsrs	r0, r3
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	08002b1e 	.word	0x08002b1e
 8001604:	20000008 	.word	0x20000008

08001608 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_RCC_GetPCLK2Freq+0x24>)
 800160a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	fa92 f2a2 	rbit	r2, r2
 8001614:	fab2 f282 	clz	r2, r2
 8001618:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800161c:	40d3      	lsrs	r3, r2
 800161e:	4a04      	ldr	r2, [pc, #16]	; (8001630 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001620:	5cd3      	ldrb	r3, [r2, r3]
 8001622:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001624:	6810      	ldr	r0, [r2, #0]
} 
 8001626:	40d8      	lsrs	r0, r3
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	08002b1e 	.word	0x08002b1e
 8001634:	20000008 	.word	0x20000008

08001638 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001638:	6803      	ldr	r3, [r0, #0]
{
 800163a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800163e:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8001640:	0798      	lsls	r0, r3, #30
 8001642:	d101      	bne.n	8001648 <HAL_RCCEx_PeriphCLKConfig+0x10>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  
  return HAL_OK;
 8001644:	2000      	movs	r0, #0
 8001646:	e055      	b.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001648:	4b4f      	ldr	r3, [pc, #316]	; (8001788 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800164a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800164c:	00d1      	lsls	r1, r2, #3
 800164e:	d43f      	bmi.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
      pwrclkchanged = SET;
 8001650:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001654:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001658:	625a      	str	r2, [r3, #36]	; 0x24
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	4e49      	ldr	r6, [pc, #292]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001666:	6833      	ldr	r3, [r6, #0]
 8001668:	05da      	lsls	r2, r3, #23
 800166a:	d533      	bpl.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800166c:	4b46      	ldr	r3, [pc, #280]	; (8001788 <HAL_RCCEx_PeriphCLKConfig+0x150>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800166e:	6862      	ldr	r2, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001670:	6819      	ldr	r1, [r3, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001672:	f002 40c0 	and.w	r0, r2, #1610612736	; 0x60000000
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001676:	f001 41c0 	and.w	r1, r1, #1610612736	; 0x60000000
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800167a:	4281      	cmp	r1, r0
 800167c:	d104      	bne.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0x50>
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800167e:	68a0      	ldr	r0, [r4, #8]
 8001680:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
 8001684:	4281      	cmp	r1, r0
 8001686:	d007      	beq.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0x60>
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001688:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800168c:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8001690:	d102      	bne.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001692:	6819      	ldr	r1, [r3, #0]
 8001694:	0388      	lsls	r0, r1, #14
 8001696:	d475      	bmi.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800169a:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 800169e:	d12c      	bne.n	80016fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016a0:	6860      	ldr	r0, [r4, #4]
 80016a2:	4b39      	ldr	r3, [pc, #228]	; (8001788 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80016a4:	f400 3140 	and.w	r1, r0, #196608	; 0x30000
 80016a8:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 80016ac:	d106      	bne.n	80016bc <HAL_RCCEx_PeriphCLKConfig+0x84>
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
 80016b4:	f022 42c0 	bic.w	r2, r2, #1610612736	; 0x60000000
 80016b8:	4302      	orrs	r2, r0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016be:	4311      	orrs	r1, r2
 80016c0:	6359      	str	r1, [r3, #52]	; 0x34
    if(pwrclkchanged == SET)
 80016c2:	2d00      	cmp	r5, #0
 80016c4:	d0be      	beq.n	8001644 <HAL_RCCEx_PeriphCLKConfig+0xc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
 80016ce:	e7b9      	b.n	8001644 <HAL_RCCEx_PeriphCLKConfig+0xc>
    FlagStatus       pwrclkchanged = RESET;
 80016d0:	2500      	movs	r5, #0
 80016d2:	e7c7      	b.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d4:	6833      	ldr	r3, [r6, #0]
 80016d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016da:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80016dc:	f7ff f968 	bl	80009b0 <HAL_GetTick>
 80016e0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e2:	6833      	ldr	r3, [r6, #0]
 80016e4:	05db      	lsls	r3, r3, #23
 80016e6:	d4c1      	bmi.n	800166c <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e8:	f7ff f962 	bl	80009b0 <HAL_GetTick>
 80016ec:	1bc0      	subs	r0, r0, r7
 80016ee:	2864      	cmp	r0, #100	; 0x64
 80016f0:	d9f7      	bls.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
          return HAL_TIMEOUT;
 80016f2:	2003      	movs	r0, #3
}
 80016f4:	b003      	add	sp, #12
 80016f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80016fa:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80016fe:	4293      	cmp	r3, r2
 8001700:	d002      	beq.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001702:	6822      	ldr	r2, [r4, #0]
 8001704:	07d1      	lsls	r1, r2, #31
 8001706:	d407      	bmi.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001708:	68a2      	ldr	r2, [r4, #8]
 800170a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800170e:	4293      	cmp	r3, r2
 8001710:	d0c6      	beq.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	079a      	lsls	r2, r3, #30
 8001716:	d5c3      	bpl.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001718:	4e1b      	ldr	r6, [pc, #108]	; (8001788 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800171a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800171e:	6b71      	ldr	r1, [r6, #52]	; 0x34
 8001720:	f421 3040 	bic.w	r0, r1, #196608	; 0x30000
 8001724:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001728:	fab2 f282 	clz	r2, r2
 800172c:	2701      	movs	r7, #1
 800172e:	f8df e060 	ldr.w	lr, [pc, #96]	; 8001790 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8001732:	4472      	add	r2, lr
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	6017      	str	r7, [r2, #0]
 8001738:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800173c:	fab3 f383 	clz	r3, r3
 8001740:	2200      	movs	r2, #0
 8001742:	4473      	add	r3, lr
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001748:	05cb      	lsls	r3, r1, #23
      RCC->CSR = temp_reg;
 800174a:	6370      	str	r0, [r6, #52]	; 0x34
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800174c:	d5a8      	bpl.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        tickstart = HAL_GetTick();
 800174e:	f7ff f92f 	bl	80009b0 <HAL_GetTick>
 8001752:	f44f 7800 	mov.w	r8, #512	; 0x200
 8001756:	4681      	mov	r9, r0
 8001758:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175c:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800175e:	fa98 f3a8 	rbit	r3, r8
 8001762:	fab3 f383 	clz	r3, r3
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	fa07 f303 	lsl.w	r3, r7, r3
 800176e:	4213      	tst	r3, r2
 8001770:	d196      	bne.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff f91d 	bl	80009b0 <HAL_GetTick>
 8001776:	f241 3388 	movw	r3, #5000	; 0x1388
 800177a:	eba0 0009 	sub.w	r0, r0, r9
 800177e:	4298      	cmp	r0, r3
 8001780:	d9ea      	bls.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8001782:	e7b6      	b.n	80016f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
        return HAL_ERROR; 
 8001784:	2001      	movs	r0, #1
 8001786:	e7b5      	b.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000
 8001790:	1091c1a0 	.word	0x1091c1a0

08001794 <RTC_EnterInitMode>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001794:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001796:	6803      	ldr	r3, [r0, #0]
{
 8001798:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	0652      	lsls	r2, r2, #25
 800179e:	d501      	bpl.n	80017a4 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80017a0:	2000      	movs	r0, #0
 80017a2:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80017aa:	f7ff f901 	bl	80009b0 <HAL_GetTick>
 80017ae:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	065b      	lsls	r3, r3, #25
 80017b6:	d4f3      	bmi.n	80017a0 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80017b8:	f7ff f8fa 	bl	80009b0 <HAL_GetTick>
 80017bc:	1b40      	subs	r0, r0, r5
 80017be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80017c2:	d9f5      	bls.n	80017b0 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80017c4:	2003      	movs	r0, #3
}
 80017c6:	bd38      	pop	{r3, r4, r5, pc}

080017c8 <HAL_RTC_Init>:
{
 80017c8:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80017ca:	4604      	mov	r4, r0
 80017cc:	b1b0      	cbz	r0, 80017fc <HAL_RTC_Init+0x34>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80017ce:	7f43      	ldrb	r3, [r0, #29]
 80017d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017d4:	b913      	cbnz	r3, 80017dc <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80017d6:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80017d8:	f001 f8a4 	bl	8002924 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80017dc:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80017de:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80017e0:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80017e2:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80017e4:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24
 80017e8:	2253      	movs	r2, #83	; 0x53
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80017ec:	f7ff ffd2 	bl	8001794 <RTC_EnterInitMode>
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	b128      	cbz	r0, 8001800 <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80017f4:	22ff      	movs	r2, #255	; 0xff
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80017f8:	2304      	movs	r3, #4
 80017fa:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 80017fc:	2001      	movs	r0, #1
}
 80017fe:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001800:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001802:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001804:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800180c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800180e:	6862      	ldr	r2, [r4, #4]
 8001810:	6899      	ldr	r1, [r3, #8]
 8001812:	432a      	orrs	r2, r5
 8001814:	6965      	ldr	r5, [r4, #20]
 8001816:	432a      	orrs	r2, r5
 8001818:	430a      	orrs	r2, r1
 800181a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800181c:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800181e:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001820:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001828:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 800182a:	68da      	ldr	r2, [r3, #12]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800182c:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 800182e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001832:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001836:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800183c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800183e:	430a      	orrs	r2, r1
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001842:	22ff      	movs	r2, #255	; 0xff
 8001844:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001846:	2301      	movs	r3, #1
 8001848:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 800184a:	bd38      	pop	{r3, r4, r5, pc}

0800184c <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 800184c:	2300      	movs	r3, #0
  
  while(Value >= 10)
 800184e:	2809      	cmp	r0, #9
 8001850:	d803      	bhi.n	800185a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8001852:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8001856:	b2c0      	uxtb	r0, r0
 8001858:	4770      	bx	lr
    Value -= 10;
 800185a:	380a      	subs	r0, #10
    bcdhigh++;
 800185c:	3301      	adds	r3, #1
    Value -= 10;
 800185e:	b2c0      	uxtb	r0, r0
 8001860:	e7f5      	b.n	800184e <RTC_ByteToBcd2+0x2>

08001862 <HAL_RTC_SetTime>:
{
 8001862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001864:	7f03      	ldrb	r3, [r0, #28]
{
 8001866:	4606      	mov	r6, r0
  __HAL_LOCK(hrtc);
 8001868:	2b01      	cmp	r3, #1
{
 800186a:	460f      	mov	r7, r1
 800186c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8001870:	d05e      	beq.n	8001930 <HAL_RTC_SetTime+0xce>
 8001872:	2301      	movs	r3, #1
 8001874:	7733      	strb	r3, [r6, #28]
 8001876:	6833      	ldr	r3, [r6, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001878:	7770      	strb	r0, [r6, #29]
 800187a:	7808      	ldrb	r0, [r1, #0]
 800187c:	784d      	ldrb	r5, [r1, #1]
 800187e:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001880:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8001882:	bb3a      	cbnz	r2, 80018d4 <HAL_RTC_SetTime+0x72>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001884:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00;
 8001888:	bf08      	it	eq
 800188a:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800188c:	f7ff ffde 	bl	800184c <RTC_ByteToBcd2>
 8001890:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8001892:	4628      	mov	r0, r5
 8001894:	f7ff ffda 	bl	800184c <RTC_ByteToBcd2>
 8001898:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800189a:	4620      	mov	r0, r4
 800189c:	f7ff ffd6 	bl	800184c <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 80018a0:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80018a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80018a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80018aa:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80018ae:	22ca      	movs	r2, #202	; 0xca
 80018b0:	6833      	ldr	r3, [r6, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80018b2:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24
 80018b6:	2253      	movs	r2, #83	; 0x53
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80018ba:	f7ff ff6b 	bl	8001794 <RTC_EnterInitMode>
 80018be:	6833      	ldr	r3, [r6, #0]
 80018c0:	4605      	mov	r5, r0
 80018c2:	b1a0      	cbz	r0, 80018ee <HAL_RTC_SetTime+0x8c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80018c4:	22ff      	movs	r2, #255	; 0xff
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80018c8:	2304      	movs	r3, #4
 80018ca:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 80018cc:	2300      	movs	r3, #0
 80018ce:	7733      	strb	r3, [r6, #28]
      return HAL_ERROR;
 80018d0:	2001      	movs	r0, #1
 80018d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80018d4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8) | \
 80018d8:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00;
 80018dc:	bf08      	it	eq
 80018de:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80018e0:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80018e4:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16));   
 80018e6:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80018e8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80018ec:	e7df      	b.n	80018ae <HAL_RTC_SetTime+0x4c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80018ee:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 80018f2:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 80018f6:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80018f8:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80018fa:	68b8      	ldr	r0, [r7, #8]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80018fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001900:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6899      	ldr	r1, [r3, #8]
 8001906:	4302      	orrs	r2, r0
 8001908:	430a      	orrs	r2, r1
 800190a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800190c:	68da      	ldr	r2, [r3, #12]
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800190e:	4630      	mov	r0, r6
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8001910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001914:	60da      	str	r2, [r3, #12]
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001916:	f000 f865 	bl	80019e4 <HAL_RTC_WaitForSynchro>
 800191a:	22ff      	movs	r2, #255	; 0xff
 800191c:	6833      	ldr	r3, [r6, #0]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800191e:	625a      	str	r2, [r3, #36]	; 0x24
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001920:	b118      	cbz	r0, 800192a <HAL_RTC_SetTime+0xc8>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001922:	2304      	movs	r3, #4
      __HAL_UNLOCK(hrtc);
 8001924:	7735      	strb	r5, [r6, #28]
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001926:	7773      	strb	r3, [r6, #29]
 8001928:	e7d2      	b.n	80018d0 <HAL_RTC_SetTime+0x6e>
   hrtc->State = HAL_RTC_STATE_READY;
 800192a:	2301      	movs	r3, #1
   __HAL_UNLOCK(hrtc); 
 800192c:	7730      	strb	r0, [r6, #28]
   hrtc->State = HAL_RTC_STATE_READY;
 800192e:	7773      	strb	r3, [r6, #29]
}
 8001930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001932 <HAL_RTC_SetDate>:
{
 8001932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8001934:	7f03      	ldrb	r3, [r0, #28]
{
 8001936:	4605      	mov	r5, r0
 __HAL_LOCK(hrtc);
 8001938:	2b01      	cmp	r3, #1
 800193a:	f04f 0002 	mov.w	r0, #2
 800193e:	d050      	beq.n	80019e2 <HAL_RTC_SetDate+0xb0>
 8001940:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8001942:	7768      	strb	r0, [r5, #29]
 __HAL_LOCK(hrtc);
 8001944:	772b      	strb	r3, [r5, #28]
 8001946:	784b      	ldrb	r3, [r1, #1]
 8001948:	78c8      	ldrb	r0, [r1, #3]
 800194a:	788e      	ldrb	r6, [r1, #2]
 800194c:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 800194e:	2a00      	cmp	r2, #0
 8001950:	d140      	bne.n	80019d4 <HAL_RTC_SetDate+0xa2>
 8001952:	06da      	lsls	r2, r3, #27
 8001954:	d503      	bpl.n	800195e <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8001956:	f023 0310 	bic.w	r3, r3, #16
 800195a:	330a      	adds	r3, #10
 800195c:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800195e:	f7ff ff75 	bl	800184c <RTC_ByteToBcd2>
 8001962:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8001964:	7848      	ldrb	r0, [r1, #1]
 8001966:	f7ff ff71 	bl	800184c <RTC_ByteToBcd2>
 800196a:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800196c:	4630      	mov	r0, r6
 800196e:	f7ff ff6d 	bl	800184c <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8001972:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8001976:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800197a:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800197e:	22ca      	movs	r2, #202	; 0xca
 8001980:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001982:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001984:	625a      	str	r2, [r3, #36]	; 0x24
 8001986:	2253      	movs	r2, #83	; 0x53
 8001988:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800198a:	f7ff ff03 	bl	8001794 <RTC_EnterInitMode>
 800198e:	682b      	ldr	r3, [r5, #0]
 8001990:	4606      	mov	r6, r0
 8001992:	b138      	cbz	r0, 80019a4 <HAL_RTC_SetDate+0x72>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001994:	22ff      	movs	r2, #255	; 0xff
 8001996:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001998:	2304      	movs	r3, #4
 800199a:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 800199c:	2300      	movs	r3, #0
 800199e:	772b      	strb	r3, [r5, #28]
      return HAL_ERROR;
 80019a0:	2001      	movs	r0, #1
 80019a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80019a4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80019a8:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 80019ac:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80019ae:	68da      	ldr	r2, [r3, #12]
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80019b0:	4628      	mov	r0, r5
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80019b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019b6:	60da      	str	r2, [r3, #12]
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80019b8:	f000 f814 	bl	80019e4 <HAL_RTC_WaitForSynchro>
 80019bc:	22ff      	movs	r2, #255	; 0xff
 80019be:	682b      	ldr	r3, [r5, #0]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80019c2:	b118      	cbz	r0, 80019cc <HAL_RTC_SetDate+0x9a>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80019c4:	2304      	movs	r3, #4
      __HAL_UNLOCK(hrtc);
 80019c6:	772e      	strb	r6, [r5, #28]
      hrtc->State = HAL_RTC_STATE_ERROR;
 80019c8:	776b      	strb	r3, [r5, #29]
 80019ca:	e7e9      	b.n	80019a0 <HAL_RTC_SetDate+0x6e>
    hrtc->State = HAL_RTC_STATE_READY ;
 80019cc:	2301      	movs	r3, #1
    __HAL_UNLOCK(hrtc);
 80019ce:	7728      	strb	r0, [r5, #28]
    hrtc->State = HAL_RTC_STATE_READY ;
 80019d0:	776b      	strb	r3, [r5, #29]
    return HAL_OK;    
 80019d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  (((uint32_t)sDate->Month) << 8) | \
 80019d4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80019d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 80019da:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80019dc:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 80019e0:	e7cd      	b.n	800197e <HAL_RTC_SetDate+0x4c>
}
 80019e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019e4 <HAL_RTC_WaitForSynchro>:
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80019e4:	6802      	ldr	r2, [r0, #0]
{
 80019e6:	b538      	push	{r3, r4, r5, lr}
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80019e8:	68d3      	ldr	r3, [r2, #12]
{
 80019ea:	4604      	mov	r4, r0
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80019ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80019f0:	60d3      	str	r3, [r2, #12]
    
  tickstart = HAL_GetTick();
 80019f2:	f7fe ffdd 	bl	80009b0 <HAL_GetTick>
 80019f6:	4605      	mov	r5, r0

    /* Wait the registers to be synchronised */
    while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	069b      	lsls	r3, r3, #26
 80019fe:	d501      	bpl.n	8001a04 <HAL_RTC_WaitForSynchro+0x20>
        return HAL_TIMEOUT;
      } 
    }
  }

  return HAL_OK;
 8001a00:	2000      	movs	r0, #0
 8001a02:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8001a04:	f7fe ffd4 	bl	80009b0 <HAL_GetTick>
 8001a08:	1b40      	subs	r0, r0, r5
 8001a0a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a0e:	d9f3      	bls.n	80019f8 <HAL_RTC_WaitForSynchro+0x14>
        return HAL_TIMEOUT;
 8001a10:	2003      	movs	r0, #3
}
 8001a12:	bd38      	pop	{r3, r4, r5, pc}

08001a14 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8001a14:	6803      	ldr	r3, [r0, #0]
 8001a16:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8001a18:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001a1c:	4770      	bx	lr

08001a1e <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8001a1e:	6803      	ldr	r3, [r0, #0]
 8001a20:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8001a22:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8001a26:	4770      	bx	lr

08001a28 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a28:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d032      	beq.n	8001a96 <HAL_SPI_Init+0x6e>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a30:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001a34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a38:	b91b      	cbnz	r3, 8001a42 <HAL_SPI_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a3a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a3e:	f000 ff85 	bl	800294c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a42:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a44:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a46:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001a4a:	680b      	ldr	r3, [r1, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8001a4c:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a52:	600b      	str	r3, [r1, #0]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8001a54:	6863      	ldr	r3, [r4, #4]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8001a56:	69a2      	ldr	r2, [r4, #24]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8001a58:	4303      	orrs	r3, r0
 8001a5a:	68e0      	ldr	r0, [r4, #12]
 8001a5c:	4303      	orrs	r3, r0
 8001a5e:	6920      	ldr	r0, [r4, #16]
 8001a60:	4303      	orrs	r3, r0
 8001a62:	6960      	ldr	r0, [r4, #20]
 8001a64:	4303      	orrs	r3, r0
 8001a66:	69e0      	ldr	r0, [r4, #28]
 8001a68:	4303      	orrs	r3, r0
 8001a6a:	6a20      	ldr	r0, [r4, #32]
 8001a6c:	4303      	orrs	r3, r0
 8001a6e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001a70:	4303      	orrs	r3, r0
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8001a72:	f402 7000 	and.w	r0, r2, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8001a76:	4303      	orrs	r3, r0
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001a78:	600b      	str	r3, [r1, #0]

  /* Configure : NSS management */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode);
 8001a7a:	0c12      	lsrs	r2, r2, #16
 8001a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a7e:	f002 0204 	and.w	r2, r2, #4
 8001a82:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 8001a84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode);
 8001a86:	604a      	str	r2, [r1, #4]
#if defined (STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined (STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined (STM32L151xE) || defined (STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a88:	2000      	movs	r0, #0
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 8001a8a:	610b      	str	r3, [r1, #16]
  hspi->State = HAL_SPI_STATE_READY;
 8001a8c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a8e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001a90:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001a94:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a96:	2001      	movs	r0, #1
}
 8001a98:	bd10      	pop	{r4, pc}
	...

08001a9c <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001aa0:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001aa2:	6805      	ldr	r5, [r0, #0]
 8001aa4:	68c2      	ldr	r2, [r0, #12]
 8001aa6:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001aa8:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001aaa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ab2:	6883      	ldr	r3, [r0, #8]
 8001ab4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8001ab6:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ab8:	4303      	orrs	r3, r0
 8001aba:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001abe:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ac2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8001ac4:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ac8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001aca:	4313      	orrs	r3, r2
 8001acc:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ace:	696b      	ldr	r3, [r5, #20]
 8001ad0:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8001ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ad8:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ada:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ade:	616b      	str	r3, [r5, #20]
 8001ae0:	4b7e      	ldr	r3, [pc, #504]	; (8001cdc <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ae2:	d17f      	bne.n	8001be4 <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8001ae4:	429d      	cmp	r5, r3
 8001ae6:	f04f 0419 	mov.w	r4, #25
 8001aea:	d147      	bne.n	8001b7c <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001aec:	f7ff fd8c 	bl	8001608 <HAL_RCC_GetPCLK2Freq>
 8001af0:	fb04 f300 	mul.w	r3, r4, r0
 8001af4:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001af8:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001afc:	007f      	lsls	r7, r7, #1
 8001afe:	fbb3 f3f7 	udiv	r3, r3, r7
 8001b02:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b06:	011f      	lsls	r7, r3, #4
 8001b08:	f7ff fd7e 	bl	8001608 <HAL_RCC_GetPCLK2Freq>
 8001b0c:	4360      	muls	r0, r4
 8001b0e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fbb0 f6f3 	udiv	r6, r0, r3
 8001b18:	f7ff fd76 	bl	8001608 <HAL_RCC_GetPCLK2Freq>
 8001b1c:	4360      	muls	r0, r4
 8001b1e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b28:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b2c:	fb08 6313 	mls	r3, r8, r3, r6
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	3332      	adds	r3, #50	; 0x32
 8001b34:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001b3e:	f7ff fd63 	bl	8001608 <HAL_RCC_GetPCLK2Freq>
 8001b42:	4360      	muls	r0, r4
 8001b44:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001b48:	0052      	lsls	r2, r2, #1
 8001b4a:	fbb0 faf2 	udiv	sl, r0, r2
 8001b4e:	f7ff fd5b 	bl	8001608 <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b52:	4360      	muls	r0, r4
 8001b54:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b62:	fb08 a313 	mls	r3, r8, r3, sl
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	3332      	adds	r3, #50	; 0x32
 8001b6a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b74:	4433      	add	r3, r6
 8001b76:	60ab      	str	r3, [r5, #8]
 8001b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b7c:	f7ff fd2c 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8001b80:	fb04 f300 	mul.w	r3, r4, r0
 8001b84:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001b88:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001b8c:	007f      	lsls	r7, r7, #1
 8001b8e:	fbb3 f3f7 	udiv	r3, r3, r7
 8001b92:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b96:	011f      	lsls	r7, r3, #4
 8001b98:	f7ff fd1e 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8001b9c:	4360      	muls	r0, r4
 8001b9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fbb0 f6f3 	udiv	r6, r0, r3
 8001ba8:	f7ff fd16 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8001bac:	4360      	muls	r0, r4
 8001bae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb8:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bbc:	fb08 6313 	mls	r3, r8, r3, r6
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	3332      	adds	r3, #50	; 0x32
 8001bc4:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001bce:	f7ff fd03 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8001bd2:	4360      	muls	r0, r4
 8001bd4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001bd8:	0052      	lsls	r2, r2, #1
 8001bda:	fbb0 faf2 	udiv	sl, r0, r2
 8001bde:	f7ff fcfb 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8001be2:	e7b6      	b.n	8001b52 <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 8001be4:	429d      	cmp	r5, r3
 8001be6:	f04f 0419 	mov.w	r4, #25
 8001bea:	d143      	bne.n	8001c74 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001bec:	f7ff fd0c 	bl	8001608 <HAL_RCC_GetPCLK2Freq>
 8001bf0:	fb04 f300 	mul.w	r3, r4, r0
 8001bf4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001bf8:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001bfc:	00b6      	lsls	r6, r6, #2
 8001bfe:	fbb3 f3f6 	udiv	r3, r3, r6
 8001c02:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c06:	011e      	lsls	r6, r3, #4
 8001c08:	f7ff fcfe 	bl	8001608 <HAL_RCC_GetPCLK2Freq>
 8001c0c:	4360      	muls	r0, r4
 8001c0e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	fbb0 f7f3 	udiv	r7, r0, r3
 8001c18:	f7ff fcf6 	bl	8001608 <HAL_RCC_GetPCLK2Freq>
 8001c1c:	4360      	muls	r0, r4
 8001c1e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c28:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c2c:	fb08 7313 	mls	r3, r8, r3, r7
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	3332      	adds	r3, #50	; 0x32
 8001c34:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c38:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001c3c:	f7ff fce4 	bl	8001608 <HAL_RCC_GetPCLK2Freq>
 8001c40:	4360      	muls	r0, r4
 8001c42:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	fbb0 faf2 	udiv	sl, r0, r2
 8001c4c:	f7ff fcdc 	bl	8001608 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c50:	4360      	muls	r0, r4
 8001c52:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c5c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c60:	fb08 a313 	mls	r3, r8, r3, sl
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	3332      	adds	r3, #50	; 0x32
 8001c68:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	433b      	orrs	r3, r7
 8001c72:	e77f      	b.n	8001b74 <UART_SetConfig+0xd8>
 8001c74:	f7ff fcb0 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8001c78:	fb04 f300 	mul.w	r3, r4, r0
 8001c7c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001c80:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001c84:	00b6      	lsls	r6, r6, #2
 8001c86:	fbb3 f3f6 	udiv	r3, r3, r6
 8001c8a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c8e:	011e      	lsls	r6, r3, #4
 8001c90:	f7ff fca2 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8001c94:	4360      	muls	r0, r4
 8001c96:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001ca0:	f7ff fc9a 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8001ca4:	4360      	muls	r0, r4
 8001ca6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb0:	fbb3 f3f8 	udiv	r3, r3, r8
 8001cb4:	fb08 7313 	mls	r3, r8, r3, r7
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	3332      	adds	r3, #50	; 0x32
 8001cbc:	fbb3 f3f8 	udiv	r3, r3, r8
 8001cc0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001cc4:	f7ff fc88 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8001cc8:	4360      	muls	r0, r4
 8001cca:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001cce:	0092      	lsls	r2, r2, #2
 8001cd0:	fbb0 faf2 	udiv	sl, r0, r2
 8001cd4:	f7ff fc80 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8001cd8:	e7ba      	b.n	8001c50 <UART_SetConfig+0x1b4>
 8001cda:	bf00      	nop
 8001cdc:	40013800 	.word	0x40013800

08001ce0 <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 8001ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	460e      	mov	r6, r1
 8001ce6:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 8001ce8:	f7fe fe62 	bl	80009b0 <HAL_GetTick>
 8001cec:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8001cee:	6822      	ldr	r2, [r4, #0]
 8001cf0:	6813      	ldr	r3, [r2, #0]
 8001cf2:	ea36 0303 	bics.w	r3, r6, r3
 8001cf6:	d101      	bne.n	8001cfc <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 8001cf8:	2000      	movs	r0, #0
}
 8001cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 8001cfc:	1c6b      	adds	r3, r5, #1
 8001cfe:	d0f7      	beq.n	8001cf0 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001d00:	b9c5      	cbnz	r5, 8001d34 <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001d02:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 8001d04:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d0c:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	f022 0220 	bic.w	r2, r2, #32
 8001d14:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d1c:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001d34:	f7fe fe3c 	bl	80009b0 <HAL_GetTick>
 8001d38:	1bc0      	subs	r0, r0, r7
 8001d3a:	4285      	cmp	r5, r0
 8001d3c:	d2d7      	bcs.n	8001cee <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 8001d3e:	e7e0      	b.n	8001d02 <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

08001d40 <HAL_UART_Init>:
{
 8001d40:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001d42:	4604      	mov	r4, r0
 8001d44:	b330      	cbz	r0, 8001d94 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 8001d46:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d4e:	b91b      	cbnz	r3, 8001d58 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001d50:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001d54:	f000 fe20 	bl	8002998 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8001d58:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8001d5a:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8001d5c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001d60:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d62:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001d64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d68:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d6a:	f7ff fe97 	bl	8001a9c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d6e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d70:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d7a:	695a      	ldr	r2, [r3, #20]
 8001d7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d80:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d88:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 8001d8a:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d8c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8001d8e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001d92:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d94:	2001      	movs	r0, #1
}
 8001d96:	bd10      	pop	{r4, pc}

08001d98 <HAL_UART_Transmit>:
{
 8001d98:	b570      	push	{r4, r5, r6, lr}
 8001d9a:	460d      	mov	r5, r1
  tmp_state = huart->State;
 8001d9c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 8001da0:	4604      	mov	r4, r0
  tmp_state = huart->State;
 8001da2:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001da4:	2901      	cmp	r1, #1
{
 8001da6:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001da8:	d001      	beq.n	8001dae <HAL_UART_Transmit+0x16>
 8001daa:	2922      	cmp	r1, #34	; 0x22
 8001dac:	d14d      	bne.n	8001e4a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 8001dae:	2d00      	cmp	r5, #0
 8001db0:	d049      	beq.n	8001e46 <HAL_UART_Transmit+0xae>
 8001db2:	2a00      	cmp	r2, #0
 8001db4:	d047      	beq.n	8001e46 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001db6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d045      	beq.n	8001e4a <HAL_UART_Transmit+0xb2>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8001dc8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 8001dcc:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8001dce:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8001dd0:	bf0c      	ite	eq
 8001dd2:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001dd4:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 8001dd6:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001dd8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 8001ddc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001dde:	b98a      	cbnz	r2, 8001e04 <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8001de0:	4632      	mov	r2, r6
 8001de2:	2140      	movs	r1, #64	; 0x40
 8001de4:	4620      	mov	r0, r4
 8001de6:	f7ff ff7b 	bl	8001ce0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001dea:	b9c0      	cbnz	r0, 8001e1e <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001dec:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001df0:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8001df2:	bf0c      	ite	eq
 8001df4:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 8001df6:	2301      	movne	r3, #1
 8001df8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 8001e02:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e04:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 8001e06:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 8001e0c:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001e0e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001e12:	4632      	mov	r2, r6
 8001e14:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e16:	d10d      	bne.n	8001e34 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001e18:	f7ff ff62 	bl	8001ce0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001e1c:	b108      	cbz	r0, 8001e22 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001e1e:	2003      	movs	r0, #3
 8001e20:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001e22:	882b      	ldrh	r3, [r5, #0]
 8001e24:	6822      	ldr	r2, [r4, #0]
 8001e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e2a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001e2c:	6923      	ldr	r3, [r4, #16]
 8001e2e:	b943      	cbnz	r3, 8001e42 <HAL_UART_Transmit+0xaa>
          pData +=2;
 8001e30:	3502      	adds	r5, #2
 8001e32:	e7d3      	b.n	8001ddc <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001e34:	f7ff ff54 	bl	8001ce0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001e38:	2800      	cmp	r0, #0
 8001e3a:	d1f0      	bne.n	8001e1e <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	782a      	ldrb	r2, [r5, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	3501      	adds	r5, #1
 8001e44:	e7ca      	b.n	8001ddc <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 8001e46:	2001      	movs	r0, #1
 8001e48:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8001e4a:	2002      	movs	r0, #2
}
 8001e4c:	bd70      	pop	{r4, r5, r6, pc}

08001e4e <ReadCoeffs>:

int32_t kP = 1040384;
int32_t kT = 524288;

void ReadCoeffs(uint16_t device_addr, int * coeffs)
{
 8001e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e50:	4604      	mov	r4, r0
	uint8_t cmd[2] = {0x0C, 0x89};
 8001e52:	2389      	movs	r3, #137	; 0x89
 8001e54:	200c      	movs	r0, #12
	HAL_Delay(12);
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2); // Software Reset, FIFO-Flush
 8001e56:	0064      	lsls	r4, r4, #1
{
 8001e58:	b089      	sub	sp, #36	; 0x24
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2); // Software Reset, FIFO-Flush
 8001e5a:	b2e4      	uxtb	r4, r4
{
 8001e5c:	460d      	mov	r5, r1
	uint8_t cmd[2] = {0x0C, 0x89};
 8001e5e:	f88d 0008 	strb.w	r0, [sp, #8]
 8001e62:	f88d 3009 	strb.w	r3, [sp, #9]
	HAL_Delay(12);
 8001e66:	f7fe fda9 	bl	80009bc <HAL_Delay>
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2); // Software Reset, FIFO-Flush
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	a902      	add	r1, sp, #8
 8001e6e:	4620      	mov	r0, r4
 8001e70:	f000 fb4c 	bl	800250c <i2cSoft_WriteBuffer>
	HAL_Delay(40);
 8001e74:	2028      	movs	r0, #40	; 0x28
 8001e76:	f7fe fda1 	bl	80009bc <HAL_Delay>

	uint8_t temp;
	do
	{
		i2cSoft_WriteCMD(device_addr<<1, 0x08);
 8001e7a:	2108      	movs	r1, #8
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f000 fb65 	bl	800254c <i2cSoft_WriteCMD>
		i2cSoft_ReadBuffer(device_addr<<1, &temp, 1);
 8001e82:	2201      	movs	r2, #1
 8001e84:	f10d 0107 	add.w	r1, sp, #7
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f000 fb74 	bl	8002576 <i2cSoft_ReadBuffer>
	} while (((temp>>4)&0x0C) != 0x0C);	//Sensor is ready, coeffs are ready
 8001e8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	f003 030c 	and.w	r3, r3, #12
 8001e98:	2b0c      	cmp	r3, #12
 8001e9a:	d1ee      	bne.n	8001e7a <ReadCoeffs+0x2c>
 8001e9c:	2700      	movs	r7, #0
	for (uint8_t i=0; i<18; i++)
	{
		reg_addr = 0x10 + i;
		i2cSoft_WriteCMD(device_addr<<1, reg_addr);
		i2cSoft_ReadBuffer(device_addr<<1, &(temp), 1);
		res[i] = temp;
 8001e9e:	ae03      	add	r6, sp, #12
		i2cSoft_WriteCMD(device_addr<<1, reg_addr);
 8001ea0:	f107 0110 	add.w	r1, r7, #16
 8001ea4:	b2c9      	uxtb	r1, r1
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f000 fb50 	bl	800254c <i2cSoft_WriteCMD>
		i2cSoft_ReadBuffer(device_addr<<1, &(temp), 1);
 8001eac:	2201      	movs	r2, #1
 8001eae:	f10d 0107 	add.w	r1, sp, #7
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f000 fb5f 	bl	8002576 <i2cSoft_ReadBuffer>
		res[i] = temp;
 8001eb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ebc:	55bb      	strb	r3, [r7, r6]
 8001ebe:	3701      	adds	r7, #1
	for (uint8_t i=0; i<18; i++)
 8001ec0:	2f12      	cmp	r7, #18
 8001ec2:	d1ed      	bne.n	8001ea0 <ReadCoeffs+0x52>
	}

	coeffs[0] = ((uint32_t)res[0] << 4) | (((uint32_t)res[1] >> 4) & 0x0F);
 8001ec4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001ec8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8001ecc:	091a      	lsrs	r2, r3, #4
 8001ece:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
	if (coeffs[0] > ((1U << 11) - 1))
 8001ed2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
	{
		coeffs[0] = coeffs[0] - (1U << 12);
 8001ed6:	bf28      	it	cs
 8001ed8:	f5a2 5280 	subcs.w	r2, r2, #4096	; 0x1000
 8001edc:	602a      	str	r2, [r5, #0]
	}

	coeffs[1] = ((uint32_t)(res[1]&0x0F) << 8) | ((uint32_t)res[2]);
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8001ee4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001ee8:	4313      	orrs	r3, r2
	if (coeffs[1] > ((1U << 11) - 1))
 8001eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
	{
		coeffs[1] = coeffs[1] - (1U << 12);
	}

	coeffs[2] = ((uint32_t)res[3] << 12) | ((uint32_t)res[4] << 4) | (((uint32_t)res[5] >> 4) & 0x0F);
 8001eee:	f89d 2010 	ldrb.w	r2, [sp, #16]
		coeffs[1] = coeffs[1] - (1U << 12);
 8001ef2:	bf28      	it	cs
 8001ef4:	f5a3 5380 	subcs.w	r3, r3, #4096	; 0x1000
	coeffs[2] = ((uint32_t)res[3] << 12) | ((uint32_t)res[4] << 4) | (((uint32_t)res[5] >> 4) & 0x0F);
 8001ef8:	f89d 100f 	ldrb.w	r1, [sp, #15]
		coeffs[1] = coeffs[1] - (1U << 12);
 8001efc:	606b      	str	r3, [r5, #4]
	coeffs[2] = ((uint32_t)res[3] << 12) | ((uint32_t)res[4] << 4) | (((uint32_t)res[5] >> 4) & 0x0F);
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001f04:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8001f08:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
	if (coeffs[2] > ((1U << 19) - 1))
 8001f0c:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
	{
		coeffs[2] = coeffs[2] - (1U << 20);
 8001f10:	bf28      	it	cs
 8001f12:	f5a2 1280 	subcs.w	r2, r2, #1048576	; 0x100000
 8001f16:	60aa      	str	r2, [r5, #8]
	}

	coeffs[3] = ((uint32_t)(res[5]&0x0F) << 16) | ((uint32_t)res[6] << 8) | ((uint32_t)res[7]);
 8001f18:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8001f1c:	041b      	lsls	r3, r3, #16
 8001f1e:	ba52      	rev16	r2, r2
 8001f20:	b292      	uxth	r2, r2
 8001f22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f26:	4313      	orrs	r3, r2
 8001f28:	2200      	movs	r2, #0
	if (coeffs[3] > ((1U << 19) - 1))
 8001f2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
	{
		coeffs[3] = coeffs[3] - (1U << 20);
 8001f2e:	bf28      	it	cs
 8001f30:	f5a3 1380 	subcs.w	r3, r3, #1048576	; 0x100000
 8001f34:	60eb      	str	r3, [r5, #12]
 8001f36:	3510      	adds	r5, #16
 8001f38:	18b1      	adds	r1, r6, r2
	}

	for (uint8_t i=0x00; i<0x05; i++)
	{
		coeffs[4+i] = ((uint32_t)res[8+2*i] << 8) | ((uint32_t)res[9+2*i]);
 8001f3a:	7a08      	ldrb	r0, [r1, #8]
 8001f3c:	7a4b      	ldrb	r3, [r1, #9]
 8001f3e:	3202      	adds	r2, #2
 8001f40:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		if (coeffs[4+i] > ((1U << 15) - 1))
 8001f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		{
			coeffs[4+i] = coeffs[4+i] - (1U << 16);
 8001f48:	bf28      	it	cs
 8001f4a:	f5a3 3380 	subcs.w	r3, r3, #65536	; 0x10000
	for (uint8_t i=0x00; i<0x05; i++)
 8001f4e:	2a0a      	cmp	r2, #10
			coeffs[4+i] = coeffs[4+i] - (1U << 16);
 8001f50:	602b      	str	r3, [r5, #0]
 8001f52:	f105 0504 	add.w	r5, r5, #4
	for (uint8_t i=0x00; i<0x05; i++)
 8001f56:	d1ef      	bne.n	8001f38 <ReadCoeffs+0xea>
		}
	}

	cmd[0] = 0x0E;
 8001f58:	260e      	movs	r6, #14
	cmd[1] = 0xA5;
 8001f5a:	23a5      	movs	r3, #165	; 0xa5
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8001f5c:	a902      	add	r1, sp, #8
 8001f5e:	2202      	movs	r2, #2
 8001f60:	4620      	mov	r0, r4
	cmd[0] = 0x0E;
 8001f62:	f88d 6008 	strb.w	r6, [sp, #8]
	cmd[1] = 0xA5;
 8001f66:	f88d 3009 	strb.w	r3, [sp, #9]
	cmd[0] = 0x0F;
 8001f6a:	270f      	movs	r7, #15
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8001f6c:	f000 face 	bl	800250c <i2cSoft_WriteBuffer>
	cmd[1] = 0x96;
 8001f70:	2396      	movs	r3, #150	; 0x96
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
	cmd[0] = 0x62;
	cmd[1] = 0x02;
 8001f72:	2502      	movs	r5, #2
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8001f74:	a902      	add	r1, sp, #8
 8001f76:	2202      	movs	r2, #2
 8001f78:	4620      	mov	r0, r4
	cmd[1] = 0x96;
 8001f7a:	f88d 3009 	strb.w	r3, [sp, #9]
	cmd[0] = 0x0F;
 8001f7e:	f88d 7008 	strb.w	r7, [sp, #8]
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8001f82:	f000 fac3 	bl	800250c <i2cSoft_WriteBuffer>
	cmd[0] = 0x62;
 8001f86:	2362      	movs	r3, #98	; 0x62
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8001f88:	462a      	mov	r2, r5
 8001f8a:	a902      	add	r1, sp, #8
 8001f8c:	4620      	mov	r0, r4
	cmd[0] = 0x62;
 8001f8e:	f88d 3008 	strb.w	r3, [sp, #8]
	cmd[1] = 0x02;
 8001f92:	f88d 5009 	strb.w	r5, [sp, #9]
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8001f96:	f000 fab9 	bl	800250c <i2cSoft_WriteBuffer>
	cmd[0] = 0x0E;
 8001f9a:	f88d 6008 	strb.w	r6, [sp, #8]
	cmd[1] = 0x00;
 8001f9e:	2600      	movs	r6, #0
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8001fa0:	462a      	mov	r2, r5
 8001fa2:	a902      	add	r1, sp, #8
 8001fa4:	4620      	mov	r0, r4
	cmd[1] = 0x00;
 8001fa6:	f88d 6009 	strb.w	r6, [sp, #9]
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8001faa:	f000 faaf 	bl	800250c <i2cSoft_WriteBuffer>
	cmd[0] = 0x0F;
	cmd[1] = 0x00;
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8001fae:	462a      	mov	r2, r5
 8001fb0:	a902      	add	r1, sp, #8
 8001fb2:	4620      	mov	r0, r4
	cmd[0] = 0x0F;
 8001fb4:	f88d 7008 	strb.w	r7, [sp, #8]
	cmd[1] = 0x00;
 8001fb8:	f88d 6009 	strb.w	r6, [sp, #9]
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8001fbc:	f000 faa6 	bl	800250c <i2cSoft_WriteBuffer>

	HAL_Delay(100);
 8001fc0:	2064      	movs	r0, #100	; 0x64
 8001fc2:	f7fe fcfb 	bl	80009bc <HAL_Delay>
}
 8001fc6:	b009      	add	sp, #36	; 0x24
 8001fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001fcc <CFG_Measurement>:


void CFG_Measurement(uint16_t device_addr, uint8_t PRECISION)
{
 8001fcc:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd[2] = {0x06, 0x26};
 8001fce:	4b17      	ldr	r3, [pc, #92]	; (800202c <CFG_Measurement+0x60>)
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8001fd0:	0040      	lsls	r0, r0, #1
 8001fd2:	b2c4      	uxtb	r4, r0
	uint8_t cmd[2] = {0x06, 0x26};
 8001fd4:	881b      	ldrh	r3, [r3, #0]
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	a901      	add	r1, sp, #4
 8001fda:	4620      	mov	r0, r4
	uint8_t cmd[2] = {0x06, 0x26};
 8001fdc:	f8ad 3004 	strh.w	r3, [sp, #4]
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8001fe0:	f000 fa94 	bl	800250c <i2cSoft_WriteBuffer>

	uint8_t temp_sens;
	i2cSoft_WriteCMD(device_addr<<1, 0x28);
 8001fe4:	2128      	movs	r1, #40	; 0x28
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f000 fab0 	bl	800254c <i2cSoft_WriteCMD>
	i2cSoft_ReadBuffer(device_addr<<1, &(temp_sens), 1);
 8001fec:	f10d 0103 	add.w	r1, sp, #3
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f000 fabf 	bl	8002576 <i2cSoft_ReadBuffer>

	cmd[0] = 0x07;
 8001ff8:	2307      	movs	r3, #7
 8001ffa:	f88d 3004 	strb.w	r3, [sp, #4]
	cmd[1] = 0xA0;
 8001ffe:	23a0      	movs	r3, #160	; 0xa0
	if (((temp_sens>>7)&0x01)==0x01)
	{
		cmd[1] = cmd[1] | (1<<7);
	}
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8002000:	a901      	add	r1, sp, #4
 8002002:	2202      	movs	r2, #2
 8002004:	4620      	mov	r0, r4
	cmd[1] = 0xA0;
 8002006:	f88d 3005 	strb.w	r3, [sp, #5]
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 800200a:	f000 fa7f 	bl	800250c <i2cSoft_WriteBuffer>

	cmd[0] = 0x09;
 800200e:	2309      	movs	r3, #9
 8002010:	f88d 3004 	strb.w	r3, [sp, #4]
	cmd[1] = 0b00000100;
 8002014:	2304      	movs	r3, #4
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8002016:	2202      	movs	r2, #2
 8002018:	eb0d 0103 	add.w	r1, sp, r3
 800201c:	4620      	mov	r0, r4
	cmd[1] = 0b00000100;
 800201e:	f88d 3005 	strb.w	r3, [sp, #5]
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8002022:	f000 fa73 	bl	800250c <i2cSoft_WriteBuffer>

	/*cmd[0] = 0x08;
	cmd[1] = 0xC7;	//Continuous
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);*/
}
 8002026:	b002      	add	sp, #8
 8002028:	bd10      	pop	{r4, pc}
 800202a:	bf00      	nop
 800202c:	08002b08 	.word	0x08002b08

08002030 <GetTemperature>:
	Readings[0] = coeffs[0]*0.5 + coeffs[1]*Tsc;
	Readings[1] = coeffs[2] + Psc*(coeffs[3] + Psc*(coeffs[6] + Psc*coeffs[8])) + Tsc*coeffs[4] + Tsc*Psc*(coeffs[5] + Psc*coeffs[7]);
}

int32_t GetTemperature(uint16_t device_addr)
{
 8002030:	b530      	push	{r4, r5, lr}
	uint8_t cmd[2] = {0x08, 0x02};
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <GetTemperature+0xa0>)
{
 8002034:	b085      	sub	sp, #20
	uint8_t cmd[2] = {0x08, 0x02};
 8002036:	881b      	ldrh	r3, [r3, #0]
	uint8_t res = 0x00;

	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8002038:	0040      	lsls	r0, r0, #1
	uint8_t cmd[2] = {0x08, 0x02};
 800203a:	f8ad 3008 	strh.w	r3, [sp, #8]
	uint8_t res = 0x00;
 800203e:	2300      	movs	r3, #0
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8002040:	b2c4      	uxtb	r4, r0
	uint8_t res = 0x00;
 8002042:	ad04      	add	r5, sp, #16
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 8002044:	2202      	movs	r2, #2
 8002046:	a902      	add	r1, sp, #8
 8002048:	4620      	mov	r0, r4
	uint8_t res = 0x00;
 800204a:	f805 3d09 	strb.w	r3, [r5, #-9]!
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 800204e:	f000 fa5d 	bl	800250c <i2cSoft_WriteBuffer>

	do
	{
		i2cSoft_WriteCMD(device_addr<<1, cmd[0]);
 8002052:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8002056:	4620      	mov	r0, r4
 8002058:	f000 fa78 	bl	800254c <i2cSoft_WriteCMD>
		i2cSoft_ReadBuffer(device_addr<<1, &res, 1);
 800205c:	2201      	movs	r2, #1
 800205e:	4629      	mov	r1, r5
 8002060:	4620      	mov	r0, r4
 8002062:	f000 fa88 	bl	8002576 <i2cSoft_ReadBuffer>
	} while ((res&0x20) != 0x20);
 8002066:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800206a:	069a      	lsls	r2, r3, #26
 800206c:	d5f1      	bpl.n	8002052 <GetTemperature+0x22>

	uint8_t buffer[3] = {0};
 800206e:	2100      	movs	r1, #0
	i2cSoft_WriteCMD(device_addr<<1, 0x00);
 8002070:	4620      	mov	r0, r4
	uint8_t buffer[3] = {0};
 8002072:	f8ad 100c 	strh.w	r1, [sp, #12]
 8002076:	f88d 100e 	strb.w	r1, [sp, #14]
	i2cSoft_WriteCMD(device_addr<<1, 0x00);
 800207a:	f000 fa67 	bl	800254c <i2cSoft_WriteCMD>
	i2cSoft_ReadBuffer(device_addr<<1, &buffer[0], 1);
 800207e:	2201      	movs	r2, #1
 8002080:	a903      	add	r1, sp, #12
 8002082:	4620      	mov	r0, r4
 8002084:	f000 fa77 	bl	8002576 <i2cSoft_ReadBuffer>
	i2cSoft_WriteCMD(device_addr<<1, 0x01);
 8002088:	2101      	movs	r1, #1
 800208a:	4620      	mov	r0, r4
 800208c:	f000 fa5e 	bl	800254c <i2cSoft_WriteCMD>
	i2cSoft_ReadBuffer(device_addr<<1, &buffer[1], 1);
 8002090:	2201      	movs	r2, #1
 8002092:	f10d 010d 	add.w	r1, sp, #13
 8002096:	4620      	mov	r0, r4
 8002098:	f000 fa6d 	bl	8002576 <i2cSoft_ReadBuffer>
	i2cSoft_WriteCMD(device_addr<<1, 0x02);
 800209c:	2102      	movs	r1, #2
 800209e:	4620      	mov	r0, r4
 80020a0:	f000 fa54 	bl	800254c <i2cSoft_WriteCMD>
	i2cSoft_ReadBuffer(device_addr<<1, &buffer[2], 1);
 80020a4:	2201      	movs	r2, #1
 80020a6:	f10d 010e 	add.w	r1, sp, #14
 80020aa:	4620      	mov	r0, r4
 80020ac:	f000 fa63 	bl	8002576 <i2cSoft_ReadBuffer>
	int32_t Traw = ((uint32_t)buffer[0] << 16)	| ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 80020b0:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80020b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80020b8:	0200      	lsls	r0, r0, #8
 80020ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80020be:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80020c2:	4318      	orrs	r0, r3
	if (Traw & ((uint32_t)1 << 23))
 80020c4:	0203      	lsls	r3, r0, #8
	{
		Traw -= (uint32_t)1 << 24;
 80020c6:	bf48      	it	mi
 80020c8:	f100 407f 	addmi.w	r0, r0, #4278190080	; 0xff000000
	}
	return Traw;
}
 80020cc:	b005      	add	sp, #20
 80020ce:	bd30      	pop	{r4, r5, pc}
 80020d0:	08002b0a 	.word	0x08002b0a

080020d4 <GetPressure>:

int32_t GetPressure(uint16_t device_addr)
{
 80020d4:	b530      	push	{r4, r5, lr}
	uint8_t cmd[2] = {0x08, 0x01};
 80020d6:	4b27      	ldr	r3, [pc, #156]	; (8002174 <GetPressure+0xa0>)
{
 80020d8:	b085      	sub	sp, #20
	uint8_t cmd[2] = {0x08, 0x01};
 80020da:	881b      	ldrh	r3, [r3, #0]
	uint8_t res = 0x00;

	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 80020dc:	0040      	lsls	r0, r0, #1
	uint8_t cmd[2] = {0x08, 0x01};
 80020de:	f8ad 3008 	strh.w	r3, [sp, #8]
	uint8_t res = 0x00;
 80020e2:	2300      	movs	r3, #0
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 80020e4:	b2c4      	uxtb	r4, r0
	uint8_t res = 0x00;
 80020e6:	ad04      	add	r5, sp, #16
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 80020e8:	2202      	movs	r2, #2
 80020ea:	a902      	add	r1, sp, #8
 80020ec:	4620      	mov	r0, r4
	uint8_t res = 0x00;
 80020ee:	f805 3d09 	strb.w	r3, [r5, #-9]!
	i2cSoft_WriteBuffer(device_addr<<1, &cmd[0], 2);
 80020f2:	f000 fa0b 	bl	800250c <i2cSoft_WriteBuffer>

	do
	{
		i2cSoft_WriteCMD(device_addr<<1, cmd[0]);
 80020f6:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80020fa:	4620      	mov	r0, r4
 80020fc:	f000 fa26 	bl	800254c <i2cSoft_WriteCMD>
		i2cSoft_ReadBuffer(device_addr<<1, &res, 1);
 8002100:	2201      	movs	r2, #1
 8002102:	4629      	mov	r1, r5
 8002104:	4620      	mov	r0, r4
 8002106:	f000 fa36 	bl	8002576 <i2cSoft_ReadBuffer>
	} while ((res&0x10) != 0x10);
 800210a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800210e:	06da      	lsls	r2, r3, #27
 8002110:	d5f1      	bpl.n	80020f6 <GetPressure+0x22>

	uint8_t buffer[3] = {0};
 8002112:	2100      	movs	r1, #0
	i2cSoft_WriteCMD(device_addr<<1, 0x00);
 8002114:	4620      	mov	r0, r4
	uint8_t buffer[3] = {0};
 8002116:	f8ad 100c 	strh.w	r1, [sp, #12]
 800211a:	f88d 100e 	strb.w	r1, [sp, #14]
	i2cSoft_WriteCMD(device_addr<<1, 0x00);
 800211e:	f000 fa15 	bl	800254c <i2cSoft_WriteCMD>
	i2cSoft_ReadBuffer(device_addr<<1, &buffer[0], 1);
 8002122:	2201      	movs	r2, #1
 8002124:	a903      	add	r1, sp, #12
 8002126:	4620      	mov	r0, r4
 8002128:	f000 fa25 	bl	8002576 <i2cSoft_ReadBuffer>
	i2cSoft_WriteCMD(device_addr<<1, 0x01);
 800212c:	2101      	movs	r1, #1
 800212e:	4620      	mov	r0, r4
 8002130:	f000 fa0c 	bl	800254c <i2cSoft_WriteCMD>
	i2cSoft_ReadBuffer(device_addr<<1, &buffer[1], 1);
 8002134:	2201      	movs	r2, #1
 8002136:	f10d 010d 	add.w	r1, sp, #13
 800213a:	4620      	mov	r0, r4
 800213c:	f000 fa1b 	bl	8002576 <i2cSoft_ReadBuffer>
	i2cSoft_WriteCMD(device_addr<<1, 0x02);
 8002140:	2102      	movs	r1, #2
 8002142:	4620      	mov	r0, r4
 8002144:	f000 fa02 	bl	800254c <i2cSoft_WriteCMD>
	i2cSoft_ReadBuffer(device_addr<<1, &buffer[2], 1);
 8002148:	2201      	movs	r2, #1
 800214a:	f10d 010e 	add.w	r1, sp, #14
 800214e:	4620      	mov	r0, r4
 8002150:	f000 fa11 	bl	8002576 <i2cSoft_ReadBuffer>
	int32_t Praw = ((uint32_t)buffer[0] << 16)	| ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8002154:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002158:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800215c:	0200      	lsls	r0, r0, #8
 800215e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002162:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002166:	4318      	orrs	r0, r3
	if (Praw & ((uint32_t)1 << 23))
 8002168:	0203      	lsls	r3, r0, #8
	{
		Praw -= (uint32_t)1 << 24;
 800216a:	bf48      	it	mi
 800216c:	f100 407f 	addmi.w	r0, r0, #4278190080	; 0xff000000
	}
	return Praw;
}
 8002170:	b005      	add	sp, #20
 8002172:	bd30      	pop	{r4, r5, pc}
 8002174:	08002b0c 	.word	0x08002b0c

08002178 <CalibTemperature>:

double CalibTemperature(int32_t Traw, int * coeffs)
{
 8002178:	b5d0      	push	{r4, r6, r7, lr}
 800217a:	460c      	mov	r4, r1
	double Tsc = (double)Traw/((double)kT);
 800217c:	f7fe f950 	bl	8000420 <__aeabi_i2d>
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <CalibTemperature+0x58>)
 8002182:	4606      	mov	r6, r0
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	460f      	mov	r7, r1
 8002188:	f7fe f94a 	bl	8000420 <__aeabi_i2d>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4630      	mov	r0, r6
 8002192:	4639      	mov	r1, r7
 8002194:	f7fe fad4 	bl	8000740 <__aeabi_ddiv>
 8002198:	4606      	mov	r6, r0
	return coeffs[0]*0.5 + coeffs[1]*Tsc;
 800219a:	6860      	ldr	r0, [r4, #4]
	double Tsc = (double)Traw/((double)kT);
 800219c:	460f      	mov	r7, r1
	return coeffs[0]*0.5 + coeffs[1]*Tsc;
 800219e:	f7fe f93f 	bl	8000420 <__aeabi_i2d>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4630      	mov	r0, r6
 80021a8:	4639      	mov	r1, r7
 80021aa:	f7fe f99f 	bl	80004ec <__aeabi_dmul>
 80021ae:	4606      	mov	r6, r0
 80021b0:	6820      	ldr	r0, [r4, #0]
 80021b2:	460f      	mov	r7, r1
 80021b4:	f7fe f934 	bl	8000420 <__aeabi_i2d>
 80021b8:	2200      	movs	r2, #0
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <CalibTemperature+0x5c>)
 80021bc:	f7fe f996 	bl	80004ec <__aeabi_dmul>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4630      	mov	r0, r6
 80021c6:	4639      	mov	r1, r7
 80021c8:	f7fd ffde 	bl	8000188 <__adddf3>
}
 80021cc:	bdd0      	pop	{r4, r6, r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000004 	.word	0x20000004
 80021d4:	3fe00000 	.word	0x3fe00000

080021d8 <CalibPressure>:

double CalibPressure(int32_t Traw, int32_t Praw, int * coeffs)
{
 80021d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80021dc:	4692      	mov	sl, r2
 80021de:	460c      	mov	r4, r1
	double Tsc = (double)Traw/((double)kT);
 80021e0:	f7fe f91e 	bl	8000420 <__aeabi_i2d>
 80021e4:	4b47      	ldr	r3, [pc, #284]	; (8002304 <CalibPressure+0x12c>)
 80021e6:	4606      	mov	r6, r0
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	460f      	mov	r7, r1
 80021ec:	f7fe f918 	bl	8000420 <__aeabi_i2d>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4630      	mov	r0, r6
 80021f6:	4639      	mov	r1, r7
 80021f8:	f7fe faa2 	bl	8000740 <__aeabi_ddiv>
 80021fc:	4606      	mov	r6, r0
	double Psc = (double)Praw/((double)kP);
 80021fe:	4620      	mov	r0, r4
	double Tsc = (double)Traw/((double)kT);
 8002200:	460f      	mov	r7, r1
	double Psc = (double)Praw/((double)kP);
 8002202:	f7fe f90d 	bl	8000420 <__aeabi_i2d>
 8002206:	4b40      	ldr	r3, [pc, #256]	; (8002308 <CalibPressure+0x130>)
 8002208:	4604      	mov	r4, r0
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	460d      	mov	r5, r1
 800220e:	f7fe f907 	bl	8000420 <__aeabi_i2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4620      	mov	r0, r4
 8002218:	4629      	mov	r1, r5
 800221a:	f7fe fa91 	bl	8000740 <__aeabi_ddiv>
 800221e:	4604      	mov	r4, r0
 8002220:	460d      	mov	r5, r1
	return coeffs[2] + Psc*(coeffs[3] + Psc*(coeffs[6] + Psc*coeffs[8])) + Tsc*coeffs[4] + Tsc*Psc*(coeffs[5] + Psc*coeffs[7]);
 8002222:	f8da 0020 	ldr.w	r0, [sl, #32]
 8002226:	f7fe f8fb 	bl	8000420 <__aeabi_i2d>
 800222a:	4622      	mov	r2, r4
 800222c:	462b      	mov	r3, r5
 800222e:	f7fe f95d 	bl	80004ec <__aeabi_dmul>
 8002232:	4680      	mov	r8, r0
 8002234:	f8da 0018 	ldr.w	r0, [sl, #24]
 8002238:	4689      	mov	r9, r1
 800223a:	f7fe f8f1 	bl	8000420 <__aeabi_i2d>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4640      	mov	r0, r8
 8002244:	4649      	mov	r1, r9
 8002246:	f7fd ff9f 	bl	8000188 <__adddf3>
 800224a:	4622      	mov	r2, r4
 800224c:	462b      	mov	r3, r5
 800224e:	f7fe f94d 	bl	80004ec <__aeabi_dmul>
 8002252:	4680      	mov	r8, r0
 8002254:	f8da 000c 	ldr.w	r0, [sl, #12]
 8002258:	4689      	mov	r9, r1
 800225a:	f7fe f8e1 	bl	8000420 <__aeabi_i2d>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4640      	mov	r0, r8
 8002264:	4649      	mov	r1, r9
 8002266:	f7fd ff8f 	bl	8000188 <__adddf3>
 800226a:	4622      	mov	r2, r4
 800226c:	462b      	mov	r3, r5
 800226e:	f7fe f93d 	bl	80004ec <__aeabi_dmul>
 8002272:	4680      	mov	r8, r0
 8002274:	f8da 0008 	ldr.w	r0, [sl, #8]
 8002278:	4689      	mov	r9, r1
 800227a:	f7fe f8d1 	bl	8000420 <__aeabi_i2d>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4640      	mov	r0, r8
 8002284:	4649      	mov	r1, r9
 8002286:	f7fd ff7f 	bl	8000188 <__adddf3>
 800228a:	4680      	mov	r8, r0
 800228c:	f8da 0010 	ldr.w	r0, [sl, #16]
 8002290:	4689      	mov	r9, r1
 8002292:	f7fe f8c5 	bl	8000420 <__aeabi_i2d>
 8002296:	4632      	mov	r2, r6
 8002298:	463b      	mov	r3, r7
 800229a:	f7fe f927 	bl	80004ec <__aeabi_dmul>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4640      	mov	r0, r8
 80022a4:	4649      	mov	r1, r9
 80022a6:	f7fd ff6f 	bl	8000188 <__adddf3>
 80022aa:	e9cd 0100 	strd	r0, r1, [sp]
 80022ae:	f8da 001c 	ldr.w	r0, [sl, #28]
 80022b2:	f7fe f8b5 	bl	8000420 <__aeabi_i2d>
 80022b6:	4622      	mov	r2, r4
 80022b8:	462b      	mov	r3, r5
 80022ba:	f7fe f917 	bl	80004ec <__aeabi_dmul>
 80022be:	4680      	mov	r8, r0
 80022c0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80022c4:	4689      	mov	r9, r1
 80022c6:	f7fe f8ab 	bl	8000420 <__aeabi_i2d>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4640      	mov	r0, r8
 80022d0:	4649      	mov	r1, r9
 80022d2:	f7fd ff59 	bl	8000188 <__adddf3>
 80022d6:	4622      	mov	r2, r4
 80022d8:	4680      	mov	r8, r0
 80022da:	4689      	mov	r9, r1
 80022dc:	462b      	mov	r3, r5
 80022de:	4630      	mov	r0, r6
 80022e0:	4639      	mov	r1, r7
 80022e2:	f7fe f903 	bl	80004ec <__aeabi_dmul>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4640      	mov	r0, r8
 80022ec:	4649      	mov	r1, r9
 80022ee:	f7fe f8fd 	bl	80004ec <__aeabi_dmul>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80022fa:	f7fd ff45 	bl	8000188 <__adddf3>
}
 80022fe:	b002      	add	sp, #8
 8002300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002304:	20000004 	.word	0x20000004
 8002308:	20000000 	.word	0x20000000

0800230c <Delay>:

#include "Soft_I2C.h"

static void Delay(void)
{
    volatile uint16_t i = 10;	//	100kHz on 32MHz
 800230c:	230a      	movs	r3, #10
{
 800230e:	b082      	sub	sp, #8
    while ( i ) {
        i--;
 8002310:	f8ad 3006 	strh.w	r3, [sp, #6]
    while ( i ) {
 8002314:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002318:	b29b      	uxth	r3, r3
 800231a:	b90b      	cbnz	r3, 8002320 <Delay+0x14>
    }
}
 800231c:	b002      	add	sp, #8
 800231e:	4770      	bx	lr
        i--;
 8002320:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002324:	3b01      	subs	r3, #1
 8002326:	b29b      	uxth	r3, r3
 8002328:	e7f2      	b.n	8002310 <Delay+0x4>
	...

0800232c <i2cSoft_Start>:

uint8_t i2cSoft_Start()
{
    SDAH;
 800232c:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <i2cSoft_Start+0x3c>)
{
 800232e:	b508      	push	{r3, lr}
    SDAH;
 8002330:	6993      	ldr	r3, [r2, #24]
 8002332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002336:	6193      	str	r3, [r2, #24]
    SCLH;
 8002338:	6993      	ldr	r3, [r2, #24]
 800233a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800233e:	6193      	str	r3, [r2, #24]
    Delay();
 8002340:	f7ff ffe4 	bl	800230c <Delay>
    if ( !(SDAread) )
 8002344:	6913      	ldr	r3, [r2, #16]
 8002346:	0619      	lsls	r1, r3, #24
 8002348:	d401      	bmi.n	800234e <i2cSoft_Start+0x22>
        return 0x00;
 800234a:	2000      	movs	r0, #0
 800234c:	bd08      	pop	{r3, pc}
    SDAL;
 800234e:	6993      	ldr	r3, [r2, #24]
 8002350:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002354:	6193      	str	r3, [r2, #24]
    Delay();
 8002356:	f7ff ffd9 	bl	800230c <Delay>
    if ( SDAread )
 800235a:	6913      	ldr	r3, [r2, #16]
 800235c:	061b      	lsls	r3, r3, #24
 800235e:	d4f4      	bmi.n	800234a <i2cSoft_Start+0x1e>
        return 0x00;
    Delay();
 8002360:	f7ff ffd4 	bl	800230c <Delay>
    return 0x01;
 8002364:	2001      	movs	r0, #1
}
 8002366:	bd08      	pop	{r3, pc}
 8002368:	40020400 	.word	0x40020400

0800236c <i2cSoft_Stop>:

void i2cSoft_Stop()
{
    SCLL;                       // Stop sequence
 800236c:	4a0d      	ldr	r2, [pc, #52]	; (80023a4 <i2cSoft_Stop+0x38>)
{
 800236e:	b508      	push	{r3, lr}
    SCLL;                       // Stop sequence
 8002370:	6993      	ldr	r3, [r2, #24]
 8002372:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002376:	6193      	str	r3, [r2, #24]
    Delay();
 8002378:	f7ff ffc8 	bl	800230c <Delay>
    SDAL;
 800237c:	6993      	ldr	r3, [r2, #24]
 800237e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002382:	6193      	str	r3, [r2, #24]
    Delay();
 8002384:	f7ff ffc2 	bl	800230c <Delay>
    SCLH;
 8002388:	6993      	ldr	r3, [r2, #24]
 800238a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800238e:	6193      	str	r3, [r2, #24]
    Delay();
 8002390:	f7ff ffbc 	bl	800230c <Delay>
    SDAH;
 8002394:	6993      	ldr	r3, [r2, #24]
 8002396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239a:	6193      	str	r3, [r2, #24]
    Delay();
}
 800239c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Delay();
 80023a0:	f7ff bfb4 	b.w	800230c <Delay>
 80023a4:	40020400 	.word	0x40020400

080023a8 <i2cSoft_Ack>:

void i2cSoft_Ack (void)
{
    SCLL;
 80023a8:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <i2cSoft_Ack+0x38>)
{
 80023aa:	b508      	push	{r3, lr}
    SCLL;
 80023ac:	6993      	ldr	r3, [r2, #24]
 80023ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023b2:	6193      	str	r3, [r2, #24]
    Delay();
 80023b4:	f7ff ffaa 	bl	800230c <Delay>
    SDAL;
 80023b8:	6993      	ldr	r3, [r2, #24]
 80023ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023be:	6193      	str	r3, [r2, #24]
    Delay();
 80023c0:	f7ff ffa4 	bl	800230c <Delay>
    SCLH;
 80023c4:	6993      	ldr	r3, [r2, #24]
 80023c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ca:	6193      	str	r3, [r2, #24]
    Delay();
 80023cc:	f7ff ff9e 	bl	800230c <Delay>
    SCLL;
 80023d0:	6993      	ldr	r3, [r2, #24]
 80023d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023d6:	6193      	str	r3, [r2, #24]
    Delay();
}
 80023d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Delay();
 80023dc:	f7ff bf96 	b.w	800230c <Delay>
 80023e0:	40020400 	.word	0x40020400

080023e4 <i2cSoft_NoAck>:

void i2cSoft_NoAck (void)
{
    SCLL;
 80023e4:	4a0d      	ldr	r2, [pc, #52]	; (800241c <i2cSoft_NoAck+0x38>)
{
 80023e6:	b508      	push	{r3, lr}
    SCLL;
 80023e8:	6993      	ldr	r3, [r2, #24]
 80023ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023ee:	6193      	str	r3, [r2, #24]
    Delay();
 80023f0:	f7ff ff8c 	bl	800230c <Delay>
    SDAH;
 80023f4:	6993      	ldr	r3, [r2, #24]
 80023f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023fa:	6193      	str	r3, [r2, #24]
    Delay();
 80023fc:	f7ff ff86 	bl	800230c <Delay>
    SCLH;
 8002400:	6993      	ldr	r3, [r2, #24]
 8002402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002406:	6193      	str	r3, [r2, #24]
    Delay();
 8002408:	f7ff ff80 	bl	800230c <Delay>
    SCLL;
 800240c:	6993      	ldr	r3, [r2, #24]
 800240e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002412:	6193      	str	r3, [r2, #24]
    Delay();
}
 8002414:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Delay();
 8002418:	f7ff bf78 	b.w	800230c <Delay>
 800241c:	40020400 	.word	0x40020400

08002420 <i2cSoft_WaitAck>:

uint8_t i2cSoft_WaitAck(void)
{
    SCLL;
 8002420:	4a0f      	ldr	r2, [pc, #60]	; (8002460 <i2cSoft_WaitAck+0x40>)
{
 8002422:	b508      	push	{r3, lr}
    SCLL;
 8002424:	6993      	ldr	r3, [r2, #24]
 8002426:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800242a:	6193      	str	r3, [r2, #24]
    Delay();
 800242c:	f7ff ff6e 	bl	800230c <Delay>
    SDAH;
 8002430:	6993      	ldr	r3, [r2, #24]
 8002432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002436:	6193      	str	r3, [r2, #24]
    Delay();
 8002438:	f7ff ff68 	bl	800230c <Delay>
    SCLH;
 800243c:	6993      	ldr	r3, [r2, #24]
 800243e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002442:	6193      	str	r3, [r2, #24]
    Delay();
 8002444:	f7ff ff62 	bl	800230c <Delay>
    if ( SDAread ) {
 8002448:	6913      	ldr	r3, [r2, #16]
 800244a:	f013 0f80 	tst.w	r3, #128	; 0x80
        SCLL;
 800244e:	6993      	ldr	r3, [r2, #24]
 8002450:	bf18      	it	ne
 8002452:	2000      	movne	r0, #0
 8002454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002458:	6193      	str	r3, [r2, #24]
        return 0x00;
    }
    SCLL;
    return 0x01;
 800245a:	bf08      	it	eq
 800245c:	2001      	moveq	r0, #1
}
 800245e:	bd08      	pop	{r3, pc}
 8002460:	40020400 	.word	0x40020400

08002464 <i2cSoft_PutByte>:

void i2cSoft_PutByte ( uint8_t data )
{
    uint8_t i = 8;
    while ( i-- ) {
 8002464:	2109      	movs	r1, #9
{
 8002466:	b508      	push	{r3, lr}
 8002468:	4a0f      	ldr	r2, [pc, #60]	; (80024a8 <i2cSoft_PutByte+0x44>)
        SCLL;
 800246a:	6993      	ldr	r3, [r2, #24]
 800246c:	3901      	subs	r1, #1
 800246e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    while ( i-- ) {
 8002472:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
        SCLL;
 8002476:	6193      	str	r3, [r2, #24]
    while ( i-- ) {
 8002478:	d100      	bne.n	800247c <i2cSoft_PutByte+0x18>
        data <<= 1;
        Delay();
        SCLH;
        Delay();
    }
    SCLL;
 800247a:	bd08      	pop	{r3, pc}
        Delay();
 800247c:	f7ff ff46 	bl	800230c <Delay>
            SDAH;
 8002480:	6993      	ldr	r3, [r2, #24]
        if ( data & 0x80 )
 8002482:	f010 0f80 	tst.w	r0, #128	; 0x80
            SDAH;
 8002486:	bf14      	ite	ne
 8002488:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
            SDAL;
 800248c:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
 8002490:	6193      	str	r3, [r2, #24]
        data <<= 1;
 8002492:	0040      	lsls	r0, r0, #1
 8002494:	b2c0      	uxtb	r0, r0
        Delay();
 8002496:	f7ff ff39 	bl	800230c <Delay>
        SCLH;
 800249a:	6993      	ldr	r3, [r2, #24]
 800249c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024a0:	6193      	str	r3, [r2, #24]
        Delay();
 80024a2:	f7ff ff33 	bl	800230c <Delay>
 80024a6:	e7e0      	b.n	800246a <i2cSoft_PutByte+0x6>
 80024a8:	40020400 	.word	0x40020400

080024ac <i2cSoft_GetByte>:
}

uint8_t i2cSoft_GetByte (void)
{
    volatile uint8_t i = 8;
 80024ac:	2308      	movs	r3, #8
{
 80024ae:	b507      	push	{r0, r1, r2, lr}
    uint8_t data = 0;
 80024b0:	2000      	movs	r0, #0

    SDAH;
 80024b2:	4a15      	ldr	r2, [pc, #84]	; (8002508 <i2cSoft_GetByte+0x5c>)
    volatile uint8_t i = 8;
 80024b4:	f88d 3007 	strb.w	r3, [sp, #7]
    SDAH;
 80024b8:	6993      	ldr	r3, [r2, #24]
 80024ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024be:	6193      	str	r3, [r2, #24]
    while ( i-- ) {
 80024c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	1e59      	subs	r1, r3, #1
 80024c8:	b2c9      	uxtb	r1, r1
 80024ca:	f88d 1007 	strb.w	r1, [sp, #7]
 80024ce:	b933      	cbnz	r3, 80024de <i2cSoft_GetByte+0x32>
        Delay();
        if ( SDAread ) {
            data |= 0x01;
        }
    }
    SCLL;
 80024d0:	6993      	ldr	r3, [r2, #24]
 80024d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024d6:	6193      	str	r3, [r2, #24]
    return data;
}
 80024d8:	b003      	add	sp, #12
 80024da:	f85d fb04 	ldr.w	pc, [sp], #4
        SCLL;
 80024de:	6993      	ldr	r3, [r2, #24]
        data <<= 1;
 80024e0:	0040      	lsls	r0, r0, #1
        SCLL;
 80024e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024e6:	6193      	str	r3, [r2, #24]
        data <<= 1;
 80024e8:	b2c0      	uxtb	r0, r0
        Delay();
 80024ea:	f7ff ff0f 	bl	800230c <Delay>
        SCLH;
 80024ee:	6993      	ldr	r3, [r2, #24]
 80024f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024f4:	6193      	str	r3, [r2, #24]
        Delay();
 80024f6:	f7ff ff09 	bl	800230c <Delay>
        if ( SDAread ) {
 80024fa:	6913      	ldr	r3, [r2, #16]
 80024fc:	061b      	lsls	r3, r3, #24
            data |= 0x01;
 80024fe:	bf48      	it	mi
 8002500:	f040 0001 	orrmi.w	r0, r0, #1
 8002504:	e7dc      	b.n	80024c0 <i2cSoft_GetByte+0x14>
 8002506:	bf00      	nop
 8002508:	40020400 	.word	0x40020400

0800250c <i2cSoft_WriteBuffer>:

int i2cSoft_WriteBuffer ( uint8_t chipAddress, uint8_t *buffer, uint32_t sizeOfBuffer )
{
 800250c:	b570      	push	{r4, r5, r6, lr}
 800250e:	4606      	mov	r6, r0
 8002510:	460c      	mov	r4, r1
 8002512:	4615      	mov	r5, r2
    if ( !i2cSoft_Start() )
 8002514:	f7ff ff0a 	bl	800232c <i2cSoft_Start>
 8002518:	b1a8      	cbz	r0, 8002546 <i2cSoft_WriteBuffer+0x3a>
        return I2C_RESULT_ERROR;

    i2cSoft_PutByte( chipAddress );
 800251a:	4630      	mov	r0, r6
 800251c:	f7ff ffa2 	bl	8002464 <i2cSoft_PutByte>
    if ( !i2cSoft_WaitAck() ) {
 8002520:	f7ff ff7e 	bl	8002420 <i2cSoft_WaitAck>
 8002524:	4425      	add	r5, r4
       // i2cSoft_Stop();
        //return I2C_RESULT_ERROR;
    }

    while ( sizeOfBuffer != 0 ) {
 8002526:	42ac      	cmp	r4, r5
 8002528:	d103      	bne.n	8002532 <i2cSoft_WriteBuffer+0x26>
        }

        buffer++;
        sizeOfBuffer--;
    }
    i2cSoft_Stop();
 800252a:	f7ff ff1f 	bl	800236c <i2cSoft_Stop>
    return I2C_RESULT_SUCCESS;
 800252e:	2000      	movs	r0, #0
 8002530:	bd70      	pop	{r4, r5, r6, pc}
        i2cSoft_PutByte( *buffer );
 8002532:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002536:	f7ff ff95 	bl	8002464 <i2cSoft_PutByte>
        if ( !i2cSoft_WaitAck() ) {
 800253a:	f7ff ff71 	bl	8002420 <i2cSoft_WaitAck>
 800253e:	2800      	cmp	r0, #0
 8002540:	d1f1      	bne.n	8002526 <i2cSoft_WriteBuffer+0x1a>
            i2cSoft_Stop();
 8002542:	f7ff ff13 	bl	800236c <i2cSoft_Stop>
        return I2C_RESULT_ERROR;
 8002546:	f04f 30ff 	mov.w	r0, #4294967295
}
 800254a:	bd70      	pop	{r4, r5, r6, pc}

0800254c <i2cSoft_WriteCMD>:

int i2cSoft_WriteCMD ( uint8_t chipAddress, uint8_t CMD )
{
 800254c:	b538      	push	{r3, r4, r5, lr}
 800254e:	4605      	mov	r5, r0
 8002550:	460c      	mov	r4, r1
    if ( !i2cSoft_Start() )
 8002552:	f7ff feeb 	bl	800232c <i2cSoft_Start>
 8002556:	b158      	cbz	r0, 8002570 <i2cSoft_WriteCMD+0x24>
        return I2C_RESULT_ERROR;

    i2cSoft_PutByte( chipAddress );
 8002558:	4628      	mov	r0, r5
 800255a:	f7ff ff83 	bl	8002464 <i2cSoft_PutByte>
    if ( !i2cSoft_WaitAck() ) {
 800255e:	f7ff ff5f 	bl	8002420 <i2cSoft_WaitAck>
       // i2cSoft_Stop();
        //return I2C_RESULT_ERROR;
    }

	i2cSoft_PutByte( CMD );
 8002562:	4620      	mov	r0, r4
 8002564:	f7ff ff7e 	bl	8002464 <i2cSoft_PutByte>
	if ( !i2cSoft_WaitAck() ) {
 8002568:	f7ff ff5a 	bl	8002420 <i2cSoft_WaitAck>
		//i2cSoft_Stop();
		//return I2C_RESULT_ERROR;
	}

    //i2cSoft_Stop();
    return I2C_RESULT_SUCCESS;
 800256c:	2000      	movs	r0, #0
 800256e:	bd38      	pop	{r3, r4, r5, pc}
        return I2C_RESULT_ERROR;
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002574:	bd38      	pop	{r3, r4, r5, pc}

08002576 <i2cSoft_ReadBuffer>:

int i2cSoft_ReadBuffer ( uint8_t chipAddress, uint8_t *buffer, uint32_t sizeOfBuffer )
{
 8002576:	b570      	push	{r4, r5, r6, lr}
 8002578:	4605      	mov	r5, r0
 800257a:	460e      	mov	r6, r1
 800257c:	4614      	mov	r4, r2
    if ( !i2cSoft_Start() )
 800257e:	f7ff fed5 	bl	800232c <i2cSoft_Start>
 8002582:	b1a8      	cbz	r0, 80025b0 <i2cSoft_ReadBuffer+0x3a>
        return I2C_RESULT_ERROR;

    i2cSoft_PutByte( chipAddress + 1 );
 8002584:	1c68      	adds	r0, r5, #1
 8002586:	b2c0      	uxtb	r0, r0
 8002588:	f7ff ff6c 	bl	8002464 <i2cSoft_PutByte>
    if ( !i2cSoft_WaitAck() ) {
 800258c:	f7ff ff48 	bl	8002420 <i2cSoft_WaitAck>
       // i2cSoft_Stop();
       // return I2C_RESULT_ERROR;
    }

    while ( sizeOfBuffer != 0 ) {
 8002590:	b13c      	cbz	r4, 80025a2 <i2cSoft_ReadBuffer+0x2c>
        *buffer = i2cSoft_GetByte();
 8002592:	f7ff ff8b 	bl	80024ac <i2cSoft_GetByte>

        buffer++;
        sizeOfBuffer--;
        if ( sizeOfBuffer == 0 ) {
 8002596:	3c01      	subs	r4, #1
        *buffer = i2cSoft_GetByte();
 8002598:	f806 0b01 	strb.w	r0, [r6], #1
        if ( sizeOfBuffer == 0 ) {
 800259c:	d105      	bne.n	80025aa <i2cSoft_ReadBuffer+0x34>
            i2cSoft_NoAck();
 800259e:	f7ff ff21 	bl	80023e4 <i2cSoft_NoAck>
            break;
        }
        else
            i2cSoft_Ack();
    }
    i2cSoft_Stop();
 80025a2:	f7ff fee3 	bl	800236c <i2cSoft_Stop>
    return I2C_RESULT_SUCCESS;
 80025a6:	2000      	movs	r0, #0
 80025a8:	bd70      	pop	{r4, r5, r6, pc}
            i2cSoft_Ack();
 80025aa:	f7ff fefd 	bl	80023a8 <i2cSoft_Ack>
 80025ae:	e7ef      	b.n	8002590 <i2cSoft_ReadBuffer+0x1a>
        return I2C_RESULT_ERROR;
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80025b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080025b8 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025b8:	4a22      	ldr	r2, [pc, #136]	; (8002644 <SystemClock_Config+0x8c>)
{
 80025ba:	b530      	push	{r4, r5, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025bc:	6813      	ldr	r3, [r2, #0]
{
 80025be:	b097      	sub	sp, #92	; 0x5c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025c0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80025c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025c8:	6013      	str	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80025ca:	2305      	movs	r3, #5
 80025cc:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ce:	2302      	movs	r3, #2
 80025d0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80025d2:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025d6:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025d8:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80025dc:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80025de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e2:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025e4:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80025e6:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025e8:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80025ea:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025ec:	f7fe fb76 	bl	8000cdc <HAL_RCC_OscConfig>
 80025f0:	b100      	cbz	r0, 80025f4 <SystemClock_Config+0x3c>
 80025f2:	e7fe      	b.n	80025f2 <SystemClock_Config+0x3a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025f4:	230f      	movs	r3, #15
 80025f6:	9304      	str	r3, [sp, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025f8:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025fa:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025fc:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025fe:	9008      	str	r0, [sp, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002600:	4621      	mov	r1, r4
 8002602:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002604:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002606:	f7fe ff03 	bl	8001410 <HAL_RCC_ClockConfig>
 800260a:	b100      	cbz	r0, 800260e <SystemClock_Config+0x56>
 800260c:	e7fe      	b.n	800260c <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800260e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002610:	9401      	str	r4, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002612:	9502      	str	r5, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002614:	f7ff f810 	bl	8001638 <HAL_RCCEx_PeriphCLKConfig>
 8002618:	4604      	mov	r4, r0
 800261a:	b100      	cbz	r0, 800261e <SystemClock_Config+0x66>
 800261c:	e7fe      	b.n	800261c <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800261e:	f7fe ffd5 	bl	80015cc <HAL_RCC_GetHCLKFreq>
 8002622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002626:	fbb0 f0f3 	udiv	r0, r0, r3
 800262a:	f7fe fa1b 	bl	8000a64 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800262e:	2004      	movs	r0, #4
 8002630:	f7fe fa2e 	bl	8000a90 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002634:	4622      	mov	r2, r4
 8002636:	4621      	mov	r1, r4
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	f7fe f9de 	bl	80009fc <HAL_NVIC_SetPriority>
}
 8002640:	b017      	add	sp, #92	; 0x5c
 8002642:	bd30      	pop	{r4, r5, pc}
 8002644:	40007000 	.word	0x40007000

08002648 <main>:
{
 8002648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800264c:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 800264e:	f7fe f99b 	bl	8000988 <HAL_Init>
  SystemClock_Config();
 8002652:	f7ff ffb1 	bl	80025b8 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002656:	4b82      	ldr	r3, [pc, #520]	; (8002860 <main+0x218>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_Power_GPIO_Port, MEM_Power_Pin, GPIO_PIN_RESET);
 8002658:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800265a:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(MEM_Power_GPIO_Port, MEM_Power_Pin, GPIO_PIN_RESET);
 800265c:	4881      	ldr	r0, [pc, #516]	; (8002864 <main+0x21c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800265e:	f042 0204 	orr.w	r2, r2, #4
 8002662:	61da      	str	r2, [r3, #28]
 8002664:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(SENS_Power_GPIO_Port, SENS_Power_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : MEM_Power_Pin */
  GPIO_InitStruct.Pin = MEM_Power_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2600      	movs	r6, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002668:	f002 0204 	and.w	r2, r2, #4
 800266c:	9201      	str	r2, [sp, #4]
 800266e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002670:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002672:	2501      	movs	r5, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002674:	f042 0220 	orr.w	r2, r2, #32
 8002678:	61da      	str	r2, [r3, #28]
 800267a:	69da      	ldr	r2, [r3, #28]
  hrtc.Instance = RTC;
 800267c:	4c7a      	ldr	r4, [pc, #488]	; (8002868 <main+0x220>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800267e:	f002 0220 	and.w	r2, r2, #32
 8002682:	9202      	str	r2, [sp, #8]
 8002684:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	61da      	str	r2, [r3, #28]
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	f002 0201 	and.w	r2, r2, #1
 8002694:	9203      	str	r2, [sp, #12]
 8002696:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	f042 0202 	orr.w	r2, r2, #2
 800269e:	61da      	str	r2, [r3, #28]
 80026a0:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(MEM_Power_GPIO_Port, MEM_Power_Pin, GPIO_PIN_RESET);
 80026a2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	9304      	str	r3, [sp, #16]
 80026aa:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(MEM_Power_GPIO_Port, MEM_Power_Pin, GPIO_PIN_RESET);
 80026ac:	f7fe fad0 	bl	8000c50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SCL_Pin|SDA_Pin, GPIO_PIN_SET);
 80026b0:	2201      	movs	r2, #1
 80026b2:	21c0      	movs	r1, #192	; 0xc0
 80026b4:	486d      	ldr	r0, [pc, #436]	; (800286c <main+0x224>)
 80026b6:	f7fe facb 	bl	8000c50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SENS_Power_GPIO_Port, SENS_Power_Pin, GPIO_PIN_RESET);
 80026ba:	2200      	movs	r2, #0
 80026bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026c0:	486a      	ldr	r0, [pc, #424]	; (800286c <main+0x224>)
 80026c2:	f7fe fac5 	bl	8000c50 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = MEM_Power_Pin;
 80026c6:	2320      	movs	r3, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MEM_Power_GPIO_Port, &GPIO_InitStruct);
 80026c8:	a905      	add	r1, sp, #20
 80026ca:	4866      	ldr	r0, [pc, #408]	; (8002864 <main+0x21c>)
  GPIO_InitStruct.Pin = MEM_Power_Pin;
 80026cc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d2:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(MEM_Power_GPIO_Port, &GPIO_InitStruct);
 80026d4:	f7fe f9ee 	bl	8000ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCL_Pin SDA_Pin */
  GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80026d8:	23c0      	movs	r3, #192	; 0xc0
 80026da:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80026dc:	2311      	movs	r3, #17
 80026de:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e0:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e2:	a905      	add	r1, sp, #20
 80026e4:	4861      	ldr	r0, [pc, #388]	; (800286c <main+0x224>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026e8:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ea:	f7fe f9e3 	bl	8000ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENS_Power_Pin */
  GPIO_InitStruct.Pin = SENS_Power_Pin;
 80026ee:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SENS_Power_GPIO_Port, &GPIO_InitStruct);
 80026f2:	a905      	add	r1, sp, #20
 80026f4:	485d      	ldr	r0, [pc, #372]	; (800286c <main+0x224>)
  GPIO_InitStruct.Pin = SENS_Power_Pin;
 80026f6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fc:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(SENS_Power_GPIO_Port, &GPIO_InitStruct);
 80026fe:	f7fe f9d9 	bl	8000ab4 <HAL_GPIO_Init>
  hrtc.Instance = RTC;
 8002702:	4b5b      	ldr	r3, [pc, #364]	; (8002870 <main+0x228>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002704:	4620      	mov	r0, r4
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002706:	e884 0048 	stmia.w	r4, {r3, r6}
  hrtc.Init.AsynchPrediv = 127;
 800270a:	237f      	movs	r3, #127	; 0x7f
 800270c:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 800270e:	23ff      	movs	r3, #255	; 0xff
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002710:	6126      	str	r6, [r4, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002712:	6166      	str	r6, [r4, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002714:	61a6      	str	r6, [r4, #24]
  hrtc.Init.SynchPrediv = 255;
 8002716:	60e3      	str	r3, [r4, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002718:	f7ff f856 	bl	80017c8 <HAL_RTC_Init>
 800271c:	4606      	mov	r6, r0
 800271e:	b100      	cbz	r0, 8002722 <main+0xda>
 8002720:	e7fe      	b.n	8002720 <main+0xd8>
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8002722:	4601      	mov	r1, r0
 8002724:	4620      	mov	r0, r4
 8002726:	f7ff f97a 	bl	8001a1e <HAL_RTCEx_BKUPRead>
 800272a:	f243 27f2 	movw	r7, #13042	; 0x32f2
 800272e:	42b8      	cmp	r0, r7
 8002730:	d022      	beq.n	8002778 <main+0x130>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002732:	462a      	mov	r2, r5
 8002734:	a905      	add	r1, sp, #20
 8002736:	4620      	mov	r0, r4
  sTime.Hours = 0x0;
 8002738:	f88d 6014 	strb.w	r6, [sp, #20]
  sTime.Minutes = 0x0;
 800273c:	f88d 6015 	strb.w	r6, [sp, #21]
  sTime.Seconds = 0x0;
 8002740:	f88d 6016 	strb.w	r6, [sp, #22]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002744:	9606      	str	r6, [sp, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002746:	9607      	str	r6, [sp, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002748:	f7ff f88b 	bl	8001862 <HAL_RTC_SetTime>
 800274c:	b100      	cbz	r0, 8002750 <main+0x108>
 800274e:	e7fe      	b.n	800274e <main+0x106>
  sDate.Year = 0x0;
 8002750:	f88d 0003 	strb.w	r0, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002754:	4669      	mov	r1, sp
 8002756:	462a      	mov	r2, r5
 8002758:	4620      	mov	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800275a:	f88d 5000 	strb.w	r5, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 800275e:	f88d 5001 	strb.w	r5, [sp, #1]
  sDate.Date = 0x1;
 8002762:	f88d 5002 	strb.w	r5, [sp, #2]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002766:	f7ff f8e4 	bl	8001932 <HAL_RTC_SetDate>
 800276a:	4601      	mov	r1, r0
 800276c:	b100      	cbz	r0, 8002770 <main+0x128>
 800276e:	e7fe      	b.n	800276e <main+0x126>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8002770:	463a      	mov	r2, r7
 8002772:	4620      	mov	r0, r4
 8002774:	f7ff f94e 	bl	8001a14 <HAL_RTCEx_BKUPWrite>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002778:	f44f 7582 	mov.w	r5, #260	; 0x104
  hspi1.Instance = SPI1;
 800277c:	483d      	ldr	r0, [pc, #244]	; (8002874 <main+0x22c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800277e:	4b3e      	ldr	r3, [pc, #248]	; (8002878 <main+0x230>)
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002780:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002784:	e880 0028 	stmia.w	r0, {r3, r5}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002788:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800278a:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800278c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800278e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002790:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002792:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002794:	2218      	movs	r2, #24
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002796:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002798:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800279a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800279c:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800279e:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 80027a0:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027a2:	f7ff f941 	bl	8001a28 <HAL_SPI_Init>
 80027a6:	b100      	cbz	r0, 80027aa <main+0x162>
 80027a8:	e7fe      	b.n	80027a8 <main+0x160>
  huart1.Init.BaudRate = 115200;
 80027aa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 80027ae:	4c33      	ldr	r4, [pc, #204]	; (800287c <main+0x234>)
  huart1.Init.BaudRate = 115200;
 80027b0:	4a33      	ldr	r2, [pc, #204]	; (8002880 <main+0x238>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027b2:	60a0      	str	r0, [r4, #8]
  huart1.Init.BaudRate = 115200;
 80027b4:	e884 000c 	stmia.w	r4, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027b8:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027ba:	60e0      	str	r0, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027bc:	6120      	str	r0, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027be:	61a0      	str	r0, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c0:	61e0      	str	r0, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027c2:	4620      	mov	r0, r4
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027c4:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027c6:	f7ff fabb 	bl	8001d40 <HAL_UART_Init>
 80027ca:	4605      	mov	r5, r0
 80027cc:	b100      	cbz	r0, 80027d0 <main+0x188>
 80027ce:	e7fe      	b.n	80027ce <main+0x186>
  HAL_GPIO_WritePin(MEM_Power_GPIO_Port, MEM_Power_Pin, SET);
 80027d0:	2201      	movs	r2, #1
 80027d2:	2120      	movs	r1, #32
 80027d4:	4823      	ldr	r0, [pc, #140]	; (8002864 <main+0x21c>)
 80027d6:	f7fe fa3b 	bl	8000c50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SENS_Power_GPIO_Port, SENS_Power_Pin, SET);
 80027da:	2201      	movs	r2, #1
 80027dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027e0:	4822      	ldr	r0, [pc, #136]	; (800286c <main+0x224>)
 80027e2:	f7fe fa35 	bl	8000c50 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80027e6:	20c8      	movs	r0, #200	; 0xc8
 80027e8:	f7fe f8e8 	bl	80009bc <HAL_Delay>
  int coeffs[9]={0,0,0,0,0,0,0,0,0};
 80027ec:	2224      	movs	r2, #36	; 0x24
 80027ee:	4629      	mov	r1, r5
 80027f0:	a805      	add	r0, sp, #20
 80027f2:	f000 f975 	bl	8002ae0 <memset>
  ReadCoeffs(0x77, &coeffs[0]);
 80027f6:	a905      	add	r1, sp, #20
 80027f8:	2077      	movs	r0, #119	; 0x77
 80027fa:	f7ff fb28 	bl	8001e4e <ReadCoeffs>
  CFG_Measurement(0x77, PRECISION);
 80027fe:	2077      	movs	r0, #119	; 0x77
 8002800:	2107      	movs	r1, #7
 8002802:	f7ff fbe3 	bl	8001fcc <CFG_Measurement>
  HAL_Delay(100);
 8002806:	2064      	movs	r0, #100	; 0x64
 8002808:	f7fe f8d8 	bl	80009bc <HAL_Delay>
	  T = GetTemperature(0x77);
 800280c:	2077      	movs	r0, #119	; 0x77
 800280e:	f7ff fc0f 	bl	8002030 <GetTemperature>
	  Td = CalibTemperature(T,&coeffs[0]);
 8002812:	a905      	add	r1, sp, #20
	  T = GetTemperature(0x77);
 8002814:	4605      	mov	r5, r0
	  Td = CalibTemperature(T,&coeffs[0]);
 8002816:	f7ff fcaf 	bl	8002178 <CalibTemperature>
 800281a:	4680      	mov	r8, r0
	  P = GetPressure(0x77);
 800281c:	2077      	movs	r0, #119	; 0x77
	  Td = CalibTemperature(T,&coeffs[0]);
 800281e:	4689      	mov	r9, r1
	  P = GetPressure(0x77);
 8002820:	f7ff fc58 	bl	80020d4 <GetPressure>
	  Pd = CalibPressure(T,P,&coeffs[0]);
 8002824:	aa05      	add	r2, sp, #20
 8002826:	4601      	mov	r1, r0
 8002828:	4628      	mov	r0, r5
 800282a:	f7ff fcd5 	bl	80021d8 <CalibPressure>
 800282e:	4606      	mov	r6, r0
 8002830:	460f      	mov	r7, r1
	  HAL_UART_Transmit(&huart1,(uint8_t *)(int)Td, 4, 100);
 8002832:	4640      	mov	r0, r8
 8002834:	4649      	mov	r1, r9
 8002836:	f7fe f86b 	bl	8000910 <__aeabi_d2iz>
 800283a:	2364      	movs	r3, #100	; 0x64
 800283c:	2204      	movs	r2, #4
 800283e:	4601      	mov	r1, r0
 8002840:	4620      	mov	r0, r4
 8002842:	f7ff faa9 	bl	8001d98 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)(int)Pd, 4, 100);
 8002846:	4639      	mov	r1, r7
 8002848:	4630      	mov	r0, r6
 800284a:	f7fe f861 	bl	8000910 <__aeabi_d2iz>
 800284e:	2364      	movs	r3, #100	; 0x64
 8002850:	4601      	mov	r1, r0
 8002852:	2204      	movs	r2, #4
 8002854:	4620      	mov	r0, r4
 8002856:	f7ff fa9f 	bl	8001d98 <HAL_UART_Transmit>
	  HAL_Delay(500);
 800285a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800285e:	e7d3      	b.n	8002808 <main+0x1c0>
 8002860:	40023800 	.word	0x40023800
 8002864:	40020800 	.word	0x40020800
 8002868:	2000006c 	.word	0x2000006c
 800286c:	40020400 	.word	0x40020400
 8002870:	40002800 	.word	0x40002800
 8002874:	2000008c 	.word	0x2000008c
 8002878:	40013000 	.word	0x40013000
 800287c:	2000002c 	.word	0x2000002c
 8002880:	40013800 	.word	0x40013800

08002884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002886:	4b26      	ldr	r3, [pc, #152]	; (8002920 <HAL_MspInit+0x9c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002888:	2003      	movs	r0, #3
  __HAL_RCC_COMP_CLK_ENABLE();
 800288a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800288c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002890:	625a      	str	r2, [r3, #36]	; 0x24
 8002892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002894:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002898:	9201      	str	r2, [sp, #4]
 800289a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289c:	6a1a      	ldr	r2, [r3, #32]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	621a      	str	r2, [r3, #32]
 80028a4:	6a1a      	ldr	r2, [r3, #32]
 80028a6:	f002 0201 	and.w	r2, r2, #1
 80028aa:	9202      	str	r2, [sp, #8]
 80028ac:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028bc:	9303      	str	r3, [sp, #12]
 80028be:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c0:	f7fe f88a 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80028c4:	2200      	movs	r2, #0
 80028c6:	f06f 000b 	mvn.w	r0, #11
 80028ca:	4611      	mov	r1, r2
 80028cc:	f7fe f896 	bl	80009fc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80028d0:	2200      	movs	r2, #0
 80028d2:	f06f 000a 	mvn.w	r0, #10
 80028d6:	4611      	mov	r1, r2
 80028d8:	f7fe f890 	bl	80009fc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80028dc:	2200      	movs	r2, #0
 80028de:	f06f 0009 	mvn.w	r0, #9
 80028e2:	4611      	mov	r1, r2
 80028e4:	f7fe f88a 	bl	80009fc <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80028e8:	2200      	movs	r2, #0
 80028ea:	f06f 0004 	mvn.w	r0, #4
 80028ee:	4611      	mov	r1, r2
 80028f0:	f7fe f884 	bl	80009fc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80028f4:	2200      	movs	r2, #0
 80028f6:	f06f 0003 	mvn.w	r0, #3
 80028fa:	4611      	mov	r1, r2
 80028fc:	f7fe f87e 	bl	80009fc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002900:	2200      	movs	r2, #0
 8002902:	f06f 0001 	mvn.w	r0, #1
 8002906:	4611      	mov	r1, r2
 8002908:	f7fe f878 	bl	80009fc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800290c:	2200      	movs	r2, #0
 800290e:	f04f 30ff 	mov.w	r0, #4294967295
 8002912:	4611      	mov	r1, r2
 8002914:	f7fe f872 	bl	80009fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002918:	b005      	add	sp, #20
 800291a:	f85d fb04 	ldr.w	pc, [sp], #4
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800

08002924 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8002924:	6802      	ldr	r2, [r0, #0]
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <HAL_RTC_MspInit+0x20>)
 8002928:	429a      	cmp	r2, r3
 800292a:	d10a      	bne.n	8002942 <HAL_RTC_MspInit+0x1e>
 800292c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002930:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002934:	fab2 f282 	clz	r2, r2
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <HAL_RTC_MspInit+0x24>)
 800293a:	4413      	add	r3, r2
 800293c:	2201      	movs	r2, #1
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	4770      	bx	lr
 8002944:	40002800 	.word	0x40002800
 8002948:	1091c1a0 	.word	0x1091c1a0

0800294c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800294c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800294e:	6802      	ldr	r2, [r0, #0]
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <HAL_SPI_MspInit+0x44>)
 8002952:	429a      	cmp	r2, r3
 8002954:	d118      	bne.n	8002988 <HAL_SPI_MspInit+0x3c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002956:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800295a:	6a1a      	ldr	r2, [r3, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295c:	a901      	add	r1, sp, #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 800295e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002962:	621a      	str	r2, [r3, #32]
 8002964:	6a1b      	ldr	r3, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002966:	480b      	ldr	r0, [pc, #44]	; (8002994 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002970:	23f0      	movs	r3, #240	; 0xf0
 8002972:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297c:	2303      	movs	r3, #3
 800297e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002980:	2305      	movs	r3, #5
 8002982:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002984:	f7fe f896 	bl	8000ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002988:	b007      	add	sp, #28
 800298a:	f85d fb04 	ldr.w	pc, [sp], #4
 800298e:	bf00      	nop
 8002990:	40013000 	.word	0x40013000
 8002994:	40020000 	.word	0x40020000

08002998 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002998:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800299a:	6802      	ldr	r2, [r0, #0]
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <HAL_UART_MspInit+0x44>)
 800299e:	429a      	cmp	r2, r3
 80029a0:	d119      	bne.n	80029d6 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029a2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80029a6:	6a1a      	ldr	r2, [r3, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a8:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80029aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029ae:	621a      	str	r2, [r3, #32]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b2:	480b      	ldr	r0, [pc, #44]	; (80029e0 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80029b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80029c0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c6:	2301      	movs	r3, #1
 80029c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029ce:	2307      	movs	r3, #7
 80029d0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d2:	f7fe f86f 	bl	8000ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80029d6:	b007      	add	sp, #28
 80029d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80029dc:	40013800 	.word	0x40013800
 80029e0:	40020000 	.word	0x40020000

080029e4 <NMI_Handler>:
 80029e4:	4770      	bx	lr

080029e6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80029e6:	e7fe      	b.n	80029e6 <HardFault_Handler>

080029e8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80029e8:	e7fe      	b.n	80029e8 <MemManage_Handler>

080029ea <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80029ea:	e7fe      	b.n	80029ea <BusFault_Handler>

080029ec <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80029ec:	e7fe      	b.n	80029ec <UsageFault_Handler>

080029ee <SVC_Handler>:
 80029ee:	4770      	bx	lr

080029f0 <DebugMon_Handler>:
 80029f0:	4770      	bx	lr

080029f2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80029f2:	4770      	bx	lr

080029f4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80029f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029f6:	f7fd ffd3 	bl	80009a0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80029fe:	f7fe b854 	b.w	8000aaa <HAL_SYSTICK_IRQHandler>
	...

08002a04 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8002a04:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <SystemInit+0x3c>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a0c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8002a0e:	6899      	ldr	r1, [r3, #8]
 8002a10:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <SystemInit+0x40>)
 8002a12:	400a      	ands	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8002a1c:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8002a20:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a28:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8002a30:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002a36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a3a:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <SystemInit+0x44>)
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	4770      	bx	lr
 8002a40:	40023800 	.word	0x40023800
 8002a44:	88ffc00c 	.word	0x88ffc00c
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a4e:	e003      	b.n	8002a58 <LoopCopyDataInit>

08002a50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002a52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a56:	3104      	adds	r1, #4

08002a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a58:	480a      	ldr	r0, [pc, #40]	; (8002a84 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002a5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a60:	d3f6      	bcc.n	8002a50 <CopyDataInit>
  ldr r2, =_sbss
 8002a62:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a64:	e002      	b.n	8002a6c <LoopFillZerobss>

08002a66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a66:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a68:	f842 3b04 	str.w	r3, [r2], #4

08002a6c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a70:	d3f9      	bcc.n	8002a66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a72:	f7ff ffc7 	bl	8002a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a76:	f000 f80f 	bl	8002a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a7a:	f7ff fde5 	bl	8002648 <main>
  bx lr
 8002a7e:	4770      	bx	lr
  ldr r3, =_sidata
 8002a80:	08002b38 	.word	0x08002b38
  ldr r0, =_sdata
 8002a84:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a88:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002a8c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002a90:	200000e4 	.word	0x200000e4

08002a94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a94:	e7fe      	b.n	8002a94 <ADC1_IRQHandler>
	...

08002a98 <__libc_init_array>:
 8002a98:	b570      	push	{r4, r5, r6, lr}
 8002a9a:	2500      	movs	r5, #0
 8002a9c:	4e0c      	ldr	r6, [pc, #48]	; (8002ad0 <__libc_init_array+0x38>)
 8002a9e:	4c0d      	ldr	r4, [pc, #52]	; (8002ad4 <__libc_init_array+0x3c>)
 8002aa0:	1ba4      	subs	r4, r4, r6
 8002aa2:	10a4      	asrs	r4, r4, #2
 8002aa4:	42a5      	cmp	r5, r4
 8002aa6:	d109      	bne.n	8002abc <__libc_init_array+0x24>
 8002aa8:	f000 f822 	bl	8002af0 <_init>
 8002aac:	2500      	movs	r5, #0
 8002aae:	4e0a      	ldr	r6, [pc, #40]	; (8002ad8 <__libc_init_array+0x40>)
 8002ab0:	4c0a      	ldr	r4, [pc, #40]	; (8002adc <__libc_init_array+0x44>)
 8002ab2:	1ba4      	subs	r4, r4, r6
 8002ab4:	10a4      	asrs	r4, r4, #2
 8002ab6:	42a5      	cmp	r5, r4
 8002ab8:	d105      	bne.n	8002ac6 <__libc_init_array+0x2e>
 8002aba:	bd70      	pop	{r4, r5, r6, pc}
 8002abc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ac0:	4798      	blx	r3
 8002ac2:	3501      	adds	r5, #1
 8002ac4:	e7ee      	b.n	8002aa4 <__libc_init_array+0xc>
 8002ac6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aca:	4798      	blx	r3
 8002acc:	3501      	adds	r5, #1
 8002ace:	e7f2      	b.n	8002ab6 <__libc_init_array+0x1e>
 8002ad0:	08002b30 	.word	0x08002b30
 8002ad4:	08002b30 	.word	0x08002b30
 8002ad8:	08002b30 	.word	0x08002b30
 8002adc:	08002b34 	.word	0x08002b34

08002ae0 <memset>:
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4402      	add	r2, r0
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d100      	bne.n	8002aea <memset+0xa>
 8002ae8:	4770      	bx	lr
 8002aea:	f803 1b01 	strb.w	r1, [r3], #1
 8002aee:	e7f9      	b.n	8002ae4 <memset+0x4>

08002af0 <_init>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	bf00      	nop
 8002af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af6:	bc08      	pop	{r3}
 8002af8:	469e      	mov	lr, r3
 8002afa:	4770      	bx	lr

08002afc <_fini>:
 8002afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afe:	bf00      	nop
 8002b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b02:	bc08      	pop	{r3}
 8002b04:	469e      	mov	lr, r3
 8002b06:	4770      	bx	lr
