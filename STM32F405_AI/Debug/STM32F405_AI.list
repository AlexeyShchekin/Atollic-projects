
STM32F405_AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005278  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000128b0  08005400  08005400  00015400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017cb0  08017cb0  00027cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017cb8  08017cb8  00027cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017cbc  08017cbc  00027cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000003dc  20000000  08017cc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000303dc  2**0
                  CONTENTS
  8 .bss          00000694  200003dc  200003dc  000303dc  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  20000a70  20000a70  000303dc  2**0
                  ALLOC
 10 .ARM.attributes 00000034  00000000  00000000  000303dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012b72  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002d8b  00000000  00000000  00042f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000036ea  00000000  00000000  00045d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000720  00000000  00000000  000493f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000828  00000000  00000000  00049b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004a4a  00000000  00000000  0004a340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000398c  00000000  00000000  0004ed8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000027f7  00000000  00000000  00052716  2**0
                  CONTENTS, READONLY
 19 .iar.rtmodel  000001bc  00000000  00000000  00054f0d  2**0
                  CONTENTS, READONLY
 20 .iar_vfe_header 00000018  00000000  00000000  000550cc  2**2
                  CONTENTS, READONLY
 21 .debug_frame  00003530  00000000  00000000  000550e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200003dc 	.word	0x200003dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053e8 	.word	0x080053e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200003e0 	.word	0x200003e0
 80001c4:	080053e8 	.word	0x080053e8

080001c8 <ai_array_get_byte_size>:
 80001c8:	b909      	cbnz	r1, 80001ce <ai_array_get_byte_size+0x6>
 80001ca:	2000      	movs	r0, #0
 80001cc:	4770      	bx	lr
 80001ce:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80001d2:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80001d6:	18d3      	adds	r3, r2, r3
 80001d8:	4359      	muls	r1, r3
 80001da:	1dc9      	adds	r1, r1, #7
 80001dc:	08c9      	lsrs	r1, r1, #3
 80001de:	0d42      	lsrs	r2, r0, #21
 80001e0:	00c9      	lsls	r1, r1, #3
 80001e2:	f002 0203 	and.w	r2, r2, #3
 80001e6:	0c43      	lsrs	r3, r0, #17
 80001e8:	40d1      	lsrs	r1, r2
 80001ea:	f003 030f 	and.w	r3, r3, #15
 80001ee:	2b04      	cmp	r3, #4
 80001f0:	d00b      	beq.n	800020a <ai_array_get_byte_size+0x42>
 80001f2:	2b08      	cmp	r3, #8
 80001f4:	bf01      	itttt	eq
 80001f6:	f3c0 12c6 	ubfxeq	r2, r0, #7, #7
 80001fa:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 80001fe:	1882      	addeq	r2, r0, r2
 8000200:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8000204:	1dc9      	adds	r1, r1, #7
 8000206:	08c8      	lsrs	r0, r1, #3
 8000208:	4770      	bx	lr
 800020a:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800020e:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8000212:	1882      	adds	r2, r0, r2
 8000214:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8000218:	1dc9      	adds	r1, r1, #7
 800021a:	08c8      	lsrs	r0, r1, #3
 800021c:	4770      	bx	lr

0800021e <ai_mem_copy_buffer>:
 800021e:	b510      	push	{r4, lr}
 8000220:	4604      	mov	r4, r0
 8000222:	f004 f820 	bl	8004266 <__aeabi_memcpy>
 8000226:	4620      	mov	r0, r4
 8000228:	bd10      	pop	{r4, pc}

0800022a <ai_platform_runtime_get_revision>:
 800022a:	f8df 0414 	ldr.w	r0, [pc, #1044]	; 8000640 <.text_19>
 800022e:	6801      	ldr	r1, [r0, #0]
 8000230:	0849      	lsrs	r1, r1, #1
 8000232:	0049      	lsls	r1, r1, #1
 8000234:	6001      	str	r1, [r0, #0]
 8000236:	2001      	movs	r0, #1
 8000238:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 8000644 <.text_20>
 800023c:	6088      	str	r0, [r1, #8]
 800023e:	6888      	ldr	r0, [r1, #8]
 8000240:	2800      	cmp	r0, #0
 8000242:	d1fc      	bne.n	800023e <ai_platform_runtime_get_revision+0x14>
 8000244:	f8df 2400 	ldr.w	r2, [pc, #1024]	; 8000648 <.text_21>
 8000248:	600a      	str	r2, [r1, #0]
 800024a:	6808      	ldr	r0, [r1, #0]
 800024c:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 800064c <.text_22>
 8000250:	4288      	cmp	r0, r1
 8000252:	d000      	beq.n	8000256 <ai_platform_runtime_get_revision+0x2c>
 8000254:	e7fe      	b.n	8000254 <ai_platform_runtime_get_revision+0x2a>
 8000256:	a0a1      	add	r0, pc, #644	; (adr r0, 80004dc <.text_17>)
 8000258:	4770      	bx	lr

0800025a <ai_platform_runtime_get_version>:
 800025a:	f8df 03e4 	ldr.w	r0, [pc, #996]	; 8000640 <.text_19>
 800025e:	6801      	ldr	r1, [r0, #0]
 8000260:	0849      	lsrs	r1, r1, #1
 8000262:	0049      	lsls	r1, r1, #1
 8000264:	6001      	str	r1, [r0, #0]
 8000266:	2001      	movs	r0, #1
 8000268:	f8df 13d8 	ldr.w	r1, [pc, #984]	; 8000644 <.text_20>
 800026c:	6088      	str	r0, [r1, #8]
 800026e:	6888      	ldr	r0, [r1, #8]
 8000270:	2800      	cmp	r0, #0
 8000272:	d1fc      	bne.n	800026e <ai_platform_runtime_get_version+0x14>
 8000274:	f8df 23d0 	ldr.w	r2, [pc, #976]	; 8000648 <.text_21>
 8000278:	600a      	str	r2, [r1, #0]
 800027a:	6808      	ldr	r0, [r1, #0]
 800027c:	f8df 13cc 	ldr.w	r1, [pc, #972]	; 800064c <.text_22>
 8000280:	4288      	cmp	r0, r1
 8000282:	d000      	beq.n	8000286 <ai_platform_runtime_get_version+0x2c>
 8000284:	e7fe      	b.n	8000284 <ai_platform_runtime_get_version+0x2a>
 8000286:	f20f 32dc 	addw	r2, pc, #988	; 0x3dc
 800028a:	6810      	ldr	r0, [r2, #0]
 800028c:	4770      	bx	lr

0800028e <ai_platform_api_get_version>:
 800028e:	f8df 03b0 	ldr.w	r0, [pc, #944]	; 8000640 <.text_19>
 8000292:	6801      	ldr	r1, [r0, #0]
 8000294:	0849      	lsrs	r1, r1, #1
 8000296:	0049      	lsls	r1, r1, #1
 8000298:	6001      	str	r1, [r0, #0]
 800029a:	2001      	movs	r0, #1
 800029c:	f8df 13a4 	ldr.w	r1, [pc, #932]	; 8000644 <.text_20>
 80002a0:	6088      	str	r0, [r1, #8]
 80002a2:	6888      	ldr	r0, [r1, #8]
 80002a4:	2800      	cmp	r0, #0
 80002a6:	d1fc      	bne.n	80002a2 <ai_platform_api_get_version+0x14>
 80002a8:	f8df 239c 	ldr.w	r2, [pc, #924]	; 8000648 <.text_21>
 80002ac:	600a      	str	r2, [r1, #0]
 80002ae:	6808      	ldr	r0, [r1, #0]
 80002b0:	f8df 1398 	ldr.w	r1, [pc, #920]	; 800064c <.text_22>
 80002b4:	4288      	cmp	r0, r1
 80002b6:	d000      	beq.n	80002ba <ai_platform_api_get_version+0x2c>
 80002b8:	e7fe      	b.n	80002b8 <ai_platform_api_get_version+0x2a>
 80002ba:	f20f 32ac 	addw	r2, pc, #940	; 0x3ac
 80002be:	6810      	ldr	r0, [r2, #0]
 80002c0:	4770      	bx	lr

080002c2 <ai_platform_interface_api_get_version>:
 80002c2:	f8df 037c 	ldr.w	r0, [pc, #892]	; 8000640 <.text_19>
 80002c6:	6801      	ldr	r1, [r0, #0]
 80002c8:	0849      	lsrs	r1, r1, #1
 80002ca:	0049      	lsls	r1, r1, #1
 80002cc:	6001      	str	r1, [r0, #0]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f8df 1370 	ldr.w	r1, [pc, #880]	; 8000644 <.text_20>
 80002d4:	6088      	str	r0, [r1, #8]
 80002d6:	6888      	ldr	r0, [r1, #8]
 80002d8:	2800      	cmp	r0, #0
 80002da:	d1fc      	bne.n	80002d6 <ai_platform_interface_api_get_version+0x14>
 80002dc:	f8df 2368 	ldr.w	r2, [pc, #872]	; 8000648 <.text_21>
 80002e0:	600a      	str	r2, [r1, #0]
 80002e2:	6808      	ldr	r0, [r1, #0]
 80002e4:	f8df 1364 	ldr.w	r1, [pc, #868]	; 800064c <.text_22>
 80002e8:	4288      	cmp	r0, r1
 80002ea:	d000      	beq.n	80002ee <ai_platform_interface_api_get_version+0x2c>
 80002ec:	e7fe      	b.n	80002ec <ai_platform_interface_api_get_version+0x2a>
 80002ee:	f20f 327c 	addw	r2, pc, #892	; 0x37c
 80002f2:	6810      	ldr	r0, [r2, #0]
 80002f4:	4770      	bx	lr

080002f6 <ai_platform_context_acquire>:
 80002f6:	b120      	cbz	r0, 8000302 <ai_platform_context_acquire+0xc>
 80002f8:	6801      	ldr	r1, [r0, #0]
 80002fa:	f8df 2354 	ldr.w	r2, [pc, #852]	; 8000650 <.text_23>
 80002fe:	4291      	cmp	r1, r2
 8000300:	d000      	beq.n	8000304 <ai_platform_context_acquire+0xe>
 8000302:	2000      	movs	r0, #0
 8000304:	f8df 1338 	ldr.w	r1, [pc, #824]	; 8000640 <.text_19>
 8000308:	680a      	ldr	r2, [r1, #0]
 800030a:	0852      	lsrs	r2, r2, #1
 800030c:	0052      	lsls	r2, r2, #1
 800030e:	600a      	str	r2, [r1, #0]
 8000310:	2101      	movs	r1, #1
 8000312:	f8df 2330 	ldr.w	r2, [pc, #816]	; 8000644 <.text_20>
 8000316:	6091      	str	r1, [r2, #8]
 8000318:	6891      	ldr	r1, [r2, #8]
 800031a:	2900      	cmp	r1, #0
 800031c:	d1fc      	bne.n	8000318 <ai_platform_context_acquire+0x22>
 800031e:	f8df 3328 	ldr.w	r3, [pc, #808]	; 8000648 <.text_21>
 8000322:	6013      	str	r3, [r2, #0]
 8000324:	6811      	ldr	r1, [r2, #0]
 8000326:	f8df 2324 	ldr.w	r2, [pc, #804]	; 800064c <.text_22>
 800032a:	4291      	cmp	r1, r2
 800032c:	d000      	beq.n	8000330 <ai_platform_context_acquire+0x3a>
 800032e:	e7fe      	b.n	800032e <ai_platform_context_acquire+0x38>
 8000330:	4770      	bx	lr

08000332 <ai_platform_context_release>:
 8000332:	f8df 131c 	ldr.w	r1, [pc, #796]	; 8000650 <.text_23>
 8000336:	6001      	str	r1, [r0, #0]
 8000338:	4770      	bx	lr

0800033a <ai_copy_buffer_fake_src>:
 800033a:	4608      	mov	r0, r1
 800033c:	4770      	bx	lr

0800033e <ai_copy_buffer_fake_dst>:
 800033e:	4770      	bx	lr

08000340 <ai_platform_network_get_error>:
 8000340:	b120      	cbz	r0, 800034c <ai_platform_network_get_error+0xc>
 8000342:	6801      	ldr	r1, [r0, #0]
 8000344:	f8df 2308 	ldr.w	r2, [pc, #776]	; 8000650 <.text_23>
 8000348:	4291      	cmp	r1, r2
 800034a:	d000      	beq.n	800034e <ai_platform_network_get_error+0xe>
 800034c:	2000      	movs	r0, #0
 800034e:	49bc      	ldr	r1, [pc, #752]	; (8000640 <.text_19>)
 8000350:	680a      	ldr	r2, [r1, #0]
 8000352:	0852      	lsrs	r2, r2, #1
 8000354:	0052      	lsls	r2, r2, #1
 8000356:	600a      	str	r2, [r1, #0]
 8000358:	2101      	movs	r1, #1
 800035a:	4aba      	ldr	r2, [pc, #744]	; (8000644 <.text_20>)
 800035c:	6091      	str	r1, [r2, #8]
 800035e:	6891      	ldr	r1, [r2, #8]
 8000360:	2900      	cmp	r1, #0
 8000362:	d1fc      	bne.n	800035e <ai_platform_network_get_error+0x1e>
 8000364:	4bb8      	ldr	r3, [pc, #736]	; (8000648 <.text_21>)
 8000366:	6013      	str	r3, [r2, #0]
 8000368:	6811      	ldr	r1, [r2, #0]
 800036a:	4ab8      	ldr	r2, [pc, #736]	; (800064c <.text_22>)
 800036c:	4291      	cmp	r1, r2
 800036e:	d000      	beq.n	8000372 <ai_platform_network_get_error+0x32>
 8000370:	e7fe      	b.n	8000370 <ai_platform_network_get_error+0x30>
 8000372:	2800      	cmp	r0, #0
 8000374:	bf1c      	itt	ne
 8000376:	300c      	addne	r0, #12
 8000378:	f000 b98a 	bne.w	8000690 <core_get_error>
 800037c:	f20f 3000 	addw	r0, pc, #768	; 0x300
 8000380:	6800      	ldr	r0, [r0, #0]
 8000382:	4770      	bx	lr

08000384 <ai_platform_network_set_error>:
 8000384:	2800      	cmp	r0, #0
 8000386:	bf1c      	itt	ne
 8000388:	300c      	addne	r0, #12
 800038a:	f000 b986 	bne.w	800069a <core_set_error>
 800038e:	4770      	bx	lr

08000390 <ai_platform_network_create>:
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	9d04      	ldr	r5, [sp, #16]
 8000394:	4604      	mov	r4, r0
 8000396:	9805      	ldr	r0, [sp, #20]
 8000398:	b2db      	uxtb	r3, r3
 800039a:	042d      	lsls	r5, r5, #16
 800039c:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80003a0:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80003a4:	f20f 20dc 	addw	r0, pc, #732	; 0x2dc
 80003a8:	6806      	ldr	r6, [r0, #0]
 80003aa:	48a5      	ldr	r0, [pc, #660]	; (8000640 <.text_19>)
 80003ac:	6801      	ldr	r1, [r0, #0]
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	0049      	lsls	r1, r1, #1
 80003b2:	6001      	str	r1, [r0, #0]
 80003b4:	2001      	movs	r0, #1
 80003b6:	49a3      	ldr	r1, [pc, #652]	; (8000644 <.text_20>)
 80003b8:	6088      	str	r0, [r1, #8]
 80003ba:	6888      	ldr	r0, [r1, #8]
 80003bc:	2800      	cmp	r0, #0
 80003be:	d1fc      	bne.n	80003ba <ai_platform_network_create+0x2a>
 80003c0:	4ba1      	ldr	r3, [pc, #644]	; (8000648 <.text_21>)
 80003c2:	600b      	str	r3, [r1, #0]
 80003c4:	6808      	ldr	r0, [r1, #0]
 80003c6:	49a1      	ldr	r1, [pc, #644]	; (800064c <.text_22>)
 80003c8:	4288      	cmp	r0, r1
 80003ca:	d000      	beq.n	80003ce <ai_platform_network_create+0x3e>
 80003cc:	e7fe      	b.n	80003cc <ai_platform_network_create+0x3c>
 80003ce:	b91c      	cbnz	r4, 80003d8 <ai_platform_network_create+0x48>
 80003d0:	f20f 20b4 	addw	r0, pc, #692	; 0x2b4
 80003d4:	6800      	ldr	r0, [r0, #0]
 80003d6:	bd70      	pop	{r4, r5, r6, pc}
 80003d8:	499d      	ldr	r1, [pc, #628]	; (8000650 <.text_23>)
 80003da:	6011      	str	r1, [r2, #0]
 80003dc:	6022      	str	r2, [r4, #0]
 80003de:	f000 f955 	bl	800068c <core_init>
 80003e2:	b910      	cbnz	r0, 80003ea <ai_platform_network_create+0x5a>
 80003e4:	f20f 2088 	addw	r0, pc, #648	; 0x288
 80003e8:	e00b      	b.n	8000402 <ai_platform_network_create+0x72>
 80003ea:	499a      	ldr	r1, [pc, #616]	; (8000654 <.text_24>)
 80003ec:	428d      	cmp	r5, r1
 80003ee:	bf28      	it	cs
 80003f0:	f20f 2080 	addwcs	r0, pc, #640	; 0x280
 80003f4:	d205      	bcs.n	8000402 <ai_platform_network_create+0x72>
 80003f6:	f20f 2080 	addw	r0, pc, #640	; 0x280
 80003fa:	f000 f963 	bl	80006c4 <ai_check_custom_types>
 80003fe:	b918      	cbnz	r0, 8000408 <ai_platform_network_create+0x78>
 8000400:	a09e      	add	r0, pc, #632	; (adr r0, 800067c <.text_34>)
 8000402:	6806      	ldr	r6, [r0, #0]
 8000404:	2100      	movs	r1, #0
 8000406:	6021      	str	r1, [r4, #0]
 8000408:	4630      	mov	r0, r6
 800040a:	bd70      	pop	{r4, r5, r6, pc}

0800040c <ai_platform_network_destroy>:
 800040c:	b128      	cbz	r0, 800041a <ai_platform_network_destroy+0xe>
 800040e:	6801      	ldr	r1, [r0, #0]
 8000410:	4a8f      	ldr	r2, [pc, #572]	; (8000650 <.text_23>)
 8000412:	4291      	cmp	r1, r2
 8000414:	bf08      	it	eq
 8000416:	4602      	moveq	r2, r0
 8000418:	d000      	beq.n	800041c <ai_platform_network_destroy+0x10>
 800041a:	2200      	movs	r2, #0
 800041c:	4988      	ldr	r1, [pc, #544]	; (8000640 <.text_19>)
 800041e:	680b      	ldr	r3, [r1, #0]
 8000420:	085b      	lsrs	r3, r3, #1
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	600b      	str	r3, [r1, #0]
 8000426:	2101      	movs	r1, #1
 8000428:	4b86      	ldr	r3, [pc, #536]	; (8000644 <.text_20>)
 800042a:	6099      	str	r1, [r3, #8]
 800042c:	6899      	ldr	r1, [r3, #8]
 800042e:	2900      	cmp	r1, #0
 8000430:	d1fc      	bne.n	800042c <ai_platform_network_destroy+0x20>
 8000432:	f8df c214 	ldr.w	ip, [pc, #532]	; 8000648 <.text_21>
 8000436:	f8c3 c000 	str.w	ip, [r3]
 800043a:	6819      	ldr	r1, [r3, #0]
 800043c:	4b83      	ldr	r3, [pc, #524]	; (800064c <.text_22>)
 800043e:	4299      	cmp	r1, r3
 8000440:	d000      	beq.n	8000444 <ai_platform_network_destroy+0x38>
 8000442:	e7fe      	b.n	8000442 <ai_platform_network_destroy+0x36>
 8000444:	b102      	cbz	r2, 8000448 <ai_platform_network_destroy+0x3c>
 8000446:	2000      	movs	r0, #0
 8000448:	4770      	bx	lr

0800044a <ai_platform_network_init>:
 800044a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800044e:	b081      	sub	sp, #4
 8000450:	460a      	mov	r2, r1
 8000452:	b118      	cbz	r0, 800045c <ai_platform_network_init+0x12>
 8000454:	6801      	ldr	r1, [r0, #0]
 8000456:	4b7e      	ldr	r3, [pc, #504]	; (8000650 <.text_23>)
 8000458:	4299      	cmp	r1, r3
 800045a:	d000      	beq.n	800045e <ai_platform_network_init+0x14>
 800045c:	2000      	movs	r0, #0
 800045e:	4978      	ldr	r1, [pc, #480]	; (8000640 <.text_19>)
 8000460:	680b      	ldr	r3, [r1, #0]
 8000462:	085b      	lsrs	r3, r3, #1
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	600b      	str	r3, [r1, #0]
 8000468:	2101      	movs	r1, #1
 800046a:	4b76      	ldr	r3, [pc, #472]	; (8000644 <.text_20>)
 800046c:	6099      	str	r1, [r3, #8]
 800046e:	6899      	ldr	r1, [r3, #8]
 8000470:	2900      	cmp	r1, #0
 8000472:	d1fc      	bne.n	800046e <ai_platform_network_init+0x24>
 8000474:	4c74      	ldr	r4, [pc, #464]	; (8000648 <.text_21>)
 8000476:	601c      	str	r4, [r3, #0]
 8000478:	6819      	ldr	r1, [r3, #0]
 800047a:	4b74      	ldr	r3, [pc, #464]	; (800064c <.text_22>)
 800047c:	4299      	cmp	r1, r3
 800047e:	d000      	beq.n	8000482 <ai_platform_network_init+0x38>
 8000480:	e7fe      	b.n	8000480 <ai_platform_network_init+0x36>
 8000482:	b340      	cbz	r0, 80004d6 <ai_platform_network_init+0x8c>
 8000484:	b90a      	cbnz	r2, 800048a <ai_platform_network_init+0x40>
 8000486:	2211      	movs	r2, #17
 8000488:	e006      	b.n	8000498 <ai_platform_network_init+0x4e>
 800048a:	69d1      	ldr	r1, [r2, #28]
 800048c:	b909      	cbnz	r1, 8000492 <ai_platform_network_init+0x48>
 800048e:	2213      	movs	r2, #19
 8000490:	e002      	b.n	8000498 <ai_platform_network_init+0x4e>
 8000492:	68d1      	ldr	r1, [r2, #12]
 8000494:	b941      	cbnz	r1, 80004a8 <ai_platform_network_init+0x5e>
 8000496:	2212      	movs	r2, #18
 8000498:	2110      	movs	r1, #16
 800049a:	300c      	adds	r0, #12
 800049c:	f000 f8fd 	bl	800069a <core_set_error>
 80004a0:	2000      	movs	r0, #0
 80004a2:	b001      	add	sp, #4
 80004a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80004a8:	ca78      	ldmia	r2!, {r3, r4, r5, r6}
 80004aa:	f100 0114 	add.w	r1, r0, #20
 80004ae:	f100 0724 	add.w	r7, r0, #36	; 0x24
 80004b2:	e881 0078 	stmia.w	r1, {r3, r4, r5, r6}
 80004b6:	e892 5300 	ldmia.w	r2, {r8, r9, ip, lr}
 80004ba:	e887 5300 	stmia.w	r7, {r8, r9, ip, lr}
 80004be:	2103      	movs	r1, #3
 80004c0:	6081      	str	r1, [r0, #8]
 80004c2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80004c4:	b13a      	cbz	r2, 80004d6 <ai_platform_network_init+0x8c>
 80004c6:	6891      	ldr	r1, [r2, #8]
 80004c8:	6050      	str	r0, [r2, #4]
 80004ca:	428a      	cmp	r2, r1
 80004cc:	bf18      	it	ne
 80004ce:	2900      	cmpne	r1, #0
 80004d0:	bf18      	it	ne
 80004d2:	460a      	movne	r2, r1
 80004d4:	d1f7      	bne.n	80004c6 <ai_platform_network_init+0x7c>
 80004d6:	b001      	add	sp, #4
 80004d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080004dc <.text_17>:
 80004dc:	00000000 	.word	0x00000000

080004e0 <ai_platform_network_process>:
 80004e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004e4:	b083      	sub	sp, #12
 80004e6:	b128      	cbz	r0, 80004f4 <ai_platform_network_process+0x14>
 80004e8:	6803      	ldr	r3, [r0, #0]
 80004ea:	4c59      	ldr	r4, [pc, #356]	; (8000650 <.text_23>)
 80004ec:	42a3      	cmp	r3, r4
 80004ee:	bf08      	it	eq
 80004f0:	4605      	moveq	r5, r0
 80004f2:	d000      	beq.n	80004f6 <ai_platform_network_process+0x16>
 80004f4:	2500      	movs	r5, #0
 80004f6:	4852      	ldr	r0, [pc, #328]	; (8000640 <.text_19>)
 80004f8:	6803      	ldr	r3, [r0, #0]
 80004fa:	085b      	lsrs	r3, r3, #1
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	6003      	str	r3, [r0, #0]
 8000500:	2001      	movs	r0, #1
 8000502:	4b50      	ldr	r3, [pc, #320]	; (8000644 <.text_20>)
 8000504:	6098      	str	r0, [r3, #8]
 8000506:	6898      	ldr	r0, [r3, #8]
 8000508:	2800      	cmp	r0, #0
 800050a:	d1fc      	bne.n	8000506 <ai_platform_network_process+0x26>
 800050c:	4c4e      	ldr	r4, [pc, #312]	; (8000648 <.text_21>)
 800050e:	601c      	str	r4, [r3, #0]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	4b4e      	ldr	r3, [pc, #312]	; (800064c <.text_22>)
 8000514:	4298      	cmp	r0, r3
 8000516:	d000      	beq.n	800051a <ai_platform_network_process+0x3a>
 8000518:	e7fe      	b.n	8000518 <ai_platform_network_process+0x38>
 800051a:	2d00      	cmp	r5, #0
 800051c:	d048      	beq.n	80005b0 <ai_platform_network_process+0xd0>
 800051e:	68ab      	ldr	r3, [r5, #8]
 8000520:	f003 0003 	and.w	r0, r3, #3
 8000524:	2803      	cmp	r0, #3
 8000526:	d002      	beq.n	800052e <ai_platform_network_process+0x4e>
 8000528:	2230      	movs	r2, #48	; 0x30
 800052a:	2111      	movs	r1, #17
 800052c:	e03c      	b.n	80005a8 <ai_platform_network_process+0xc8>
 800052e:	000f      	movs	r7, r1
 8000530:	bf1c      	itt	ne
 8000532:	68f8      	ldrne	r0, [r7, #12]
 8000534:	2800      	cmpne	r0, #0
 8000536:	d035      	beq.n	80005a4 <ai_platform_network_process+0xc4>
 8000538:	8878      	ldrh	r0, [r7, #2]
 800053a:	b908      	cbnz	r0, 8000540 <ai_platform_network_process+0x60>
 800053c:	2221      	movs	r2, #33	; 0x21
 800053e:	e032      	b.n	80005a6 <ai_platform_network_process+0xc6>
 8000540:	0014      	movs	r4, r2
 8000542:	d00b      	beq.n	800055c <ai_platform_network_process+0x7c>
 8000544:	68e1      	ldr	r1, [r4, #12]
 8000546:	b351      	cbz	r1, 800059e <ai_platform_network_process+0xbe>
 8000548:	8861      	ldrh	r1, [r4, #2]
 800054a:	b911      	cbnz	r1, 8000552 <ai_platform_network_process+0x72>
 800054c:	2221      	movs	r2, #33	; 0x21
 800054e:	2113      	movs	r1, #19
 8000550:	e02a      	b.n	80005a8 <ai_platform_network_process+0xc8>
 8000552:	4288      	cmp	r0, r1
 8000554:	d002      	beq.n	800055c <ai_platform_network_process+0x7c>
 8000556:	2221      	movs	r2, #33	; 0x21
 8000558:	2102      	movs	r1, #2
 800055a:	e025      	b.n	80005a8 <ai_platform_network_process+0xc8>
 800055c:	05d8      	lsls	r0, r3, #23
 800055e:	bf4c      	ite	mi
 8000560:	2002      	movmi	r0, #2
 8000562:	2000      	movpl	r0, #0
 8000564:	0a59      	lsrs	r1, r3, #9
 8000566:	f001 0101 	and.w	r1, r1, #1
 800056a:	ea41 0800 	orr.w	r8, r1, r0
 800056e:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000570:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000572:	6806      	ldr	r6, [r0, #0]
 8000574:	6808      	ldr	r0, [r1, #0]
 8000576:	9000      	str	r0, [sp, #0]
 8000578:	6871      	ldr	r1, [r6, #4]
 800057a:	6830      	ldr	r0, [r6, #0]
 800057c:	f7ff fe24 	bl	80001c8 <ai_array_get_byte_size>
 8000580:	9001      	str	r0, [sp, #4]
 8000582:	9800      	ldr	r0, [sp, #0]
 8000584:	6841      	ldr	r1, [r0, #4]
 8000586:	6800      	ldr	r0, [r0, #0]
 8000588:	f7ff fe1e 	bl	80001c8 <ai_array_get_byte_size>
 800058c:	68f9      	ldr	r1, [r7, #12]
 800058e:	2c00      	cmp	r4, #0
 8000590:	4602      	mov	r2, r0
 8000592:	bf14      	ite	ne
 8000594:	f8d4 b00c 	ldrne.w	fp, [r4, #12]
 8000598:	f04f 0b00 	moveq.w	fp, #0
 800059c:	e00c      	b.n	80005b8 <ai_platform_network_process+0xd8>
 800059e:	2217      	movs	r2, #23
 80005a0:	2113      	movs	r1, #19
 80005a2:	e001      	b.n	80005a8 <ai_platform_network_process+0xc8>
 80005a4:	2217      	movs	r2, #23
 80005a6:	2112      	movs	r1, #18
 80005a8:	f105 000c 	add.w	r0, r5, #12
 80005ac:	f000 f875 	bl	800069a <core_set_error>
 80005b0:	2000      	movs	r0, #0
 80005b2:	b003      	add	sp, #12
 80005b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005b8:	f018 0002 	ands.w	r0, r8, #2
 80005bc:	bf14      	ite	ne
 80005be:	f8df 9098 	ldrne.w	r9, [pc, #152]	; 8000658 <.text_25>
 80005c2:	f8df 9098 	ldreq.w	r9, [pc, #152]	; 800065c <.text_26>
 80005c6:	ea5f 73c8 	movs.w	r3, r8, lsl #31
 80005ca:	bf4c      	ite	mi
 80005cc:	f8df a088 	ldrmi.w	sl, [pc, #136]	; 8000658 <.text_25>
 80005d0:	f8df a08c 	ldrpl.w	sl, [pc, #140]	; 8000660 <.text_27>
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	822b      	strh	r3, [r5, #16]
 80005d8:	2700      	movs	r7, #0
 80005da:	826f      	strh	r7, [r5, #18]
 80005dc:	b908      	cbnz	r0, 80005e2 <ai_platform_network_process+0x102>
 80005de:	60b1      	str	r1, [r6, #8]
 80005e0:	60f1      	str	r1, [r6, #12]
 80005e2:	b144      	cbz	r4, 80005f6 <ai_platform_network_process+0x116>
 80005e4:	ea5f 70c8 	movs.w	r0, r8, lsl #31
 80005e8:	d405      	bmi.n	80005f6 <ai_platform_network_process+0x116>
 80005ea:	9b00      	ldr	r3, [sp, #0]
 80005ec:	f8c3 b008 	str.w	fp, [r3, #8]
 80005f0:	9800      	ldr	r0, [sp, #0]
 80005f2:	f8c0 b00c 	str.w	fp, [r0, #12]
 80005f6:	8a68      	ldrh	r0, [r5, #18]
 80005f8:	8a2b      	ldrh	r3, [r5, #16]
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d21c      	bcs.n	8000638 <ai_platform_network_process+0x158>
 80005fe:	462c      	mov	r4, r5
 8000600:	4635      	mov	r5, r6
 8000602:	9e01      	ldr	r6, [sp, #4]
 8000604:	4617      	mov	r7, r2
 8000606:	4688      	mov	r8, r1
 8000608:	68a8      	ldr	r0, [r5, #8]
 800060a:	4632      	mov	r2, r6
 800060c:	4641      	mov	r1, r8
 800060e:	47c8      	blx	r9
 8000610:	60a8      	str	r0, [r5, #8]
 8000612:	44b0      	add	r8, r6
 8000614:	4620      	mov	r0, r4
 8000616:	f000 f8d7 	bl	80007c8 <ai_layers_forward_all>
 800061a:	9800      	ldr	r0, [sp, #0]
 800061c:	6881      	ldr	r1, [r0, #8]
 800061e:	463a      	mov	r2, r7
 8000620:	4658      	mov	r0, fp
 8000622:	47d0      	blx	sl
 8000624:	eb00 0b07 	add.w	fp, r0, r7
 8000628:	8a60      	ldrh	r0, [r4, #18]
 800062a:	8a21      	ldrh	r1, [r4, #16]
 800062c:	1c40      	adds	r0, r0, #1
 800062e:	8260      	strh	r0, [r4, #18]
 8000630:	b280      	uxth	r0, r0
 8000632:	4288      	cmp	r0, r1
 8000634:	d3e8      	bcc.n	8000608 <ai_platform_network_process+0x128>
 8000636:	4625      	mov	r5, r4
 8000638:	8a68      	ldrh	r0, [r5, #18]
 800063a:	b003      	add	sp, #12
 800063c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000640 <.text_19>:
 8000640:	e0002000 	.word	0xe0002000

08000644 <.text_20>:
 8000644:	40023000 	.word	0x40023000

08000648 <.text_21>:
 8000648:	f407a5c2 	.word	0xf407a5c2

0800064c <.text_22>:
 800064c:	b5e8b5cd 	.word	0xb5e8b5cd

08000650 <.text_23>:
 8000650:	a1c00100 	.word	0xa1c00100

08000654 <.text_24>:
 8000654:	01010001 	.word	0x01010001

08000658 <.text_25>:
 8000658:	0800021f 	.word	0x0800021f

0800065c <.text_26>:
 800065c:	0800033b 	.word	0x0800033b

08000660 <.text_27>:
 8000660:	0800033f 	.word	0x0800033f

08000664 <.text_28>:
 8000664:	00000303 	.word	0x00000303

08000668 <.text_29>:
 8000668:	00000001 	.word	0x00000001

0800066c <.text_30>:
 800066c:	00000101 	.word	0x00000101

08000670 <.text_31>:
 8000670:	00001030 	.word	0x00001030

08000674 <.text_32>:
 8000674:	00001001 	.word	0x00001001

08000678 <_platform_network_sanity_check{8}::signatures>:
 8000678:	84048403                                ....

0800067c <.text_34>:
 800067c:	00001002 	.word	0x00001002

08000680 <.text_35>:
 8000680:	00001010 	.word	0x00001010

08000684 <.text_36>:
 8000684:	00000000 	.word	0x00000000

08000688 <.text_37>:
 8000688:	00001010 	.word	0x00001010

0800068c <core_init>:
 800068c:	2001      	movs	r0, #1
 800068e:	4770      	bx	lr

08000690 <core_get_error>:
 8000690:	4601      	mov	r1, r0
 8000692:	2200      	movs	r2, #0
 8000694:	6808      	ldr	r0, [r1, #0]
 8000696:	600a      	str	r2, [r1, #0]
 8000698:	4770      	bx	lr

0800069a <core_set_error>:
 800069a:	7803      	ldrb	r3, [r0, #0]
 800069c:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 80006a0:	d104      	bne.n	80006ac <core_set_error+0x12>
 80006a2:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80006a6:	6001      	str	r1, [r0, #0]
 80006a8:	2001      	movs	r0, #1
 80006aa:	4770      	bx	lr
 80006ac:	2000      	movs	r0, #0
 80006ae:	4770      	bx	lr

080006b0 <ai_layers_forward_layer>:
 80006b0:	b510      	push	{r4, lr}
 80006b2:	4604      	mov	r4, r0
 80006b4:	68e1      	ldr	r1, [r4, #12]
 80006b6:	4788      	blx	r1
 80006b8:	68a0      	ldr	r0, [r4, #8]
 80006ba:	42a0      	cmp	r0, r4
 80006bc:	bf08      	it	eq
 80006be:	2000      	moveq	r0, #0
 80006c0:	bd10      	pop	{r4, pc}
	...

080006c4 <ai_check_custom_types>:
 80006c4:	b500      	push	{lr}
 80006c6:	b081      	sub	sp, #4
 80006c8:	b160      	cbz	r0, 80006e4 <ai_check_custom_types+0x20>
 80006ca:	7801      	ldrb	r1, [r0, #0]
 80006cc:	2903      	cmp	r1, #3
 80006ce:	d109      	bne.n	80006e4 <ai_check_custom_types+0x20>
 80006d0:	f05f 0204 	movs.w	r2, #4
 80006d4:	a163      	add	r1, pc, #396	; (adr r1, 8000864 <ai_check_custom_types::ref_signatures>)
 80006d6:	f003 fded 	bl	80042b4 <memcmp>
 80006da:	1e40      	subs	r0, r0, #1
 80006dc:	4180      	sbcs	r0, r0
 80006de:	0fc0      	lsrs	r0, r0, #31
 80006e0:	b001      	add	sp, #4
 80006e2:	bd00      	pop	{pc}
 80006e4:	2000      	movs	r0, #0
 80006e6:	b001      	add	sp, #4
 80006e8:	bd00      	pop	{pc}
	...

080006ec <ai_layer_type_name>:
 80006ec:	f242 7211 	movw	r2, #10001	; 0x2711
 80006f0:	1a81      	subs	r1, r0, r2
 80006f2:	2901      	cmp	r1, #1
 80006f4:	bf84      	itt	hi
 80006f6:	1ec9      	subhi	r1, r1, #3
 80006f8:	290d      	cmphi	r1, #13
 80006fa:	d901      	bls.n	8000700 <ai_layer_type_name+0x14>
 80006fc:	390f      	subs	r1, #15
 80006fe:	d145      	bne.n	800078c <ai_layer_type_name+0xa0>
 8000700:	1a80      	subs	r0, r0, r2
 8000702:	d021      	beq.n	8000748 <ai_layer_type_name+0x5c>
 8000704:	1e40      	subs	r0, r0, #1
 8000706:	d021      	beq.n	800074c <ai_layer_type_name+0x60>
 8000708:	1e80      	subs	r0, r0, #2
 800070a:	d021      	beq.n	8000750 <ai_layer_type_name+0x64>
 800070c:	1e40      	subs	r0, r0, #1
 800070e:	d021      	beq.n	8000754 <ai_layer_type_name+0x68>
 8000710:	1e40      	subs	r0, r0, #1
 8000712:	d021      	beq.n	8000758 <ai_layer_type_name+0x6c>
 8000714:	1e40      	subs	r0, r0, #1
 8000716:	d021      	beq.n	800075c <ai_layer_type_name+0x70>
 8000718:	1e40      	subs	r0, r0, #1
 800071a:	d021      	beq.n	8000760 <ai_layer_type_name+0x74>
 800071c:	1e40      	subs	r0, r0, #1
 800071e:	d021      	beq.n	8000764 <ai_layer_type_name+0x78>
 8000720:	1e40      	subs	r0, r0, #1
 8000722:	d021      	beq.n	8000768 <ai_layer_type_name+0x7c>
 8000724:	1e40      	subs	r0, r0, #1
 8000726:	d021      	beq.n	800076c <ai_layer_type_name+0x80>
 8000728:	1e40      	subs	r0, r0, #1
 800072a:	d021      	beq.n	8000770 <ai_layer_type_name+0x84>
 800072c:	1e40      	subs	r0, r0, #1
 800072e:	d021      	beq.n	8000774 <ai_layer_type_name+0x88>
 8000730:	1e40      	subs	r0, r0, #1
 8000732:	d021      	beq.n	8000778 <ai_layer_type_name+0x8c>
 8000734:	1e40      	subs	r0, r0, #1
 8000736:	d021      	beq.n	800077c <ai_layer_type_name+0x90>
 8000738:	1e40      	subs	r0, r0, #1
 800073a:	d021      	beq.n	8000780 <ai_layer_type_name+0x94>
 800073c:	1e40      	subs	r0, r0, #1
 800073e:	d021      	beq.n	8000784 <ai_layer_type_name+0x98>
 8000740:	1e80      	subs	r0, r0, #2
 8000742:	d021      	beq.n	8000788 <ai_layer_type_name+0x9c>
 8000744:	a012      	add	r0, pc, #72	; (adr r0, 8000790 <.text_5>)
 8000746:	4770      	bx	lr
 8000748:	a012      	add	r0, pc, #72	; (adr r0, 8000794 <.text_6>)
 800074a:	4770      	bx	lr
 800074c:	a012      	add	r0, pc, #72	; (adr r0, 8000798 <.text_7>)
 800074e:	4770      	bx	lr
 8000750:	a027      	add	r0, pc, #156	; (adr r0, 80007f0 <.text_14>)
 8000752:	4770      	bx	lr
 8000754:	a028      	add	r0, pc, #160	; (adr r0, 80007f8 <.text_15>)
 8000756:	4770      	bx	lr
 8000758:	a010      	add	r0, pc, #64	; (adr r0, 800079c <.text_8>)
 800075a:	4770      	bx	lr
 800075c:	a010      	add	r0, pc, #64	; (adr r0, 80007a0 <.text_9>)
 800075e:	4770      	bx	lr
 8000760:	a027      	add	r0, pc, #156	; (adr r0, 8000800 <.text_16>)
 8000762:	4770      	bx	lr
 8000764:	a00f      	add	r0, pc, #60	; (adr r0, 80007a4 <.text_10>)
 8000766:	4770      	bx	lr
 8000768:	a027      	add	r0, pc, #156	; (adr r0, 8000808 <.text_17>)
 800076a:	4770      	bx	lr
 800076c:	a028      	add	r0, pc, #160	; (adr r0, 8000810 <.text_18>)
 800076e:	4770      	bx	lr
 8000770:	a02c      	add	r0, pc, #176	; (adr r0, 8000824 <.text_19>)
 8000772:	4770      	bx	lr
 8000774:	a02d      	add	r0, pc, #180	; (adr r0, 800082c <.text_20>)
 8000776:	4770      	bx	lr
 8000778:	a00b      	add	r0, pc, #44	; (adr r0, 80007a8 <.text_11>)
 800077a:	4770      	bx	lr
 800077c:	a02d      	add	r0, pc, #180	; (adr r0, 8000834 <.text_21>)
 800077e:	4770      	bx	lr
 8000780:	a02e      	add	r0, pc, #184	; (adr r0, 800083c <.text_22>)
 8000782:	4770      	bx	lr
 8000784:	a030      	add	r0, pc, #192	; (adr r0, 8000848 <.text_23>)
 8000786:	4770      	bx	lr
 8000788:	a034      	add	r0, pc, #208	; (adr r0, 800085c <.text_24>)
 800078a:	4770      	bx	lr
 800078c:	a000      	add	r0, pc, #0	; (adr r0, 8000790 <.text_5>)
 800078e:	4770      	bx	lr

08000790 <.text_5>:
 8000790:	00000000 	.word	0x00000000

08000794 <.text_6>:
 8000794:	00444441 	.word	0x00444441

08000798 <.text_7>:
 8000798:	00004e42 	.word	0x00004e42

0800079c <.text_8>:
 800079c:	00555247 	.word	0x00555247

080007a0 <.text_9>:
 80007a0:	004e524c 	.word	0x004e524c

080007a4 <.text_10>:
 80007a4:	00004c4e 	.word	0x00004c4e

080007a8 <.text_11>:
 80007a8:	00004d53 	.word	0x00004d53

080007ac <ai_layer_type_is_valid>:
 80007ac:	f242 7111 	movw	r1, #10001	; 0x2711
 80007b0:	1a40      	subs	r0, r0, r1
 80007b2:	2801      	cmp	r0, #1
 80007b4:	bf84      	itt	hi
 80007b6:	1ec0      	subhi	r0, r0, #3
 80007b8:	280d      	cmphi	r0, #13
 80007ba:	d901      	bls.n	80007c0 <ai_layer_type_is_valid+0x14>
 80007bc:	380f      	subs	r0, #15
 80007be:	d101      	bne.n	80007c4 <ai_layer_type_is_valid+0x18>
 80007c0:	2001      	movs	r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	2000      	movs	r0, #0
 80007c6:	4770      	bx	lr

080007c8 <ai_layers_forward_all>:
 80007c8:	b530      	push	{r4, r5, lr}
 80007ca:	4604      	mov	r4, r0
 80007cc:	b081      	sub	sp, #4
 80007ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80007d0:	b158      	cbz	r0, 80007ea <ai_layers_forward_all+0x22>
 80007d2:	6420      	str	r0, [r4, #64]	; 0x40
 80007d4:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80007d6:	68e9      	ldr	r1, [r5, #12]
 80007d8:	4628      	mov	r0, r5
 80007da:	4788      	blx	r1
 80007dc:	68a8      	ldr	r0, [r5, #8]
 80007de:	42a8      	cmp	r0, r5
 80007e0:	bf08      	it	eq
 80007e2:	2000      	moveq	r0, #0
 80007e4:	2800      	cmp	r0, #0
 80007e6:	6420      	str	r0, [r4, #64]	; 0x40
 80007e8:	d1f4      	bne.n	80007d4 <ai_layers_forward_all+0xc>
 80007ea:	b001      	add	sp, #4
 80007ec:	bd30      	pop	{r4, r5, pc}
	...

080007f0 <.text_14>:
 80007f0:	564e4f43 	.word	0x564e4f43
 80007f4:	00004432 	.word	0x00004432

080007f8 <.text_15>:
 80007f8:	534e4544 	.word	0x534e4544
 80007fc:	00000045 	.word	0x00000045

08000800 <.text_16>:
 8000800:	4d54534c 	.word	0x4d54534c
 8000804:	00000000 	.word	0x00000000

08000808 <.text_17>:
 8000808:	4d524f4e 	.word	0x4d524f4e
 800080c:	00000000 	.word	0x00000000

08000810 <.text_18>:
 8000810:	4954504f 	.word	0x4954504f
 8000814:	455a494d 	.word	0x455a494d
 8000818:	4f435f44 	.word	0x4f435f44
 800081c:	4432564e 	.word	0x4432564e
 8000820:	00000000 	.word	0x00000000

08000824 <.text_19>:
 8000824:	4d524550 	.word	0x4d524550
 8000828:	00455455 	.word	0x00455455

0800082c <.text_20>:
 800082c:	4c4f4f50 	.word	0x4c4f4f50
 8000830:	00000000 	.word	0x00000000

08000834 <.text_21>:
 8000834:	494c5053 	.word	0x494c5053
 8000838:	00000054 	.word	0x00000054

0800083c <.text_22>:
 800083c:	454d4954 	.word	0x454d4954
 8000840:	4c45445f 	.word	0x4c45445f
 8000844:	00005941 	.word	0x00005941

08000848 <.text_23>:
 8000848:	454d4954 	.word	0x454d4954
 800084c:	5349445f 	.word	0x5349445f
 8000850:	42495254 	.word	0x42495254
 8000854:	44455455 	.word	0x44455455
 8000858:	00000000 	.word	0x00000000

0800085c <.text_24>:
 800085c:	434e4f43 	.word	0x434e4f43
 8000860:	00005441 	.word	0x00005441

08000864 <ai_check_custom_types::ref_signatures>:
 8000864:	84048403                                ....

08000868 <ai_conv2d_kernel_simple_f32>:
 8000868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800086c:	b081      	sub	sp, #4
 800086e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8000870:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8000872:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8000876:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8000878:	980a      	ldr	r0, [sp, #40]	; 0x28
 800087a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800087e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8000882:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8000886:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 800088a:	1b2f      	subs	r7, r5, r4
 800088c:	fb09 fa07 	mul.w	sl, r9, r7
 8000890:	1b37      	subs	r7, r6, r4
 8000892:	fb07 f709 	mul.w	r7, r7, r9
 8000896:	9700      	str	r7, [sp, #0]
 8000898:	4288      	cmp	r0, r1
 800089a:	bf0c      	ite	eq
 800089c:	ed9f 0a86 	vldreq	s0, [pc, #536]	; 8000ab8 <.text_4>
 80008a0:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 80008a4:	fb05 f50c 	mul.w	r5, r5, ip
 80008a8:	fb06 f709 	mul.w	r7, r6, r9
 80008ac:	fb06 860c 	mla	r6, r6, ip, r8
 80008b0:	fb06 f609 	mul.w	r6, r6, r9
 80008b4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80008b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80008ba:	ebab 0b0e 	sub.w	fp, fp, lr
 80008be:	fb04 f409 	mul.w	r4, r4, r9
 80008c2:	fb09 f505 	mul.w	r5, r9, r5
 80008c6:	2e00      	cmp	r6, #0
 80008c8:	fb0b fb07 	mul.w	fp, fp, r7
 80008cc:	eb02 0985 	add.w	r9, r2, r5, lsl #2
 80008d0:	d04e      	beq.n	8000970 <ai_conv2d_kernel_simple_f32+0x108>
 80008d2:	460d      	mov	r5, r1
 80008d4:	4619      	mov	r1, r3
 80008d6:	4632      	mov	r2, r6
 80008d8:	ea4f 0300 	mov.w	r3, r0
 80008dc:	edd3 0a00 	vldr	s1, [r3]
 80008e0:	f1be 0f01 	cmp.w	lr, #1
 80008e4:	ee60 0a80 	vmul.f32	s1, s1, s0
 80008e8:	464e      	mov	r6, r9
 80008ea:	db39      	blt.n	8000960 <ai_conv2d_kernel_simple_f32+0xf8>
 80008ec:	f8dd c000 	ldr.w	ip, [sp]
 80008f0:	4670      	mov	r0, lr
 80008f2:	2c01      	cmp	r4, #1
 80008f4:	db2c      	blt.n	8000950 <ai_conv2d_kernel_simple_f32+0xe8>
 80008f6:	f014 0803 	ands.w	r8, r4, #3
 80008fa:	d00a      	beq.n	8000912 <ai_conv2d_kernel_simple_f32+0xaa>
 80008fc:	ed91 1a00 	vldr	s2, [r1]
 8000900:	edd6 1a00 	vldr	s3, [r6]
 8000904:	1d36      	adds	r6, r6, #4
 8000906:	1d09      	adds	r1, r1, #4
 8000908:	f1b8 0801 	subs.w	r8, r8, #1
 800090c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000910:	d1f4      	bne.n	80008fc <ai_conv2d_kernel_simple_f32+0x94>
 8000912:	08a7      	lsrs	r7, r4, #2
 8000914:	f000 801c 	beq.w	8000950 <ai_conv2d_kernel_simple_f32+0xe8>
 8000918:	ed91 2a00 	vldr	s4, [r1]
 800091c:	ed96 1a00 	vldr	s2, [r6]
 8000920:	edd1 1a01 	vldr	s3, [r1, #4]
 8000924:	edd6 2a01 	vldr	s5, [r6, #4]
 8000928:	ee42 0a01 	vmla.f32	s1, s4, s2
 800092c:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8000930:	ed91 2a02 	vldr	s4, [r1, #8]
 8000934:	ed96 1a02 	vldr	s2, [r6, #8]
 8000938:	edd1 1a03 	vldr	s3, [r1, #12]
 800093c:	edd6 2a03 	vldr	s5, [r6, #12]
 8000940:	3610      	adds	r6, #16
 8000942:	3110      	adds	r1, #16
 8000944:	ee42 0a01 	vmla.f32	s1, s4, s2
 8000948:	1e7f      	subs	r7, r7, #1
 800094a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 800094e:	d1e3      	bne.n	8000918 <ai_conv2d_kernel_simple_f32+0xb0>
 8000950:	1e40      	subs	r0, r0, #1
 8000952:	eb06 068a 	add.w	r6, r6, sl, lsl #2
 8000956:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 800095a:	d1ca      	bne.n	80008f2 <ai_conv2d_kernel_simple_f32+0x8a>
 800095c:	f8cd c000 	str.w	ip, [sp]
 8000960:	edc5 0a00 	vstr	s1, [r5]
 8000964:	1d2d      	adds	r5, r5, #4
 8000966:	1d1b      	adds	r3, r3, #4
 8000968:	1e52      	subs	r2, r2, #1
 800096a:	eb01 018b 	add.w	r1, r1, fp, lsl #2
 800096e:	d1b5      	bne.n	80008dc <ai_conv2d_kernel_simple_f32+0x74>
 8000970:	b001      	add	sp, #4
 8000972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000978 <ai_conv2d_kernel_depthwise_f32>:
 8000978:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8000980:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8000984:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8000986:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8000988:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800098a:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 800098e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8000992:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8000994:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8000998:	fb09 bb07 	mla	fp, r9, r7, fp
 800099c:	4611      	mov	r1, r2
 800099e:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 80009a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80009a4:	9b04      	ldr	r3, [sp, #16]
 80009a6:	eba5 0e0c 	sub.w	lr, r5, ip
 80009aa:	1b00      	subs	r0, r0, r4
 80009ac:	429a      	cmp	r2, r3
 80009ae:	bf0c      	ite	eq
 80009b0:	ed9f 0a41 	vldreq	s0, [pc, #260]	; 8000ab8 <.text_4>
 80009b4:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 80009b8:	437d      	muls	r5, r7
 80009ba:	fb0a f505 	mul.w	r5, sl, r5
 80009be:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80009c2:	2500      	movs	r5, #0
 80009c4:	eb01 078a 	add.w	r7, r1, sl, lsl #2
 80009c8:	42b9      	cmp	r1, r7
 80009ca:	fbb6 f6fa 	udiv	r6, r6, sl
 80009ce:	fb0a fe0e 	mul.w	lr, sl, lr
 80009d2:	eba9 080c 	sub.w	r8, r9, ip
 80009d6:	fb00 f009 	mul.w	r0, r0, r9
 80009da:	9700      	str	r7, [sp, #0]
 80009dc:	d268      	bcs.n	8000ab0 <ai_conv2d_kernel_depthwise_f32+0x138>
 80009de:	920e      	str	r2, [sp, #56]	; 0x38
 80009e0:	9603      	str	r6, [sp, #12]
 80009e2:	9a03      	ldr	r2, [sp, #12]
 80009e4:	2a00      	cmp	r2, #0
 80009e6:	d05f      	beq.n	8000aa8 <ai_conv2d_kernel_depthwise_f32+0x130>
 80009e8:	9b04      	ldr	r3, [sp, #16]
 80009ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80009ec:	9002      	str	r0, [sp, #8]
 80009ee:	eb03 0785 	add.w	r7, r3, r5, lsl #2
 80009f2:	9b03      	ldr	r3, [sp, #12]
 80009f4:	f8cd 1004 	str.w	r1, [sp, #4]
 80009f8:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 80009fc:	edd6 0a00 	vldr	s1, [r6]
 8000a00:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8000a04:	2c01      	cmp	r4, #1
 8000a06:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000a0a:	db41      	blt.n	8000a90 <ai_conv2d_kernel_depthwise_f32+0x118>
 8000a0c:	ea4f 0204 	mov.w	r2, r4
 8000a10:	f1bc 0f01 	cmp.w	ip, #1
 8000a14:	db36      	blt.n	8000a84 <ai_conv2d_kernel_depthwise_f32+0x10c>
 8000a16:	f01c 0103 	ands.w	r1, ip, #3
 8000a1a:	d00b      	beq.n	8000a34 <ai_conv2d_kernel_depthwise_f32+0xbc>
 8000a1c:	ed9b 1a00 	vldr	s2, [fp]
 8000a20:	edd9 1a00 	vldr	s3, [r9]
 8000a24:	1e49      	subs	r1, r1, #1
 8000a26:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000a2a:	f10b 0b04 	add.w	fp, fp, #4
 8000a2e:	eb09 098a 	add.w	r9, r9, sl, lsl #2
 8000a32:	d1f3      	bne.n	8000a1c <ai_conv2d_kernel_depthwise_f32+0xa4>
 8000a34:	ea5f 009c 	movs.w	r0, ip, lsr #2
 8000a38:	f000 8024 	beq.w	8000a84 <ai_conv2d_kernel_depthwise_f32+0x10c>
 8000a3c:	ed9b 1a00 	vldr	s2, [fp]
 8000a40:	edd9 1a00 	vldr	s3, [r9]
 8000a44:	eb09 018a 	add.w	r1, r9, sl, lsl #2
 8000a48:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000a4c:	eddb 1a01 	vldr	s3, [fp, #4]
 8000a50:	ed91 1a00 	vldr	s2, [r1]
 8000a54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8000a58:	ee41 0a81 	vmla.f32	s1, s3, s2
 8000a5c:	ed9b 1a02 	vldr	s2, [fp, #8]
 8000a60:	edd1 1a00 	vldr	s3, [r1]
 8000a64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8000a68:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000a6c:	eddb 1a03 	vldr	s3, [fp, #12]
 8000a70:	ed91 1a00 	vldr	s2, [r1]
 8000a74:	1e40      	subs	r0, r0, #1
 8000a76:	ee41 0a81 	vmla.f32	s1, s3, s2
 8000a7a:	f10b 0b10 	add.w	fp, fp, #16
 8000a7e:	eb01 098a 	add.w	r9, r1, sl, lsl #2
 8000a82:	d1db      	bne.n	8000a3c <ai_conv2d_kernel_depthwise_f32+0xc4>
 8000a84:	1e52      	subs	r2, r2, #1
 8000a86:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 8000a8a:	eb0b 0b88 	add.w	fp, fp, r8, lsl #2
 8000a8e:	d1bf      	bne.n	8000a10 <ai_conv2d_kernel_depthwise_f32+0x98>
 8000a90:	9802      	ldr	r0, [sp, #8]
 8000a92:	edc7 0a00 	vstr	s1, [r7]
 8000a96:	1c6d      	adds	r5, r5, #1
 8000a98:	1d3f      	adds	r7, r7, #4
 8000a9a:	1d36      	adds	r6, r6, #4
 8000a9c:	1e5b      	subs	r3, r3, #1
 8000a9e:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
 8000aa2:	d1ab      	bne.n	80009fc <ai_conv2d_kernel_depthwise_f32+0x84>
 8000aa4:	9802      	ldr	r0, [sp, #8]
 8000aa6:	9901      	ldr	r1, [sp, #4]
 8000aa8:	9a00      	ldr	r2, [sp, #0]
 8000aaa:	1d09      	adds	r1, r1, #4
 8000aac:	4291      	cmp	r1, r2
 8000aae:	d398      	bcc.n	80009e2 <ai_conv2d_kernel_depthwise_f32+0x6a>
 8000ab0:	b005      	add	sp, #20
 8000ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000ab8 <.text_4>:
 8000ab8:	00000000 	.word	0x00000000

08000abc <ai_conv2d_kernel_group_f32>:
 8000abc:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8000ac6:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8000aca:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000acc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000ace:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8000ad0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8000ad2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8000ad4:	ebae 0e0c 	sub.w	lr, lr, ip
 8000ad8:	4692      	mov	sl, r2
 8000ada:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000adc:	fbb1 f9f2 	udiv	r9, r1, r2
 8000ae0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8000ae2:	f8cd 900c 	str.w	r9, [sp, #12]
 8000ae6:	1a09      	subs	r1, r1, r0
 8000ae8:	4379      	muls	r1, r7
 8000aea:	461e      	mov	r6, r3
 8000aec:	fbb7 f3f2 	udiv	r3, r7, r2
 8000af0:	fb04 fb03 	mul.w	fp, r4, r3
 8000af4:	fb0e fe0b 	mul.w	lr, lr, fp
 8000af8:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 8000afc:	eba7 0903 	sub.w	r9, r7, r3
 8000b00:	eba4 0800 	sub.w	r8, r4, r0
 8000b04:	fb04 b405 	mla	r4, r4, r5, fp
 8000b08:	435c      	muls	r4, r3
 8000b0a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8000b0e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8000b10:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000b14:	455e      	cmp	r6, fp
 8000b16:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8000b18:	bf0c      	ite	eq
 8000b1a:	ed9f 0a3f 	vldreq	s0, [pc, #252]	; 8000c18 <.text_6>
 8000b1e:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000b22:	4375      	muls	r5, r6
 8000b24:	436f      	muls	r7, r5
 8000b26:	eb0a 0587 	add.w	r5, sl, r7, lsl #2
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	fb08 f803 	mul.w	r8, r8, r3
 8000b30:	f04f 0a00 	mov.w	sl, #0
 8000b34:	d06c      	beq.n	8000c10 <ai_conv2d_kernel_group_f32+0x154>
 8000b36:	9200      	str	r2, [sp, #0]
 8000b38:	9a03      	ldr	r2, [sp, #12]
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d062      	beq.n	8000c04 <ai_conv2d_kernel_group_f32+0x148>
 8000b3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000b40:	9f04      	ldr	r7, [sp, #16]
 8000b42:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 8000b46:	eb02 068a 	add.w	r6, r2, sl, lsl #2
 8000b4a:	9a03      	ldr	r2, [sp, #12]
 8000b4c:	f8cd e008 	str.w	lr, [sp, #8]
 8000b50:	eb07 078a 	add.w	r7, r7, sl, lsl #2
 8000b54:	f8cd 5004 	str.w	r5, [sp, #4]
 8000b58:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8000b5c:	edd6 0a00 	vldr	s1, [r6]
 8000b60:	9d01      	ldr	r5, [sp, #4]
 8000b62:	f1be 0f01 	cmp.w	lr, #1
 8000b66:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000b6a:	db3b      	blt.n	8000be4 <ai_conv2d_kernel_group_f32+0x128>
 8000b6c:	2801      	cmp	r0, #1
 8000b6e:	db32      	blt.n	8000bd6 <ai_conv2d_kernel_group_f32+0x11a>
 8000b70:	ea4f 0c00 	mov.w	ip, r0
 8000b74:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8000b78:	455d      	cmp	r5, fp
 8000b7a:	d227      	bcs.n	8000bcc <ai_conv2d_kernel_group_f32+0x110>
 8000b7c:	ed94 1a00 	vldr	s2, [r4]
 8000b80:	edd5 1a00 	vldr	s3, [r5]
 8000b84:	1d2d      	adds	r5, r5, #4
 8000b86:	1d24      	adds	r4, r4, #4
 8000b88:	455d      	cmp	r5, fp
 8000b8a:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000b8e:	d21d      	bcs.n	8000bcc <ai_conv2d_kernel_group_f32+0x110>
 8000b90:	ed94 1a00 	vldr	s2, [r4]
 8000b94:	edd5 1a00 	vldr	s3, [r5]
 8000b98:	1d2d      	adds	r5, r5, #4
 8000b9a:	1d24      	adds	r4, r4, #4
 8000b9c:	455d      	cmp	r5, fp
 8000b9e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ba2:	d213      	bcs.n	8000bcc <ai_conv2d_kernel_group_f32+0x110>
 8000ba4:	ed94 1a00 	vldr	s2, [r4]
 8000ba8:	edd5 1a00 	vldr	s3, [r5]
 8000bac:	1d2d      	adds	r5, r5, #4
 8000bae:	1d24      	adds	r4, r4, #4
 8000bb0:	455d      	cmp	r5, fp
 8000bb2:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000bb6:	d209      	bcs.n	8000bcc <ai_conv2d_kernel_group_f32+0x110>
 8000bb8:	ed94 1a00 	vldr	s2, [r4]
 8000bbc:	edd5 1a00 	vldr	s3, [r5]
 8000bc0:	1d2d      	adds	r5, r5, #4
 8000bc2:	1d24      	adds	r4, r4, #4
 8000bc4:	455d      	cmp	r5, fp
 8000bc6:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000bca:	d3d7      	bcc.n	8000b7c <ai_conv2d_kernel_group_f32+0xc0>
 8000bcc:	f1bc 0c01 	subs.w	ip, ip, #1
 8000bd0:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8000bd4:	d1ce      	bne.n	8000b74 <ai_conv2d_kernel_group_f32+0xb8>
 8000bd6:	f1be 0e01 	subs.w	lr, lr, #1
 8000bda:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8000bde:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8000be2:	d1c3      	bne.n	8000b6c <ai_conv2d_kernel_group_f32+0xb0>
 8000be4:	9d02      	ldr	r5, [sp, #8]
 8000be6:	edc7 0a00 	vstr	s1, [r7]
 8000bea:	1d3f      	adds	r7, r7, #4
 8000bec:	1d36      	adds	r6, r6, #4
 8000bee:	1e52      	subs	r2, r2, #1
 8000bf0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8000bf4:	f10a 0a01 	add.w	sl, sl, #1
 8000bf8:	d1ae      	bne.n	8000b58 <ai_conv2d_kernel_group_f32+0x9c>
 8000bfa:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8000bfe:	f8dd e008 	ldr.w	lr, [sp, #8]
 8000c02:	9d01      	ldr	r5, [sp, #4]
 8000c04:	9a00      	ldr	r2, [sp, #0]
 8000c06:	1e52      	subs	r2, r2, #1
 8000c08:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8000c0c:	9200      	str	r2, [sp, #0]
 8000c0e:	d193      	bne.n	8000b38 <ai_conv2d_kernel_group_f32+0x7c>
 8000c10:	b005      	add	sp, #20
 8000c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000c18 <.text_6>:
 8000c18:	00000000 	.word	0x00000000

08000c1c <ai_conv2d_kernel_f32>:
 8000c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c20:	b08d      	sub	sp, #52	; 0x34
 8000c22:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8000c24:	b904      	cbnz	r4, 8000c28 <ai_conv2d_kernel_f32+0xc>
 8000c26:	460c      	mov	r4, r1
 8000c28:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8000c2a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8000c2c:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8000c30:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 8000c34:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8000c36:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8000c3a:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8000c3e:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8000c42:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8000c46:	900b      	str	r0, [sp, #44]	; 0x2c
 8000c48:	1bbf      	subs	r7, r7, r6
 8000c4a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000c4c:	f1b8 0f01 	cmp.w	r8, #1
 8000c50:	ebae 0e05 	sub.w	lr, lr, r5
 8000c54:	d114      	bne.n	8000c80 <ai_conv2d_kernel_f32+0x64>
 8000c56:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8000c5a:	9508      	str	r5, [sp, #32]
 8000c5c:	9707      	str	r7, [sp, #28]
 8000c5e:	9001      	str	r0, [sp, #4]
 8000c60:	f8cd c008 	str.w	ip, [sp, #8]
 8000c64:	9606      	str	r6, [sp, #24]
 8000c66:	f8cd b014 	str.w	fp, [sp, #20]
 8000c6a:	f8cd a010 	str.w	sl, [sp, #16]
 8000c6e:	f8cd 900c 	str.w	r9, [sp, #12]
 8000c72:	9400      	str	r4, [sp, #0]
 8000c74:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000c76:	f7ff fdf7 	bl	8000868 <ai_conv2d_kernel_simple_f32>
 8000c7a:	b00d      	add	sp, #52	; 0x34
 8000c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c80:	4580      	cmp	r8, r0
 8000c82:	d114      	bne.n	8000cae <ai_conv2d_kernel_f32+0x92>
 8000c84:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8000c88:	9508      	str	r5, [sp, #32]
 8000c8a:	9707      	str	r7, [sp, #28]
 8000c8c:	9001      	str	r0, [sp, #4]
 8000c8e:	f8cd c008 	str.w	ip, [sp, #8]
 8000c92:	9606      	str	r6, [sp, #24]
 8000c94:	f8cd b014 	str.w	fp, [sp, #20]
 8000c98:	f8cd a010 	str.w	sl, [sp, #16]
 8000c9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8000ca0:	9400      	str	r4, [sp, #0]
 8000ca2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000ca4:	f7ff fe68 	bl	8000978 <ai_conv2d_kernel_depthwise_f32>
 8000ca8:	b00d      	add	sp, #52	; 0x34
 8000caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cae:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8000cb2:	9509      	str	r5, [sp, #36]	; 0x24
 8000cb4:	9708      	str	r7, [sp, #32]
 8000cb6:	9001      	str	r0, [sp, #4]
 8000cb8:	f8cd c008 	str.w	ip, [sp, #8]
 8000cbc:	9607      	str	r6, [sp, #28]
 8000cbe:	f8cd 8018 	str.w	r8, [sp, #24]
 8000cc2:	f8cd b014 	str.w	fp, [sp, #20]
 8000cc6:	f8cd a010 	str.w	sl, [sp, #16]
 8000cca:	f8cd 900c 	str.w	r9, [sp, #12]
 8000cce:	9400      	str	r4, [sp, #0]
 8000cd0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000cd2:	f7ff fef3 	bl	8000abc <ai_conv2d_kernel_group_f32>
 8000cd6:	b00d      	add	sp, #52	; 0x34
 8000cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000cdc <func_dummy>:
 8000cdc:	4770      	bx	lr
	...

08000ce0 <ai_dict8_dot_array_f32>:
 8000ce0:	b4f0      	push	{r4, r5, r6, r7}
 8000ce2:	9c04      	ldr	r4, [sp, #16]
 8000ce4:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 8000ce8:	3d20      	subs	r5, #32
 8000cea:	2c08      	cmp	r4, #8
 8000cec:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8000fc0 <.text_10>
 8000cf0:	d230      	bcs.n	8000d54 <ai_dict8_dot_array_f32+0x74>
 8000cf2:	f105 0420 	add.w	r4, r5, #32
 8000cf6:	42a3      	cmp	r3, r4
 8000cf8:	d224      	bcs.n	8000d44 <ai_dict8_dot_array_f32+0x64>
 8000cfa:	780d      	ldrb	r5, [r1, #0]
 8000cfc:	ed93 1a00 	vldr	s2, [r3]
 8000d00:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000d04:	1d1b      	adds	r3, r3, #4
 8000d06:	edd6 0a00 	vldr	s1, [r6]
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000d10:	d218      	bcs.n	8000d44 <ai_dict8_dot_array_f32+0x64>
 8000d12:	784d      	ldrb	r5, [r1, #1]
 8000d14:	ed93 1a00 	vldr	s2, [r3]
 8000d18:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000d1c:	1d1b      	adds	r3, r3, #4
 8000d1e:	edd6 0a00 	vldr	s1, [r6]
 8000d22:	42a3      	cmp	r3, r4
 8000d24:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000d28:	d20c      	bcs.n	8000d44 <ai_dict8_dot_array_f32+0x64>
 8000d2a:	788d      	ldrb	r5, [r1, #2]
 8000d2c:	ed93 1a00 	vldr	s2, [r3]
 8000d30:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000d34:	1d1b      	adds	r3, r3, #4
 8000d36:	1cc9      	adds	r1, r1, #3
 8000d38:	edd6 0a00 	vldr	s1, [r6]
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000d42:	d3da      	bcc.n	8000cfa <ai_dict8_dot_array_f32+0x1a>
 8000d44:	edd0 0a00 	vldr	s1, [r0]
 8000d48:	ee30 0a80 	vadd.f32	s0, s1, s0
 8000d4c:	ed80 0a00 	vstr	s0, [r0]
 8000d50:	bcf0      	pop	{r4, r5, r6, r7}
 8000d52:	4770      	bx	lr
 8000d54:	f001 0403 	and.w	r4, r1, #3
 8000d58:	2c03      	cmp	r4, #3
 8000d5a:	d8f3      	bhi.n	8000d44 <ai_dict8_dot_array_f32+0x64>
 8000d5c:	e8df f004 	tbb	[pc, r4]
 8000d60:	4f433703 	.word	0x4f433703
 8000d64:	e7ee      	b.n	8000d44 <ai_dict8_dot_array_f32+0x64>
 8000d66:	429d      	cmp	r5, r3
 8000d68:	f080 80da 	bcs.w	8000f20 <ai_dict8_dot_array_f32+0x240>
 8000d6c:	f105 0420 	add.w	r4, r5, #32
 8000d70:	42a3      	cmp	r3, r4
 8000d72:	d2e7      	bcs.n	8000d44 <ai_dict8_dot_array_f32+0x64>
 8000d74:	780d      	ldrb	r5, [r1, #0]
 8000d76:	ed93 1a00 	vldr	s2, [r3]
 8000d7a:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000d7e:	1d1b      	adds	r3, r3, #4
 8000d80:	edd6 0a00 	vldr	s1, [r6]
 8000d84:	42a3      	cmp	r3, r4
 8000d86:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000d8a:	d2db      	bcs.n	8000d44 <ai_dict8_dot_array_f32+0x64>
 8000d8c:	784d      	ldrb	r5, [r1, #1]
 8000d8e:	ed93 1a00 	vldr	s2, [r3]
 8000d92:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000d96:	1d1b      	adds	r3, r3, #4
 8000d98:	edd6 0a00 	vldr	s1, [r6]
 8000d9c:	42a3      	cmp	r3, r4
 8000d9e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000da2:	d2cf      	bcs.n	8000d44 <ai_dict8_dot_array_f32+0x64>
 8000da4:	788d      	ldrb	r5, [r1, #2]
 8000da6:	ed93 1a00 	vldr	s2, [r3]
 8000daa:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000dae:	1d1b      	adds	r3, r3, #4
 8000db0:	1cc9      	adds	r1, r1, #3
 8000db2:	edd6 0a00 	vldr	s1, [r6]
 8000db6:	42a3      	cmp	r3, r4
 8000db8:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000dbc:	d3da      	bcc.n	8000d74 <ai_dict8_dot_array_f32+0x94>
 8000dbe:	edd0 0a00 	vldr	s1, [r0]
 8000dc2:	ee30 0a80 	vadd.f32	s0, s1, s0
 8000dc6:	ed80 0a00 	vstr	s0, [r0]
 8000dca:	bcf0      	pop	{r4, r5, r6, r7}
 8000dcc:	4770      	bx	lr
 8000dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000dd2:	ed93 1a00 	vldr	s2, [r3]
 8000dd6:	eb02 0684 	add.w	r6, r2, r4, lsl #2
 8000dda:	1d1b      	adds	r3, r3, #4
 8000ddc:	edd6 0a00 	vldr	s1, [r6]
 8000de0:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000de4:	1f2d      	subs	r5, r5, #4
 8000de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000dea:	ed93 1a00 	vldr	s2, [r3]
 8000dee:	eb02 0684 	add.w	r6, r2, r4, lsl #2
 8000df2:	1d1b      	adds	r3, r3, #4
 8000df4:	edd6 0a00 	vldr	s1, [r6]
 8000df8:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000dfc:	1f2d      	subs	r5, r5, #4
 8000dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000e02:	ed93 1a00 	vldr	s2, [r3]
 8000e06:	eb02 0684 	add.w	r6, r2, r4, lsl #2
 8000e0a:	1d1c      	adds	r4, r3, #4
 8000e0c:	1f2d      	subs	r5, r5, #4
 8000e0e:	edd6 0a00 	vldr	s1, [r6]
 8000e12:	42a5      	cmp	r5, r4
 8000e14:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e18:	d34e      	bcc.n	8000eb8 <ai_dict8_dot_array_f32+0x1d8>
 8000e1a:	78cf      	ldrb	r7, [r1, #3]
 8000e1c:	ed94 4a00 	vldr	s8, [r4]
 8000e20:	ed94 3a01 	vldr	s6, [r4, #4]
 8000e24:	ed94 2a02 	vldr	s4, [r4, #8]
 8000e28:	ed94 1a03 	vldr	s2, [r4, #12]
 8000e2c:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000e30:	788f      	ldrb	r7, [r1, #2]
 8000e32:	edd6 0a00 	vldr	s1, [r6]
 8000e36:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000e3a:	784f      	ldrb	r7, [r1, #1]
 8000e3c:	edd6 1a00 	vldr	s3, [r6]
 8000e40:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000e44:	780f      	ldrb	r7, [r1, #0]
 8000e46:	edd6 2a00 	vldr	s5, [r6]
 8000e4a:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000e4e:	f104 0310 	add.w	r3, r4, #16
 8000e52:	edd6 3a00 	vldr	s7, [r6]
 8000e56:	790c      	ldrb	r4, [r1, #4]
 8000e58:	ee03 0a84 	vmla.f32	s0, s7, s8
 8000e5c:	ee02 0a83 	vmla.f32	s0, s5, s6
 8000e60:	ee01 0a82 	vmla.f32	s0, s3, s4
 8000e64:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 8000e68:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e6c:	794c      	ldrb	r4, [r1, #5]
 8000e6e:	edd7 0a00 	vldr	s1, [r7]
 8000e72:	ed93 4a00 	vldr	s8, [r3]
 8000e76:	edd3 3a01 	vldr	s7, [r3, #4]
 8000e7a:	ed93 3a02 	vldr	s6, [r3, #8]
 8000e7e:	edd3 2a03 	vldr	s5, [r3, #12]
 8000e82:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 8000e86:	798c      	ldrb	r4, [r1, #6]
 8000e88:	ed97 1a00 	vldr	s2, [r7]
 8000e8c:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 8000e90:	79cc      	ldrb	r4, [r1, #7]
 8000e92:	edd7 1a00 	vldr	s3, [r7]
 8000e96:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 8000e9a:	ee00 0a84 	vmla.f32	s0, s1, s8
 8000e9e:	3108      	adds	r1, #8
 8000ea0:	f103 0410 	add.w	r4, r3, #16
 8000ea4:	ee01 0a23 	vmla.f32	s0, s2, s7
 8000ea8:	ed97 2a00 	vldr	s4, [r7]
 8000eac:	ee01 0a83 	vmla.f32	s0, s3, s6
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	ee02 0a22 	vmla.f32	s0, s4, s5
 8000eb6:	d2b0      	bcs.n	8000e1a <ai_dict8_dot_array_f32+0x13a>
 8000eb8:	f105 0320 	add.w	r3, r5, #32
 8000ebc:	429c      	cmp	r4, r3
 8000ebe:	f4bf af41 	bcs.w	8000d44 <ai_dict8_dot_array_f32+0x64>
 8000ec2:	780d      	ldrb	r5, [r1, #0]
 8000ec4:	ed94 1a00 	vldr	s2, [r4]
 8000ec8:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000ecc:	1d24      	adds	r4, r4, #4
 8000ece:	edd6 0a00 	vldr	s1, [r6]
 8000ed2:	429c      	cmp	r4, r3
 8000ed4:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000ed8:	f4bf af34 	bcs.w	8000d44 <ai_dict8_dot_array_f32+0x64>
 8000edc:	784d      	ldrb	r5, [r1, #1]
 8000ede:	ed94 1a00 	vldr	s2, [r4]
 8000ee2:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000ee6:	1d24      	adds	r4, r4, #4
 8000ee8:	edd6 0a00 	vldr	s1, [r6]
 8000eec:	429c      	cmp	r4, r3
 8000eee:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000ef2:	f4bf af27 	bcs.w	8000d44 <ai_dict8_dot_array_f32+0x64>
 8000ef6:	788d      	ldrb	r5, [r1, #2]
 8000ef8:	ed94 1a00 	vldr	s2, [r4]
 8000efc:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000f00:	1d24      	adds	r4, r4, #4
 8000f02:	1cc9      	adds	r1, r1, #3
 8000f04:	edd6 0a00 	vldr	s1, [r6]
 8000f08:	429c      	cmp	r4, r3
 8000f0a:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000f0e:	d3d8      	bcc.n	8000ec2 <ai_dict8_dot_array_f32+0x1e2>
 8000f10:	edd0 0a00 	vldr	s1, [r0]
 8000f14:	ee30 0a80 	vadd.f32	s0, s1, s0
 8000f18:	ed80 0a00 	vstr	s0, [r0]
 8000f1c:	bcf0      	pop	{r4, r5, r6, r7}
 8000f1e:	4770      	bx	lr
 8000f20:	78cf      	ldrb	r7, [r1, #3]
 8000f22:	ed93 4a00 	vldr	s8, [r3]
 8000f26:	ed93 3a01 	vldr	s6, [r3, #4]
 8000f2a:	ed93 2a02 	vldr	s4, [r3, #8]
 8000f2e:	ed93 1a03 	vldr	s2, [r3, #12]
 8000f32:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f36:	788f      	ldrb	r7, [r1, #2]
 8000f38:	edd6 0a00 	vldr	s1, [r6]
 8000f3c:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f40:	784f      	ldrb	r7, [r1, #1]
 8000f42:	edd6 1a00 	vldr	s3, [r6]
 8000f46:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f4a:	780f      	ldrb	r7, [r1, #0]
 8000f4c:	edd6 2a00 	vldr	s5, [r6]
 8000f50:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f54:	f103 0410 	add.w	r4, r3, #16
 8000f58:	edd6 3a00 	vldr	s7, [r6]
 8000f5c:	790b      	ldrb	r3, [r1, #4]
 8000f5e:	ee03 0a84 	vmla.f32	s0, s7, s8
 8000f62:	ee02 0a83 	vmla.f32	s0, s5, s6
 8000f66:	ee01 0a82 	vmla.f32	s0, s3, s4
 8000f6a:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000f6e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000f72:	794b      	ldrb	r3, [r1, #5]
 8000f74:	edd7 0a00 	vldr	s1, [r7]
 8000f78:	ed94 4a00 	vldr	s8, [r4]
 8000f7c:	edd4 3a01 	vldr	s7, [r4, #4]
 8000f80:	ed94 3a02 	vldr	s6, [r4, #8]
 8000f84:	edd4 2a03 	vldr	s5, [r4, #12]
 8000f88:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000f8c:	798b      	ldrb	r3, [r1, #6]
 8000f8e:	ed97 1a00 	vldr	s2, [r7]
 8000f92:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000f96:	79cb      	ldrb	r3, [r1, #7]
 8000f98:	edd7 1a00 	vldr	s3, [r7]
 8000f9c:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000fa0:	ee00 0a84 	vmla.f32	s0, s1, s8
 8000fa4:	3108      	adds	r1, #8
 8000fa6:	f104 0310 	add.w	r3, r4, #16
 8000faa:	ee01 0a23 	vmla.f32	s0, s2, s7
 8000fae:	ed97 2a00 	vldr	s4, [r7]
 8000fb2:	ee01 0a83 	vmla.f32	s0, s3, s6
 8000fb6:	429d      	cmp	r5, r3
 8000fb8:	ee02 0a22 	vmla.f32	s0, s4, s5
 8000fbc:	d2b0      	bcs.n	8000f20 <ai_dict8_dot_array_f32+0x240>
 8000fbe:	e6d5      	b.n	8000d6c <ai_dict8_dot_array_f32+0x8c>

08000fc0 <.text_10>:
 8000fc0:	00000000 	.word	0x00000000

08000fc4 <ai_dict4_dot_array_f32>:
 8000fc4:	b4f0      	push	{r4, r5, r6, r7}
 8000fc6:	9c04      	ldr	r4, [sp, #16]
 8000fc8:	0865      	lsrs	r5, r4, #1
 8000fca:	006d      	lsls	r5, r5, #1
 8000fcc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8000fd0:	42ab      	cmp	r3, r5
 8000fd2:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 80011c4 <.text_13>
 8000fd6:	d22f      	bcs.n	8001038 <ai_dict4_dot_array_f32+0x74>
 8000fd8:	f811 6b01 	ldrb.w	r6, [r1], #1
 8000fdc:	ed93 2a00 	vldr	s4, [r3]
 8000fe0:	ed93 1a01 	vldr	s2, [r3, #4]
 8000fe4:	f006 070f 	and.w	r7, r6, #15
 8000fe8:	0936      	lsrs	r6, r6, #4
 8000fea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8000fee:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8000ff2:	edd6 1a00 	vldr	s3, [r6]
 8000ff6:	edd7 0a00 	vldr	s1, [r7]
 8000ffa:	3308      	adds	r3, #8
 8000ffc:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001000:	42ab      	cmp	r3, r5
 8001002:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001006:	d217      	bcs.n	8001038 <ai_dict4_dot_array_f32+0x74>
 8001008:	f811 6b01 	ldrb.w	r6, [r1], #1
 800100c:	ed93 2a00 	vldr	s4, [r3]
 8001010:	ed93 1a01 	vldr	s2, [r3, #4]
 8001014:	f006 070f 	and.w	r7, r6, #15
 8001018:	0936      	lsrs	r6, r6, #4
 800101a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800101e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8001022:	edd6 1a00 	vldr	s3, [r6]
 8001026:	edd7 0a00 	vldr	s1, [r7]
 800102a:	3308      	adds	r3, #8
 800102c:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001030:	42ab      	cmp	r3, r5
 8001032:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001036:	d3cf      	bcc.n	8000fd8 <ai_dict4_dot_array_f32+0x14>
 8001038:	07e4      	lsls	r4, r4, #31
 800103a:	d509      	bpl.n	8001050 <ai_dict4_dot_array_f32+0x8c>
 800103c:	7809      	ldrb	r1, [r1, #0]
 800103e:	ed93 1a00 	vldr	s2, [r3]
 8001042:	0909      	lsrs	r1, r1, #4
 8001044:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001048:	edd2 0a00 	vldr	s1, [r2]
 800104c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001050:	edd0 1a00 	vldr	s3, [r0]
 8001054:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001058:	ed80 0a00 	vstr	s0, [r0]
 800105c:	bcf0      	pop	{r4, r5, r6, r7}
 800105e:	4770      	bx	lr

08001060 <forward_conv2d>:
 8001060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001064:	4605      	mov	r5, r0
 8001066:	b09b      	sub	sp, #108	; 0x6c
 8001068:	6968      	ldr	r0, [r5, #20]
 800106a:	6800      	ldr	r0, [r0, #0]
 800106c:	6801      	ldr	r1, [r0, #0]
 800106e:	6842      	ldr	r2, [r0, #4]
 8001070:	6880      	ldr	r0, [r0, #8]
 8001072:	680f      	ldr	r7, [r1, #0]
 8001074:	f8d2 a000 	ldr.w	sl, [r2]
 8001078:	f8d0 e000 	ldr.w	lr, [r0]
 800107c:	6840      	ldr	r0, [r0, #4]
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	920d      	str	r2, [sp, #52]	; 0x34
 8001082:	2800      	cmp	r0, #0
 8001084:	f8da 3008 	ldr.w	r3, [sl, #8]
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	f8da 1010 	ldr.w	r1, [sl, #16]
 800108e:	f8da 900c 	ldr.w	r9, [sl, #12]
 8001092:	693c      	ldr	r4, [r7, #16]
 8001094:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8001098:	8c2b      	ldrh	r3, [r5, #32]
 800109a:	930c      	str	r3, [sp, #48]	; 0x30
 800109c:	8cae      	ldrh	r6, [r5, #36]	; 0x24
 800109e:	960f      	str	r6, [sp, #60]	; 0x3c
 80010a0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80010a2:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 80010a4:	f8de 300c 	ldr.w	r3, [lr, #12]
 80010a8:	930e      	str	r3, [sp, #56]	; 0x38
 80010aa:	b292      	uxth	r2, r2
 80010ac:	f8de 3008 	ldr.w	r3, [lr, #8]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	683f      	ldr	r7, [r7, #0]
 80010b4:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80010b8:	f8de 7000 	ldr.w	r7, [lr]
 80010bc:	f8d7 e008 	ldr.w	lr, [r7, #8]
 80010c0:	69ab      	ldr	r3, [r5, #24]
 80010c2:	bf1a      	itte	ne
 80010c4:	6800      	ldrne	r0, [r0, #0]
 80010c6:	6887      	ldrne	r7, [r0, #8]
 80010c8:	2700      	moveq	r7, #0
 80010ca:	f8da 0000 	ldr.w	r0, [sl]
 80010ce:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80010d2:	69e8      	ldr	r0, [r5, #28]
 80010d4:	2800      	cmp	r0, #0
 80010d6:	bf14      	ite	ne
 80010d8:	4605      	movne	r5, r0
 80010da:	f8df 5714 	ldreq.w	r5, [pc, #1812]	; 80017f0 <.text_18>
 80010de:	4252      	negs	r2, r2
 80010e0:	2900      	cmp	r1, #0
 80010e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80010e4:	d06b      	beq.n	80011be <forward_conv2d+0x15e>
 80010e6:	4276      	negs	r6, r6
 80010e8:	9619      	str	r6, [sp, #100]	; 0x64
 80010ea:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 80010ee:	9415      	str	r4, [sp, #84]	; 0x54
 80010f0:	9110      	str	r1, [sp, #64]	; 0x40
 80010f2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80010f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80010f8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80010fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80010fc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80010fe:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8001100:	4240      	negs	r0, r0
 8001102:	bfd8      	it	le
 8001104:	2000      	movle	r0, #0
 8001106:	1a89      	subs	r1, r1, r2
 8001108:	4559      	cmp	r1, fp
 800110a:	bf28      	it	cs
 800110c:	4659      	movcs	r1, fp
 800110e:	2c00      	cmp	r4, #0
 8001110:	fb08 6202 	mla	r2, r8, r2, r6
 8001114:	d04b      	beq.n	80011ae <forward_conv2d+0x14e>
 8001116:	9402      	str	r4, [sp, #8]
 8001118:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800111c:	9c01      	ldr	r4, [sp, #4]
 800111e:	f8dd 9000 	ldr.w	r9, [sp]
 8001122:	9314      	str	r3, [sp, #80]	; 0x50
 8001124:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8001128:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 800112c:	9711      	str	r7, [sp, #68]	; 0x44
 800112e:	9018      	str	r0, [sp, #96]	; 0x60
 8001130:	9117      	str	r1, [sp, #92]	; 0x5c
 8001132:	4693      	mov	fp, r2
 8001134:	9f02      	ldr	r7, [sp, #8]
 8001136:	4270      	negs	r0, r6
 8001138:	bfd8      	it	le
 800113a:	2000      	movle	r0, #0
 800113c:	eba8 0106 	sub.w	r1, r8, r6
 8001140:	4549      	cmp	r1, r9
 8001142:	bf28      	it	cs
 8001144:	4649      	movcs	r1, r9
 8001146:	910a      	str	r1, [sp, #40]	; 0x28
 8001148:	9009      	str	r0, [sp, #36]	; 0x24
 800114a:	f8cd 9010 	str.w	r9, [sp, #16]
 800114e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001152:	9402      	str	r4, [sp, #8]
 8001154:	4458      	add	r0, fp
 8001156:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001158:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800115a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800115c:	9108      	str	r1, [sp, #32]
 800115e:	9207      	str	r2, [sp, #28]
 8001160:	9914      	ldr	r1, [sp, #80]	; 0x50
 8001162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001164:	9106      	str	r1, [sp, #24]
 8001166:	9205      	str	r2, [sp, #20]
 8001168:	990d      	ldr	r1, [sp, #52]	; 0x34
 800116a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800116c:	9101      	str	r1, [sp, #4]
 800116e:	9200      	str	r2, [sp, #0]
 8001170:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001172:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001174:	4350      	muls	r0, r2
 8001176:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800117a:	4651      	mov	r1, sl
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fd4d 	bl	8000c1c <ai_conv2d_kernel_f32>
 8001182:	4622      	mov	r2, r4
 8001184:	4651      	mov	r1, sl
 8001186:	4650      	mov	r0, sl
 8001188:	47a8      	blx	r5
 800118a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800118c:	1986      	adds	r6, r0, r6
 800118e:	1e7f      	subs	r7, r7, #1
 8001190:	eb0a 0a84 	add.w	sl, sl, r4, lsl #2
 8001194:	4483      	add	fp, r0
 8001196:	d1ce      	bne.n	8001136 <forward_conv2d+0xd6>
 8001198:	9401      	str	r4, [sp, #4]
 800119a:	f8cd 9000 	str.w	r9, [sp]
 800119e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80011a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80011a4:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 80011a8:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 80011ac:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80011ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80011b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80011b2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80011b4:	1851      	adds	r1, r2, r1
 80011b6:	1e64      	subs	r4, r4, #1
 80011b8:	910b      	str	r1, [sp, #44]	; 0x2c
 80011ba:	9410      	str	r4, [sp, #64]	; 0x40
 80011bc:	d19b      	bne.n	80010f6 <forward_conv2d+0x96>
 80011be:	b01b      	add	sp, #108	; 0x6c
 80011c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080011c4 <.text_13>:
 80011c4:	00000000 	.word	0x00000000

080011c8 <forward_conv2d_nl_pool>:
 80011c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011cc:	4603      	mov	r3, r0
 80011ce:	b0b5      	sub	sp, #212	; 0xd4
 80011d0:	6958      	ldr	r0, [r3, #20]
 80011d2:	6800      	ldr	r0, [r0, #0]
 80011d4:	6801      	ldr	r1, [r0, #0]
 80011d6:	6842      	ldr	r2, [r0, #4]
 80011d8:	f8d1 b000 	ldr.w	fp, [r1]
 80011dc:	6817      	ldr	r7, [r2, #0]
 80011de:	6880      	ldr	r0, [r0, #8]
 80011e0:	f8d0 a000 	ldr.w	sl, [r0]
 80011e4:	6844      	ldr	r4, [r0, #4]
 80011e6:	f10b 0114 	add.w	r1, fp, #20
 80011ea:	e891 1064 	ldmia.w	r1, {r2, r5, r6, ip}
 80011ee:	a82d      	add	r0, sp, #180	; 0xb4
 80011f0:	e880 1064 	stmia.w	r0, {r2, r5, r6, ip}
 80011f4:	f8db 0008 	ldr.w	r0, [fp, #8]
 80011f8:	9004      	str	r0, [sp, #16]
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	9103      	str	r1, [sp, #12]
 80011fe:	6938      	ldr	r0, [r7, #16]
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	921b      	str	r2, [sp, #108]	; 0x6c
 8001204:	f8db 5010 	ldr.w	r5, [fp, #16]
 8001208:	950d      	str	r5, [sp, #52]	; 0x34
 800120a:	f8db 200c 	ldr.w	r2, [fp, #12]
 800120e:	9202      	str	r2, [sp, #8]
 8001210:	8c1d      	ldrh	r5, [r3, #32]
 8001212:	9511      	str	r5, [sp, #68]	; 0x44
 8001214:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001216:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8001218:	9110      	str	r1, [sp, #64]	; 0x40
 800121a:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
 800121e:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 8001222:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8001224:	f8ad 5004 	strh.w	r5, [sp, #4]
 8001228:	699e      	ldr	r6, [r3, #24]
 800122a:	960c      	str	r6, [sp, #48]	; 0x30
 800122c:	f8da 1008 	ldr.w	r1, [sl, #8]
 8001230:	9100      	str	r1, [sp, #0]
 8001232:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8001234:	f8da 100c 	ldr.w	r1, [sl, #12]
 8001238:	950f      	str	r5, [sp, #60]	; 0x3c
 800123a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800123c:	951a      	str	r5, [sp, #104]	; 0x68
 800123e:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8001240:	9519      	str	r5, [sp, #100]	; 0x64
 8001242:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8001244:	951d      	str	r5, [sp, #116]	; 0x74
 8001246:	6a3e      	ldr	r6, [r7, #32]
 8001248:	f8d3 8048 	ldr.w	r8, [r3, #72]	; 0x48
 800124c:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800124e:	4346      	muls	r6, r0
 8001250:	9605      	str	r6, [sp, #20]
 8001252:	2c00      	cmp	r4, #0
 8001254:	69fe      	ldr	r6, [r7, #28]
 8001256:	9618      	str	r6, [sp, #96]	; 0x60
 8001258:	f8db 6000 	ldr.w	r6, [fp]
 800125c:	68b6      	ldr	r6, [r6, #8]
 800125e:	9617      	str	r6, [sp, #92]	; 0x5c
 8001260:	f8da 6000 	ldr.w	r6, [sl]
 8001264:	68b6      	ldr	r6, [r6, #8]
 8001266:	960b      	str	r6, [sp, #44]	; 0x2c
 8001268:	bf1a      	itte	ne
 800126a:	6824      	ldrne	r4, [r4, #0]
 800126c:	f8d4 b008 	ldrne.w	fp, [r4, #8]
 8001270:	f04f 0b00 	moveq.w	fp, #0
 8001274:	69dc      	ldr	r4, [r3, #28]
 8001276:	2c00      	cmp	r4, #0
 8001278:	bf12      	itee	ne
 800127a:	940e      	strne	r4, [sp, #56]	; 0x38
 800127c:	f8df 4570 	ldreq.w	r4, [pc, #1392]	; 80017f0 <.text_18>
 8001280:	940e      	streq	r4, [sp, #56]	; 0x38
 8001282:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8001284:	9c00      	ldr	r4, [sp, #0]
 8001286:	9616      	str	r6, [sp, #88]	; 0x58
 8001288:	426d      	negs	r5, r5
 800128a:	9b02      	ldr	r3, [sp, #8]
 800128c:	683f      	ldr	r7, [r7, #0]
 800128e:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8001292:	eba3 0904 	sub.w	r9, r3, r4
 8001296:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001298:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800129a:	4499      	add	r9, r3
 800129c:	fa19 f38e 	uxtah	r3, r9, lr
 80012a0:	f8d7 e008 	ldr.w	lr, [r7, #8]
 80012a4:	9f05      	ldr	r7, [sp, #20]
 80012a6:	fbb3 f4f4 	udiv	r4, r3, r4
 80012aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012ac:	1a5b      	subs	r3, r3, r1
 80012ae:	4463      	add	r3, ip
 80012b0:	199e      	adds	r6, r3, r6
 80012b2:	fbb6 f3f2 	udiv	r3, r6, r2
 80012b6:	1c64      	adds	r4, r4, #1
 80012b8:	1c5b      	adds	r3, r3, #1
 80012ba:	4477      	add	r7, lr
 80012bc:	2800      	cmp	r0, #0
 80012be:	9715      	str	r7, [sp, #84]	; 0x54
 80012c0:	f000 8118 	beq.w	80014f4 <forward_conv2d_nl_pool+0x32c>
 80012c4:	f1c8 0800 	rsb	r8, r8, #0
 80012c8:	f8cd 80d0 	str.w	r8, [sp, #208]	; 0xd0
 80012cc:	932a      	str	r3, [sp, #168]	; 0xa8
 80012ce:	9514      	str	r5, [sp, #80]	; 0x50
 80012d0:	9024      	str	r0, [sp, #144]	; 0x90
 80012d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80012d4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80012d6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80012d8:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bfd8      	it	le
 80012de:	2300      	movle	r3, #0
 80012e0:	1975      	adds	r5, r6, r5
 80012e2:	42a8      	cmp	r0, r5
 80012e4:	bf32      	itee	cc
 80012e6:	4607      	movcc	r7, r0
 80012e8:	9f14      	ldrcs	r7, [sp, #80]	; 0x50
 80012ea:	19f7      	addcs	r7, r6, r7
 80012ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80012ee:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 80012f0:	2800      	cmp	r0, #0
 80012f2:	f000 80f6 	beq.w	80014e2 <forward_conv2d_nl_pool+0x31a>
 80012f6:	1bde      	subs	r6, r3, r7
 80012f8:	9633      	str	r6, [sp, #204]	; 0xcc
 80012fa:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
 80012fe:	9425      	str	r4, [sp, #148]	; 0x94
 8001300:	9323      	str	r3, [sp, #140]	; 0x8c
 8001302:	9728      	str	r7, [sp, #160]	; 0xa0
 8001304:	9513      	str	r5, [sp, #76]	; 0x4c
 8001306:	9022      	str	r0, [sp, #136]	; 0x88
 8001308:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800130a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800130c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800130e:	2800      	cmp	r0, #0
 8001310:	bfcc      	ite	gt
 8001312:	4606      	movgt	r6, r0
 8001314:	2600      	movle	r6, #0
 8001316:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001318:	18e3      	adds	r3, r4, r3
 800131a:	4298      	cmp	r0, r3
 800131c:	bf32      	itee	cc
 800131e:	4603      	movcc	r3, r0
 8001320:	9b13      	ldrcs	r3, [sp, #76]	; 0x4c
 8001322:	18e3      	addcs	r3, r4, r3
 8001324:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001326:	1af4      	subs	r4, r6, r3
 8001328:	fb04 fa00 	mul.w	sl, r4, r0
 800132c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800132e:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8001330:	42a0      	cmp	r0, r4
 8001332:	46f0      	mov	r8, lr
 8001334:	f04f 0900 	mov.w	r9, #0
 8001338:	f280 80c5 	bge.w	80014c6 <forward_conv2d_nl_pool+0x2fe>
 800133c:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800133e:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8001340:	922c      	str	r2, [sp, #176]	; 0xb0
 8001342:	4350      	muls	r0, r2
 8001344:	1b04      	subs	r4, r0, r4
 8001346:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8001348:	9621      	str	r6, [sp, #132]	; 0x84
 800134a:	1b45      	subs	r5, r0, r5
 800134c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800134e:	9327      	str	r3, [sp, #156]	; 0x9c
 8001350:	9412      	str	r4, [sp, #72]	; 0x48
 8001352:	951f      	str	r5, [sp, #124]	; 0x7c
 8001354:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001358:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800135a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800135c:	4252      	negs	r2, r2
 800135e:	bfd8      	it	le
 8001360:	2200      	movle	r2, #0
 8001362:	1b1b      	subs	r3, r3, r4
 8001364:	428b      	cmp	r3, r1
 8001366:	bf3a      	itte	cc
 8001368:	9b0d      	ldrcc	r3, [sp, #52]	; 0x34
 800136a:	1b1d      	subcc	r5, r3, r4
 800136c:	460d      	movcs	r5, r1
 800136e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8001370:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001372:	4344      	muls	r4, r0
 8001374:	1ae3      	subs	r3, r4, r3
 8001376:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8001378:	42b4      	cmp	r4, r6
 800137a:	f280 8099 	bge.w	80014b0 <forward_conv2d_nl_pool+0x2e8>
 800137e:	1aad      	subs	r5, r5, r2
 8001380:	9532      	str	r5, [sp, #200]	; 0xc8
 8001382:	eba6 0c04 	sub.w	ip, r6, r4
 8001386:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8001388:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 800138a:	9c04      	ldr	r4, [sp, #16]
 800138c:	9f00      	ldr	r7, [sp, #0]
 800138e:	f8cd b098 	str.w	fp, [sp, #152]	; 0x98
 8001392:	4375      	muls	r5, r6
 8001394:	9531      	str	r5, [sp, #196]	; 0xc4
 8001396:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
 800139a:	9d03      	ldr	r5, [sp, #12]
 800139c:	9e02      	ldr	r6, [sp, #8]
 800139e:	9011      	str	r0, [sp, #68]	; 0x44
 80013a0:	911c      	str	r1, [sp, #112]	; 0x70
 80013a2:	f8cd e0a4 	str.w	lr, [sp, #164]	; 0xa4
 80013a6:	921e      	str	r2, [sp, #120]	; 0x78
 80013a8:	469a      	mov	sl, r3
 80013aa:	46e3      	mov	fp, ip
 80013ac:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80013ae:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
 80013b2:	f1da 0100 	rsbs	r1, sl, #0
 80013b6:	bfd8      	it	le
 80013b8:	2100      	movle	r1, #0
 80013ba:	eb01 0c0a 	add.w	ip, r1, sl
 80013be:	fb0e 220c 	mla	r2, lr, ip, r2
 80013c2:	eba6 000a 	sub.w	r0, r6, sl
 80013c6:	42b8      	cmp	r0, r7
 80013c8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80013ca:	4402      	add	r2, r0
 80013cc:	9826      	ldr	r0, [sp, #152]	; 0x98
 80013ce:	bf34      	ite	cc
 80013d0:	eba6 030a 	subcc.w	r3, r6, sl
 80013d4:	463b      	movcs	r3, r7
 80013d6:	b908      	cbnz	r0, 80013dc <forward_conv2d_nl_pool+0x214>
 80013d8:	ea4f 0008 	mov.w	r0, r8
 80013dc:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 80013e0:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
 80013e4:	1a5b      	subs	r3, r3, r1
 80013e6:	f1be 0f01 	cmp.w	lr, #1
 80013ea:	d112      	bne.n	8001412 <forward_conv2d_nl_pool+0x24a>
 80013ec:	9108      	str	r1, [sp, #32]
 80013ee:	9309      	str	r3, [sp, #36]	; 0x24
 80013f0:	f8cd c01c 	str.w	ip, [sp, #28]
 80013f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80013f6:	9106      	str	r1, [sp, #24]
 80013f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80013fa:	9105      	str	r1, [sp, #20]
 80013fc:	9000      	str	r0, [sp, #0]
 80013fe:	9704      	str	r7, [sp, #16]
 8001400:	9603      	str	r6, [sp, #12]
 8001402:	9502      	str	r5, [sp, #8]
 8001404:	9401      	str	r4, [sp, #4]
 8001406:	4641      	mov	r1, r8
 8001408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff fa2c 	bl	8000868 <ai_conv2d_kernel_simple_f32>
 8001410:	e028      	b.n	8001464 <forward_conv2d_nl_pool+0x29c>
 8001412:	45a6      	cmp	lr, r4
 8001414:	d112      	bne.n	800143c <forward_conv2d_nl_pool+0x274>
 8001416:	9309      	str	r3, [sp, #36]	; 0x24
 8001418:	9108      	str	r1, [sp, #32]
 800141a:	9000      	str	r0, [sp, #0]
 800141c:	f8cd c01c 	str.w	ip, [sp, #28]
 8001420:	9704      	str	r7, [sp, #16]
 8001422:	9603      	str	r6, [sp, #12]
 8001424:	9502      	str	r5, [sp, #8]
 8001426:	9401      	str	r4, [sp, #4]
 8001428:	2000      	movs	r0, #0
 800142a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800142c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800142e:	9305      	str	r3, [sp, #20]
 8001430:	9106      	str	r1, [sp, #24]
 8001432:	4641      	mov	r1, r8
 8001434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001436:	f7ff fa9f 	bl	8000978 <ai_conv2d_kernel_depthwise_f32>
 800143a:	e013      	b.n	8001464 <forward_conv2d_nl_pool+0x29c>
 800143c:	9109      	str	r1, [sp, #36]	; 0x24
 800143e:	930a      	str	r3, [sp, #40]	; 0x28
 8001440:	9000      	str	r0, [sp, #0]
 8001442:	f8cd c020 	str.w	ip, [sp, #32]
 8001446:	9704      	str	r7, [sp, #16]
 8001448:	9603      	str	r6, [sp, #12]
 800144a:	9502      	str	r5, [sp, #8]
 800144c:	9401      	str	r4, [sp, #4]
 800144e:	2000      	movs	r0, #0
 8001450:	991e      	ldr	r1, [sp, #120]	; 0x78
 8001452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001454:	9107      	str	r1, [sp, #28]
 8001456:	9306      	str	r3, [sp, #24]
 8001458:	991c      	ldr	r1, [sp, #112]	; 0x70
 800145a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800145c:	9105      	str	r1, [sp, #20]
 800145e:	4641      	mov	r1, r8
 8001460:	f7ff fb2c 	bl	8000abc <ai_conv2d_kernel_group_f32>
 8001464:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001466:	462a      	mov	r2, r5
 8001468:	4641      	mov	r1, r8
 800146a:	4640      	mov	r0, r8
 800146c:	4798      	blx	r3
 800146e:	9820      	ldr	r0, [sp, #128]	; 0x80
 8001470:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8001474:	f109 0901 	add.w	r9, r9, #1
 8001478:	4548      	cmp	r0, r9
 800147a:	bf18      	it	ne
 800147c:	2000      	movne	r0, #0
 800147e:	9000      	str	r0, [sp, #0]
 8001480:	462b      	mov	r3, r5
 8001482:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001484:	462a      	mov	r2, r5
 8001486:	4641      	mov	r1, r8
 8001488:	47e0      	blx	ip
 800148a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800148c:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8001490:	f1bb 0b01 	subs.w	fp, fp, #1
 8001494:	4482      	add	sl, r0
 8001496:	d189      	bne.n	80013ac <forward_conv2d_nl_pool+0x1e4>
 8001498:	9811      	ldr	r0, [sp, #68]	; 0x44
 800149a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800149c:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 80014a0:	f8dd e0a4 	ldr.w	lr, [sp, #164]	; 0xa4
 80014a4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80014a8:	9404      	str	r4, [sp, #16]
 80014aa:	9503      	str	r5, [sp, #12]
 80014ac:	9602      	str	r6, [sp, #8]
 80014ae:	9700      	str	r7, [sp, #0]
 80014b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80014b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80014b4:	189a      	adds	r2, r3, r2
 80014b6:	9212      	str	r2, [sp, #72]	; 0x48
 80014b8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80014ba:	1e52      	subs	r2, r2, #1
 80014bc:	921f      	str	r2, [sp, #124]	; 0x7c
 80014be:	f47f af49 	bne.w	8001354 <forward_conv2d_nl_pool+0x18c>
 80014c2:	9011      	str	r0, [sp, #68]	; 0x44
 80014c4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80014c6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80014c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80014ca:	1818      	adds	r0, r3, r0
 80014cc:	9013      	str	r0, [sp, #76]	; 0x4c
 80014ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80014d0:	9818      	ldr	r0, [sp, #96]	; 0x60
 80014d2:	1e5b      	subs	r3, r3, #1
 80014d4:	4486      	add	lr, r0
 80014d6:	9322      	str	r3, [sp, #136]	; 0x88
 80014d8:	f47f af16 	bne.w	8001308 <forward_conv2d_nl_pool+0x140>
 80014dc:	f8dd c0ac 	ldr.w	ip, [sp, #172]	; 0xac
 80014e0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80014e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80014e4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80014e6:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80014e8:	18eb      	adds	r3, r5, r3
 80014ea:	1e76      	subs	r6, r6, #1
 80014ec:	9314      	str	r3, [sp, #80]	; 0x50
 80014ee:	9624      	str	r6, [sp, #144]	; 0x90
 80014f0:	f47f aeef 	bne.w	80012d2 <forward_conv2d_nl_pool+0x10a>
 80014f4:	b035      	add	sp, #212	; 0xd4
 80014f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080014fc <forward_dense>:
 80014fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001500:	b089      	sub	sp, #36	; 0x24
 8001502:	6940      	ldr	r0, [r0, #20]
 8001504:	6800      	ldr	r0, [r0, #0]
 8001506:	6801      	ldr	r1, [r0, #0]
 8001508:	6842      	ldr	r2, [r0, #4]
 800150a:	6880      	ldr	r0, [r0, #8]
 800150c:	f8d0 8000 	ldr.w	r8, [r0]
 8001510:	6844      	ldr	r4, [r0, #4]
 8001512:	680e      	ldr	r6, [r1, #0]
 8001514:	f8d2 e000 	ldr.w	lr, [r2]
 8001518:	f8de 000c 	ldr.w	r0, [lr, #12]
 800151c:	f8de 2010 	ldr.w	r2, [lr, #16]
 8001520:	68b5      	ldr	r5, [r6, #8]
 8001522:	f8de 1008 	ldr.w	r1, [lr, #8]
 8001526:	4350      	muls	r0, r2
 8001528:	f8d8 2000 	ldr.w	r2, [r8]
 800152c:	6813      	ldr	r3, [r2, #0]
 800152e:	ea4f 5a53 	mov.w	sl, r3, lsr #21
 8001532:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8001536:	f00a 0a03 	and.w	sl, sl, #3
 800153a:	0c5b      	lsrs	r3, r3, #17
 800153c:	2700      	movs	r7, #0
 800153e:	fa29 f90a 	lsr.w	r9, r9, sl
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	f8cd 9004 	str.w	r9, [sp, #4]
 800154a:	2b04      	cmp	r3, #4
 800154c:	6836      	ldr	r6, [r6, #0]
 800154e:	bf14      	ite	ne
 8001550:	2b08      	cmpne	r3, #8
 8001552:	68d7      	ldreq	r7, [r2, #12]
 8001554:	f8de 2000 	ldr.w	r2, [lr]
 8001558:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800155c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8001560:	68b2      	ldr	r2, [r6, #8]
 8001562:	2800      	cmp	r0, #0
 8001564:	eb09 0681 	add.w	r6, r9, r1, lsl #2
 8001568:	d066      	beq.n	8001638 <forward_dense+0x13c>
 800156a:	f8cd 801c 	str.w	r8, [sp, #28]
 800156e:	9405      	str	r4, [sp, #20]
 8001570:	9106      	str	r1, [sp, #24]
 8001572:	9704      	str	r7, [sp, #16]
 8001574:	9600      	str	r6, [sp, #0]
 8001576:	9003      	str	r0, [sp, #12]
 8001578:	9807      	ldr	r0, [sp, #28]
 800157a:	6801      	ldr	r1, [r0, #0]
 800157c:	6888      	ldr	r0, [r1, #8]
 800157e:	9905      	ldr	r1, [sp, #20]
 8001580:	b109      	cbz	r1, 8001586 <forward_dense+0x8a>
 8001582:	680c      	ldr	r4, [r1, #0]
 8001584:	68a1      	ldr	r1, [r4, #8]
 8001586:	9c04      	ldr	r4, [sp, #16]
 8001588:	2c00      	cmp	r4, #0
 800158a:	9c00      	ldr	r4, [sp, #0]
 800158c:	d110      	bne.n	80015b0 <forward_dense+0xb4>
 800158e:	45a1      	cmp	r9, r4
 8001590:	d247      	bcs.n	8001622 <forward_dense+0x126>
 8001592:	46a2      	mov	sl, r4
 8001594:	462e      	mov	r6, r5
 8001596:	464f      	mov	r7, r9
 8001598:	461c      	mov	r4, r3
 800159a:	4690      	mov	r8, r2
 800159c:	4681      	mov	r9, r0
 800159e:	460d      	mov	r5, r1
 80015a0:	2d00      	cmp	r5, #0
 80015a2:	bf19      	ittee	ne
 80015a4:	f855 0b04 	ldrne.w	r0, [r5], #4
 80015a8:	9002      	strne	r0, [sp, #8]
 80015aa:	2100      	moveq	r1, #0
 80015ac:	9102      	streq	r1, [sp, #8]
 80015ae:	e028      	b.n	8001602 <forward_dense+0x106>
 80015b0:	45a1      	cmp	r9, r4
 80015b2:	d236      	bcs.n	8001622 <forward_dense+0x126>
 80015b4:	9c04      	ldr	r4, [sp, #16]
 80015b6:	9f00      	ldr	r7, [sp, #0]
 80015b8:	4698      	mov	r8, r3
 80015ba:	4616      	mov	r6, r2
 80015bc:	4682      	mov	sl, r0
 80015be:	468b      	mov	fp, r1
 80015c0:	f1bb 0f00 	cmp.w	fp, #0
 80015c4:	bf19      	ittee	ne
 80015c6:	f85b 0b04 	ldrne.w	r0, [fp], #4
 80015ca:	9002      	strne	r0, [sp, #8]
 80015cc:	2000      	moveq	r0, #0
 80015ce:	9002      	streq	r0, [sp, #8]
 80015d0:	9901      	ldr	r1, [sp, #4]
 80015d2:	9500      	str	r5, [sp, #0]
 80015d4:	2904      	cmp	r1, #4
 80015d6:	4633      	mov	r3, r6
 80015d8:	4622      	mov	r2, r4
 80015da:	4651      	mov	r1, sl
 80015dc:	a802      	add	r0, sp, #8
 80015de:	d103      	bne.n	80015e8 <forward_dense+0xec>
 80015e0:	f7ff fcf0 	bl	8000fc4 <ai_dict4_dot_array_f32>
 80015e4:	e002      	b.n	80015ec <forward_dense+0xf0>
 80015e6:	bf00      	nop
 80015e8:	f7ff fb7a 	bl	8000ce0 <ai_dict8_dot_array_f32>
 80015ec:	9802      	ldr	r0, [sp, #8]
 80015ee:	f849 0b04 	str.w	r0, [r9], #4
 80015f2:	45b9      	cmp	r9, r7
 80015f4:	44c2      	add	sl, r8
 80015f6:	d3e3      	bcc.n	80015c0 <forward_dense+0xc4>
 80015f8:	9404      	str	r4, [sp, #16]
 80015fa:	4643      	mov	r3, r8
 80015fc:	4632      	mov	r2, r6
 80015fe:	9700      	str	r7, [sp, #0]
 8001600:	e00f      	b.n	8001622 <forward_dense+0x126>
 8001602:	4633      	mov	r3, r6
 8001604:	4642      	mov	r2, r8
 8001606:	4649      	mov	r1, r9
 8001608:	a802      	add	r0, sp, #8
 800160a:	f000 fcbf 	bl	8001f8c <ai_math_dot_array>
 800160e:	9802      	ldr	r0, [sp, #8]
 8001610:	f847 0b04 	str.w	r0, [r7], #4
 8001614:	4557      	cmp	r7, sl
 8001616:	44a1      	add	r9, r4
 8001618:	d3c2      	bcc.n	80015a0 <forward_dense+0xa4>
 800161a:	4635      	mov	r5, r6
 800161c:	4623      	mov	r3, r4
 800161e:	46b9      	mov	r9, r7
 8001620:	4642      	mov	r2, r8
 8001622:	9800      	ldr	r0, [sp, #0]
 8001624:	9906      	ldr	r1, [sp, #24]
 8001626:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 800162a:	9803      	ldr	r0, [sp, #12]
 800162c:	9400      	str	r4, [sp, #0]
 800162e:	1e40      	subs	r0, r0, #1
 8001630:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8001634:	9003      	str	r0, [sp, #12]
 8001636:	d19f      	bne.n	8001578 <forward_dense+0x7c>
 8001638:	b009      	add	sp, #36	; 0x24
 800163a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001640 <arm_mat_gemm_f32>:
 8001640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001644:	b08a      	sub	sp, #40	; 0x28
 8001646:	4615      	mov	r5, r2
 8001648:	468b      	mov	fp, r1
 800164a:	469a      	mov	sl, r3
 800164c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800164e:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8001652:	6869      	ldr	r1, [r5, #4]
 8001654:	9100      	str	r1, [sp, #0]
 8001656:	685c      	ldr	r4, [r3, #4]
 8001658:	9402      	str	r4, [sp, #8]
 800165a:	f8b3 9000 	ldrh.w	r9, [r3]
 800165e:	8804      	ldrh	r4, [r0, #0]
 8001660:	885e      	ldrh	r6, [r3, #2]
 8001662:	8840      	ldrh	r0, [r0, #2]
 8001664:	f8bb 1000 	ldrh.w	r1, [fp]
 8001668:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 800166c:	f8b5 e000 	ldrh.w	lr, [r5]
 8001670:	886f      	ldrh	r7, [r5, #2]
 8001672:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001676:	9305      	str	r3, [sp, #20]
 8001678:	9304      	str	r3, [sp, #16]
 800167a:	2500      	movs	r5, #0
 800167c:	fa4f f38a 	sxtb.w	r3, sl
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf0c      	ite	eq
 8001684:	46a0      	moveq	r8, r4
 8001686:	4680      	movne	r8, r0
 8001688:	2f01      	cmp	r7, #1
 800168a:	bf0c      	ite	eq
 800168c:	2300      	moveq	r3, #0
 800168e:	2304      	movne	r3, #4
 8001690:	f1be 0f01 	cmp.w	lr, #1
 8001694:	d104      	bne.n	80016a0 <arm_mat_gemm_f32+0x60>
 8001696:	2f01      	cmp	r7, #1
 8001698:	d007      	beq.n	80016aa <arm_mat_gemm_f32+0x6a>
 800169a:	f1c6 0e00 	rsb	lr, r6, #0
 800169e:	e005      	b.n	80016ac <arm_mat_gemm_f32+0x6c>
 80016a0:	2f01      	cmp	r7, #1
 80016a2:	bf08      	it	eq
 80016a4:	f04f 0e01 	moveq.w	lr, #1
 80016a8:	d000      	beq.n	80016ac <arm_mat_gemm_f32+0x6c>
 80016aa:	46ae      	mov	lr, r5
 80016ac:	fa0f f78e 	sxth.w	r7, lr
 80016b0:	9701      	str	r7, [sp, #4]
 80016b2:	fa4f f78a 	sxtb.w	r7, sl
 80016b6:	2f00      	cmp	r7, #0
 80016b8:	bf0c      	ite	eq
 80016ba:	46a3      	moveq	fp, r4
 80016bc:	4683      	movne	fp, r0
 80016be:	45cb      	cmp	fp, r9
 80016c0:	d115      	bne.n	80016ee <arm_mat_gemm_f32+0xae>
 80016c2:	f99d e04c 	ldrsb.w	lr, [sp, #76]	; 0x4c
 80016c6:	f1be 0f00 	cmp.w	lr, #0
 80016ca:	bf0c      	ite	eq
 80016cc:	4691      	moveq	r9, r2
 80016ce:	4689      	movne	r9, r1
 80016d0:	45b1      	cmp	r9, r6
 80016d2:	d10c      	bne.n	80016ee <arm_mat_gemm_f32+0xae>
 80016d4:	fa4f f68a 	sxtb.w	r6, sl
 80016d8:	2e00      	cmp	r6, #0
 80016da:	bf0c      	ite	eq
 80016dc:	4683      	moveq	fp, r0
 80016de:	46a3      	movne	fp, r4
 80016e0:	f1be 0f00 	cmp.w	lr, #0
 80016e4:	bf0c      	ite	eq
 80016e6:	460e      	moveq	r6, r1
 80016e8:	4616      	movne	r6, r2
 80016ea:	45b3      	cmp	fp, r6
 80016ec:	d06c      	beq.n	80017c8 <arm_mat_gemm_f32+0x188>
 80016ee:	f06f 0002 	mvn.w	r0, #2
 80016f2:	b00a      	add	sp, #40	; 0x28
 80016f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016f8:	9d05      	ldr	r5, [sp, #20]
 80016fa:	0097      	lsls	r7, r2, #2
 80016fc:	9708      	str	r7, [sp, #32]
 80016fe:	0086      	lsls	r6, r0, #2
 8001700:	9607      	str	r6, [sp, #28]
 8001702:	f8cd c018 	str.w	ip, [sp, #24]
 8001706:	f8ad 4002 	strh.w	r4, [sp, #2]
 800170a:	4644      	mov	r4, r8
 800170c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8001710:	fa4f f68a 	sxtb.w	r6, sl
 8001714:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8001718:	2e00      	cmp	r6, #0
 800171a:	ed9f 1a34 	vldr	s2, [pc, #208]	; 80017ec <.text_17>
 800171e:	bf0c      	ite	eq
 8001720:	4606      	moveq	r6, r0
 8001722:	f8bd 6002 	ldrhne.w	r6, [sp, #2]
 8001726:	b1b6      	cbz	r6, 8001756 <arm_mat_gemm_f32+0x116>
 8001728:	fa4f f78a 	sxtb.w	r7, sl
 800172c:	2f00      	cmp	r7, #0
 800172e:	bf0c      	ite	eq
 8001730:	2704      	moveq	r7, #4
 8001732:	9f07      	ldrne	r7, [sp, #28]
 8001734:	f1be 0f00 	cmp.w	lr, #0
 8001738:	edd8 1a00 	vldr	s3, [r8]
 800173c:	ed95 2a00 	vldr	s4, [r5]
 8001740:	44b8      	add	r8, r7
 8001742:	bf0c      	ite	eq
 8001744:	9f08      	ldreq	r7, [sp, #32]
 8001746:	2704      	movne	r7, #4
 8001748:	19ed      	adds	r5, r5, r7
 800174a:	1e76      	subs	r6, r6, #1
 800174c:	b2b7      	uxth	r7, r6
 800174e:	2f00      	cmp	r7, #0
 8001750:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001754:	d1e8      	bne.n	8001728 <arm_mat_gemm_f32+0xe8>
 8001756:	ee20 1a01 	vmul.f32	s2, s0, s2
 800175a:	eddb 1a00 	vldr	s3, [fp]
 800175e:	1e64      	subs	r4, r4, #1
 8001760:	ee00 1aa1 	vmla.f32	s2, s1, s3
 8001764:	b2a4      	uxth	r4, r4
 8001766:	f1be 0f00 	cmp.w	lr, #0
 800176a:	ed89 1a00 	vstr	s2, [r9]
 800176e:	bf0e      	itee	eq
 8001770:	1b15      	subeq	r5, r2, r4
 8001772:	1b0d      	subne	r5, r1, r4
 8001774:	4355      	mulne	r5, r2
 8001776:	2c00      	cmp	r4, #0
 8001778:	f109 0904 	add.w	r9, r9, #4
 800177c:	449b      	add	fp, r3
 800177e:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 8001782:	d1c5      	bne.n	8001710 <arm_mat_gemm_f32+0xd0>
 8001784:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001788:	9d06      	ldr	r5, [sp, #24]
 800178a:	f8bd 4002 	ldrh.w	r4, [sp, #2]
 800178e:	f8cd c010 	str.w	ip, [sp, #16]
 8001792:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001794:	444e      	add	r6, r9
 8001796:	9603      	str	r6, [sp, #12]
 8001798:	fa4f f68a 	sxtb.w	r6, sl
 800179c:	2e00      	cmp	r6, #0
 800179e:	bf0c      	ite	eq
 80017a0:	ea4f 0c80 	moveq.w	ip, r0, lsl #2
 80017a4:	f04f 0c04 	movne.w	ip, #4
 80017a8:	44ac      	add	ip, r5
 80017aa:	9d01      	ldr	r5, [sp, #4]
 80017ac:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 80017b0:	f8bd 5000 	ldrh.w	r5, [sp]
 80017b4:	1e6e      	subs	r6, r5, #1
 80017b6:	f8ad 6000 	strh.w	r6, [sp]
 80017ba:	f8bd 5000 	ldrh.w	r5, [sp]
 80017be:	b955      	cbnz	r5, 80017d6 <arm_mat_gemm_f32+0x196>
 80017c0:	2000      	movs	r0, #0
 80017c2:	b00a      	add	sp, #40	; 0x28
 80017c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017c8:	f8dd b000 	ldr.w	fp, [sp]
 80017cc:	9503      	str	r5, [sp, #12]
 80017ce:	f8ad 8000 	strh.w	r8, [sp]
 80017d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80017d6:	ae03      	add	r6, sp, #12
 80017d8:	9d02      	ldr	r5, [sp, #8]
 80017da:	8836      	ldrh	r6, [r6, #0]
 80017dc:	f1be 0f00 	cmp.w	lr, #0
 80017e0:	eb05 0986 	add.w	r9, r5, r6, lsl #2
 80017e4:	bf0c      	ite	eq
 80017e6:	4690      	moveq	r8, r2
 80017e8:	4688      	movne	r8, r1
 80017ea:	e785      	b.n	80016f8 <arm_mat_gemm_f32+0xb8>

080017ec <.text_17>:
 80017ec:	00000000 	.word	0x00000000

080017f0 <.text_18>:
 80017f0:	08000cdd 	.word	0x08000cdd

080017f4 <forward_gemm>:
 80017f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f6:	b08b      	sub	sp, #44	; 0x2c
 80017f8:	6941      	ldr	r1, [r0, #20]
 80017fa:	6809      	ldr	r1, [r1, #0]
 80017fc:	680a      	ldr	r2, [r1, #0]
 80017fe:	6849      	ldr	r1, [r1, #4]
 8001800:	6809      	ldr	r1, [r1, #0]
 8001802:	680d      	ldr	r5, [r1, #0]
 8001804:	6814      	ldr	r4, [r2, #0]
 8001806:	6853      	ldr	r3, [r2, #4]
 8001808:	6892      	ldr	r2, [r2, #8]
 800180a:	68ad      	ldr	r5, [r5, #8]
 800180c:	68ce      	ldr	r6, [r1, #12]
 800180e:	690f      	ldr	r7, [r1, #16]
 8001810:	9509      	str	r5, [sp, #36]	; 0x24
 8001812:	f8ad 7020 	strh.w	r7, [sp, #32]
 8001816:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 800181a:	6825      	ldr	r5, [r4, #0]
 800181c:	68e6      	ldr	r6, [r4, #12]
 800181e:	68ad      	ldr	r5, [r5, #8]
 8001820:	6924      	ldr	r4, [r4, #16]
 8001822:	f8ad 4018 	strh.w	r4, [sp, #24]
 8001826:	f8ad 601a 	strh.w	r6, [sp, #26]
 800182a:	9507      	str	r5, [sp, #28]
 800182c:	681c      	ldr	r4, [r3, #0]
 800182e:	68dd      	ldr	r5, [r3, #12]
 8001830:	68a4      	ldr	r4, [r4, #8]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001838:	f8ad 5012 	strh.w	r5, [sp, #18]
 800183c:	9405      	str	r4, [sp, #20]
 800183e:	6813      	ldr	r3, [r2, #0]
 8001840:	68d4      	ldr	r4, [r2, #12]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	6912      	ldr	r2, [r2, #16]
 8001846:	f8ad 2008 	strh.w	r2, [sp, #8]
 800184a:	f8ad 400a 	strh.w	r4, [sp, #10]
 800184e:	aa08      	add	r2, sp, #32
 8001850:	9303      	str	r3, [sp, #12]
 8001852:	9201      	str	r2, [sp, #4]
 8001854:	aa02      	add	r2, sp, #8
 8001856:	f990 1021 	ldrsb.w	r1, [r0, #33]	; 0x21
 800185a:	9100      	str	r1, [sp, #0]
 800185c:	a904      	add	r1, sp, #16
 800185e:	f990 3020 	ldrsb.w	r3, [r0, #32]
 8001862:	edd0 0a07 	vldr	s1, [r0, #28]
 8001866:	ed90 0a06 	vldr	s0, [r0, #24]
 800186a:	a806      	add	r0, sp, #24
 800186c:	f7ff fee8 	bl	8001640 <arm_mat_gemm_f32>
 8001870:	b00b      	add	sp, #44	; 0x2c
 8001872:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001874 <nl_func_sm_channel_f32>:
 8001874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001878:	460f      	mov	r7, r1
 800187a:	4614      	mov	r4, r2
 800187c:	ed2d 8b02 	vpush	{d8}
 8001880:	2c02      	cmp	r4, #2
 8001882:	4606      	mov	r6, r0
 8001884:	ed97 8a00 	vldr	s16, [r7]
 8001888:	eddf 8ac3 	vldr	s17, [pc, #780]	; 8001b98 <.text_11>
 800188c:	d33d      	bcc.n	800190a <nl_func_sm_channel_f32+0x96>
 800188e:	1e61      	subs	r1, r4, #1
 8001890:	1d3a      	adds	r2, r7, #4
 8001892:	f011 0003 	ands.w	r0, r1, #3
 8001896:	d00c      	beq.n	80018b2 <nl_func_sm_channel_f32+0x3e>
 8001898:	ed92 0a00 	vldr	s0, [r2]
 800189c:	eeb4 0a48 	vcmp.f32	s0, s16
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a4:	bf58      	it	pl
 80018a6:	eeb0 8a40 	vmovpl.f32	s16, s0
 80018aa:	1e40      	subs	r0, r0, #1
 80018ac:	f102 0204 	add.w	r2, r2, #4
 80018b0:	d1f2      	bne.n	8001898 <nl_func_sm_channel_f32+0x24>
 80018b2:	0889      	lsrs	r1, r1, #2
 80018b4:	f000 802b 	beq.w	800190e <nl_func_sm_channel_f32+0x9a>
 80018b8:	ed92 0a00 	vldr	s0, [r2]
 80018bc:	eeb4 0a48 	vcmp.f32	s0, s16
 80018c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c4:	bf58      	it	pl
 80018c6:	eeb0 8a40 	vmovpl.f32	s16, s0
 80018ca:	ed92 0a01 	vldr	s0, [r2, #4]
 80018ce:	eeb4 0a48 	vcmp.f32	s0, s16
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	bf58      	it	pl
 80018d8:	eeb0 8a40 	vmovpl.f32	s16, s0
 80018dc:	ed92 0a02 	vldr	s0, [r2, #8]
 80018e0:	eeb4 0a48 	vcmp.f32	s0, s16
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	bf58      	it	pl
 80018ea:	eeb0 8a40 	vmovpl.f32	s16, s0
 80018ee:	ed92 0a03 	vldr	s0, [r2, #12]
 80018f2:	eeb4 0a48 	vcmp.f32	s0, s16
 80018f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fa:	bf58      	it	pl
 80018fc:	eeb0 8a40 	vmovpl.f32	s16, s0
 8001900:	1e49      	subs	r1, r1, #1
 8001902:	f102 0210 	add.w	r2, r2, #16
 8001906:	d1d7      	bne.n	80018b8 <nl_func_sm_channel_f32+0x44>
 8001908:	e001      	b.n	800190e <nl_func_sm_channel_f32+0x9a>
 800190a:	2c00      	cmp	r4, #0
 800190c:	d040      	beq.n	8001990 <nl_func_sm_channel_f32+0x11c>
 800190e:	46b0      	mov	r8, r6
 8001910:	ea4f 0504 	mov.w	r5, r4
 8001914:	ed97 0a00 	vldr	s0, [r7]
 8001918:	ee30 0a48 	vsub.f32	s0, s0, s16
 800191c:	f002 fd50 	bl	80043c0 <expf>
 8001920:	1d3f      	adds	r7, r7, #4
 8001922:	ed88 0a00 	vstr	s0, [r8]
 8001926:	1e6d      	subs	r5, r5, #1
 8001928:	ee78 8a80 	vadd.f32	s17, s17, s0
 800192c:	f108 0804 	add.w	r8, r8, #4
 8001930:	d1f0      	bne.n	8001914 <nl_func_sm_channel_f32+0xa0>
 8001932:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001936:	f014 0003 	ands.w	r0, r4, #3
 800193a:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800193e:	d009      	beq.n	8001954 <nl_func_sm_channel_f32+0xe0>
 8001940:	edd6 0a00 	vldr	s1, [r6]
 8001944:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001948:	edc6 0a00 	vstr	s1, [r6]
 800194c:	1e40      	subs	r0, r0, #1
 800194e:	f106 0604 	add.w	r6, r6, #4
 8001952:	d1f5      	bne.n	8001940 <nl_func_sm_channel_f32+0xcc>
 8001954:	08a4      	lsrs	r4, r4, #2
 8001956:	d01b      	beq.n	8001990 <nl_func_sm_channel_f32+0x11c>
 8001958:	edd6 0a00 	vldr	s1, [r6]
 800195c:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001960:	edc6 0a00 	vstr	s1, [r6]
 8001964:	1e64      	subs	r4, r4, #1
 8001966:	ed96 1a01 	vldr	s2, [r6, #4]
 800196a:	edd6 0a02 	vldr	s1, [r6, #8]
 800196e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8001972:	ed86 1a01 	vstr	s2, [r6, #4]
 8001976:	ee60 0a80 	vmul.f32	s1, s1, s0
 800197a:	ed96 1a03 	vldr	s2, [r6, #12]
 800197e:	edc6 0a02 	vstr	s1, [r6, #8]
 8001982:	ee21 1a00 	vmul.f32	s2, s2, s0
 8001986:	ed86 1a03 	vstr	s2, [r6, #12]
 800198a:	f106 0610 	add.w	r6, r6, #16
 800198e:	d1e3      	bne.n	8001958 <nl_func_sm_channel_f32+0xe4>
 8001990:	ecbd 8b02 	vpop	{d8}
 8001994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001998 <nl_func_sm_array_f32>:
 8001998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800199c:	b081      	sub	sp, #4
 800199e:	460c      	mov	r4, r1
 80019a0:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 80019a4:	9e08      	ldr	r6, [sp, #32]
 80019a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80019a8:	454c      	cmp	r4, r9
 80019aa:	4680      	mov	r8, r0
 80019ac:	461d      	mov	r5, r3
 80019ae:	d20a      	bcs.n	80019c6 <nl_func_sm_array_f32+0x2e>
 80019b0:	462a      	mov	r2, r5
 80019b2:	4621      	mov	r1, r4
 80019b4:	4640      	mov	r0, r8
 80019b6:	f7ff ff5d 	bl	8001874 <nl_func_sm_channel_f32>
 80019ba:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80019be:	454c      	cmp	r4, r9
 80019c0:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 80019c4:	d3f4      	bcc.n	80019b0 <nl_func_sm_array_f32+0x18>
 80019c6:	b001      	add	sp, #4
 80019c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080019cc <nl_func_tanh_array_f32>:
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	460d      	mov	r5, r1
 80019d0:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 80019d4:	42b5      	cmp	r5, r6
 80019d6:	4604      	mov	r4, r0
 80019d8:	f080 800a 	bcs.w	80019f0 <nl_func_tanh_array_f32+0x24>
 80019dc:	ed95 0a00 	vldr	s0, [r5]
 80019e0:	f002 fc9c 	bl	800431c <tanhf>
 80019e4:	ed84 0a00 	vstr	s0, [r4]
 80019e8:	1d24      	adds	r4, r4, #4
 80019ea:	1d2d      	adds	r5, r5, #4
 80019ec:	42b5      	cmp	r5, r6
 80019ee:	d3f5      	bcc.n	80019dc <nl_func_tanh_array_f32+0x10>
 80019f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080019f4 <nl_func_sigmoid_array_f32>:
 80019f4:	b570      	push	{r4, r5, r6, lr}
 80019f6:	460d      	mov	r5, r1
 80019f8:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 80019fc:	42b5      	cmp	r5, r6
 80019fe:	4604      	mov	r4, r0
 8001a00:	f080 8014 	bcs.w	8001a2c <nl_func_sigmoid_array_f32+0x38>
 8001a04:	ed95 0a00 	vldr	s0, [r5]
 8001a08:	eeb1 0a40 	vneg.f32	s0, s0
 8001a0c:	f002 fcd8 	bl	80043c0 <expf>
 8001a10:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001a14:	ee70 0a20 	vadd.f32	s1, s0, s1
 8001a18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001a1c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8001a20:	ed84 0a00 	vstr	s0, [r4]
 8001a24:	1d24      	adds	r4, r4, #4
 8001a26:	1d2d      	adds	r5, r5, #4
 8001a28:	42b5      	cmp	r5, r6
 8001a2a:	d3eb      	bcc.n	8001a04 <nl_func_sigmoid_array_f32+0x10>
 8001a2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a30 <nl_func_sign_array_f32>:
 8001a30:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001a34:	4291      	cmp	r1, r2
 8001a36:	d216      	bcs.n	8001a66 <nl_func_sign_array_f32+0x36>
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3c:	ed91 0a00 	vldr	s0, [r1]
 8001a40:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a48:	bfcc      	ite	gt
 8001a4a:	ed9f 0ac6 	vldrgt	s0, [pc, #792]	; 8001d64 <.text_16>
 8001a4e:	ee00 3a10 	vmovle	s0, r3
 8001a52:	1d09      	adds	r1, r1, #4
 8001a54:	4684      	mov	ip, r0
 8001a56:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001a5a:	4291      	cmp	r1, r2
 8001a5c:	f10c 0004 	add.w	r0, ip, #4
 8001a60:	ed8c 0a00 	vstr	s0, [ip]
 8001a64:	d3ea      	bcc.n	8001a3c <nl_func_sign_array_f32+0xc>
 8001a66:	4770      	bx	lr

08001a68 <nl_func_clip_array_f32>:
 8001a68:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001a6c:	4291      	cmp	r1, r2
 8001a6e:	d216      	bcs.n	8001a9e <nl_func_clip_array_f32+0x36>
 8001a70:	4603      	mov	r3, r0
 8001a72:	ed91 1a00 	vldr	s2, [r1]
 8001a76:	1d18      	adds	r0, r3, #4
 8001a78:	eeb4 0a41 	vcmp.f32	s0, s2
 8001a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a80:	bf58      	it	pl
 8001a82:	eeb0 1a40 	vmovpl.f32	s2, s0
 8001a86:	eeb4 1a60 	vcmp.f32	s2, s1
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	bf58      	it	pl
 8001a90:	eeb0 1a60 	vmovpl.f32	s2, s1
 8001a94:	1d09      	adds	r1, r1, #4
 8001a96:	4291      	cmp	r1, r2
 8001a98:	ed83 1a00 	vstr	s2, [r3]
 8001a9c:	d3e8      	bcc.n	8001a70 <nl_func_clip_array_f32+0x8>
 8001a9e:	4770      	bx	lr

08001aa0 <nl_func_relu_array_f32>:
 8001aa0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001aa4:	4291      	cmp	r1, r2
 8001aa6:	d20f      	bcs.n	8001ac8 <nl_func_relu_array_f32+0x28>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	ed91 0a00 	vldr	s0, [r1]
 8001aae:	1d18      	adds	r0, r3, #4
 8001ab0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab8:	bfd8      	it	le
 8001aba:	ed9f 0a37 	vldrle	s0, [pc, #220]	; 8001b98 <.text_11>
 8001abe:	1d09      	adds	r1, r1, #4
 8001ac0:	4291      	cmp	r1, r2
 8001ac2:	ed83 0a00 	vstr	s0, [r3]
 8001ac6:	d3ef      	bcc.n	8001aa8 <nl_func_relu_array_f32+0x8>
 8001ac8:	4770      	bx	lr
	...

08001acc <nl_func_relu6_array_f32>:
 8001acc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001ad0:	4291      	cmp	r1, r2
 8001ad2:	d21a      	bcs.n	8001b0a <nl_func_relu6_array_f32+0x3e>
 8001ad4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	edd1 0a00 	vldr	s1, [r1]
 8001ade:	1d18      	adds	r0, r3, #4
 8001ae0:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	dd08      	ble.n	8001afc <nl_func_relu6_array_f32+0x30>
 8001aea:	eef4 0a40 	vcmp.f32	s1, s0
 8001aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af2:	bf58      	it	pl
 8001af4:	eef0 0a40 	vmovpl.f32	s1, s0
 8001af8:	e002      	b.n	8001b00 <nl_func_relu6_array_f32+0x34>
 8001afa:	bf00      	nop
 8001afc:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001b98 <.text_11>
 8001b00:	1d09      	adds	r1, r1, #4
 8001b02:	4291      	cmp	r1, r2
 8001b04:	edc3 0a00 	vstr	s1, [r3]
 8001b08:	d3e6      	bcc.n	8001ad8 <nl_func_relu6_array_f32+0xc>
 8001b0a:	4770      	bx	lr

08001b0c <nl_func_selu_array_f32>:
 8001b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0e:	b081      	sub	sp, #4
 8001b10:	460d      	mov	r5, r1
 8001b12:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8001b16:	ed2d 8b04 	vpush	{d8-d9}
 8001b1a:	42b5      	cmp	r5, r6
 8001b1c:	4604      	mov	r4, r0
 8001b1e:	eef0 8a40 	vmov.f32	s17, s0
 8001b22:	eeb0 8a60 	vmov.f32	s16, s1
 8001b26:	d232      	bcs.n	8001b8e <nl_func_selu_array_f32+0x82>
 8001b28:	4627      	mov	r7, r4
 8001b2a:	ed95 9a00 	vldr	s18, [r5]
 8001b2e:	1d3c      	adds	r4, r7, #4
 8001b30:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b38:	bf4c      	ite	mi
 8001b3a:	eddf 9a17 	vldrmi	s19, [pc, #92]	; 8001b98 <.text_11>
 8001b3e:	eef0 9a49 	vmovpl.f32	s19, s18
 8001b42:	eeb0 0a49 	vmov.f32	s0, s18
 8001b46:	f002 fc3b 	bl	80043c0 <expf>
 8001b4a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001b4e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001b52:	ee20 0a28 	vmul.f32	s0, s0, s17
 8001b56:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5e:	dd05      	ble.n	8001b6c <nl_func_selu_array_f32+0x60>
 8001b60:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8001b98 <.text_11>
 8001b64:	ee79 9a81 	vadd.f32	s19, s19, s2
 8001b68:	e00a      	b.n	8001b80 <nl_func_selu_array_f32+0x74>
 8001b6a:	bf00      	nop
 8001b6c:	eeb0 0a49 	vmov.f32	s0, s18
 8001b70:	f002 fc26 	bl	80043c0 <expf>
 8001b74:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001b78:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001b7c:	ee40 9a28 	vmla.f32	s19, s0, s17
 8001b80:	1d2d      	adds	r5, r5, #4
 8001b82:	ee28 0a29 	vmul.f32	s0, s16, s19
 8001b86:	42b5      	cmp	r5, r6
 8001b88:	ed87 0a00 	vstr	s0, [r7]
 8001b8c:	d3cc      	bcc.n	8001b28 <nl_func_selu_array_f32+0x1c>
 8001b8e:	ecbd 8b04 	vpop	{d8-d9}
 8001b92:	b001      	add	sp, #4
 8001b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001b98 <.text_11>:
 8001b98:	00000000 	.word	0x00000000

08001b9c <nl_func_prelu_array_f32>:
 8001b9c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001ba0:	4299      	cmp	r1, r3
 8001ba2:	d220      	bcs.n	8001be6 <nl_func_prelu_array_f32+0x4a>
 8001ba4:	ed91 0a00 	vldr	s0, [r1]
 8001ba8:	ed92 1a00 	vldr	s2, [r2]
 8001bac:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	bf4c      	ite	mi
 8001bb6:	eddf 0aa5 	vldrmi	s1, [pc, #660]	; 8001e4c <.text_19>
 8001bba:	eef0 0a40 	vmovpl.f32	s1, s0
 8001bbe:	eeb1 0a40 	vneg.f32	s0, s0
 8001bc2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	bf48      	it	mi
 8001bcc:	ed9f 0a9f 	vldrmi	s0, [pc, #636]	; 8001e4c <.text_19>
 8001bd0:	1d09      	adds	r1, r1, #4
 8001bd2:	1d12      	adds	r2, r2, #4
 8001bd4:	4684      	mov	ip, r0
 8001bd6:	ee41 0a40 	vmls.f32	s1, s2, s0
 8001bda:	4299      	cmp	r1, r3
 8001bdc:	f10c 0004 	add.w	r0, ip, #4
 8001be0:	edcc 0a00 	vstr	s1, [ip]
 8001be4:	d3de      	bcc.n	8001ba4 <nl_func_prelu_array_f32+0x8>
 8001be6:	4770      	bx	lr

08001be8 <forward_relu>:
 8001be8:	6940      	ldr	r0, [r0, #20]
 8001bea:	6803      	ldr	r3, [r0, #0]
 8001bec:	6819      	ldr	r1, [r3, #0]
 8001bee:	f8d1 c000 	ldr.w	ip, [r1]
 8001bf2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8001bf6:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001bfa:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001bfe:	4342      	muls	r2, r0
 8001c00:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8001c04:	f8dc c000 	ldr.w	ip, [ip]
 8001c08:	434a      	muls	r2, r1
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	680b      	ldr	r3, [r1, #0]
 8001c0e:	4342      	muls	r2, r0
 8001c10:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001c14:	f8d3 c000 	ldr.w	ip, [r3]
 8001c18:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8001c1c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001c20:	4290      	cmp	r0, r2
 8001c22:	d20f      	bcs.n	8001c44 <forward_relu+0x5c>
 8001c24:	460b      	mov	r3, r1
 8001c26:	ed90 0a00 	vldr	s0, [r0]
 8001c2a:	1d19      	adds	r1, r3, #4
 8001c2c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c34:	bfd8      	it	le
 8001c36:	ed9f 0a85 	vldrle	s0, [pc, #532]	; 8001e4c <.text_19>
 8001c3a:	1d00      	adds	r0, r0, #4
 8001c3c:	4290      	cmp	r0, r2
 8001c3e:	ed83 0a00 	vstr	s0, [r3]
 8001c42:	d3ef      	bcc.n	8001c24 <forward_relu+0x3c>
 8001c44:	4770      	bx	lr
	...

08001c48 <forward_relu6>:
 8001c48:	6940      	ldr	r0, [r0, #20]
 8001c4a:	6803      	ldr	r3, [r0, #0]
 8001c4c:	6819      	ldr	r1, [r3, #0]
 8001c4e:	f8d1 c000 	ldr.w	ip, [r1]
 8001c52:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8001c56:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001c5a:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001c5e:	4342      	muls	r2, r0
 8001c60:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8001c64:	f8dc c000 	ldr.w	ip, [ip]
 8001c68:	434a      	muls	r2, r1
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	680b      	ldr	r3, [r1, #0]
 8001c6e:	4342      	muls	r2, r0
 8001c70:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001c74:	f8d3 c000 	ldr.w	ip, [r3]
 8001c78:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8001c7c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001c80:	4290      	cmp	r0, r2
 8001c82:	d21a      	bcs.n	8001cba <forward_relu6+0x72>
 8001c84:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	edd0 0a00 	vldr	s1, [r0]
 8001c8e:	1d19      	adds	r1, r3, #4
 8001c90:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c98:	dd08      	ble.n	8001cac <forward_relu6+0x64>
 8001c9a:	eef4 0a40 	vcmp.f32	s1, s0
 8001c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca2:	bf58      	it	pl
 8001ca4:	eef0 0a40 	vmovpl.f32	s1, s0
 8001ca8:	e002      	b.n	8001cb0 <forward_relu6+0x68>
 8001caa:	bf00      	nop
 8001cac:	eddf 0a67 	vldr	s1, [pc, #412]	; 8001e4c <.text_19>
 8001cb0:	1d00      	adds	r0, r0, #4
 8001cb2:	4290      	cmp	r0, r2
 8001cb4:	edc3 0a00 	vstr	s1, [r3]
 8001cb8:	d3e6      	bcc.n	8001c88 <forward_relu6+0x40>
 8001cba:	4770      	bx	lr

08001cbc <forward_selu>:
 8001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cbe:	b081      	sub	sp, #4
 8001cc0:	ed2d 8b04 	vpush	{d8-d9}
 8001cc4:	6941      	ldr	r1, [r0, #20]
 8001cc6:	ed90 8a07 	vldr	s16, [r0, #28]
 8001cca:	680d      	ldr	r5, [r1, #0]
 8001ccc:	edd0 8a06 	vldr	s17, [r0, #24]
 8001cd0:	682a      	ldr	r2, [r5, #0]
 8001cd2:	6814      	ldr	r4, [r2, #0]
 8001cd4:	6820      	ldr	r0, [r4, #0]
 8001cd6:	6863      	ldr	r3, [r4, #4]
 8001cd8:	68a1      	ldr	r1, [r4, #8]
 8001cda:	68e2      	ldr	r2, [r4, #12]
 8001cdc:	434b      	muls	r3, r1
 8001cde:	6921      	ldr	r1, [r4, #16]
 8001ce0:	6884      	ldr	r4, [r0, #8]
 8001ce2:	6868      	ldr	r0, [r5, #4]
 8001ce4:	4353      	muls	r3, r2
 8001ce6:	434b      	muls	r3, r1
 8001ce8:	6801      	ldr	r1, [r0, #0]
 8001cea:	680a      	ldr	r2, [r1, #0]
 8001cec:	6895      	ldr	r5, [r2, #8]
 8001cee:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8001cf2:	42b4      	cmp	r4, r6
 8001cf4:	d231      	bcs.n	8001d5a <forward_selu+0x9e>
 8001cf6:	462f      	mov	r7, r5
 8001cf8:	ed94 9a00 	vldr	s18, [r4]
 8001cfc:	1d3d      	adds	r5, r7, #4
 8001cfe:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d06:	bf4c      	ite	mi
 8001d08:	eddf 9a50 	vldrmi	s19, [pc, #320]	; 8001e4c <.text_19>
 8001d0c:	eef0 9a49 	vmovpl.f32	s19, s18
 8001d10:	eeb0 0a49 	vmov.f32	s0, s18
 8001d14:	f002 fb54 	bl	80043c0 <expf>
 8001d18:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001d1c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001d20:	ee20 0a28 	vmul.f32	s0, s0, s17
 8001d24:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2c:	dd04      	ble.n	8001d38 <forward_selu+0x7c>
 8001d2e:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8001e4c <.text_19>
 8001d32:	ee79 9a81 	vadd.f32	s19, s19, s2
 8001d36:	e009      	b.n	8001d4c <forward_selu+0x90>
 8001d38:	eeb0 0a49 	vmov.f32	s0, s18
 8001d3c:	f002 fb40 	bl	80043c0 <expf>
 8001d40:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001d44:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001d48:	ee40 9a28 	vmla.f32	s19, s0, s17
 8001d4c:	1d24      	adds	r4, r4, #4
 8001d4e:	ee28 0a29 	vmul.f32	s0, s16, s19
 8001d52:	42b4      	cmp	r4, r6
 8001d54:	ed87 0a00 	vstr	s0, [r7]
 8001d58:	d3cd      	bcc.n	8001cf6 <forward_selu+0x3a>
 8001d5a:	ecbd 8b04 	vpop	{d8-d9}
 8001d5e:	b001      	add	sp, #4
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d64 <.text_16>:
 8001d64:	00000001 	.word	0x00000001

08001d68 <forward_prelu>:
 8001d68:	b430      	push	{r4, r5}
 8001d6a:	6941      	ldr	r1, [r0, #20]
 8001d6c:	680c      	ldr	r4, [r1, #0]
 8001d6e:	6822      	ldr	r2, [r4, #0]
 8001d70:	6815      	ldr	r5, [r2, #0]
 8001d72:	686b      	ldr	r3, [r5, #4]
 8001d74:	68a9      	ldr	r1, [r5, #8]
 8001d76:	68ea      	ldr	r2, [r5, #12]
 8001d78:	6980      	ldr	r0, [r0, #24]
 8001d7a:	434b      	muls	r3, r1
 8001d7c:	6929      	ldr	r1, [r5, #16]
 8001d7e:	682d      	ldr	r5, [r5, #0]
 8001d80:	4353      	muls	r3, r2
 8001d82:	6862      	ldr	r2, [r4, #4]
 8001d84:	6814      	ldr	r4, [r2, #0]
 8001d86:	434b      	muls	r3, r1
 8001d88:	68a9      	ldr	r1, [r5, #8]
 8001d8a:	6825      	ldr	r5, [r4, #0]
 8001d8c:	6804      	ldr	r4, [r0, #0]
 8001d8e:	68aa      	ldr	r2, [r5, #8]
 8001d90:	68a0      	ldr	r0, [r4, #8]
 8001d92:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001d96:	4299      	cmp	r1, r3
 8001d98:	d21f      	bcs.n	8001dda <forward_prelu+0x72>
 8001d9a:	4614      	mov	r4, r2
 8001d9c:	ed91 0a00 	vldr	s0, [r1]
 8001da0:	1d22      	adds	r2, r4, #4
 8001da2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001daa:	bf4c      	ite	mi
 8001dac:	eddf 0a27 	vldrmi	s1, [pc, #156]	; 8001e4c <.text_19>
 8001db0:	eef0 0a40 	vmovpl.f32	s1, s0
 8001db4:	eeb1 0a40 	vneg.f32	s0, s0
 8001db8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc0:	bf48      	it	mi
 8001dc2:	ed9f 0a22 	vldrmi	s0, [pc, #136]	; 8001e4c <.text_19>
 8001dc6:	ed90 1a00 	vldr	s2, [r0]
 8001dca:	1d09      	adds	r1, r1, #4
 8001dcc:	1d00      	adds	r0, r0, #4
 8001dce:	ee41 0a40 	vmls.f32	s1, s2, s0
 8001dd2:	4299      	cmp	r1, r3
 8001dd4:	edc4 0a00 	vstr	s1, [r4]
 8001dd8:	d3df      	bcc.n	8001d9a <forward_prelu+0x32>
 8001dda:	bc30      	pop	{r4, r5}
 8001ddc:	4770      	bx	lr
	...

08001de0 <forward_sign>:
 8001de0:	6940      	ldr	r0, [r0, #20]
 8001de2:	6803      	ldr	r3, [r0, #0]
 8001de4:	6819      	ldr	r1, [r3, #0]
 8001de6:	f8d1 c000 	ldr.w	ip, [r1]
 8001dea:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8001dee:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001df2:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001df6:	4342      	muls	r2, r0
 8001df8:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8001dfc:	f8dc c000 	ldr.w	ip, [ip]
 8001e00:	434a      	muls	r2, r1
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	680b      	ldr	r3, [r1, #0]
 8001e06:	4342      	muls	r2, r0
 8001e08:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001e0c:	f8d3 c000 	ldr.w	ip, [r3]
 8001e10:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8001e14:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001e18:	4290      	cmp	r0, r2
 8001e1a:	d216      	bcs.n	8001e4a <forward_sign+0x6a>
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e20:	ed90 0a00 	vldr	s0, [r0]
 8001e24:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	bfcc      	ite	gt
 8001e2e:	ed9f 0a08 	vldrgt	s0, [pc, #32]	; 8001e50 <.text_20>
 8001e32:	ee00 3a10 	vmovle	s0, r3
 8001e36:	1d00      	adds	r0, r0, #4
 8001e38:	468c      	mov	ip, r1
 8001e3a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001e3e:	4290      	cmp	r0, r2
 8001e40:	f10c 0104 	add.w	r1, ip, #4
 8001e44:	ed8c 0a00 	vstr	s0, [ip]
 8001e48:	d3ea      	bcc.n	8001e20 <forward_sign+0x40>
 8001e4a:	4770      	bx	lr

08001e4c <.text_19>:
 8001e4c:	00000000 	.word	0x00000000

08001e50 <.text_20>:
 8001e50:	00000001 	.word	0x00000001

08001e54 <forward_clip>:
 8001e54:	b430      	push	{r4, r5}
 8001e56:	6941      	ldr	r1, [r0, #20]
 8001e58:	ed90 0a07 	vldr	s0, [r0, #28]
 8001e5c:	680c      	ldr	r4, [r1, #0]
 8001e5e:	edd0 0a06 	vldr	s1, [r0, #24]
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	6815      	ldr	r5, [r2, #0]
 8001e66:	686b      	ldr	r3, [r5, #4]
 8001e68:	68a9      	ldr	r1, [r5, #8]
 8001e6a:	68ea      	ldr	r2, [r5, #12]
 8001e6c:	6828      	ldr	r0, [r5, #0]
 8001e6e:	6880      	ldr	r0, [r0, #8]
 8001e70:	434b      	muls	r3, r1
 8001e72:	6929      	ldr	r1, [r5, #16]
 8001e74:	4353      	muls	r3, r2
 8001e76:	434b      	muls	r3, r1
 8001e78:	6861      	ldr	r1, [r4, #4]
 8001e7a:	680a      	ldr	r2, [r1, #0]
 8001e7c:	6814      	ldr	r4, [r2, #0]
 8001e7e:	68a1      	ldr	r1, [r4, #8]
 8001e80:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8001e84:	4290      	cmp	r0, r2
 8001e86:	d216      	bcs.n	8001eb6 <forward_clip+0x62>
 8001e88:	460b      	mov	r3, r1
 8001e8a:	ed90 1a00 	vldr	s2, [r0]
 8001e8e:	1d19      	adds	r1, r3, #4
 8001e90:	eef4 0a41 	vcmp.f32	s1, s2
 8001e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e98:	bf58      	it	pl
 8001e9a:	eeb0 1a60 	vmovpl.f32	s2, s1
 8001e9e:	eeb4 1a40 	vcmp.f32	s2, s0
 8001ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea6:	bf58      	it	pl
 8001ea8:	eeb0 1a40 	vmovpl.f32	s2, s0
 8001eac:	1d00      	adds	r0, r0, #4
 8001eae:	4290      	cmp	r0, r2
 8001eb0:	ed83 1a00 	vstr	s2, [r3]
 8001eb4:	d3e8      	bcc.n	8001e88 <forward_clip+0x34>
 8001eb6:	bc30      	pop	{r4, r5}
 8001eb8:	4770      	bx	lr
	...

08001ebc <forward_sigmoid>:
 8001ebc:	b570      	push	{r4, r5, r6, lr}
 8001ebe:	6940      	ldr	r0, [r0, #20]
 8001ec0:	6803      	ldr	r3, [r0, #0]
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	680c      	ldr	r4, [r1, #0]
 8001ec6:	6862      	ldr	r2, [r4, #4]
 8001ec8:	68a0      	ldr	r0, [r4, #8]
 8001eca:	68e1      	ldr	r1, [r4, #12]
 8001ecc:	4342      	muls	r2, r0
 8001ece:	6920      	ldr	r0, [r4, #16]
 8001ed0:	6824      	ldr	r4, [r4, #0]
 8001ed2:	68a4      	ldr	r4, [r4, #8]
 8001ed4:	434a      	muls	r2, r1
 8001ed6:	4342      	muls	r2, r0
 8001ed8:	6858      	ldr	r0, [r3, #4]
 8001eda:	6801      	ldr	r1, [r0, #0]
 8001edc:	680b      	ldr	r3, [r1, #0]
 8001ede:	689d      	ldr	r5, [r3, #8]
 8001ee0:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8001ee4:	42b4      	cmp	r4, r6
 8001ee6:	d213      	bcs.n	8001f10 <forward_sigmoid+0x54>
 8001ee8:	ed94 0a00 	vldr	s0, [r4]
 8001eec:	eeb1 0a40 	vneg.f32	s0, s0
 8001ef0:	f002 fa66 	bl	80043c0 <expf>
 8001ef4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001ef8:	ee70 0a20 	vadd.f32	s1, s0, s1
 8001efc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001f00:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8001f04:	ed85 0a00 	vstr	s0, [r5]
 8001f08:	1d2d      	adds	r5, r5, #4
 8001f0a:	1d24      	adds	r4, r4, #4
 8001f0c:	42b4      	cmp	r4, r6
 8001f0e:	d3eb      	bcc.n	8001ee8 <forward_sigmoid+0x2c>
 8001f10:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f14 <forward_tanh>:
 8001f14:	b570      	push	{r4, r5, r6, lr}
 8001f16:	6940      	ldr	r0, [r0, #20]
 8001f18:	6803      	ldr	r3, [r0, #0]
 8001f1a:	6819      	ldr	r1, [r3, #0]
 8001f1c:	680c      	ldr	r4, [r1, #0]
 8001f1e:	6862      	ldr	r2, [r4, #4]
 8001f20:	68a0      	ldr	r0, [r4, #8]
 8001f22:	68e1      	ldr	r1, [r4, #12]
 8001f24:	4342      	muls	r2, r0
 8001f26:	6920      	ldr	r0, [r4, #16]
 8001f28:	6824      	ldr	r4, [r4, #0]
 8001f2a:	68a4      	ldr	r4, [r4, #8]
 8001f2c:	434a      	muls	r2, r1
 8001f2e:	4342      	muls	r2, r0
 8001f30:	6858      	ldr	r0, [r3, #4]
 8001f32:	6801      	ldr	r1, [r0, #0]
 8001f34:	680b      	ldr	r3, [r1, #0]
 8001f36:	689d      	ldr	r5, [r3, #8]
 8001f38:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8001f3c:	42b4      	cmp	r4, r6
 8001f3e:	d209      	bcs.n	8001f54 <forward_tanh+0x40>
 8001f40:	ed94 0a00 	vldr	s0, [r4]
 8001f44:	f002 f9ea 	bl	800431c <tanhf>
 8001f48:	ed85 0a00 	vstr	s0, [r5]
 8001f4c:	1d2d      	adds	r5, r5, #4
 8001f4e:	1d24      	adds	r4, r4, #4
 8001f50:	42b4      	cmp	r4, r6
 8001f52:	d3f5      	bcc.n	8001f40 <forward_tanh+0x2c>
 8001f54:	bd70      	pop	{r4, r5, r6, pc}

08001f56 <forward_sm>:
 8001f56:	b530      	push	{r4, r5, lr}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	6940      	ldr	r0, [r0, #20]
 8001f5c:	6804      	ldr	r4, [r0, #0]
 8001f5e:	6821      	ldr	r1, [r4, #0]
 8001f60:	680d      	ldr	r5, [r1, #0]
 8001f62:	68aa      	ldr	r2, [r5, #8]
 8001f64:	9201      	str	r2, [sp, #4]
 8001f66:	9200      	str	r2, [sp, #0]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	6868      	ldr	r0, [r5, #4]
 8001f6c:	68e9      	ldr	r1, [r5, #12]
 8001f6e:	4342      	muls	r2, r0
 8001f70:	6928      	ldr	r0, [r5, #16]
 8001f72:	682d      	ldr	r5, [r5, #0]
 8001f74:	434a      	muls	r2, r1
 8001f76:	4342      	muls	r2, r0
 8001f78:	6860      	ldr	r0, [r4, #4]
 8001f7a:	6804      	ldr	r4, [r0, #0]
 8001f7c:	68a9      	ldr	r1, [r5, #8]
 8001f7e:	6825      	ldr	r5, [r4, #0]
 8001f80:	68a8      	ldr	r0, [r5, #8]
 8001f82:	f7ff fd09 	bl	8001998 <nl_func_sm_array_f32>
 8001f86:	b003      	add	sp, #12
 8001f88:	bd30      	pop	{r4, r5, pc}
	...

08001f8c <ai_math_dot_array>:
 8001f8c:	b530      	push	{r4, r5, lr}
 8001f8e:	4604      	mov	r4, r0
 8001f90:	4608      	mov	r0, r1
 8001f92:	b081      	sub	sp, #4
 8001f94:	4611      	mov	r1, r2
 8001f96:	461a      	mov	r2, r3
 8001f98:	2500      	movs	r5, #0
 8001f9a:	9500      	str	r5, [sp, #0]
 8001f9c:	466b      	mov	r3, sp
 8001f9e:	f000 fe97 	bl	8002cd0 <arm_dot_prod_f32>
 8001fa2:	ed94 0a00 	vldr	s0, [r4]
 8001fa6:	eddd 0a00 	vldr	s1, [sp]
 8001faa:	ee70 0a20 	vadd.f32	s1, s0, s1
 8001fae:	edc4 0a00 	vstr	s1, [r4]
 8001fb2:	b001      	add	sp, #4
 8001fb4:	bd30      	pop	{r4, r5, pc}
	...

08001fb8 <ai_math_sqrt>:
 8001fb8:	eef0 0a40 	vmov.f32	s1, s0
 8001fbc:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc4:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002068 <.text_12>
 8001fc8:	db01      	blt.n	8001fce <ai_math_sqrt+0x16>
 8001fca:	eeb1 0ae0 	vsqrt.f32	s0, s1
 8001fce:	4770      	bx	lr

08001fd0 <ai_math_exp>:
 8001fd0:	f002 b9f6 	b.w	80043c0 <expf>

08001fd4 <ai_math_pow>:
 8001fd4:	f002 ba6e 	b.w	80044b4 <powf>

08001fd8 <ai_math_tanh>:
 8001fd8:	f002 b9a0 	b.w	800431c <tanhf>

08001fdc <ai_math_relu>:
 8001fdc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe4:	bfd8      	it	le
 8001fe6:	ed9f 0a20 	vldrle	s0, [pc, #128]	; 8002068 <.text_12>
 8001fea:	4770      	bx	lr

08001fec <ai_math_prelu>:
 8001fec:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff4:	bfd8      	it	le
 8001ff6:	ee20 0a20 	vmulle.f32	s0, s0, s1
 8001ffa:	4770      	bx	lr

08001ffc <ai_math_sigmoid>:
 8001ffc:	b500      	push	{lr}
 8001ffe:	b081      	sub	sp, #4
 8002000:	eeb1 0a40 	vneg.f32	s0, s0
 8002004:	f002 f9dc 	bl	80043c0 <expf>
 8002008:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800200c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002010:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002014:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8002018:	b001      	add	sp, #4
 800201a:	bd00      	pop	{pc}

0800201c <ai_math_hard_sigmoid>:
 800201c:	eef0 0a40 	vmov.f32	s1, s0
 8002020:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800206c <.text_13>
 8002024:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002028:	ee00 0a81 	vmla.f32	s0, s1, s2
 800202c:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002070 <.text_14>
 8002030:	eeb4 0a60 	vcmp.f32	s0, s1
 8002034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002038:	da07      	bge.n	800204a <ai_math_hard_sigmoid+0x2e>
 800203a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002042:	d504      	bpl.n	800204e <ai_math_hard_sigmoid+0x32>
 8002044:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002068 <.text_12>
 8002048:	4770      	bx	lr
 800204a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800204e:	4770      	bx	lr

08002050 <ai_math_sign>:
 8002050:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002058:	bfcc      	ite	gt
 800205a:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8002074 <.text_15>
 800205e:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8002078 <.text_16>
 8002062:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002066:	4770      	bx	lr

08002068 <.text_12>:
 8002068:	00000000 	.word	0x00000000

0800206c <.text_13>:
 800206c:	3e4ccccd 	.word	0x3e4ccccd

08002070 <.text_14>:
 8002070:	3f800001 	.word	0x3f800001

08002074 <.text_15>:
 8002074:	00000001 	.word	0x00000001

08002078 <.text_16>:
 8002078:	ffffffff 	.word	0xffffffff

0800207c <__aeabi_drsub>:
 800207c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8002080:	e002      	b.n	8002088 <__adddf3>
 8002082:	bf00      	nop

08002084 <__aeabi_dsub>:
 8002084:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08002088 <__adddf3>:
 8002088:	b530      	push	{r4, r5, lr}
 800208a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800208e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8002092:	ea94 0f05 	teq	r4, r5
 8002096:	bf08      	it	eq
 8002098:	ea90 0f02 	teqeq	r0, r2
 800209c:	bf1f      	itttt	ne
 800209e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80020a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80020a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80020aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80020ae:	f000 80e2 	beq.w	8002276 <__adddf3+0x1ee>
 80020b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80020b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80020ba:	bfb8      	it	lt
 80020bc:	426d      	neglt	r5, r5
 80020be:	dd0c      	ble.n	80020da <__adddf3+0x52>
 80020c0:	442c      	add	r4, r5
 80020c2:	ea80 0202 	eor.w	r2, r0, r2
 80020c6:	ea81 0303 	eor.w	r3, r1, r3
 80020ca:	ea82 0000 	eor.w	r0, r2, r0
 80020ce:	ea83 0101 	eor.w	r1, r3, r1
 80020d2:	ea80 0202 	eor.w	r2, r0, r2
 80020d6:	ea81 0303 	eor.w	r3, r1, r3
 80020da:	2d36      	cmp	r5, #54	; 0x36
 80020dc:	bf88      	it	hi
 80020de:	bd30      	pophi	{r4, r5, pc}
 80020e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80020e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80020e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80020ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80020f0:	d002      	beq.n	80020f8 <__adddf3+0x70>
 80020f2:	4240      	negs	r0, r0
 80020f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80020f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80020fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002100:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002104:	d002      	beq.n	800210c <__adddf3+0x84>
 8002106:	4252      	negs	r2, r2
 8002108:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800210c:	ea94 0f05 	teq	r4, r5
 8002110:	f000 80a7 	beq.w	8002262 <__adddf3+0x1da>
 8002114:	f1a4 0401 	sub.w	r4, r4, #1
 8002118:	f1d5 0e20 	rsbs	lr, r5, #32
 800211c:	db0d      	blt.n	800213a <__adddf3+0xb2>
 800211e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002122:	fa22 f205 	lsr.w	r2, r2, r5
 8002126:	1880      	adds	r0, r0, r2
 8002128:	f141 0100 	adc.w	r1, r1, #0
 800212c:	fa03 f20e 	lsl.w	r2, r3, lr
 8002130:	1880      	adds	r0, r0, r2
 8002132:	fa43 f305 	asr.w	r3, r3, r5
 8002136:	4159      	adcs	r1, r3
 8002138:	e00e      	b.n	8002158 <__adddf3+0xd0>
 800213a:	f1a5 0520 	sub.w	r5, r5, #32
 800213e:	f10e 0e20 	add.w	lr, lr, #32
 8002142:	2a01      	cmp	r2, #1
 8002144:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002148:	bf28      	it	cs
 800214a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800214e:	fa43 f305 	asr.w	r3, r3, r5
 8002152:	18c0      	adds	r0, r0, r3
 8002154:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002158:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800215c:	d507      	bpl.n	800216e <__adddf3+0xe6>
 800215e:	f04f 0e00 	mov.w	lr, #0
 8002162:	f1dc 0c00 	rsbs	ip, ip, #0
 8002166:	eb7e 0000 	sbcs.w	r0, lr, r0
 800216a:	eb6e 0101 	sbc.w	r1, lr, r1
 800216e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002172:	d31b      	bcc.n	80021ac <__adddf3+0x124>
 8002174:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002178:	d30c      	bcc.n	8002194 <__adddf3+0x10c>
 800217a:	0849      	lsrs	r1, r1, #1
 800217c:	ea5f 0030 	movs.w	r0, r0, rrx
 8002180:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002184:	f104 0401 	add.w	r4, r4, #1
 8002188:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800218c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8002190:	f080 809a 	bcs.w	80022c8 <__adddf3+0x240>
 8002194:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002198:	bf08      	it	eq
 800219a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800219e:	f150 0000 	adcs.w	r0, r0, #0
 80021a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80021a6:	ea41 0105 	orr.w	r1, r1, r5
 80021aa:	bd30      	pop	{r4, r5, pc}
 80021ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80021b0:	4140      	adcs	r0, r0
 80021b2:	eb41 0101 	adc.w	r1, r1, r1
 80021b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80021ba:	f1a4 0401 	sub.w	r4, r4, #1
 80021be:	d1e9      	bne.n	8002194 <__adddf3+0x10c>
 80021c0:	f091 0f00 	teq	r1, #0
 80021c4:	bf04      	itt	eq
 80021c6:	4601      	moveq	r1, r0
 80021c8:	2000      	moveq	r0, #0
 80021ca:	fab1 f381 	clz	r3, r1
 80021ce:	bf08      	it	eq
 80021d0:	3320      	addeq	r3, #32
 80021d2:	f1a3 030b 	sub.w	r3, r3, #11
 80021d6:	f1b3 0220 	subs.w	r2, r3, #32
 80021da:	da0c      	bge.n	80021f6 <__adddf3+0x16e>
 80021dc:	320c      	adds	r2, #12
 80021de:	dd08      	ble.n	80021f2 <__adddf3+0x16a>
 80021e0:	f102 0c14 	add.w	ip, r2, #20
 80021e4:	f1c2 020c 	rsb	r2, r2, #12
 80021e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80021ec:	fa21 f102 	lsr.w	r1, r1, r2
 80021f0:	e00c      	b.n	800220c <__adddf3+0x184>
 80021f2:	f102 0214 	add.w	r2, r2, #20
 80021f6:	bfd8      	it	le
 80021f8:	f1c2 0c20 	rsble	ip, r2, #32
 80021fc:	fa01 f102 	lsl.w	r1, r1, r2
 8002200:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002204:	bfdc      	itt	le
 8002206:	ea41 010c 	orrle.w	r1, r1, ip
 800220a:	4090      	lslle	r0, r2
 800220c:	1ae4      	subs	r4, r4, r3
 800220e:	bfa2      	ittt	ge
 8002210:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002214:	4329      	orrge	r1, r5
 8002216:	bd30      	popge	{r4, r5, pc}
 8002218:	ea6f 0404 	mvn.w	r4, r4
 800221c:	3c1f      	subs	r4, #31
 800221e:	da1c      	bge.n	800225a <__adddf3+0x1d2>
 8002220:	340c      	adds	r4, #12
 8002222:	dc0e      	bgt.n	8002242 <__adddf3+0x1ba>
 8002224:	f104 0414 	add.w	r4, r4, #20
 8002228:	f1c4 0220 	rsb	r2, r4, #32
 800222c:	fa20 f004 	lsr.w	r0, r0, r4
 8002230:	fa01 f302 	lsl.w	r3, r1, r2
 8002234:	ea40 0003 	orr.w	r0, r0, r3
 8002238:	fa21 f304 	lsr.w	r3, r1, r4
 800223c:	ea45 0103 	orr.w	r1, r5, r3
 8002240:	bd30      	pop	{r4, r5, pc}
 8002242:	f1c4 040c 	rsb	r4, r4, #12
 8002246:	f1c4 0220 	rsb	r2, r4, #32
 800224a:	fa20 f002 	lsr.w	r0, r0, r2
 800224e:	fa01 f304 	lsl.w	r3, r1, r4
 8002252:	ea40 0003 	orr.w	r0, r0, r3
 8002256:	4629      	mov	r1, r5
 8002258:	bd30      	pop	{r4, r5, pc}
 800225a:	fa21 f004 	lsr.w	r0, r1, r4
 800225e:	4629      	mov	r1, r5
 8002260:	bd30      	pop	{r4, r5, pc}
 8002262:	f094 0f00 	teq	r4, #0
 8002266:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800226a:	bf06      	itte	eq
 800226c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8002270:	3401      	addeq	r4, #1
 8002272:	3d01      	subne	r5, #1
 8002274:	e74e      	b.n	8002114 <__adddf3+0x8c>
 8002276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800227a:	bf18      	it	ne
 800227c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002280:	d029      	beq.n	80022d6 <__adddf3+0x24e>
 8002282:	ea94 0f05 	teq	r4, r5
 8002286:	bf08      	it	eq
 8002288:	ea90 0f02 	teqeq	r0, r2
 800228c:	d005      	beq.n	800229a <__adddf3+0x212>
 800228e:	ea54 0c00 	orrs.w	ip, r4, r0
 8002292:	bf04      	itt	eq
 8002294:	4619      	moveq	r1, r3
 8002296:	4610      	moveq	r0, r2
 8002298:	bd30      	pop	{r4, r5, pc}
 800229a:	ea91 0f03 	teq	r1, r3
 800229e:	bf1e      	ittt	ne
 80022a0:	2100      	movne	r1, #0
 80022a2:	2000      	movne	r0, #0
 80022a4:	bd30      	popne	{r4, r5, pc}
 80022a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80022aa:	d105      	bne.n	80022b8 <__adddf3+0x230>
 80022ac:	0040      	lsls	r0, r0, #1
 80022ae:	4149      	adcs	r1, r1
 80022b0:	bf28      	it	cs
 80022b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80022b6:	bd30      	pop	{r4, r5, pc}
 80022b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80022bc:	bf3c      	itt	cc
 80022be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80022c2:	bd30      	popcc	{r4, r5, pc}
 80022c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80022c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80022cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80022d0:	f04f 0000 	mov.w	r0, #0
 80022d4:	bd30      	pop	{r4, r5, pc}
 80022d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80022da:	bf1a      	itte	ne
 80022dc:	4619      	movne	r1, r3
 80022de:	4610      	movne	r0, r2
 80022e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80022e4:	bf1c      	itt	ne
 80022e6:	460b      	movne	r3, r1
 80022e8:	4602      	movne	r2, r0
 80022ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80022ee:	bf06      	itte	eq
 80022f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80022f4:	ea91 0f03 	teqeq	r1, r3
 80022f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80022fc:	bd30      	pop	{r4, r5, pc}
 80022fe:	bf00      	nop

08002300 <__aeabi_ui2d>:
 8002300:	f090 0f00 	teq	r0, #0
 8002304:	bf04      	itt	eq
 8002306:	2100      	moveq	r1, #0
 8002308:	4770      	bxeq	lr
 800230a:	b530      	push	{r4, r5, lr}
 800230c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002310:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002314:	f04f 0500 	mov.w	r5, #0
 8002318:	f04f 0100 	mov.w	r1, #0
 800231c:	e750      	b.n	80021c0 <__adddf3+0x138>
 800231e:	bf00      	nop

08002320 <__aeabi_i2d>:
 8002320:	f090 0f00 	teq	r0, #0
 8002324:	bf04      	itt	eq
 8002326:	2100      	moveq	r1, #0
 8002328:	4770      	bxeq	lr
 800232a:	b530      	push	{r4, r5, lr}
 800232c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002330:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002334:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002338:	bf48      	it	mi
 800233a:	4240      	negmi	r0, r0
 800233c:	f04f 0100 	mov.w	r1, #0
 8002340:	e73e      	b.n	80021c0 <__adddf3+0x138>
 8002342:	bf00      	nop

08002344 <__aeabi_f2d>:
 8002344:	0042      	lsls	r2, r0, #1
 8002346:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800234a:	ea4f 0131 	mov.w	r1, r1, rrx
 800234e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8002352:	bf1f      	itttt	ne
 8002354:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002358:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800235c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002360:	4770      	bxne	lr
 8002362:	f092 0f00 	teq	r2, #0
 8002366:	bf14      	ite	ne
 8002368:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800236c:	4770      	bxeq	lr
 800236e:	b530      	push	{r4, r5, lr}
 8002370:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002374:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002378:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800237c:	e720      	b.n	80021c0 <__adddf3+0x138>
 800237e:	bf00      	nop

08002380 <__aeabi_ul2d>:
 8002380:	ea50 0201 	orrs.w	r2, r0, r1
 8002384:	bf08      	it	eq
 8002386:	4770      	bxeq	lr
 8002388:	b530      	push	{r4, r5, lr}
 800238a:	f04f 0500 	mov.w	r5, #0
 800238e:	e00a      	b.n	80023a6 <__aeabi_l2d+0x16>

08002390 <__aeabi_l2d>:
 8002390:	ea50 0201 	orrs.w	r2, r0, r1
 8002394:	bf08      	it	eq
 8002396:	4770      	bxeq	lr
 8002398:	b530      	push	{r4, r5, lr}
 800239a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800239e:	d502      	bpl.n	80023a6 <__aeabi_l2d+0x16>
 80023a0:	4240      	negs	r0, r0
 80023a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80023a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80023aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80023ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80023b2:	f43f aedc 	beq.w	800216e <__adddf3+0xe6>
 80023b6:	f04f 0203 	mov.w	r2, #3
 80023ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80023be:	bf18      	it	ne
 80023c0:	3203      	addne	r2, #3
 80023c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80023c6:	bf18      	it	ne
 80023c8:	3203      	addne	r2, #3
 80023ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80023ce:	f1c2 0320 	rsb	r3, r2, #32
 80023d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80023d6:	fa20 f002 	lsr.w	r0, r0, r2
 80023da:	fa01 fe03 	lsl.w	lr, r1, r3
 80023de:	ea40 000e 	orr.w	r0, r0, lr
 80023e2:	fa21 f102 	lsr.w	r1, r1, r2
 80023e6:	4414      	add	r4, r2
 80023e8:	e6c1      	b.n	800216e <__adddf3+0xe6>
 80023ea:	bf00      	nop

080023ec <__aeabi_dmul>:
 80023ec:	b570      	push	{r4, r5, r6, lr}
 80023ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80023f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80023f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80023fa:	bf1d      	ittte	ne
 80023fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002400:	ea94 0f0c 	teqne	r4, ip
 8002404:	ea95 0f0c 	teqne	r5, ip
 8002408:	f000 f8de 	bleq	80025c8 <__aeabi_dmul+0x1dc>
 800240c:	442c      	add	r4, r5
 800240e:	ea81 0603 	eor.w	r6, r1, r3
 8002412:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002416:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800241a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800241e:	bf18      	it	ne
 8002420:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002424:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800242c:	d038      	beq.n	80024a0 <__aeabi_dmul+0xb4>
 800242e:	fba0 ce02 	umull	ip, lr, r0, r2
 8002432:	f04f 0500 	mov.w	r5, #0
 8002436:	fbe1 e502 	umlal	lr, r5, r1, r2
 800243a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800243e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002442:	f04f 0600 	mov.w	r6, #0
 8002446:	fbe1 5603 	umlal	r5, r6, r1, r3
 800244a:	f09c 0f00 	teq	ip, #0
 800244e:	bf18      	it	ne
 8002450:	f04e 0e01 	orrne.w	lr, lr, #1
 8002454:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8002458:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800245c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8002460:	d204      	bcs.n	800246c <__aeabi_dmul+0x80>
 8002462:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002466:	416d      	adcs	r5, r5
 8002468:	eb46 0606 	adc.w	r6, r6, r6
 800246c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002470:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002474:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002478:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800247c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002480:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002484:	bf88      	it	hi
 8002486:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800248a:	d81e      	bhi.n	80024ca <__aeabi_dmul+0xde>
 800248c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8002490:	bf08      	it	eq
 8002492:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002496:	f150 0000 	adcs.w	r0, r0, #0
 800249a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800249e:	bd70      	pop	{r4, r5, r6, pc}
 80024a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80024a4:	ea46 0101 	orr.w	r1, r6, r1
 80024a8:	ea40 0002 	orr.w	r0, r0, r2
 80024ac:	ea81 0103 	eor.w	r1, r1, r3
 80024b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80024b4:	bfc2      	ittt	gt
 80024b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80024ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80024be:	bd70      	popgt	{r4, r5, r6, pc}
 80024c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80024c4:	f04f 0e00 	mov.w	lr, #0
 80024c8:	3c01      	subs	r4, #1
 80024ca:	f300 80ab 	bgt.w	8002624 <__aeabi_dmul+0x238>
 80024ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80024d2:	bfde      	ittt	le
 80024d4:	2000      	movle	r0, #0
 80024d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80024da:	bd70      	pople	{r4, r5, r6, pc}
 80024dc:	f1c4 0400 	rsb	r4, r4, #0
 80024e0:	3c20      	subs	r4, #32
 80024e2:	da35      	bge.n	8002550 <__aeabi_dmul+0x164>
 80024e4:	340c      	adds	r4, #12
 80024e6:	dc1b      	bgt.n	8002520 <__aeabi_dmul+0x134>
 80024e8:	f104 0414 	add.w	r4, r4, #20
 80024ec:	f1c4 0520 	rsb	r5, r4, #32
 80024f0:	fa00 f305 	lsl.w	r3, r0, r5
 80024f4:	fa20 f004 	lsr.w	r0, r0, r4
 80024f8:	fa01 f205 	lsl.w	r2, r1, r5
 80024fc:	ea40 0002 	orr.w	r0, r0, r2
 8002500:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002508:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800250c:	fa21 f604 	lsr.w	r6, r1, r4
 8002510:	eb42 0106 	adc.w	r1, r2, r6
 8002514:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002518:	bf08      	it	eq
 800251a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800251e:	bd70      	pop	{r4, r5, r6, pc}
 8002520:	f1c4 040c 	rsb	r4, r4, #12
 8002524:	f1c4 0520 	rsb	r5, r4, #32
 8002528:	fa00 f304 	lsl.w	r3, r0, r4
 800252c:	fa20 f005 	lsr.w	r0, r0, r5
 8002530:	fa01 f204 	lsl.w	r2, r1, r4
 8002534:	ea40 0002 	orr.w	r0, r0, r2
 8002538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800253c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002540:	f141 0100 	adc.w	r1, r1, #0
 8002544:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002548:	bf08      	it	eq
 800254a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800254e:	bd70      	pop	{r4, r5, r6, pc}
 8002550:	f1c4 0520 	rsb	r5, r4, #32
 8002554:	fa00 f205 	lsl.w	r2, r0, r5
 8002558:	ea4e 0e02 	orr.w	lr, lr, r2
 800255c:	fa20 f304 	lsr.w	r3, r0, r4
 8002560:	fa01 f205 	lsl.w	r2, r1, r5
 8002564:	ea43 0302 	orr.w	r3, r3, r2
 8002568:	fa21 f004 	lsr.w	r0, r1, r4
 800256c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002570:	fa21 f204 	lsr.w	r2, r1, r4
 8002574:	ea20 0002 	bic.w	r0, r0, r2
 8002578:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800257c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002580:	bf08      	it	eq
 8002582:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002586:	bd70      	pop	{r4, r5, r6, pc}
 8002588:	f094 0f00 	teq	r4, #0
 800258c:	d10f      	bne.n	80025ae <__aeabi_dmul+0x1c2>
 800258e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8002592:	0040      	lsls	r0, r0, #1
 8002594:	eb41 0101 	adc.w	r1, r1, r1
 8002598:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800259c:	bf08      	it	eq
 800259e:	3c01      	subeq	r4, #1
 80025a0:	d0f7      	beq.n	8002592 <__aeabi_dmul+0x1a6>
 80025a2:	ea41 0106 	orr.w	r1, r1, r6
 80025a6:	f095 0f00 	teq	r5, #0
 80025aa:	bf18      	it	ne
 80025ac:	4770      	bxne	lr
 80025ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80025b2:	0052      	lsls	r2, r2, #1
 80025b4:	eb43 0303 	adc.w	r3, r3, r3
 80025b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80025bc:	bf08      	it	eq
 80025be:	3d01      	subeq	r5, #1
 80025c0:	d0f7      	beq.n	80025b2 <__aeabi_dmul+0x1c6>
 80025c2:	ea43 0306 	orr.w	r3, r3, r6
 80025c6:	4770      	bx	lr
 80025c8:	ea94 0f0c 	teq	r4, ip
 80025cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80025d0:	bf18      	it	ne
 80025d2:	ea95 0f0c 	teqne	r5, ip
 80025d6:	d00c      	beq.n	80025f2 <__aeabi_dmul+0x206>
 80025d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80025dc:	bf18      	it	ne
 80025de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80025e2:	d1d1      	bne.n	8002588 <__aeabi_dmul+0x19c>
 80025e4:	ea81 0103 	eor.w	r1, r1, r3
 80025e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80025ec:	f04f 0000 	mov.w	r0, #0
 80025f0:	bd70      	pop	{r4, r5, r6, pc}
 80025f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80025f6:	bf06      	itte	eq
 80025f8:	4610      	moveq	r0, r2
 80025fa:	4619      	moveq	r1, r3
 80025fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002600:	d019      	beq.n	8002636 <__aeabi_dmul+0x24a>
 8002602:	ea94 0f0c 	teq	r4, ip
 8002606:	d102      	bne.n	800260e <__aeabi_dmul+0x222>
 8002608:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800260c:	d113      	bne.n	8002636 <__aeabi_dmul+0x24a>
 800260e:	ea95 0f0c 	teq	r5, ip
 8002612:	d105      	bne.n	8002620 <__aeabi_dmul+0x234>
 8002614:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002618:	bf1c      	itt	ne
 800261a:	4610      	movne	r0, r2
 800261c:	4619      	movne	r1, r3
 800261e:	d10a      	bne.n	8002636 <__aeabi_dmul+0x24a>
 8002620:	ea81 0103 	eor.w	r1, r1, r3
 8002624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002628:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800262c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002630:	f04f 0000 	mov.w	r0, #0
 8002634:	bd70      	pop	{r4, r5, r6, pc}
 8002636:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800263a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800263e:	bd70      	pop	{r4, r5, r6, pc}

08002640 <__aeabi_ddiv>:
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800264a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800264e:	bf1d      	ittte	ne
 8002650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002654:	ea94 0f0c 	teqne	r4, ip
 8002658:	ea95 0f0c 	teqne	r5, ip
 800265c:	f000 f8a7 	bleq	80027ae <__aeabi_ddiv+0x16e>
 8002660:	eba4 0405 	sub.w	r4, r4, r5
 8002664:	ea81 0e03 	eor.w	lr, r1, r3
 8002668:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800266c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002670:	f000 8088 	beq.w	8002784 <__aeabi_ddiv+0x144>
 8002674:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002678:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800267c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8002680:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002684:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002688:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800268c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8002690:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002694:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8002698:	429d      	cmp	r5, r3
 800269a:	bf08      	it	eq
 800269c:	4296      	cmpeq	r6, r2
 800269e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80026a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80026a6:	d202      	bcs.n	80026ae <__aeabi_ddiv+0x6e>
 80026a8:	085b      	lsrs	r3, r3, #1
 80026aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80026ae:	1ab6      	subs	r6, r6, r2
 80026b0:	eb65 0503 	sbc.w	r5, r5, r3
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80026ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80026be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80026c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80026c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80026ca:	bf22      	ittt	cs
 80026cc:	1ab6      	subcs	r6, r6, r2
 80026ce:	4675      	movcs	r5, lr
 80026d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80026da:	ebb6 0e02 	subs.w	lr, r6, r2
 80026de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80026e2:	bf22      	ittt	cs
 80026e4:	1ab6      	subcs	r6, r6, r2
 80026e6:	4675      	movcs	r5, lr
 80026e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80026f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80026f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80026fa:	bf22      	ittt	cs
 80026fc:	1ab6      	subcs	r6, r6, r2
 80026fe:	4675      	movcs	r5, lr
 8002700:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002704:	085b      	lsrs	r3, r3, #1
 8002706:	ea4f 0232 	mov.w	r2, r2, rrx
 800270a:	ebb6 0e02 	subs.w	lr, r6, r2
 800270e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002712:	bf22      	ittt	cs
 8002714:	1ab6      	subcs	r6, r6, r2
 8002716:	4675      	movcs	r5, lr
 8002718:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800271c:	ea55 0e06 	orrs.w	lr, r5, r6
 8002720:	d018      	beq.n	8002754 <__aeabi_ddiv+0x114>
 8002722:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002726:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800272a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800272e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002732:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002736:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800273a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800273e:	d1c0      	bne.n	80026c2 <__aeabi_ddiv+0x82>
 8002740:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002744:	d10b      	bne.n	800275e <__aeabi_ddiv+0x11e>
 8002746:	ea41 0100 	orr.w	r1, r1, r0
 800274a:	f04f 0000 	mov.w	r0, #0
 800274e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8002752:	e7b6      	b.n	80026c2 <__aeabi_ddiv+0x82>
 8002754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002758:	bf04      	itt	eq
 800275a:	4301      	orreq	r1, r0
 800275c:	2000      	moveq	r0, #0
 800275e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002762:	bf88      	it	hi
 8002764:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002768:	f63f aeaf 	bhi.w	80024ca <__aeabi_dmul+0xde>
 800276c:	ebb5 0c03 	subs.w	ip, r5, r3
 8002770:	bf04      	itt	eq
 8002772:	ebb6 0c02 	subseq.w	ip, r6, r2
 8002776:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800277a:	f150 0000 	adcs.w	r0, r0, #0
 800277e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002782:	bd70      	pop	{r4, r5, r6, pc}
 8002784:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8002788:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800278c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8002790:	bfc2      	ittt	gt
 8002792:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002796:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800279a:	bd70      	popgt	{r4, r5, r6, pc}
 800279c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80027a0:	f04f 0e00 	mov.w	lr, #0
 80027a4:	3c01      	subs	r4, #1
 80027a6:	e690      	b.n	80024ca <__aeabi_dmul+0xde>
 80027a8:	ea45 0e06 	orr.w	lr, r5, r6
 80027ac:	e68d      	b.n	80024ca <__aeabi_dmul+0xde>
 80027ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80027b2:	ea94 0f0c 	teq	r4, ip
 80027b6:	bf08      	it	eq
 80027b8:	ea95 0f0c 	teqeq	r5, ip
 80027bc:	f43f af3b 	beq.w	8002636 <__aeabi_dmul+0x24a>
 80027c0:	ea94 0f0c 	teq	r4, ip
 80027c4:	d10a      	bne.n	80027dc <__aeabi_ddiv+0x19c>
 80027c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80027ca:	f47f af34 	bne.w	8002636 <__aeabi_dmul+0x24a>
 80027ce:	ea95 0f0c 	teq	r5, ip
 80027d2:	f47f af25 	bne.w	8002620 <__aeabi_dmul+0x234>
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	e72c      	b.n	8002636 <__aeabi_dmul+0x24a>
 80027dc:	ea95 0f0c 	teq	r5, ip
 80027e0:	d106      	bne.n	80027f0 <__aeabi_ddiv+0x1b0>
 80027e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80027e6:	f43f aefd 	beq.w	80025e4 <__aeabi_dmul+0x1f8>
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	e722      	b.n	8002636 <__aeabi_dmul+0x24a>
 80027f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80027f4:	bf18      	it	ne
 80027f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80027fa:	f47f aec5 	bne.w	8002588 <__aeabi_dmul+0x19c>
 80027fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002802:	f47f af0d 	bne.w	8002620 <__aeabi_dmul+0x234>
 8002806:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800280a:	f47f aeeb 	bne.w	80025e4 <__aeabi_dmul+0x1f8>
 800280e:	e712      	b.n	8002636 <__aeabi_dmul+0x24a>

08002810 <__gedf2>:
 8002810:	f04f 3cff 	mov.w	ip, #4294967295
 8002814:	e006      	b.n	8002824 <__cmpdf2+0x4>
 8002816:	bf00      	nop

08002818 <__ledf2>:
 8002818:	f04f 0c01 	mov.w	ip, #1
 800281c:	e002      	b.n	8002824 <__cmpdf2+0x4>
 800281e:	bf00      	nop

08002820 <__cmpdf2>:
 8002820:	f04f 0c01 	mov.w	ip, #1
 8002824:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002828:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800282c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002834:	bf18      	it	ne
 8002836:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800283a:	d01b      	beq.n	8002874 <__cmpdf2+0x54>
 800283c:	b001      	add	sp, #4
 800283e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8002842:	bf0c      	ite	eq
 8002844:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002848:	ea91 0f03 	teqne	r1, r3
 800284c:	bf02      	ittt	eq
 800284e:	ea90 0f02 	teqeq	r0, r2
 8002852:	2000      	moveq	r0, #0
 8002854:	4770      	bxeq	lr
 8002856:	f110 0f00 	cmn.w	r0, #0
 800285a:	ea91 0f03 	teq	r1, r3
 800285e:	bf58      	it	pl
 8002860:	4299      	cmppl	r1, r3
 8002862:	bf08      	it	eq
 8002864:	4290      	cmpeq	r0, r2
 8002866:	bf2c      	ite	cs
 8002868:	17d8      	asrcs	r0, r3, #31
 800286a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800286e:	f040 0001 	orr.w	r0, r0, #1
 8002872:	4770      	bx	lr
 8002874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800287c:	d102      	bne.n	8002884 <__cmpdf2+0x64>
 800287e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002882:	d107      	bne.n	8002894 <__cmpdf2+0x74>
 8002884:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002888:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800288c:	d1d6      	bne.n	800283c <__cmpdf2+0x1c>
 800288e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002892:	d0d3      	beq.n	800283c <__cmpdf2+0x1c>
 8002894:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop

0800289c <__aeabi_cdrcmple>:
 800289c:	4684      	mov	ip, r0
 800289e:	4610      	mov	r0, r2
 80028a0:	4662      	mov	r2, ip
 80028a2:	468c      	mov	ip, r1
 80028a4:	4619      	mov	r1, r3
 80028a6:	4663      	mov	r3, ip
 80028a8:	e000      	b.n	80028ac <__aeabi_cdcmpeq>
 80028aa:	bf00      	nop

080028ac <__aeabi_cdcmpeq>:
 80028ac:	b501      	push	{r0, lr}
 80028ae:	f7ff ffb7 	bl	8002820 <__cmpdf2>
 80028b2:	2800      	cmp	r0, #0
 80028b4:	bf48      	it	mi
 80028b6:	f110 0f00 	cmnmi.w	r0, #0
 80028ba:	bd01      	pop	{r0, pc}

080028bc <__aeabi_dcmpeq>:
 80028bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80028c0:	f7ff fff4 	bl	80028ac <__aeabi_cdcmpeq>
 80028c4:	bf0c      	ite	eq
 80028c6:	2001      	moveq	r0, #1
 80028c8:	2000      	movne	r0, #0
 80028ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80028ce:	bf00      	nop

080028d0 <__aeabi_dcmplt>:
 80028d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80028d4:	f7ff ffea 	bl	80028ac <__aeabi_cdcmpeq>
 80028d8:	bf34      	ite	cc
 80028da:	2001      	movcc	r0, #1
 80028dc:	2000      	movcs	r0, #0
 80028de:	f85d fb08 	ldr.w	pc, [sp], #8
 80028e2:	bf00      	nop

080028e4 <__aeabi_dcmple>:
 80028e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80028e8:	f7ff ffe0 	bl	80028ac <__aeabi_cdcmpeq>
 80028ec:	bf94      	ite	ls
 80028ee:	2001      	movls	r0, #1
 80028f0:	2000      	movhi	r0, #0
 80028f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80028f6:	bf00      	nop

080028f8 <__aeabi_dcmpge>:
 80028f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80028fc:	f7ff ffce 	bl	800289c <__aeabi_cdrcmple>
 8002900:	bf94      	ite	ls
 8002902:	2001      	movls	r0, #1
 8002904:	2000      	movhi	r0, #0
 8002906:	f85d fb08 	ldr.w	pc, [sp], #8
 800290a:	bf00      	nop

0800290c <__aeabi_dcmpgt>:
 800290c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002910:	f7ff ffc4 	bl	800289c <__aeabi_cdrcmple>
 8002914:	bf34      	ite	cc
 8002916:	2001      	movcc	r0, #1
 8002918:	2000      	movcs	r0, #0
 800291a:	f85d fb08 	ldr.w	pc, [sp], #8
 800291e:	bf00      	nop

08002920 <__aeabi_d2f>:
 8002920:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002924:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8002928:	bf24      	itt	cs
 800292a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800292e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8002932:	d90d      	bls.n	8002950 <__aeabi_d2f+0x30>
 8002934:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8002938:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800293c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8002940:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002944:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8002948:	bf08      	it	eq
 800294a:	f020 0001 	biceq.w	r0, r0, #1
 800294e:	4770      	bx	lr
 8002950:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8002954:	d121      	bne.n	800299a <__aeabi_d2f+0x7a>
 8002956:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800295a:	bfbc      	itt	lt
 800295c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8002960:	4770      	bxlt	lr
 8002962:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002966:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800296a:	f1c2 0218 	rsb	r2, r2, #24
 800296e:	f1c2 0c20 	rsb	ip, r2, #32
 8002972:	fa10 f30c 	lsls.w	r3, r0, ip
 8002976:	fa20 f002 	lsr.w	r0, r0, r2
 800297a:	bf18      	it	ne
 800297c:	f040 0001 	orrne.w	r0, r0, #1
 8002980:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002984:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8002988:	fa03 fc0c 	lsl.w	ip, r3, ip
 800298c:	ea40 000c 	orr.w	r0, r0, ip
 8002990:	fa23 f302 	lsr.w	r3, r3, r2
 8002994:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002998:	e7cc      	b.n	8002934 <__aeabi_d2f+0x14>
 800299a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800299e:	d107      	bne.n	80029b0 <__aeabi_d2f+0x90>
 80029a0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80029a4:	bf1e      	ittt	ne
 80029a6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80029aa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80029ae:	4770      	bxne	lr
 80029b0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80029b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80029b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop

080029c0 <__aeabi_uldivmod>:
 80029c0:	b953      	cbnz	r3, 80029d8 <__aeabi_uldivmod+0x18>
 80029c2:	b94a      	cbnz	r2, 80029d8 <__aeabi_uldivmod+0x18>
 80029c4:	2900      	cmp	r1, #0
 80029c6:	bf08      	it	eq
 80029c8:	2800      	cmpeq	r0, #0
 80029ca:	bf1c      	itt	ne
 80029cc:	f04f 31ff 	movne.w	r1, #4294967295
 80029d0:	f04f 30ff 	movne.w	r0, #4294967295
 80029d4:	f000 b97a 	b.w	8002ccc <__aeabi_idiv0>
 80029d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80029dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80029e0:	f000 f806 	bl	80029f0 <__udivmoddi4>
 80029e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80029e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80029ec:	b004      	add	sp, #16
 80029ee:	4770      	bx	lr

080029f0 <__udivmoddi4>:
 80029f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029f4:	468c      	mov	ip, r1
 80029f6:	460d      	mov	r5, r1
 80029f8:	4604      	mov	r4, r0
 80029fa:	9e08      	ldr	r6, [sp, #32]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d151      	bne.n	8002aa4 <__udivmoddi4+0xb4>
 8002a00:	428a      	cmp	r2, r1
 8002a02:	4617      	mov	r7, r2
 8002a04:	d96d      	bls.n	8002ae2 <__udivmoddi4+0xf2>
 8002a06:	fab2 fe82 	clz	lr, r2
 8002a0a:	f1be 0f00 	cmp.w	lr, #0
 8002a0e:	d00b      	beq.n	8002a28 <__udivmoddi4+0x38>
 8002a10:	f1ce 0c20 	rsb	ip, lr, #32
 8002a14:	fa01 f50e 	lsl.w	r5, r1, lr
 8002a18:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002a1c:	fa02 f70e 	lsl.w	r7, r2, lr
 8002a20:	ea4c 0c05 	orr.w	ip, ip, r5
 8002a24:	fa00 f40e 	lsl.w	r4, r0, lr
 8002a28:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8002a2c:	0c25      	lsrs	r5, r4, #16
 8002a2e:	fbbc f8fa 	udiv	r8, ip, sl
 8002a32:	fa1f f987 	uxth.w	r9, r7
 8002a36:	fb0a cc18 	mls	ip, sl, r8, ip
 8002a3a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8002a3e:	fb08 f309 	mul.w	r3, r8, r9
 8002a42:	42ab      	cmp	r3, r5
 8002a44:	d90a      	bls.n	8002a5c <__udivmoddi4+0x6c>
 8002a46:	19ed      	adds	r5, r5, r7
 8002a48:	f108 32ff 	add.w	r2, r8, #4294967295
 8002a4c:	f080 8123 	bcs.w	8002c96 <__udivmoddi4+0x2a6>
 8002a50:	42ab      	cmp	r3, r5
 8002a52:	f240 8120 	bls.w	8002c96 <__udivmoddi4+0x2a6>
 8002a56:	f1a8 0802 	sub.w	r8, r8, #2
 8002a5a:	443d      	add	r5, r7
 8002a5c:	1aed      	subs	r5, r5, r3
 8002a5e:	b2a4      	uxth	r4, r4
 8002a60:	fbb5 f0fa 	udiv	r0, r5, sl
 8002a64:	fb0a 5510 	mls	r5, sl, r0, r5
 8002a68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8002a6c:	fb00 f909 	mul.w	r9, r0, r9
 8002a70:	45a1      	cmp	r9, r4
 8002a72:	d909      	bls.n	8002a88 <__udivmoddi4+0x98>
 8002a74:	19e4      	adds	r4, r4, r7
 8002a76:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a7a:	f080 810a 	bcs.w	8002c92 <__udivmoddi4+0x2a2>
 8002a7e:	45a1      	cmp	r9, r4
 8002a80:	f240 8107 	bls.w	8002c92 <__udivmoddi4+0x2a2>
 8002a84:	3802      	subs	r0, #2
 8002a86:	443c      	add	r4, r7
 8002a88:	eba4 0409 	sub.w	r4, r4, r9
 8002a8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8002a90:	2100      	movs	r1, #0
 8002a92:	2e00      	cmp	r6, #0
 8002a94:	d061      	beq.n	8002b5a <__udivmoddi4+0x16a>
 8002a96:	fa24 f40e 	lsr.w	r4, r4, lr
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	6034      	str	r4, [r6, #0]
 8002a9e:	6073      	str	r3, [r6, #4]
 8002aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aa4:	428b      	cmp	r3, r1
 8002aa6:	d907      	bls.n	8002ab8 <__udivmoddi4+0xc8>
 8002aa8:	2e00      	cmp	r6, #0
 8002aaa:	d054      	beq.n	8002b56 <__udivmoddi4+0x166>
 8002aac:	2100      	movs	r1, #0
 8002aae:	e886 0021 	stmia.w	r6, {r0, r5}
 8002ab2:	4608      	mov	r0, r1
 8002ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ab8:	fab3 f183 	clz	r1, r3
 8002abc:	2900      	cmp	r1, #0
 8002abe:	f040 808e 	bne.w	8002bde <__udivmoddi4+0x1ee>
 8002ac2:	42ab      	cmp	r3, r5
 8002ac4:	d302      	bcc.n	8002acc <__udivmoddi4+0xdc>
 8002ac6:	4282      	cmp	r2, r0
 8002ac8:	f200 80fa 	bhi.w	8002cc0 <__udivmoddi4+0x2d0>
 8002acc:	1a84      	subs	r4, r0, r2
 8002ace:	eb65 0503 	sbc.w	r5, r5, r3
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	46ac      	mov	ip, r5
 8002ad6:	2e00      	cmp	r6, #0
 8002ad8:	d03f      	beq.n	8002b5a <__udivmoddi4+0x16a>
 8002ada:	e886 1010 	stmia.w	r6, {r4, ip}
 8002ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ae2:	b912      	cbnz	r2, 8002aea <__udivmoddi4+0xfa>
 8002ae4:	2701      	movs	r7, #1
 8002ae6:	fbb7 f7f2 	udiv	r7, r7, r2
 8002aea:	fab7 fe87 	clz	lr, r7
 8002aee:	f1be 0f00 	cmp.w	lr, #0
 8002af2:	d134      	bne.n	8002b5e <__udivmoddi4+0x16e>
 8002af4:	1beb      	subs	r3, r5, r7
 8002af6:	0c3a      	lsrs	r2, r7, #16
 8002af8:	fa1f fc87 	uxth.w	ip, r7
 8002afc:	2101      	movs	r1, #1
 8002afe:	fbb3 f8f2 	udiv	r8, r3, r2
 8002b02:	0c25      	lsrs	r5, r4, #16
 8002b04:	fb02 3318 	mls	r3, r2, r8, r3
 8002b08:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8002b0c:	fb0c f308 	mul.w	r3, ip, r8
 8002b10:	42ab      	cmp	r3, r5
 8002b12:	d907      	bls.n	8002b24 <__udivmoddi4+0x134>
 8002b14:	19ed      	adds	r5, r5, r7
 8002b16:	f108 30ff 	add.w	r0, r8, #4294967295
 8002b1a:	d202      	bcs.n	8002b22 <__udivmoddi4+0x132>
 8002b1c:	42ab      	cmp	r3, r5
 8002b1e:	f200 80d1 	bhi.w	8002cc4 <__udivmoddi4+0x2d4>
 8002b22:	4680      	mov	r8, r0
 8002b24:	1aed      	subs	r5, r5, r3
 8002b26:	b2a3      	uxth	r3, r4
 8002b28:	fbb5 f0f2 	udiv	r0, r5, r2
 8002b2c:	fb02 5510 	mls	r5, r2, r0, r5
 8002b30:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8002b34:	fb0c fc00 	mul.w	ip, ip, r0
 8002b38:	45a4      	cmp	ip, r4
 8002b3a:	d907      	bls.n	8002b4c <__udivmoddi4+0x15c>
 8002b3c:	19e4      	adds	r4, r4, r7
 8002b3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b42:	d202      	bcs.n	8002b4a <__udivmoddi4+0x15a>
 8002b44:	45a4      	cmp	ip, r4
 8002b46:	f200 80b8 	bhi.w	8002cba <__udivmoddi4+0x2ca>
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	eba4 040c 	sub.w	r4, r4, ip
 8002b50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8002b54:	e79d      	b.n	8002a92 <__udivmoddi4+0xa2>
 8002b56:	4631      	mov	r1, r6
 8002b58:	4630      	mov	r0, r6
 8002b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b5e:	f1ce 0420 	rsb	r4, lr, #32
 8002b62:	fa05 f30e 	lsl.w	r3, r5, lr
 8002b66:	fa07 f70e 	lsl.w	r7, r7, lr
 8002b6a:	fa20 f804 	lsr.w	r8, r0, r4
 8002b6e:	0c3a      	lsrs	r2, r7, #16
 8002b70:	fa25 f404 	lsr.w	r4, r5, r4
 8002b74:	ea48 0803 	orr.w	r8, r8, r3
 8002b78:	fbb4 f1f2 	udiv	r1, r4, r2
 8002b7c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8002b80:	fb02 4411 	mls	r4, r2, r1, r4
 8002b84:	fa1f fc87 	uxth.w	ip, r7
 8002b88:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8002b8c:	fb01 f30c 	mul.w	r3, r1, ip
 8002b90:	42ab      	cmp	r3, r5
 8002b92:	fa00 f40e 	lsl.w	r4, r0, lr
 8002b96:	d909      	bls.n	8002bac <__udivmoddi4+0x1bc>
 8002b98:	19ed      	adds	r5, r5, r7
 8002b9a:	f101 30ff 	add.w	r0, r1, #4294967295
 8002b9e:	f080 808a 	bcs.w	8002cb6 <__udivmoddi4+0x2c6>
 8002ba2:	42ab      	cmp	r3, r5
 8002ba4:	f240 8087 	bls.w	8002cb6 <__udivmoddi4+0x2c6>
 8002ba8:	3902      	subs	r1, #2
 8002baa:	443d      	add	r5, r7
 8002bac:	1aeb      	subs	r3, r5, r3
 8002bae:	fa1f f588 	uxth.w	r5, r8
 8002bb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8002bb6:	fb02 3310 	mls	r3, r2, r0, r3
 8002bba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8002bbe:	fb00 f30c 	mul.w	r3, r0, ip
 8002bc2:	42ab      	cmp	r3, r5
 8002bc4:	d907      	bls.n	8002bd6 <__udivmoddi4+0x1e6>
 8002bc6:	19ed      	adds	r5, r5, r7
 8002bc8:	f100 38ff 	add.w	r8, r0, #4294967295
 8002bcc:	d26f      	bcs.n	8002cae <__udivmoddi4+0x2be>
 8002bce:	42ab      	cmp	r3, r5
 8002bd0:	d96d      	bls.n	8002cae <__udivmoddi4+0x2be>
 8002bd2:	3802      	subs	r0, #2
 8002bd4:	443d      	add	r5, r7
 8002bd6:	1aeb      	subs	r3, r5, r3
 8002bd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8002bdc:	e78f      	b.n	8002afe <__udivmoddi4+0x10e>
 8002bde:	f1c1 0720 	rsb	r7, r1, #32
 8002be2:	fa22 f807 	lsr.w	r8, r2, r7
 8002be6:	408b      	lsls	r3, r1
 8002be8:	fa05 f401 	lsl.w	r4, r5, r1
 8002bec:	ea48 0303 	orr.w	r3, r8, r3
 8002bf0:	fa20 fe07 	lsr.w	lr, r0, r7
 8002bf4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8002bf8:	40fd      	lsrs	r5, r7
 8002bfa:	ea4e 0e04 	orr.w	lr, lr, r4
 8002bfe:	fbb5 f9fc 	udiv	r9, r5, ip
 8002c02:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8002c06:	fb0c 5519 	mls	r5, ip, r9, r5
 8002c0a:	fa1f f883 	uxth.w	r8, r3
 8002c0e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8002c12:	fb09 f408 	mul.w	r4, r9, r8
 8002c16:	42ac      	cmp	r4, r5
 8002c18:	fa02 f201 	lsl.w	r2, r2, r1
 8002c1c:	fa00 fa01 	lsl.w	sl, r0, r1
 8002c20:	d908      	bls.n	8002c34 <__udivmoddi4+0x244>
 8002c22:	18ed      	adds	r5, r5, r3
 8002c24:	f109 30ff 	add.w	r0, r9, #4294967295
 8002c28:	d243      	bcs.n	8002cb2 <__udivmoddi4+0x2c2>
 8002c2a:	42ac      	cmp	r4, r5
 8002c2c:	d941      	bls.n	8002cb2 <__udivmoddi4+0x2c2>
 8002c2e:	f1a9 0902 	sub.w	r9, r9, #2
 8002c32:	441d      	add	r5, r3
 8002c34:	1b2d      	subs	r5, r5, r4
 8002c36:	fa1f fe8e 	uxth.w	lr, lr
 8002c3a:	fbb5 f0fc 	udiv	r0, r5, ip
 8002c3e:	fb0c 5510 	mls	r5, ip, r0, r5
 8002c42:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8002c46:	fb00 f808 	mul.w	r8, r0, r8
 8002c4a:	45a0      	cmp	r8, r4
 8002c4c:	d907      	bls.n	8002c5e <__udivmoddi4+0x26e>
 8002c4e:	18e4      	adds	r4, r4, r3
 8002c50:	f100 35ff 	add.w	r5, r0, #4294967295
 8002c54:	d229      	bcs.n	8002caa <__udivmoddi4+0x2ba>
 8002c56:	45a0      	cmp	r8, r4
 8002c58:	d927      	bls.n	8002caa <__udivmoddi4+0x2ba>
 8002c5a:	3802      	subs	r0, #2
 8002c5c:	441c      	add	r4, r3
 8002c5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8002c62:	eba4 0408 	sub.w	r4, r4, r8
 8002c66:	fba0 8902 	umull	r8, r9, r0, r2
 8002c6a:	454c      	cmp	r4, r9
 8002c6c:	46c6      	mov	lr, r8
 8002c6e:	464d      	mov	r5, r9
 8002c70:	d315      	bcc.n	8002c9e <__udivmoddi4+0x2ae>
 8002c72:	d012      	beq.n	8002c9a <__udivmoddi4+0x2aa>
 8002c74:	b156      	cbz	r6, 8002c8c <__udivmoddi4+0x29c>
 8002c76:	ebba 030e 	subs.w	r3, sl, lr
 8002c7a:	eb64 0405 	sbc.w	r4, r4, r5
 8002c7e:	fa04 f707 	lsl.w	r7, r4, r7
 8002c82:	40cb      	lsrs	r3, r1
 8002c84:	431f      	orrs	r7, r3
 8002c86:	40cc      	lsrs	r4, r1
 8002c88:	6037      	str	r7, [r6, #0]
 8002c8a:	6074      	str	r4, [r6, #4]
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c92:	4618      	mov	r0, r3
 8002c94:	e6f8      	b.n	8002a88 <__udivmoddi4+0x98>
 8002c96:	4690      	mov	r8, r2
 8002c98:	e6e0      	b.n	8002a5c <__udivmoddi4+0x6c>
 8002c9a:	45c2      	cmp	sl, r8
 8002c9c:	d2ea      	bcs.n	8002c74 <__udivmoddi4+0x284>
 8002c9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8002ca2:	eb69 0503 	sbc.w	r5, r9, r3
 8002ca6:	3801      	subs	r0, #1
 8002ca8:	e7e4      	b.n	8002c74 <__udivmoddi4+0x284>
 8002caa:	4628      	mov	r0, r5
 8002cac:	e7d7      	b.n	8002c5e <__udivmoddi4+0x26e>
 8002cae:	4640      	mov	r0, r8
 8002cb0:	e791      	b.n	8002bd6 <__udivmoddi4+0x1e6>
 8002cb2:	4681      	mov	r9, r0
 8002cb4:	e7be      	b.n	8002c34 <__udivmoddi4+0x244>
 8002cb6:	4601      	mov	r1, r0
 8002cb8:	e778      	b.n	8002bac <__udivmoddi4+0x1bc>
 8002cba:	3802      	subs	r0, #2
 8002cbc:	443c      	add	r4, r7
 8002cbe:	e745      	b.n	8002b4c <__udivmoddi4+0x15c>
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	e708      	b.n	8002ad6 <__udivmoddi4+0xe6>
 8002cc4:	f1a8 0802 	sub.w	r8, r8, #2
 8002cc8:	443d      	add	r5, r7
 8002cca:	e72b      	b.n	8002b24 <__udivmoddi4+0x134>

08002ccc <__aeabi_idiv0>:
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop

08002cd0 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 8002cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8002cd2:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8002d40 <arm_dot_prod_f32+0x70>

#ifndef ARM_MATH_CM0_FAMILY

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8002cd6:	0896      	lsrs	r6, r2, #2
 8002cd8:	4605      	mov	r5, r0
 8002cda:	460c      	mov	r4, r1
 8002cdc:	4637      	mov	r7, r6
 8002cde:	3510      	adds	r5, #16
 8002ce0:	3410      	adds	r4, #16

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8002ce2:	b95f      	cbnz	r7, 8002cfc <arm_dot_prod_f32+0x2c>
 8002ce4:	0134      	lsls	r4, r6, #4
 8002ce6:	4421      	add	r1, r4
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8002ce8:	f002 0203 	and.w	r2, r2, #3
 8002cec:	4420      	add	r0, r4
 8002cee:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */


  while(blkCnt > 0u)
 8002cf2:	4291      	cmp	r1, r2
 8002cf4:	d11c      	bne.n	8002d30 <arm_dot_prod_f32+0x60>

    /* Decrement the loop counter */
    blkCnt--;
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 8002cf6:	edc3 7a00 	vstr	s15, [r3]
 8002cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sum += (*pSrcA++) * (*pSrcB++);
 8002cfc:	ed55 6a04 	vldr	s13, [r5, #-16]
 8002d00:	ed14 7a04 	vldr	s14, [r4, #-16]
 8002d04:	eee6 7a87 	vfma.f32	s15, s13, s14
    blkCnt--;
 8002d08:	3f01      	subs	r7, #1
    sum += (*pSrcA++) * (*pSrcB++);
 8002d0a:	ed55 6a03 	vldr	s13, [r5, #-12]
 8002d0e:	ed14 7a03 	vldr	s14, [r4, #-12]
 8002d12:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 8002d16:	ed55 6a02 	vldr	s13, [r5, #-8]
 8002d1a:	ed14 7a02 	vldr	s14, [r4, #-8]
 8002d1e:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 8002d22:	ed55 6a01 	vldr	s13, [r5, #-4]
 8002d26:	ed14 7a01 	vldr	s14, [r4, #-4]
 8002d2a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002d2e:	e7d6      	b.n	8002cde <arm_dot_prod_f32+0xe>
    sum += (*pSrcA++) * (*pSrcB++);
 8002d30:	ecf0 6a01 	vldmia	r0!, {s13}
 8002d34:	ecb1 7a01 	vldmia	r1!, {s14}
 8002d38:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002d3c:	e7d9      	b.n	8002cf2 <arm_dot_prod_f32+0x22>
 8002d3e:	bf00      	nop
 8002d40:	00000000 	.word	0x00000000

08002d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d44:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d46:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <HAL_InitTick+0x3c>)
 8002d48:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <HAL_InitTick+0x40>)
{
 8002d4a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d4c:	7818      	ldrb	r0, [r3, #0]
 8002d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d52:	fbb3 f3f0 	udiv	r3, r3, r0
 8002d56:	6810      	ldr	r0, [r2, #0]
 8002d58:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d5c:	f000 f894 	bl	8002e88 <HAL_SYSTICK_Config>
 8002d60:	4604      	mov	r4, r0
 8002d62:	b958      	cbnz	r0, 8002d7c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d64:	2d0f      	cmp	r5, #15
 8002d66:	d809      	bhi.n	8002d7c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	f000 f84a 	bl	8002e08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <HAL_InitTick+0x44>)
 8002d76:	4620      	mov	r0, r4
 8002d78:	601d      	str	r5, [r3, #0]
 8002d7a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002d7c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002d7e:	bd38      	pop	{r3, r4, r5, pc}
 8002d80:	20000370 	.word	0x20000370
 8002d84:	20000000 	.word	0x20000000
 8002d88:	20000004 	.word	0x20000004

08002d8c <HAL_Init>:
{
 8002d8c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_Init+0x30>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d96:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d9e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da8:	2003      	movs	r0, #3
 8002daa:	f000 f81b 	bl	8002de4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7ff ffc8 	bl	8002d44 <HAL_InitTick>
  HAL_MspInit();
 8002db4:	f001 f958 	bl	8004068 <HAL_MspInit>
}
 8002db8:	2000      	movs	r0, #0
 8002dba:	bd08      	pop	{r3, pc}
 8002dbc:	40023c00 	.word	0x40023c00

08002dc0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002dc0:	4a03      	ldr	r2, [pc, #12]	; (8002dd0 <HAL_IncTick+0x10>)
 8002dc2:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <HAL_IncTick+0x14>)
 8002dc4:	6811      	ldr	r1, [r2, #0]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	440b      	add	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000920 	.word	0x20000920
 8002dd4:	20000000 	.word	0x20000000

08002dd8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002dd8:	4b01      	ldr	r3, [pc, #4]	; (8002de0 <HAL_GetTick+0x8>)
 8002dda:	6818      	ldr	r0, [r3, #0]
}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000920 	.word	0x20000920

08002de4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de4:	4a07      	ldr	r2, [pc, #28]	; (8002e04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002de6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dec:	041b      	lsls	r3, r3, #16
 8002dee:	0c1b      	lsrs	r3, r3, #16
 8002df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002df4:	0200      	lsls	r0, r0, #8
 8002df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dfa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002dfe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002e00:	60d3      	str	r3, [r2, #12]
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e0a:	b530      	push	{r4, r5, lr}
 8002e0c:	68dc      	ldr	r4, [r3, #12]
 8002e0e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e12:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e16:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	bf28      	it	cs
 8002e1c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	f04f 0501 	mov.w	r5, #1
 8002e24:	fa05 f303 	lsl.w	r3, r5, r3
 8002e28:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e2c:	bf8c      	ite	hi
 8002e2e:	3c03      	subhi	r4, #3
 8002e30:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e32:	4019      	ands	r1, r3
 8002e34:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e36:	fa05 f404 	lsl.w	r4, r5, r4
 8002e3a:	3c01      	subs	r4, #1
 8002e3c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8002e3e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e40:	ea42 0201 	orr.w	r2, r2, r1
 8002e44:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e48:	bfaf      	iteee	ge
 8002e4a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4e:	f000 000f 	andlt.w	r0, r0, #15
 8002e52:	4b06      	ldrlt	r3, [pc, #24]	; (8002e6c <HAL_NVIC_SetPriority+0x64>)
 8002e54:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e56:	bfa5      	ittet	ge
 8002e58:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8002e5c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e60:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002e64:	bd30      	pop	{r4, r5, pc}
 8002e66:	bf00      	nop
 8002e68:	e000ed00 	.word	0xe000ed00
 8002e6c:	e000ed14 	.word	0xe000ed14

08002e70 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002e70:	0942      	lsrs	r2, r0, #5
 8002e72:	2301      	movs	r3, #1
 8002e74:	f000 001f 	and.w	r0, r0, #31
 8002e78:	fa03 f000 	lsl.w	r0, r3, r0
 8002e7c:	4b01      	ldr	r3, [pc, #4]	; (8002e84 <HAL_NVIC_EnableIRQ+0x14>)
 8002e7e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002e82:	4770      	bx	lr
 8002e84:	e000e100 	.word	0xe000e100

08002e88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e88:	3801      	subs	r0, #1
 8002e8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002e8e:	d20a      	bcs.n	8002ea6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e92:	4a07      	ldr	r2, [pc, #28]	; (8002eb0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e94:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e96:	21f0      	movs	r1, #240	; 0xf0
 8002e98:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e9c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e9e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002ea6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000e010 	.word	0xe000e010
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <HAL_CRC_Init>:
  * @param  hcrc pointer to a CRC_HandleTypeDef structure that contains
  *         the configuration information for CRC
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002eb4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	b160      	cbz	r0, 8002ed4 <HAL_CRC_Init+0x20>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8002eba:	7943      	ldrb	r3, [r0, #5]
 8002ebc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ec0:	b913      	cbnz	r3, 8002ec8 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ec2:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ec4:	f000 ff5e 	bl	8003d84 <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	7163      	strb	r3, [r4, #5]
   
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	7163      	strb	r3, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ed4:	2001      	movs	r0, #1
}
 8002ed6:	bd10      	pop	{r4, pc}

08002ed8 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d003      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ee8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8002eea:	2305      	movs	r3, #5
 8002eec:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002ef0:	6813      	ldr	r3, [r2, #0]
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002ef8:	2000      	movs	r0, #0
}
 8002efa:	4770      	bx	lr

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f00:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f02:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f04:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80030b4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f08:	4a68      	ldr	r2, [pc, #416]	; (80030ac <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f0a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80030b8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f0e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f10:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8002f12:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f16:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8002f18:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f1c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8002f20:	45b6      	cmp	lr, r6
 8002f22:	f040 80ae 	bne.w	8003082 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f26:	684c      	ldr	r4, [r1, #4]
 8002f28:	f024 0710 	bic.w	r7, r4, #16
 8002f2c:	2f02      	cmp	r7, #2
 8002f2e:	d116      	bne.n	8002f5e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8002f30:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002f34:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f38:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002f3c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f40:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002f44:	f04f 0c0f 	mov.w	ip, #15
 8002f48:	fa0c fc0b 	lsl.w	ip, ip, fp
 8002f4c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f50:	690d      	ldr	r5, [r1, #16]
 8002f52:	fa05 f50b 	lsl.w	r5, r5, fp
 8002f56:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8002f5a:	f8ca 5020 	str.w	r5, [sl, #32]
 8002f5e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f62:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002f64:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f68:	fa05 f50a 	lsl.w	r5, r5, sl
 8002f6c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f6e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f72:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f76:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f7a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f7c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f80:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8002f82:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f86:	d811      	bhi.n	8002fac <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8002f88:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f8a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f8e:	68cf      	ldr	r7, [r1, #12]
 8002f90:	fa07 fc0a 	lsl.w	ip, r7, sl
 8002f94:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8002f98:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002f9a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f9c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002fa0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8002fa4:	409f      	lsls	r7, r3
 8002fa6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002faa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002fac:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fae:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb0:	688f      	ldr	r7, [r1, #8]
 8002fb2:	fa07 f70a 	lsl.w	r7, r7, sl
 8002fb6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8002fb8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fba:	00e5      	lsls	r5, r4, #3
 8002fbc:	d561      	bpl.n	8003082 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fbe:	f04f 0b00 	mov.w	fp, #0
 8002fc2:	f8cd b00c 	str.w	fp, [sp, #12]
 8002fc6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fca:	4d39      	ldr	r5, [pc, #228]	; (80030b0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fcc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8002fd0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8002fd4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8002fd8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8002fdc:	9703      	str	r7, [sp, #12]
 8002fde:	9f03      	ldr	r7, [sp, #12]
 8002fe0:	f023 0703 	bic.w	r7, r3, #3
 8002fe4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002fe8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fec:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ff4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002ff8:	f04f 0e0f 	mov.w	lr, #15
 8002ffc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003000:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003002:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003006:	d043      	beq.n	8003090 <HAL_GPIO_Init+0x194>
 8003008:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800300c:	42a8      	cmp	r0, r5
 800300e:	d041      	beq.n	8003094 <HAL_GPIO_Init+0x198>
 8003010:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003014:	42a8      	cmp	r0, r5
 8003016:	d03f      	beq.n	8003098 <HAL_GPIO_Init+0x19c>
 8003018:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800301c:	42a8      	cmp	r0, r5
 800301e:	d03d      	beq.n	800309c <HAL_GPIO_Init+0x1a0>
 8003020:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003024:	42a8      	cmp	r0, r5
 8003026:	d03b      	beq.n	80030a0 <HAL_GPIO_Init+0x1a4>
 8003028:	4548      	cmp	r0, r9
 800302a:	d03b      	beq.n	80030a4 <HAL_GPIO_Init+0x1a8>
 800302c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003030:	42a8      	cmp	r0, r5
 8003032:	d039      	beq.n	80030a8 <HAL_GPIO_Init+0x1ac>
 8003034:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003038:	42a8      	cmp	r0, r5
 800303a:	bf14      	ite	ne
 800303c:	2508      	movne	r5, #8
 800303e:	2507      	moveq	r5, #7
 8003040:	fa05 f50c 	lsl.w	r5, r5, ip
 8003044:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003048:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800304a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800304c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800304e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8003052:	bf0c      	ite	eq
 8003054:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003056:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8003058:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800305a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800305c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8003060:	bf0c      	ite	eq
 8003062:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003064:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8003066:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003068:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800306a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800306e:	bf0c      	ite	eq
 8003070:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003072:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8003074:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8003076:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003078:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800307a:	bf54      	ite	pl
 800307c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800307e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8003080:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003082:	3301      	adds	r3, #1
 8003084:	2b10      	cmp	r3, #16
 8003086:	f47f af44 	bne.w	8002f12 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800308a:	b005      	add	sp, #20
 800308c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003090:	465d      	mov	r5, fp
 8003092:	e7d5      	b.n	8003040 <HAL_GPIO_Init+0x144>
 8003094:	2501      	movs	r5, #1
 8003096:	e7d3      	b.n	8003040 <HAL_GPIO_Init+0x144>
 8003098:	2502      	movs	r5, #2
 800309a:	e7d1      	b.n	8003040 <HAL_GPIO_Init+0x144>
 800309c:	2503      	movs	r5, #3
 800309e:	e7cf      	b.n	8003040 <HAL_GPIO_Init+0x144>
 80030a0:	2504      	movs	r5, #4
 80030a2:	e7cd      	b.n	8003040 <HAL_GPIO_Init+0x144>
 80030a4:	2505      	movs	r5, #5
 80030a6:	e7cb      	b.n	8003040 <HAL_GPIO_Init+0x144>
 80030a8:	2506      	movs	r5, #6
 80030aa:	e7c9      	b.n	8003040 <HAL_GPIO_Init+0x144>
 80030ac:	40013c00 	.word	0x40013c00
 80030b0:	40020000 	.word	0x40020000
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40021400 	.word	0x40021400

080030bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030bc:	b10a      	cbz	r2, 80030c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030be:	6181      	str	r1, [r0, #24]
 80030c0:	4770      	bx	lr
 80030c2:	0409      	lsls	r1, r1, #16
 80030c4:	e7fb      	b.n	80030be <HAL_GPIO_WritePin+0x2>
	...

080030c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030cc:	4604      	mov	r4, r0
 80030ce:	b918      	cbnz	r0, 80030d8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80030d0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80030d2:	b002      	add	sp, #8
 80030d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030d8:	6803      	ldr	r3, [r0, #0]
 80030da:	07dd      	lsls	r5, r3, #31
 80030dc:	d410      	bmi.n	8003100 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	0798      	lsls	r0, r3, #30
 80030e2:	d458      	bmi.n	8003196 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	071a      	lsls	r2, r3, #28
 80030e8:	f100 809a 	bmi.w	8003220 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	075b      	lsls	r3, r3, #29
 80030f0:	f100 80b8 	bmi.w	8003264 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f4:	69a2      	ldr	r2, [r4, #24]
 80030f6:	2a00      	cmp	r2, #0
 80030f8:	f040 8119 	bne.w	800332e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80030fc:	2000      	movs	r0, #0
 80030fe:	e7e8      	b.n	80030d2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003100:	4ba6      	ldr	r3, [pc, #664]	; (800339c <HAL_RCC_OscConfig+0x2d4>)
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	f002 020c 	and.w	r2, r2, #12
 8003108:	2a04      	cmp	r2, #4
 800310a:	d007      	beq.n	800311c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003112:	2a08      	cmp	r2, #8
 8003114:	d10a      	bne.n	800312c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	0259      	lsls	r1, r3, #9
 800311a:	d507      	bpl.n	800312c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311c:	4b9f      	ldr	r3, [pc, #636]	; (800339c <HAL_RCC_OscConfig+0x2d4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	039a      	lsls	r2, r3, #14
 8003122:	d5dc      	bpl.n	80030de <HAL_RCC_OscConfig+0x16>
 8003124:	6863      	ldr	r3, [r4, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1d9      	bne.n	80030de <HAL_RCC_OscConfig+0x16>
 800312a:	e7d1      	b.n	80030d0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800312c:	6863      	ldr	r3, [r4, #4]
 800312e:	4d9b      	ldr	r5, [pc, #620]	; (800339c <HAL_RCC_OscConfig+0x2d4>)
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003134:	d111      	bne.n	800315a <HAL_RCC_OscConfig+0x92>
 8003136:	682b      	ldr	r3, [r5, #0]
 8003138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800313e:	f7ff fe4b 	bl	8002dd8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4d96      	ldr	r5, [pc, #600]	; (800339c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8003144:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	682b      	ldr	r3, [r5, #0]
 8003148:	039b      	lsls	r3, r3, #14
 800314a:	d4c8      	bmi.n	80030de <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800314c:	f7ff fe44 	bl	8002dd8 <HAL_GetTick>
 8003150:	1b80      	subs	r0, r0, r6
 8003152:	2864      	cmp	r0, #100	; 0x64
 8003154:	d9f7      	bls.n	8003146 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8003156:	2003      	movs	r0, #3
 8003158:	e7bb      	b.n	80030d2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800315a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800315e:	d104      	bne.n	800316a <HAL_RCC_OscConfig+0xa2>
 8003160:	682b      	ldr	r3, [r5, #0]
 8003162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003166:	602b      	str	r3, [r5, #0]
 8003168:	e7e5      	b.n	8003136 <HAL_RCC_OscConfig+0x6e>
 800316a:	682a      	ldr	r2, [r5, #0]
 800316c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003170:	602a      	str	r2, [r5, #0]
 8003172:	682a      	ldr	r2, [r5, #0]
 8003174:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003178:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1df      	bne.n	800313e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800317e:	f7ff fe2b 	bl	8002dd8 <HAL_GetTick>
 8003182:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003184:	682b      	ldr	r3, [r5, #0]
 8003186:	039f      	lsls	r7, r3, #14
 8003188:	d5a9      	bpl.n	80030de <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800318a:	f7ff fe25 	bl	8002dd8 <HAL_GetTick>
 800318e:	1b80      	subs	r0, r0, r6
 8003190:	2864      	cmp	r0, #100	; 0x64
 8003192:	d9f7      	bls.n	8003184 <HAL_RCC_OscConfig+0xbc>
 8003194:	e7df      	b.n	8003156 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003196:	4b81      	ldr	r3, [pc, #516]	; (800339c <HAL_RCC_OscConfig+0x2d4>)
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	f012 0f0c 	tst.w	r2, #12
 800319e:	d007      	beq.n	80031b0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031a6:	2a08      	cmp	r2, #8
 80031a8:	d111      	bne.n	80031ce <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	025e      	lsls	r6, r3, #9
 80031ae:	d40e      	bmi.n	80031ce <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b0:	4b7a      	ldr	r3, [pc, #488]	; (800339c <HAL_RCC_OscConfig+0x2d4>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	0795      	lsls	r5, r2, #30
 80031b6:	d502      	bpl.n	80031be <HAL_RCC_OscConfig+0xf6>
 80031b8:	68e2      	ldr	r2, [r4, #12]
 80031ba:	2a01      	cmp	r2, #1
 80031bc:	d188      	bne.n	80030d0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	6921      	ldr	r1, [r4, #16]
 80031c2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80031c6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80031ca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031cc:	e78a      	b.n	80030e4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031ce:	68e2      	ldr	r2, [r4, #12]
 80031d0:	4b73      	ldr	r3, [pc, #460]	; (80033a0 <HAL_RCC_OscConfig+0x2d8>)
 80031d2:	b1b2      	cbz	r2, 8003202 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80031d4:	2201      	movs	r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031d8:	f7ff fdfe 	bl	8002dd8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031dc:	4d6f      	ldr	r5, [pc, #444]	; (800339c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80031de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	682b      	ldr	r3, [r5, #0]
 80031e2:	0798      	lsls	r0, r3, #30
 80031e4:	d507      	bpl.n	80031f6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	682b      	ldr	r3, [r5, #0]
 80031e8:	6922      	ldr	r2, [r4, #16]
 80031ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80031ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80031f2:	602b      	str	r3, [r5, #0]
 80031f4:	e776      	b.n	80030e4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f6:	f7ff fdef 	bl	8002dd8 <HAL_GetTick>
 80031fa:	1b80      	subs	r0, r0, r6
 80031fc:	2802      	cmp	r0, #2
 80031fe:	d9ef      	bls.n	80031e0 <HAL_RCC_OscConfig+0x118>
 8003200:	e7a9      	b.n	8003156 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8003202:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003204:	f7ff fde8 	bl	8002dd8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003208:	4d64      	ldr	r5, [pc, #400]	; (800339c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800320a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320c:	682b      	ldr	r3, [r5, #0]
 800320e:	0799      	lsls	r1, r3, #30
 8003210:	f57f af68 	bpl.w	80030e4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003214:	f7ff fde0 	bl	8002dd8 <HAL_GetTick>
 8003218:	1b80      	subs	r0, r0, r6
 800321a:	2802      	cmp	r0, #2
 800321c:	d9f6      	bls.n	800320c <HAL_RCC_OscConfig+0x144>
 800321e:	e79a      	b.n	8003156 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003220:	6962      	ldr	r2, [r4, #20]
 8003222:	4b60      	ldr	r3, [pc, #384]	; (80033a4 <HAL_RCC_OscConfig+0x2dc>)
 8003224:	b17a      	cbz	r2, 8003246 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800322a:	f7ff fdd5 	bl	8002dd8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322e:	4d5b      	ldr	r5, [pc, #364]	; (800339c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8003230:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003232:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003234:	079f      	lsls	r7, r3, #30
 8003236:	f53f af59 	bmi.w	80030ec <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323a:	f7ff fdcd 	bl	8002dd8 <HAL_GetTick>
 800323e:	1b80      	subs	r0, r0, r6
 8003240:	2802      	cmp	r0, #2
 8003242:	d9f6      	bls.n	8003232 <HAL_RCC_OscConfig+0x16a>
 8003244:	e787      	b.n	8003156 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8003246:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003248:	f7ff fdc6 	bl	8002dd8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324c:	4d53      	ldr	r5, [pc, #332]	; (800339c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800324e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003250:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003252:	0798      	lsls	r0, r3, #30
 8003254:	f57f af4a 	bpl.w	80030ec <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003258:	f7ff fdbe 	bl	8002dd8 <HAL_GetTick>
 800325c:	1b80      	subs	r0, r0, r6
 800325e:	2802      	cmp	r0, #2
 8003260:	d9f6      	bls.n	8003250 <HAL_RCC_OscConfig+0x188>
 8003262:	e778      	b.n	8003156 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003264:	4b4d      	ldr	r3, [pc, #308]	; (800339c <HAL_RCC_OscConfig+0x2d4>)
 8003266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003268:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800326c:	d128      	bne.n	80032c0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	9201      	str	r2, [sp, #4]
 8003270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003272:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003276:	641a      	str	r2, [r3, #64]	; 0x40
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003282:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003284:	4d48      	ldr	r5, [pc, #288]	; (80033a8 <HAL_RCC_OscConfig+0x2e0>)
 8003286:	682b      	ldr	r3, [r5, #0]
 8003288:	05d9      	lsls	r1, r3, #23
 800328a:	d51b      	bpl.n	80032c4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800328c:	68a3      	ldr	r3, [r4, #8]
 800328e:	4d43      	ldr	r5, [pc, #268]	; (800339c <HAL_RCC_OscConfig+0x2d4>)
 8003290:	2b01      	cmp	r3, #1
 8003292:	d127      	bne.n	80032e4 <HAL_RCC_OscConfig+0x21c>
 8003294:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800329c:	f7ff fd9c 	bl	8002dd8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a0:	4d3e      	ldr	r5, [pc, #248]	; (800339c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80032a2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80032aa:	079b      	lsls	r3, r3, #30
 80032ac:	d539      	bpl.n	8003322 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80032ae:	2e00      	cmp	r6, #0
 80032b0:	f43f af20 	beq.w	80030f4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b4:	4a39      	ldr	r2, [pc, #228]	; (800339c <HAL_RCC_OscConfig+0x2d4>)
 80032b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80032b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032bc:	6413      	str	r3, [r2, #64]	; 0x40
 80032be:	e719      	b.n	80030f4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80032c0:	2600      	movs	r6, #0
 80032c2:	e7df      	b.n	8003284 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c4:	682b      	ldr	r3, [r5, #0]
 80032c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80032cc:	f7ff fd84 	bl	8002dd8 <HAL_GetTick>
 80032d0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d2:	682b      	ldr	r3, [r5, #0]
 80032d4:	05da      	lsls	r2, r3, #23
 80032d6:	d4d9      	bmi.n	800328c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d8:	f7ff fd7e 	bl	8002dd8 <HAL_GetTick>
 80032dc:	1bc0      	subs	r0, r0, r7
 80032de:	2802      	cmp	r0, #2
 80032e0:	d9f7      	bls.n	80032d2 <HAL_RCC_OscConfig+0x20a>
 80032e2:	e738      	b.n	8003156 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	d104      	bne.n	80032f2 <HAL_RCC_OscConfig+0x22a>
 80032e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80032ea:	f043 0304 	orr.w	r3, r3, #4
 80032ee:	672b      	str	r3, [r5, #112]	; 0x70
 80032f0:	e7d0      	b.n	8003294 <HAL_RCC_OscConfig+0x1cc>
 80032f2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	672a      	str	r2, [r5, #112]	; 0x70
 80032fa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80032fc:	f022 0204 	bic.w	r2, r2, #4
 8003300:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1ca      	bne.n	800329c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8003306:	f7ff fd67 	bl	8002dd8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800330e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003310:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003312:	0798      	lsls	r0, r3, #30
 8003314:	d5cb      	bpl.n	80032ae <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7ff fd5f 	bl	8002dd8 <HAL_GetTick>
 800331a:	1bc0      	subs	r0, r0, r7
 800331c:	4540      	cmp	r0, r8
 800331e:	d9f7      	bls.n	8003310 <HAL_RCC_OscConfig+0x248>
 8003320:	e719      	b.n	8003156 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7ff fd59 	bl	8002dd8 <HAL_GetTick>
 8003326:	1bc0      	subs	r0, r0, r7
 8003328:	4540      	cmp	r0, r8
 800332a:	d9bd      	bls.n	80032a8 <HAL_RCC_OscConfig+0x1e0>
 800332c:	e713      	b.n	8003156 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800332e:	4d1b      	ldr	r5, [pc, #108]	; (800339c <HAL_RCC_OscConfig+0x2d4>)
 8003330:	68ab      	ldr	r3, [r5, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b08      	cmp	r3, #8
 8003338:	f43f aeca 	beq.w	80030d0 <HAL_RCC_OscConfig+0x8>
 800333c:	4e1b      	ldr	r6, [pc, #108]	; (80033ac <HAL_RCC_OscConfig+0x2e4>)
 800333e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003340:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003342:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003344:	d134      	bne.n	80033b0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8003346:	f7ff fd47 	bl	8002dd8 <HAL_GetTick>
 800334a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	0199      	lsls	r1, r3, #6
 8003350:	d41e      	bmi.n	8003390 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003352:	6a22      	ldr	r2, [r4, #32]
 8003354:	69e3      	ldr	r3, [r4, #28]
 8003356:	4313      	orrs	r3, r2
 8003358:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800335a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800335e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003360:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003364:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003366:	4c0d      	ldr	r4, [pc, #52]	; (800339c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003368:	0852      	lsrs	r2, r2, #1
 800336a:	3a01      	subs	r2, #1
 800336c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003370:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003372:	2301      	movs	r3, #1
 8003374:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003376:	f7ff fd2f 	bl	8002dd8 <HAL_GetTick>
 800337a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	019a      	lsls	r2, r3, #6
 8003380:	f53f aebc 	bmi.w	80030fc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003384:	f7ff fd28 	bl	8002dd8 <HAL_GetTick>
 8003388:	1b40      	subs	r0, r0, r5
 800338a:	2802      	cmp	r0, #2
 800338c:	d9f6      	bls.n	800337c <HAL_RCC_OscConfig+0x2b4>
 800338e:	e6e2      	b.n	8003156 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003390:	f7ff fd22 	bl	8002dd8 <HAL_GetTick>
 8003394:	1bc0      	subs	r0, r0, r7
 8003396:	2802      	cmp	r0, #2
 8003398:	d9d8      	bls.n	800334c <HAL_RCC_OscConfig+0x284>
 800339a:	e6dc      	b.n	8003156 <HAL_RCC_OscConfig+0x8e>
 800339c:	40023800 	.word	0x40023800
 80033a0:	42470000 	.word	0x42470000
 80033a4:	42470e80 	.word	0x42470e80
 80033a8:	40007000 	.word	0x40007000
 80033ac:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80033b0:	f7ff fd12 	bl	8002dd8 <HAL_GetTick>
 80033b4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b6:	682b      	ldr	r3, [r5, #0]
 80033b8:	019b      	lsls	r3, r3, #6
 80033ba:	f57f ae9f 	bpl.w	80030fc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033be:	f7ff fd0b 	bl	8002dd8 <HAL_GetTick>
 80033c2:	1b00      	subs	r0, r0, r4
 80033c4:	2802      	cmp	r0, #2
 80033c6:	d9f6      	bls.n	80033b6 <HAL_RCC_OscConfig+0x2ee>
 80033c8:	e6c5      	b.n	8003156 <HAL_RCC_OscConfig+0x8e>
 80033ca:	bf00      	nop

080033cc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033cc:	4913      	ldr	r1, [pc, #76]	; (800341c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80033ce:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d0:	688b      	ldr	r3, [r1, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x16>
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033de:	4810      	ldr	r0, [pc, #64]	; (8003420 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80033e0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80033e2:	4810      	ldr	r0, [pc, #64]	; (8003424 <HAL_RCC_GetSysClockFreq+0x58>)
 80033e4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033e8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ea:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ec:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f0:	bf14      	ite	ne
 80033f2:	480c      	ldrne	r0, [pc, #48]	; (8003424 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f4:	480a      	ldreq	r0, [pc, #40]	; (8003420 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80033fa:	bf18      	it	ne
 80033fc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003402:	fba1 0100 	umull	r0, r1, r1, r0
 8003406:	f7ff fadb 	bl	80029c0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800340a:	4b04      	ldr	r3, [pc, #16]	; (800341c <HAL_RCC_GetSysClockFreq+0x50>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003412:	3301      	adds	r3, #1
 8003414:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003416:	fbb0 f0f3 	udiv	r0, r0, r3
 800341a:	bd08      	pop	{r3, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	00f42400 	.word	0x00f42400
 8003424:	007a1200 	.word	0x007a1200

08003428 <HAL_RCC_ClockConfig>:
{
 8003428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800342c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800342e:	4604      	mov	r4, r0
 8003430:	b910      	cbnz	r0, 8003438 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003432:	2001      	movs	r0, #1
 8003434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b44      	ldr	r3, [pc, #272]	; (800354c <HAL_RCC_ClockConfig+0x124>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	f002 020f 	and.w	r2, r2, #15
 8003440:	428a      	cmp	r2, r1
 8003442:	d328      	bcc.n	8003496 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003444:	6821      	ldr	r1, [r4, #0]
 8003446:	078f      	lsls	r7, r1, #30
 8003448:	d42d      	bmi.n	80034a6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	07c8      	lsls	r0, r1, #31
 800344c:	d440      	bmi.n	80034d0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800344e:	4b3f      	ldr	r3, [pc, #252]	; (800354c <HAL_RCC_ClockConfig+0x124>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	f002 020f 	and.w	r2, r2, #15
 8003456:	4295      	cmp	r5, r2
 8003458:	d366      	bcc.n	8003528 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345a:	6822      	ldr	r2, [r4, #0]
 800345c:	0751      	lsls	r1, r2, #29
 800345e:	d46c      	bmi.n	800353a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003460:	0713      	lsls	r3, r2, #28
 8003462:	d507      	bpl.n	8003474 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003464:	4a3a      	ldr	r2, [pc, #232]	; (8003550 <HAL_RCC_ClockConfig+0x128>)
 8003466:	6921      	ldr	r1, [r4, #16]
 8003468:	6893      	ldr	r3, [r2, #8]
 800346a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800346e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003472:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003474:	f7ff ffaa 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 8003478:	4b35      	ldr	r3, [pc, #212]	; (8003550 <HAL_RCC_ClockConfig+0x128>)
 800347a:	4a36      	ldr	r2, [pc, #216]	; (8003554 <HAL_RCC_ClockConfig+0x12c>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003482:	5cd3      	ldrb	r3, [r2, r3]
 8003484:	40d8      	lsrs	r0, r3
 8003486:	4b34      	ldr	r3, [pc, #208]	; (8003558 <HAL_RCC_ClockConfig+0x130>)
 8003488:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800348a:	2000      	movs	r0, #0
 800348c:	f7ff fc5a 	bl	8002d44 <HAL_InitTick>
  return HAL_OK;
 8003490:	2000      	movs	r0, #0
 8003492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	b2ca      	uxtb	r2, r1
 8003498:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	4299      	cmp	r1, r3
 80034a2:	d1c6      	bne.n	8003432 <HAL_RCC_ClockConfig+0xa>
 80034a4:	e7ce      	b.n	8003444 <HAL_RCC_ClockConfig+0x1c>
 80034a6:	4b2a      	ldr	r3, [pc, #168]	; (8003550 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034ac:	bf1e      	ittt	ne
 80034ae:	689a      	ldrne	r2, [r3, #8]
 80034b0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80034b4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034b8:	bf42      	ittt	mi
 80034ba:	689a      	ldrmi	r2, [r3, #8]
 80034bc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80034c0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	68a0      	ldr	r0, [r4, #8]
 80034c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80034ca:	4302      	orrs	r2, r0
 80034cc:	609a      	str	r2, [r3, #8]
 80034ce:	e7bc      	b.n	800344a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d0:	6862      	ldr	r2, [r4, #4]
 80034d2:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <HAL_RCC_ClockConfig+0x128>)
 80034d4:	2a01      	cmp	r2, #1
 80034d6:	d11d      	bne.n	8003514 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034de:	d0a8      	beq.n	8003432 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e0:	4e1b      	ldr	r6, [pc, #108]	; (8003550 <HAL_RCC_ClockConfig+0x128>)
 80034e2:	68b3      	ldr	r3, [r6, #8]
 80034e4:	f023 0303 	bic.w	r3, r3, #3
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80034ec:	f7ff fc74 	bl	8002dd8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80034f4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	68b3      	ldr	r3, [r6, #8]
 80034f8:	6862      	ldr	r2, [r4, #4]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003502:	d0a4      	beq.n	800344e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003504:	f7ff fc68 	bl	8002dd8 <HAL_GetTick>
 8003508:	1bc0      	subs	r0, r0, r7
 800350a:	4540      	cmp	r0, r8
 800350c:	d9f3      	bls.n	80034f6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800350e:	2003      	movs	r0, #3
}
 8003510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003514:	1e91      	subs	r1, r2, #2
 8003516:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003518:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800351a:	d802      	bhi.n	8003522 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003520:	e7dd      	b.n	80034de <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003522:	f013 0f02 	tst.w	r3, #2
 8003526:	e7da      	b.n	80034de <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003528:	b2ea      	uxtb	r2, r5
 800352a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	429d      	cmp	r5, r3
 8003534:	f47f af7d 	bne.w	8003432 <HAL_RCC_ClockConfig+0xa>
 8003538:	e78f      	b.n	800345a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800353a:	4905      	ldr	r1, [pc, #20]	; (8003550 <HAL_RCC_ClockConfig+0x128>)
 800353c:	68e0      	ldr	r0, [r4, #12]
 800353e:	688b      	ldr	r3, [r1, #8]
 8003540:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003544:	4303      	orrs	r3, r0
 8003546:	608b      	str	r3, [r1, #8]
 8003548:	e78a      	b.n	8003460 <HAL_RCC_ClockConfig+0x38>
 800354a:	bf00      	nop
 800354c:	40023c00 	.word	0x40023c00
 8003550:	40023800 	.word	0x40023800
 8003554:	08017c4e 	.word	0x08017c4e
 8003558:	20000370 	.word	0x20000370

0800355c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <HAL_RCC_GetPCLK1Freq+0x14>)
 800355e:	4a05      	ldr	r2, [pc, #20]	; (8003574 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003566:	5cd3      	ldrb	r3, [r2, r3]
 8003568:	4a03      	ldr	r2, [pc, #12]	; (8003578 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800356a:	6810      	ldr	r0, [r2, #0]
}
 800356c:	40d8      	lsrs	r0, r3
 800356e:	4770      	bx	lr
 8003570:	40023800 	.word	0x40023800
 8003574:	08017c5e 	.word	0x08017c5e
 8003578:	20000370 	.word	0x20000370

0800357c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800357c:	4b04      	ldr	r3, [pc, #16]	; (8003590 <HAL_RCC_GetPCLK2Freq+0x14>)
 800357e:	4a05      	ldr	r2, [pc, #20]	; (8003594 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003586:	5cd3      	ldrb	r3, [r2, r3]
 8003588:	4a03      	ldr	r2, [pc, #12]	; (8003598 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800358a:	6810      	ldr	r0, [r2, #0]
}
 800358c:	40d8      	lsrs	r0, r3
 800358e:	4770      	bx	lr
 8003590:	40023800 	.word	0x40023800
 8003594:	08017c5e 	.word	0x08017c5e
 8003598:	20000370 	.word	0x20000370

0800359c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800359c:	6803      	ldr	r3, [r0, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035a4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	695a      	ldr	r2, [r3, #20]
 80035a8:	f022 0201 	bic.w	r2, r2, #1
 80035ac:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ae:	2320      	movs	r3, #32
 80035b0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80035b4:	4770      	bx	lr
	...

080035b8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80035bc:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80035be:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80035c0:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035c2:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80035c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80035c8:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80035ca:	6133      	str	r3, [r6, #16]
{
 80035cc:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ce:	6883      	ldr	r3, [r0, #8]
 80035d0:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80035d2:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035d4:	4303      	orrs	r3, r0
 80035d6:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80035d8:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035dc:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80035de:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035e2:	430b      	orrs	r3, r1
 80035e4:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80035e6:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80035e8:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80035ea:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80035ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80035f0:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035f2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80035f6:	6173      	str	r3, [r6, #20]
 80035f8:	4b7a      	ldr	r3, [pc, #488]	; (80037e4 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035fa:	d17c      	bne.n	80036f6 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80035fc:	429e      	cmp	r6, r3
 80035fe:	d003      	beq.n	8003608 <UART_SetConfig+0x50>
 8003600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003604:	429e      	cmp	r6, r3
 8003606:	d144      	bne.n	8003692 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003608:	f7ff ffb8 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 800360c:	2519      	movs	r5, #25
 800360e:	fb05 f300 	mul.w	r3, r5, r0
 8003612:	6860      	ldr	r0, [r4, #4]
 8003614:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003618:	0040      	lsls	r0, r0, #1
 800361a:	fbb3 f3f0 	udiv	r3, r3, r0
 800361e:	fbb3 f3f9 	udiv	r3, r3, r9
 8003622:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003626:	f7ff ffa9 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 800362a:	6863      	ldr	r3, [r4, #4]
 800362c:	4368      	muls	r0, r5
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	fbb0 f7f3 	udiv	r7, r0, r3
 8003634:	f7ff ffa2 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8003638:	6863      	ldr	r3, [r4, #4]
 800363a:	4368      	muls	r0, r5
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003642:	fbb3 f3f9 	udiv	r3, r3, r9
 8003646:	fb09 7313 	mls	r3, r9, r3, r7
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	3332      	adds	r3, #50	; 0x32
 800364e:	fbb3 f3f9 	udiv	r3, r3, r9
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8003658:	f7ff ff90 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 800365c:	6862      	ldr	r2, [r4, #4]
 800365e:	4368      	muls	r0, r5
 8003660:	0052      	lsls	r2, r2, #1
 8003662:	fbb0 faf2 	udiv	sl, r0, r2
 8003666:	f7ff ff89 	bl	800357c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800366a:	6863      	ldr	r3, [r4, #4]
 800366c:	4368      	muls	r0, r5
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	fbb0 f3f3 	udiv	r3, r0, r3
 8003674:	fbb3 f3f9 	udiv	r3, r3, r9
 8003678:	fb09 a313 	mls	r3, r9, r3, sl
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	3332      	adds	r3, #50	; 0x32
 8003680:	fbb3 f3f9 	udiv	r3, r3, r9
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800368a:	443b      	add	r3, r7
 800368c:	60b3      	str	r3, [r6, #8]
 800368e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003692:	f7ff ff63 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 8003696:	2519      	movs	r5, #25
 8003698:	fb05 f300 	mul.w	r3, r5, r0
 800369c:	6860      	ldr	r0, [r4, #4]
 800369e:	f04f 0964 	mov.w	r9, #100	; 0x64
 80036a2:	0040      	lsls	r0, r0, #1
 80036a4:	fbb3 f3f0 	udiv	r3, r3, r0
 80036a8:	fbb3 f3f9 	udiv	r3, r3, r9
 80036ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036b0:	f7ff ff54 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 80036b4:	6863      	ldr	r3, [r4, #4]
 80036b6:	4368      	muls	r0, r5
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fbb0 f7f3 	udiv	r7, r0, r3
 80036be:	f7ff ff4d 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 80036c2:	6863      	ldr	r3, [r4, #4]
 80036c4:	4368      	muls	r0, r5
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80036cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80036d0:	fb09 7313 	mls	r3, r9, r3, r7
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	3332      	adds	r3, #50	; 0x32
 80036d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80036e2:	f7ff ff3b 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 80036e6:	6862      	ldr	r2, [r4, #4]
 80036e8:	4368      	muls	r0, r5
 80036ea:	0052      	lsls	r2, r2, #1
 80036ec:	fbb0 faf2 	udiv	sl, r0, r2
 80036f0:	f7ff ff34 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 80036f4:	e7b9      	b.n	800366a <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80036f6:	429e      	cmp	r6, r3
 80036f8:	d002      	beq.n	8003700 <UART_SetConfig+0x148>
 80036fa:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <UART_SetConfig+0x230>)
 80036fc:	429e      	cmp	r6, r3
 80036fe:	d140      	bne.n	8003782 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003700:	f7ff ff3c 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8003704:	6867      	ldr	r7, [r4, #4]
 8003706:	2519      	movs	r5, #25
 8003708:	f04f 0964 	mov.w	r9, #100	; 0x64
 800370c:	fb05 f300 	mul.w	r3, r5, r0
 8003710:	00bf      	lsls	r7, r7, #2
 8003712:	fbb3 f3f7 	udiv	r3, r3, r7
 8003716:	fbb3 f3f9 	udiv	r3, r3, r9
 800371a:	011f      	lsls	r7, r3, #4
 800371c:	f7ff ff2e 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8003720:	6863      	ldr	r3, [r4, #4]
 8003722:	4368      	muls	r0, r5
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	fbb0 f8f3 	udiv	r8, r0, r3
 800372a:	f7ff ff27 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 800372e:	6863      	ldr	r3, [r4, #4]
 8003730:	4368      	muls	r0, r5
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	fbb0 f3f3 	udiv	r3, r0, r3
 8003738:	fbb3 f3f9 	udiv	r3, r3, r9
 800373c:	fb09 8313 	mls	r3, r9, r3, r8
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	3332      	adds	r3, #50	; 0x32
 8003744:	fbb3 f3f9 	udiv	r3, r3, r9
 8003748:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800374c:	f7ff ff16 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8003750:	6862      	ldr	r2, [r4, #4]
 8003752:	4368      	muls	r0, r5
 8003754:	0092      	lsls	r2, r2, #2
 8003756:	fbb0 faf2 	udiv	sl, r0, r2
 800375a:	f7ff ff0f 	bl	800357c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800375e:	6863      	ldr	r3, [r4, #4]
 8003760:	4368      	muls	r0, r5
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	fbb0 f3f3 	udiv	r3, r0, r3
 8003768:	fbb3 f3f9 	udiv	r3, r3, r9
 800376c:	fb09 a313 	mls	r3, r9, r3, sl
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	3332      	adds	r3, #50	; 0x32
 8003774:	fbb3 f3f9 	udiv	r3, r3, r9
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	ea43 0308 	orr.w	r3, r3, r8
 8003780:	e783      	b.n	800368a <UART_SetConfig+0xd2>
 8003782:	f7ff feeb 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 8003786:	6867      	ldr	r7, [r4, #4]
 8003788:	2519      	movs	r5, #25
 800378a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800378e:	fb05 f300 	mul.w	r3, r5, r0
 8003792:	00bf      	lsls	r7, r7, #2
 8003794:	fbb3 f3f7 	udiv	r3, r3, r7
 8003798:	fbb3 f3f9 	udiv	r3, r3, r9
 800379c:	011f      	lsls	r7, r3, #4
 800379e:	f7ff fedd 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 80037a2:	6863      	ldr	r3, [r4, #4]
 80037a4:	4368      	muls	r0, r5
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	fbb0 f8f3 	udiv	r8, r0, r3
 80037ac:	f7ff fed6 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 80037b0:	6863      	ldr	r3, [r4, #4]
 80037b2:	4368      	muls	r0, r5
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ba:	fbb3 f3f9 	udiv	r3, r3, r9
 80037be:	fb09 8313 	mls	r3, r9, r3, r8
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	3332      	adds	r3, #50	; 0x32
 80037c6:	fbb3 f3f9 	udiv	r3, r3, r9
 80037ca:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80037ce:	f7ff fec5 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 80037d2:	6862      	ldr	r2, [r4, #4]
 80037d4:	4368      	muls	r0, r5
 80037d6:	0092      	lsls	r2, r2, #2
 80037d8:	fbb0 faf2 	udiv	sl, r0, r2
 80037dc:	f7ff febe 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 80037e0:	e7bd      	b.n	800375e <UART_SetConfig+0x1a6>
 80037e2:	bf00      	nop
 80037e4:	40011000 	.word	0x40011000
 80037e8:	40011400 	.word	0x40011400

080037ec <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80037ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ee:	4604      	mov	r4, r0
 80037f0:	460e      	mov	r6, r1
 80037f2:	4617      	mov	r7, r2
 80037f4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80037f6:	6821      	ldr	r1, [r4, #0]
 80037f8:	680b      	ldr	r3, [r1, #0]
 80037fa:	ea36 0303 	bics.w	r3, r6, r3
 80037fe:	d101      	bne.n	8003804 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003800:	2000      	movs	r0, #0
}
 8003802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003804:	1c6b      	adds	r3, r5, #1
 8003806:	d0f7      	beq.n	80037f8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003808:	b995      	cbnz	r5, 8003830 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003812:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800381c:	2320      	movs	r3, #32
 800381e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003822:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003826:	2300      	movs	r3, #0
 8003828:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800382c:	2003      	movs	r0, #3
 800382e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003830:	f7ff fad2 	bl	8002dd8 <HAL_GetTick>
 8003834:	1bc0      	subs	r0, r0, r7
 8003836:	4285      	cmp	r5, r0
 8003838:	d2dd      	bcs.n	80037f6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800383a:	e7e6      	b.n	800380a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800383c <HAL_UART_Init>:
{
 800383c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800383e:	4604      	mov	r4, r0
 8003840:	b340      	cbz	r0, 8003894 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003842:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003846:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800384a:	b91b      	cbnz	r3, 8003854 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800384c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003850:	f000 fca0 	bl	8004194 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003854:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003856:	2324      	movs	r3, #36	; 0x24
 8003858:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800385c:	68d3      	ldr	r3, [r2, #12]
 800385e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003862:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003864:	4620      	mov	r0, r4
 8003866:	f7ff fea7 	bl	80035b8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003872:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800387a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003882:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003884:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8003886:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003888:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800388a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800388e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003892:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003894:	2001      	movs	r0, #1
}
 8003896:	bd10      	pop	{r4, pc}

08003898 <HAL_UART_Transmit>:
{
 8003898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800389c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 800389e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80038a2:	2b20      	cmp	r3, #32
{
 80038a4:	4604      	mov	r4, r0
 80038a6:	460d      	mov	r5, r1
 80038a8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80038aa:	d14f      	bne.n	800394c <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80038ac:	2900      	cmp	r1, #0
 80038ae:	d04a      	beq.n	8003946 <HAL_UART_Transmit+0xae>
 80038b0:	2a00      	cmp	r2, #0
 80038b2:	d048      	beq.n	8003946 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80038b4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d047      	beq.n	800394c <HAL_UART_Transmit+0xb4>
 80038bc:	2301      	movs	r3, #1
 80038be:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c2:	2300      	movs	r3, #0
 80038c4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038c6:	2321      	movs	r3, #33	; 0x21
 80038c8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80038cc:	f7ff fa84 	bl	8002dd8 <HAL_GetTick>
    huart->TxXferSize = Size;
 80038d0:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80038d4:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80038d6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80038da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80038dc:	b29b      	uxth	r3, r3
 80038de:	b96b      	cbnz	r3, 80038fc <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038e0:	463b      	mov	r3, r7
 80038e2:	4632      	mov	r2, r6
 80038e4:	2140      	movs	r1, #64	; 0x40
 80038e6:	4620      	mov	r0, r4
 80038e8:	f7ff ff80 	bl	80037ec <UART_WaitOnFlagUntilTimeout.constprop.3>
 80038ec:	b9b0      	cbnz	r0, 800391c <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 80038ee:	2320      	movs	r3, #32
 80038f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80038f4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80038f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80038fc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29b      	uxth	r3, r3
 8003902:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003904:	68a3      	ldr	r3, [r4, #8]
 8003906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800390a:	4632      	mov	r2, r6
 800390c:	463b      	mov	r3, r7
 800390e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8003912:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003914:	d10e      	bne.n	8003934 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003916:	f7ff ff69 	bl	80037ec <UART_WaitOnFlagUntilTimeout.constprop.3>
 800391a:	b110      	cbz	r0, 8003922 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 800391c:	2003      	movs	r0, #3
 800391e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003922:	882b      	ldrh	r3, [r5, #0]
 8003924:	6822      	ldr	r2, [r4, #0]
 8003926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800392c:	6923      	ldr	r3, [r4, #16]
 800392e:	b943      	cbnz	r3, 8003942 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8003930:	3502      	adds	r5, #2
 8003932:	e7d2      	b.n	80038da <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003934:	f7ff ff5a 	bl	80037ec <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003938:	2800      	cmp	r0, #0
 800393a:	d1ef      	bne.n	800391c <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	782a      	ldrb	r2, [r5, #0]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	3501      	adds	r5, #1
 8003944:	e7c9      	b.n	80038da <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003946:	2001      	movs	r0, #1
 8003948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800394c:	2002      	movs	r0, #2
}
 800394e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003952 <HAL_UART_Receive>:
{ 
 8003952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003956:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003958:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800395c:	2b20      	cmp	r3, #32
{ 
 800395e:	4604      	mov	r4, r0
 8003960:	460d      	mov	r5, r1
 8003962:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003964:	d152      	bne.n	8003a0c <HAL_UART_Receive+0xba>
    if((pData == NULL ) || (Size == 0)) 
 8003966:	2900      	cmp	r1, #0
 8003968:	d04d      	beq.n	8003a06 <HAL_UART_Receive+0xb4>
 800396a:	2a00      	cmp	r2, #0
 800396c:	d04b      	beq.n	8003a06 <HAL_UART_Receive+0xb4>
    __HAL_LOCK(huart);
 800396e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003972:	2b01      	cmp	r3, #1
 8003974:	d04a      	beq.n	8003a0c <HAL_UART_Receive+0xba>
 8003976:	2301      	movs	r3, #1
 8003978:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397c:	2300      	movs	r3, #0
 800397e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003980:	2322      	movs	r3, #34	; 0x22
 8003982:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8003986:	f7ff fa27 	bl	8002dd8 <HAL_GetTick>
    huart->RxXferSize = Size; 
 800398a:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 800398e:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8003990:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 8003994:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8003996:	b280      	uxth	r0, r0
 8003998:	b930      	cbnz	r0, 80039a8 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 800399a:	2320      	movs	r3, #32
 800399c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 80039a0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80039a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 80039a8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039b0:	68a3      	ldr	r3, [r4, #8]
 80039b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80039b6:	4632      	mov	r2, r6
 80039b8:	463b      	mov	r3, r7
 80039ba:	f04f 0120 	mov.w	r1, #32
 80039be:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039c0:	d112      	bne.n	80039e8 <HAL_UART_Receive+0x96>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80039c2:	f7ff ff13 	bl	80037ec <UART_WaitOnFlagUntilTimeout.constprop.3>
 80039c6:	b110      	cbz	r0, 80039ce <HAL_UART_Receive+0x7c>
          return HAL_TIMEOUT;
 80039c8:	2003      	movs	r0, #3
 80039ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039ce:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80039d0:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039d2:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80039d4:	b922      	cbnz	r2, 80039e0 <HAL_UART_Receive+0x8e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039da:	f825 3b02 	strh.w	r3, [r5], #2
 80039de:	e7d9      	b.n	8003994 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f825 3b01 	strh.w	r3, [r5], #1
 80039e6:	e7d5      	b.n	8003994 <HAL_UART_Receive+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80039e8:	f7ff ff00 	bl	80037ec <UART_WaitOnFlagUntilTimeout.constprop.3>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d1eb      	bne.n	80039c8 <HAL_UART_Receive+0x76>
 80039f0:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80039f2:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	1c6a      	adds	r2, r5, #1
        if(huart->Init.Parity == UART_PARITY_NONE)
 80039f8:	b911      	cbnz	r1, 8003a00 <HAL_UART_Receive+0xae>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039fa:	702b      	strb	r3, [r5, #0]
 80039fc:	4615      	mov	r5, r2
 80039fe:	e7c9      	b.n	8003994 <HAL_UART_Receive+0x42>
 8003a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a04:	e7f9      	b.n	80039fa <HAL_UART_Receive+0xa8>
      return  HAL_ERROR;
 8003a06:	2001      	movs	r0, #1
 8003a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;   
 8003a0c:	2002      	movs	r0, #2
}
 8003a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a12 <HAL_UART_TxCpltCallback>:
 8003a12:	4770      	bx	lr

08003a14 <HAL_UART_RxCpltCallback>:
 8003a14:	4770      	bx	lr

08003a16 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003a16:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003a1a:	2b22      	cmp	r3, #34	; 0x22
{
 8003a1c:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003a1e:	d132      	bne.n	8003a86 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a20:	6883      	ldr	r3, [r0, #8]
 8003a22:	6901      	ldr	r1, [r0, #16]
 8003a24:	6802      	ldr	r2, [r0, #0]
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003a2c:	d11f      	bne.n	8003a6e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a2e:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003a30:	b9c9      	cbnz	r1, 8003a66 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a36:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8003a3a:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8003a3c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8003a3e:	3c01      	subs	r4, #1
 8003a40:	b2a4      	uxth	r4, r4
 8003a42:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003a44:	b96c      	cbnz	r4, 8003a62 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a46:	6803      	ldr	r3, [r0, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a4e:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003a58:	2320      	movs	r3, #32
 8003a5a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003a5e:	f7ff ffd9 	bl	8003a14 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8003a62:	2000      	movs	r0, #0
}
 8003a64:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	f823 2b01 	strh.w	r2, [r3], #1
 8003a6c:	e7e5      	b.n	8003a3a <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003a6e:	b921      	cbnz	r1, 8003a7a <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a70:	1c59      	adds	r1, r3, #1
 8003a72:	6852      	ldr	r2, [r2, #4]
 8003a74:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a76:	701a      	strb	r2, [r3, #0]
 8003a78:	e7e0      	b.n	8003a3c <UART_Receive_IT+0x26>
 8003a7a:	6852      	ldr	r2, [r2, #4]
 8003a7c:	1c59      	adds	r1, r3, #1
 8003a7e:	6281      	str	r1, [r0, #40]	; 0x28
 8003a80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a84:	e7f7      	b.n	8003a76 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8003a86:	2002      	movs	r0, #2
 8003a88:	bd10      	pop	{r4, pc}

08003a8a <HAL_UART_ErrorCallback>:
 8003a8a:	4770      	bx	lr

08003a8c <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a8c:	6803      	ldr	r3, [r0, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a90:	68d9      	ldr	r1, [r3, #12]
{
 8003a92:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8003a94:	0716      	lsls	r6, r2, #28
{
 8003a96:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a98:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8003a9a:	d107      	bne.n	8003aac <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a9c:	0696      	lsls	r6, r2, #26
 8003a9e:	d55a      	bpl.n	8003b56 <HAL_UART_IRQHandler+0xca>
 8003aa0:	068d      	lsls	r5, r1, #26
 8003aa2:	d558      	bpl.n	8003b56 <HAL_UART_IRQHandler+0xca>
}
 8003aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003aa8:	f7ff bfb5 	b.w	8003a16 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003aac:	f015 0501 	ands.w	r5, r5, #1
 8003ab0:	d102      	bne.n	8003ab8 <HAL_UART_IRQHandler+0x2c>
 8003ab2:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003ab6:	d04e      	beq.n	8003b56 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ab8:	07d3      	lsls	r3, r2, #31
 8003aba:	d505      	bpl.n	8003ac8 <HAL_UART_IRQHandler+0x3c>
 8003abc:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003abe:	bf42      	ittt	mi
 8003ac0:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8003ac2:	f043 0301 	orrmi.w	r3, r3, #1
 8003ac6:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ac8:	0750      	lsls	r0, r2, #29
 8003aca:	d504      	bpl.n	8003ad6 <HAL_UART_IRQHandler+0x4a>
 8003acc:	b11d      	cbz	r5, 8003ad6 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ace:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ad0:	f043 0302 	orr.w	r3, r3, #2
 8003ad4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ad6:	0793      	lsls	r3, r2, #30
 8003ad8:	d504      	bpl.n	8003ae4 <HAL_UART_IRQHandler+0x58>
 8003ada:	b11d      	cbz	r5, 8003ae4 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003adc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ade:	f043 0304 	orr.w	r3, r3, #4
 8003ae2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ae4:	0716      	lsls	r6, r2, #28
 8003ae6:	d504      	bpl.n	8003af2 <HAL_UART_IRQHandler+0x66>
 8003ae8:	b11d      	cbz	r5, 8003af2 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003aea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003aec:	f043 0308 	orr.w	r3, r3, #8
 8003af0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003af2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d066      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003af8:	0695      	lsls	r5, r2, #26
 8003afa:	d504      	bpl.n	8003b06 <HAL_UART_IRQHandler+0x7a>
 8003afc:	0688      	lsls	r0, r1, #26
 8003afe:	d502      	bpl.n	8003b06 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8003b00:	4620      	mov	r0, r4
 8003b02:	f7ff ff88 	bl	8003a16 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b0a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003b0c:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8003b0e:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b10:	d402      	bmi.n	8003b18 <HAL_UART_IRQHandler+0x8c>
 8003b12:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003b16:	d01a      	beq.n	8003b4e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8003b18:	f7ff fd40 	bl	800359c <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	0652      	lsls	r2, r2, #25
 8003b22:	d510      	bpl.n	8003b46 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b24:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8003b26:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b2c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8003b2e:	b150      	cbz	r0, 8003b46 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b30:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <HAL_UART_IRQHandler+0x13c>)
 8003b32:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b34:	f7ff f9d0 	bl	8002ed8 <HAL_DMA_Abort_IT>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d044      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8003b3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b42:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003b44:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003b46:	4620      	mov	r0, r4
 8003b48:	f7ff ff9f 	bl	8003a8a <HAL_UART_ErrorCallback>
 8003b4c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003b4e:	f7ff ff9c 	bl	8003a8a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b52:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003b54:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b56:	0616      	lsls	r6, r2, #24
 8003b58:	d527      	bpl.n	8003baa <HAL_UART_IRQHandler+0x11e>
 8003b5a:	060d      	lsls	r5, r1, #24
 8003b5c:	d525      	bpl.n	8003baa <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b5e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003b62:	2a21      	cmp	r2, #33	; 0x21
 8003b64:	d12f      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b66:	68a2      	ldr	r2, [r4, #8]
 8003b68:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003b6c:	6a22      	ldr	r2, [r4, #32]
 8003b6e:	d117      	bne.n	8003ba0 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b70:	8811      	ldrh	r1, [r2, #0]
 8003b72:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003b76:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003b78:	6921      	ldr	r1, [r4, #16]
 8003b7a:	b979      	cbnz	r1, 8003b9c <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8003b7c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8003b7e:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8003b80:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003b82:	3a01      	subs	r2, #1
 8003b84:	b292      	uxth	r2, r2
 8003b86:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003b88:	b9ea      	cbnz	r2, 8003bc6 <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b90:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b98:	60da      	str	r2, [r3, #12]
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8003b9c:	3201      	adds	r2, #1
 8003b9e:	e7ee      	b.n	8003b7e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ba0:	1c51      	adds	r1, r2, #1
 8003ba2:	6221      	str	r1, [r4, #32]
 8003ba4:	7812      	ldrb	r2, [r2, #0]
 8003ba6:	605a      	str	r2, [r3, #4]
 8003ba8:	e7ea      	b.n	8003b80 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003baa:	0650      	lsls	r0, r2, #25
 8003bac:	d50b      	bpl.n	8003bc6 <HAL_UART_IRQHandler+0x13a>
 8003bae:	064a      	lsls	r2, r1, #25
 8003bb0:	d509      	bpl.n	8003bc6 <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003bba:	2320      	movs	r3, #32
 8003bbc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f7ff ff26 	bl	8003a12 <HAL_UART_TxCpltCallback>
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	08003bcd 	.word	0x08003bcd

08003bcc <UART_DMAAbortOnError>:
{
 8003bcc:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bce:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8003bd4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003bd6:	f7ff ff58 	bl	8003a8a <HAL_UART_ErrorCallback>
 8003bda:	bd08      	pop	{r3, pc}

08003bdc <ai_network_1_data_weights_get>:
    0x36, 0x3c, 0x0f, 0x5a, 0xa7, 0x3c, 0xe5, 0x83, 0x95,
    0xbc, 0x8e, 0x12, 0xf8, 0x3c, 0xb1, 0x54, 0xd9, 0xbc
  };

  return AI_HANDLE_PTR(s_network_1_weights);
}
 8003bdc:	4800      	ldr	r0, [pc, #0]	; (8003be0 <ai_network_1_data_weights_get+0x4>)
 8003bde:	4770      	bx	lr
 8003be0:	08005400 	.word	0x08005400

08003be4 <ai_network_1_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_1_get_error(ai_handle network)
{
 8003be4:	b508      	push	{r3, lr}
  return ai_platform_network_get_error(network);
 8003be6:	f7fc fbab 	bl	8000340 <ai_platform_network_get_error>
}
 8003bea:	bd08      	pop	{r3, pc}

08003bec <ai_network_1_create>:

AI_API_ENTRY
ai_error ai_network_1_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003bec:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8003bee:	2300      	movs	r3, #0
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	4a03      	ldr	r2, [pc, #12]	; (8003c04 <ai_network_1_create+0x18>)
 8003bf8:	f7fc fbca 	bl	8000390 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003bfc:	b003      	add	sp, #12
 8003bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c02:	bf00      	nop
 8003c04:	200001a0 	.word	0x200001a0

08003c08 <ai_network_1_init>:
}

AI_API_ENTRY
ai_bool ai_network_1_init(
  ai_handle network, const ai_network_params* params)
{
 8003c08:	b510      	push	{r4, lr}
 8003c0a:	460c      	mov	r4, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8003c0c:	f7fc fc1d 	bl	800044a <ai_platform_network_init>
  if ( !net_ctx ) return false;
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d03f      	beq.n	8003c94 <ai_network_1_init+0x8c>
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8003c14:	4a20      	ldr	r2, [pc, #128]	; (8003c98 <ai_network_1_init+0x90>)
 8003c16:	68e3      	ldr	r3, [r4, #12]
 8003c18:	6811      	ldr	r1, [r2, #0]
  dense_1_weights_array.data = weights + 0;
 8003c1a:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8003c1c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  dense_1_weights_array.data_start = weights + 0;
 8003c20:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8003c22:	6011      	str	r1, [r2, #0]
  dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8003c24:	4a1d      	ldr	r2, [pc, #116]	; (8003c9c <ai_network_1_init+0x94>)
 8003c26:	6811      	ldr	r1, [r2, #0]
 8003c28:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8003c2c:	6011      	str	r1, [r2, #0]
  dense_1_bias_array.data = weights + 65536;
 8003c2e:	f503 3180 	add.w	r1, r3, #65536	; 0x10000
 8003c32:	6091      	str	r1, [r2, #8]
  dense_1_bias_array.data_start = weights + 65536;
 8003c34:	60d1      	str	r1, [r2, #12]
  main_output_weights_array.format |= AI_FMT_FLAG_CONST;
 8003c36:	4a1a      	ldr	r2, [pc, #104]	; (8003ca0 <ai_network_1_init+0x98>)
 8003c38:	6811      	ldr	r1, [r2, #0]
 8003c3a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8003c3e:	6011      	str	r1, [r2, #0]
  main_output_weights_array.data = weights + 66560;
 8003c40:	f503 3182 	add.w	r1, r3, #66560	; 0x10400
 8003c44:	6091      	str	r1, [r2, #8]
  main_output_weights_array.data_start = weights + 66560;
 8003c46:	60d1      	str	r1, [r2, #12]
  main_output_bias_array.format |= AI_FMT_FLAG_CONST;
 8003c48:	4a16      	ldr	r2, [pc, #88]	; (8003ca4 <ai_network_1_init+0x9c>)
 8003c4a:	6811      	ldr	r1, [r2, #0]
  main_output_bias_array.data = weights + 75776;
 8003c4c:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
  main_output_bias_array.format |= AI_FMT_FLAG_CONST;
 8003c50:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  main_output_bias_array.data = weights + 75776;
 8003c54:	6093      	str	r3, [r2, #8]
  main_output_bias_array.data_start = weights + 75776;
 8003c56:	60d3      	str	r3, [r2, #12]
  main_output_bias_array.format |= AI_FMT_FLAG_CONST;
 8003c58:	6011      	str	r1, [r2, #0]
  AI_FLAG_SET(net_ctx->flags, AI_NETWORK_FLAG_OUT_COPY);
 8003c5a:	6882      	ldr	r2, [r0, #8]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8003c5c:	69e3      	ldr	r3, [r4, #28]
  dense_1_output_array.data = activations + 256;
 8003c5e:	4912      	ldr	r1, [pc, #72]	; (8003ca8 <ai_network_1_init+0xa0>)
  AI_FLAG_SET(net_ctx->flags, AI_NETWORK_FLAG_OUT_COPY);
 8003c60:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003c64:	6082      	str	r2, [r0, #8]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8003c66:	3303      	adds	r3, #3
    main_input_output_in_array.data = activations + 0;
 8003c68:	4a10      	ldr	r2, [pc, #64]	; (8003cac <ai_network_1_init+0xa4>)
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8003c6a:	f023 0303 	bic.w	r3, r3, #3
    main_input_output_in_array.data = activations + 0;
 8003c6e:	6093      	str	r3, [r2, #8]
  main_input_output_in_array.data_start = activations + 0;
 8003c70:	60d3      	str	r3, [r2, #12]
  main_input_output_out_array.data = activations + 0;
 8003c72:	4a0f      	ldr	r2, [pc, #60]	; (8003cb0 <ai_network_1_init+0xa8>)
 8003c74:	6093      	str	r3, [r2, #8]
  main_input_output_out_array.data_start = activations + 0;
 8003c76:	60d3      	str	r3, [r2, #12]
  dense_1_output_array.data = activations + 256;
 8003c78:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8003c7c:	608a      	str	r2, [r1, #8]
  dense_1_output_array.data_start = activations + 256;
 8003c7e:	60ca      	str	r2, [r1, #12]
  activation_1_output_array.data = activations + 256;
 8003c80:	490c      	ldr	r1, [pc, #48]	; (8003cb4 <ai_network_1_init+0xac>)
 8003c82:	608a      	str	r2, [r1, #8]
  activation_1_output_array.data_start = activations + 256;
 8003c84:	60ca      	str	r2, [r1, #12]
  main_output_output_array.data = activations + 0;
 8003c86:	4a0c      	ldr	r2, [pc, #48]	; (8003cb8 <ai_network_1_init+0xb0>)
 8003c88:	6093      	str	r3, [r2, #8]
  main_output_output_array.data_start = activations + 0;
 8003c8a:	60d3      	str	r3, [r2, #12]
  main_output_nl_output_array.data = activations + 0;
 8003c8c:	4a0b      	ldr	r2, [pc, #44]	; (8003cbc <ai_network_1_init+0xb4>)

  ai_bool ok = true;
  ok &= network_1_configure_weights(net_ctx, &params->params);
  ok &= network_1_configure_activations(net_ctx, &params->activations);
  
  return ok;
 8003c8e:	2001      	movs	r0, #1
  main_output_nl_output_array.data = activations + 0;
 8003c90:	6093      	str	r3, [r2, #8]
  main_output_nl_output_array.data_start = activations + 0;
 8003c92:	60d3      	str	r3, [r2, #12]
}
 8003c94:	bd10      	pop	{r4, pc}
 8003c96:	bf00      	nop
 8003c98:	20000190 	.word	0x20000190
 8003c9c:	20000110 	.word	0x20000110
 8003ca0:	20000340 	.word	0x20000340
 8003ca4:	20000274 	.word	0x20000274
 8003ca8:	2000015c 	.word	0x2000015c
 8003cac:	2000020c 	.word	0x2000020c
 8003cb0:	20000240 	.word	0x20000240
 8003cb4:	200000dc 	.word	0x200000dc
 8003cb8:	2000030c 	.word	0x2000030c
 8003cbc:	200002d8 	.word	0x200002d8

08003cc0 <ai_network_1_run>:

AI_API_ENTRY
ai_i32 ai_network_1_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8003cc0:	f7fc bc0e 	b.w	80004e0 <ai_platform_network_process>

08003cc4 <MX_X_CUBE_AI_Init>:

static ai_buffer ai_input[AI_NETWORK_1_IN_NUM] = { AI_NETWORK_1_IN_1 };
static ai_buffer ai_output[AI_NETWORK_1_OUT_NUM] = { AI_NETWORK_1_OUT_1 };

void MX_X_CUBE_AI_Init(void)
{
 8003cc4:	b530      	push	{r4, r5, lr}
    /* USER CODE BEGIN 0 */
    ai_error err;
    err = ai_network_1_create(&network, AI_NETWORK_1_DATA_CONFIG);
 8003cc6:	4d17      	ldr	r5, [pc, #92]	; (8003d24 <MX_X_CUBE_AI_Init+0x60>)
{
 8003cc8:	b089      	sub	sp, #36	; 0x24
    err = ai_network_1_create(&network, AI_NETWORK_1_DATA_CONFIG);
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4628      	mov	r0, r5
 8003cce:	f7ff ff8d 	bl	8003bec <ai_network_1_create>
    if (err.type != AI_ERROR_NONE) {
    	//printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
    }

    const ai_network_params params = {AI_NETWORK_1_DATA_WEIGHTS(ai_network_1_data_weights_get()),
 8003cd2:	f248 0310 	movw	r3, #32784	; 0x8010
 8003cd6:	2401      	movs	r4, #1
 8003cd8:	f8ad 3000 	strh.w	r3, [sp]
 8003cdc:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <MX_X_CUBE_AI_Init+0x64>)
 8003cde:	9302      	str	r3, [sp, #8]
 8003ce0:	f8ad 4002 	strh.w	r4, [sp, #2]
 8003ce4:	f8ad 4004 	strh.w	r4, [sp, #4]
 8003ce8:	f8ad 4006 	strh.w	r4, [sp, #6]
 8003cec:	f7ff ff76 	bl	8003bdc <ai_network_1_data_weights_get>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	f8ad 3010 	strh.w	r3, [sp, #16]
 8003cf6:	f240 5304 	movw	r3, #1284	; 0x504
 8003cfa:	9003      	str	r0, [sp, #12]
 8003cfc:	9306      	str	r3, [sp, #24]
    		AI_NETWORK_1_DATA_ACTIVATIONS(activations) };
    if (!ai_network_1_init(network, &params)) {
 8003cfe:	4669      	mov	r1, sp
    const ai_network_params params = {AI_NETWORK_1_DATA_WEIGHTS(ai_network_1_data_weights_get()),
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <MX_X_CUBE_AI_Init+0x68>)
    if (!ai_network_1_init(network, &params)) {
 8003d02:	6828      	ldr	r0, [r5, #0]
    const ai_network_params params = {AI_NETWORK_1_DATA_WEIGHTS(ai_network_1_data_weights_get()),
 8003d04:	f8ad 4012 	strh.w	r4, [sp, #18]
 8003d08:	f8ad 4014 	strh.w	r4, [sp, #20]
 8003d0c:	f8ad 4016 	strh.w	r4, [sp, #22]
 8003d10:	9307      	str	r3, [sp, #28]
    if (!ai_network_1_init(network, &params)) {
 8003d12:	f7ff ff79 	bl	8003c08 <ai_network_1_init>
 8003d16:	b910      	cbnz	r0, 8003d1e <MX_X_CUBE_AI_Init+0x5a>
    	err = ai_network_1_get_error(network);
 8003d18:	6828      	ldr	r0, [r5, #0]
 8003d1a:	f7ff ff63 	bl	8003be4 <ai_network_1_get_error>
    }

    /* USER CODE END 0 */
}
 8003d1e:	b009      	add	sp, #36	; 0x24
 8003d20:	bd30      	pop	{r4, r5, pc}
 8003d22:	bf00      	nop
 8003d24:	20000914 	.word	0x20000914
 8003d28:	00012824 	.word	0x00012824
 8003d2c:	20000410 	.word	0x20000410

08003d30 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(const ai_float *in_data, ai_float *out_data, const ai_u16 batch_size)
{
 8003d30:	b538      	push	{r3, r4, r5, lr}
    /* USER CODE BEGIN 1 */
	ai_i32 nbatch;
	ai_error err;
	/* initialize input/output buffer handlers */
	ai_input[0].n_batches = batch_size;
 8003d32:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <MX_X_CUBE_AI_Process+0x28>)
	ai_input[0].data = AI_HANDLE_PTR(in_data);
	ai_output[0].n_batches = batch_size;
	ai_output[0].data = AI_HANDLE_PTR(out_data);
	nbatch = ai_network_1_run(network, &ai_input[0], &ai_output[0]);
 8003d34:	4d09      	ldr	r5, [pc, #36]	; (8003d5c <MX_X_CUBE_AI_Process+0x2c>)
	ai_input[0].n_batches = batch_size;
 8003d36:	805a      	strh	r2, [r3, #2]
{
 8003d38:	4614      	mov	r4, r2
	ai_output[0].n_batches = batch_size;
 8003d3a:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <MX_X_CUBE_AI_Process+0x30>)
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8003d3c:	60d8      	str	r0, [r3, #12]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8003d3e:	60d1      	str	r1, [r2, #12]
	ai_output[0].n_batches = batch_size;
 8003d40:	8054      	strh	r4, [r2, #2]
	nbatch = ai_network_1_run(network, &ai_input[0], &ai_output[0]);
 8003d42:	4619      	mov	r1, r3
 8003d44:	6828      	ldr	r0, [r5, #0]
 8003d46:	f7ff ffbb 	bl	8003cc0 <ai_network_1_run>
	if (nbatch != batch_size) {
 8003d4a:	42a0      	cmp	r0, r4
 8003d4c:	d002      	beq.n	8003d54 <MX_X_CUBE_AI_Process+0x24>
		err = ai_network_1_get_error(network);
 8003d4e:	6828      	ldr	r0, [r5, #0]
 8003d50:	f7ff ff48 	bl	8003be4 <ai_network_1_get_error>
 8003d54:	bd38      	pop	{r3, r4, r5, pc}
 8003d56:	bf00      	nop
 8003d58:	20000350 	.word	0x20000350
 8003d5c:	20000914 	.word	0x20000914
 8003d60:	20000360 	.word	0x20000360

08003d64 <MX_CRC_Init>:

/* CRC init function */
void MX_CRC_Init(void)
{

  hcrc.Instance = CRC;
 8003d64:	4805      	ldr	r0, [pc, #20]	; (8003d7c <MX_CRC_Init+0x18>)
{
 8003d66:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <MX_CRC_Init+0x1c>)
 8003d6a:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003d6c:	f7ff f8a2 	bl	8002eb4 <HAL_CRC_Init>
 8003d70:	b118      	cbz	r0, 8003d7a <MX_CRC_Init+0x16>
  {
    Error_Handler();
  }

}
 8003d72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003d76:	f000 b975 	b.w	8004064 <Error_Handler>
 8003d7a:	bd08      	pop	{r3, pc}
 8003d7c:	20000924 	.word	0x20000924
 8003d80:	40023000 	.word	0x40023000

08003d84 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8003d84:	6802      	ldr	r2, [r0, #0]
 8003d86:	4b09      	ldr	r3, [pc, #36]	; (8003dac <HAL_CRC_MspInit+0x28>)
 8003d88:	429a      	cmp	r2, r3
{
 8003d8a:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8003d8c:	d10b      	bne.n	8003da6 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9301      	str	r3, [sp, #4]
 8003d92:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <HAL_CRC_MspInit+0x2c>)
 8003d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003da6:	b002      	add	sp, #8
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40023000 	.word	0x40023000
 8003db0:	40023800 	.word	0x40023800

08003db4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003db4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db6:	2214      	movs	r2, #20
{
 8003db8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dba:	eb0d 0002 	add.w	r0, sp, r2
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	f000 fa92 	bl	80042e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dc4:	2400      	movs	r4, #0
 8003dc6:	4b35      	ldr	r3, [pc, #212]	; (8003e9c <MX_GPIO_Init+0xe8>)
 8003dc8:	9400      	str	r4, [sp, #0]
 8003dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003dcc:	4e34      	ldr	r6, [pc, #208]	; (8003ea0 <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dce:	f042 0204 	orr.w	r2, r2, #4
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd6:	f002 0204 	and.w	r2, r2, #4
 8003dda:	9200      	str	r2, [sp, #0]
 8003ddc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003dde:	9401      	str	r4, [sp, #4]
 8003de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30
 8003de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dea:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003dee:	9201      	str	r2, [sp, #4]
 8003df0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df2:	9402      	str	r4, [sp, #8]
 8003df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8003dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dfe:	f002 0201 	and.w	r2, r2, #1
 8003e02:	9202      	str	r2, [sp, #8]
 8003e04:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e06:	9403      	str	r4, [sp, #12]
 8003e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e0a:	f042 0202 	orr.w	r2, r2, #2
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e12:	f002 0202 	and.w	r2, r2, #2
 8003e16:	9203      	str	r2, [sp, #12]
 8003e18:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e1a:	9404      	str	r4, [sp, #16]
 8003e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e1e:	f042 0208 	orr.w	r2, r2, #8
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003e2a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e2c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003e2e:	4630      	mov	r0, r6
 8003e30:	2180      	movs	r1, #128	; 0x80
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e32:	2503      	movs	r5, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e34:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003e36:	f7ff f941 	bl	80030bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8003e3a:	f64f 737f 	movw	r3, #65407	; 0xff7f
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e3e:	a905      	add	r1, sp, #20
 8003e40:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8003e42:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e44:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e46:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e48:	f7ff f858 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003e4c:	f649 13ff 	movw	r3, #39423	; 0x99ff
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e50:	a905      	add	r1, sp, #20
 8003e52:	4814      	ldr	r0, [pc, #80]	; (8003ea4 <MX_GPIO_Init+0xf0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003e54:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e56:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e58:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e5a:	f7ff f84f 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8003e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e62:	a905      	add	r1, sp, #20
 8003e64:	4810      	ldr	r0, [pc, #64]	; (8003ea8 <MX_GPIO_Init+0xf4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8003e66:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e68:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e6c:	f7ff f846 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e74:	2301      	movs	r3, #1
 8003e76:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003e78:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e7a:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003e7c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e7e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e80:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003e82:	f7ff f83b 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e86:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e88:	a905      	add	r1, sp, #20
 8003e8a:	4808      	ldr	r0, [pc, #32]	; (8003eac <MX_GPIO_Init+0xf8>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e8c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e8e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e90:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e92:	f7ff f833 	bl	8002efc <HAL_GPIO_Init>

}
 8003e96:	b00a      	add	sp, #40	; 0x28
 8003e98:	bd70      	pop	{r4, r5, r6, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40020800 	.word	0x40020800
 8003ea4:	40020000 	.word	0x40020000
 8003ea8:	40020400 	.word	0x40020400
 8003eac:	40020c00 	.word	0x40020c00

08003eb0 <HandleUARTCommand>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HandleUARTCommand(char * CMD_String, int String_Length)
{
 8003eb0:	b570      	push	{r4, r5, r6, lr}
	//HAL_UART_Transmit(&huart1, (uint8_t *)CMD_String, String_Length, 100);
	if (strncmp(CMD_String,"AI-DEVICE",9)==0){
 8003eb2:	2209      	movs	r2, #9
{
 8003eb4:	460d      	mov	r5, r1
	if (strncmp(CMD_String,"AI-DEVICE",9)==0){
 8003eb6:	4914      	ldr	r1, [pc, #80]	; (8003f08 <HandleUARTCommand+0x58>)
{
 8003eb8:	4604      	mov	r4, r0
	if (strncmp(CMD_String,"AI-DEVICE",9)==0){
 8003eba:	f000 fa1d 	bl	80042f8 <strncmp>
 8003ebe:	b958      	cbnz	r0, 8003ed8 <HandleUARTCommand+0x28>
		while (HAL_UART_Transmit(&huart1, (uint8_t *)("OK\r\n"), 2, 1000) != HAL_OK){};
 8003ec0:	4d12      	ldr	r5, [pc, #72]	; (8003f0c <HandleUARTCommand+0x5c>)
 8003ec2:	4c13      	ldr	r4, [pc, #76]	; (8003f10 <HandleUARTCommand+0x60>)
 8003ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ec8:	2202      	movs	r2, #2
 8003eca:	4629      	mov	r1, r5
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f7ff fce3 	bl	8003898 <HAL_UART_Transmit>
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d1f6      	bne.n	8003ec4 <HandleUARTCommand+0x14>
 8003ed6:	bd70      	pop	{r4, r5, r6, pc}
	}
	else if (strncmp(CMD_String,"START-TEST",10)==0){
 8003ed8:	220a      	movs	r2, #10
 8003eda:	490e      	ldr	r1, [pc, #56]	; (8003f14 <HandleUARTCommand+0x64>)
 8003edc:	4620      	mov	r0, r4
 8003ede:	f000 fa0b 	bl	80042f8 <strncmp>
 8003ee2:	b948      	cbnz	r0, 8003ef8 <HandleUARTCommand+0x48>
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <HandleUARTCommand+0x60>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68d3      	ldr	r3, [r2, #12]
 8003eea:	f023 0320 	bic.w	r3, r3, #32
 8003eee:	60d3      	str	r3, [r2, #12]
		//HAL_UART_Transmit(&huart1, (uint8_t *)("OK\r\n"), 2, 1000);
		//HAL_UART_Receive(&huart1,(uint8_t *)pfData,256,5000);
		GET_DATA = 1;
 8003ef0:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <HandleUARTCommand+0x68>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	bd70      	pop	{r4, r5, r6, pc}
		//__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
	}
	else{
		HAL_UART_Transmit(&huart1, (uint8_t *)CMD_String, String_Length, 100);
 8003ef8:	b2aa      	uxth	r2, r5
 8003efa:	4621      	mov	r1, r4
 8003efc:	2364      	movs	r3, #100	; 0x64
 8003efe:	4804      	ldr	r0, [pc, #16]	; (8003f10 <HandleUARTCommand+0x60>)
	}
}
 8003f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_UART_Transmit(&huart1, (uint8_t *)CMD_String, String_Length, 100);
 8003f04:	f7ff bcc8 	b.w	8003898 <HAL_UART_Transmit>
 8003f08:	08017c34 	.word	0x08017c34
 8003f0c:	08017c3e 	.word	0x08017c3e
 8003f10:	20000a30 	.word	0x20000a30
 8003f14:	08017c43 	.word	0x08017c43
 8003f18:	20000919 	.word	0x20000919

08003f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f1c:	b530      	push	{r4, r5, lr}
 8003f1e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f20:	2230      	movs	r2, #48	; 0x30
 8003f22:	2100      	movs	r1, #0
 8003f24:	a808      	add	r0, sp, #32
 8003f26:	f000 f9df 	bl	80042e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	2214      	movs	r2, #20
 8003f2e:	a803      	add	r0, sp, #12
 8003f30:	f000 f9da 	bl	80042e8 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f34:	2400      	movs	r4, #0
 8003f36:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <SystemClock_Config+0x8c>)
 8003f38:	9401      	str	r4, [sp, #4]
 8003f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f4c:	4b17      	ldr	r3, [pc, #92]	; (8003fac <SystemClock_Config+0x90>)
 8003f4e:	9402      	str	r4, [sp, #8]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f5e:	9302      	str	r3, [sp, #8]
 8003f60:	9b02      	ldr	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f62:	2301      	movs	r3, #1
 8003f64:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f6a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f70:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003f72:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f74:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f76:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f78:	2304      	movs	r3, #4
 8003f7a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003f7c:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003f7e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f80:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f82:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f84:	f7ff f8a0 	bl	80030c8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f88:	230f      	movs	r3, #15
 8003f8a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f90:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f92:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f98:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f9a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f9c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f9e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003fa0:	f7ff fa42 	bl	8003428 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8003fa4:	b015      	add	sp, #84	; 0x54
 8003fa6:	bd30      	pop	{r4, r5, pc}
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40007000 	.word	0x40007000

08003fb0 <main>:
{
 8003fb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8003fb4:	4c27      	ldr	r4, [pc, #156]	; (8004054 <main+0xa4>)
		  AI_PROCESS = 1;
 8003fb6:	4d28      	ldr	r5, [pc, #160]	; (8004058 <main+0xa8>)
	  if (GET_DATA==1){
 8003fb8:	4e28      	ldr	r6, [pc, #160]	; (800405c <main+0xac>)
{
 8003fba:	b0cb      	sub	sp, #300	; 0x12c
  HAL_Init();
 8003fbc:	f7fe fee6 	bl	8002d8c <HAL_Init>
  SystemClock_Config();
 8003fc0:	f7ff ffac 	bl	8003f1c <SystemClock_Config>
  MX_GPIO_Init();
 8003fc4:	f7ff fef6 	bl	8003db4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003fc8:	f000 f8c8 	bl	800415c <MX_USART1_UART_Init>
  MX_CRC_Init();
 8003fcc:	f7ff feca 	bl	8003d64 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8003fd0:	f7ff fe78 	bl	8003cc4 <MX_X_CUBE_AI_Init>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8003fd4:	6822      	ldr	r2, [r4, #0]
 8003fd6:	68d3      	ldr	r3, [r2, #12]
 8003fd8:	f043 0320 	orr.w	r3, r3, #32
 8003fdc:	60d3      	str	r3, [r2, #12]
 8003fde:	462f      	mov	r7, r5
	  if (GET_DATA==1){
 8003fe0:	7833      	ldrb	r3, [r6, #0]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d11b      	bne.n	800401e <main+0x6e>
		  while (HAL_UART_Transmit(&huart1, (uint8_t *)("OK\r\n"), 2, 1000) != HAL_OK){};
 8003fe6:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8004060 <main+0xb0>
 8003fea:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8004054 <main+0xa4>
 8003fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	f7ff fc4e 	bl	8003898 <HAL_UART_Transmit>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d1f6      	bne.n	8003fee <main+0x3e>
		  while (HAL_UART_Receive(&huart1, (uint8_t *)pfData, AI_NETWORK_1_IN_1_SIZE*sizeof(ai_float), 5000) != HAL_OK){};
 8004000:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8004054 <main+0xa4>
 8004004:	f241 3388 	movw	r3, #5000	; 0x1388
 8004008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800400c:	a90a      	add	r1, sp, #40	; 0x28
 800400e:	4640      	mov	r0, r8
 8004010:	f7ff fc9f 	bl	8003952 <HAL_UART_Receive>
 8004014:	2800      	cmp	r0, #0
 8004016:	d1f5      	bne.n	8004004 <main+0x54>
		  AI_PROCESS = 1;
 8004018:	2301      	movs	r3, #1
		  GET_DATA = 0;
 800401a:	7030      	strb	r0, [r6, #0]
		  AI_PROCESS = 1;
 800401c:	702b      	strb	r3, [r5, #0]
	  if (AI_PROCESS == 1)
 800401e:	782a      	ldrb	r2, [r5, #0]
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	2a01      	cmp	r2, #1
 8004024:	d1dc      	bne.n	8003fe0 <main+0x30>
		  MX_X_CUBE_AI_Process((const ai_float *)pfData, out_data, batch_size);
 8004026:	a901      	add	r1, sp, #4
 8004028:	a80a      	add	r0, sp, #40	; 0x28
 800402a:	f7ff fe81 	bl	8003d30 <MX_X_CUBE_AI_Process>
		  while (HAL_UART_Transmit(&huart1, (uint8_t *)out_data, AI_NETWORK_1_OUT_1_SIZE*sizeof(ai_float), 5000) != HAL_OK){};
 800402e:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8004054 <main+0xa4>
 8004032:	f241 3388 	movw	r3, #5000	; 0x1388
 8004036:	2224      	movs	r2, #36	; 0x24
 8004038:	a901      	add	r1, sp, #4
 800403a:	4640      	mov	r0, r8
 800403c:	f7ff fc2c 	bl	8003898 <HAL_UART_Transmit>
 8004040:	2800      	cmp	r0, #0
 8004042:	d1f6      	bne.n	8004032 <main+0x82>
		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8004044:	6822      	ldr	r2, [r4, #0]
		  AI_PROCESS = 0;
 8004046:	7038      	strb	r0, [r7, #0]
		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8004048:	68d3      	ldr	r3, [r2, #12]
 800404a:	f043 0320 	orr.w	r3, r3, #32
 800404e:	60d3      	str	r3, [r2, #12]
 8004050:	e7c6      	b.n	8003fe0 <main+0x30>
 8004052:	bf00      	nop
 8004054:	20000a30 	.word	0x20000a30
 8004058:	20000918 	.word	0x20000918
 800405c:	20000919 	.word	0x20000919
 8004060:	08017c3e 	.word	0x08017c3e

08004064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004064:	4770      	bx	lr
	...

08004068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004068:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <HAL_MspInit+0x34>)
 800406c:	2100      	movs	r1, #0
 800406e:	9100      	str	r1, [sp, #0]
 8004070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004076:	645a      	str	r2, [r3, #68]	; 0x44
 8004078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800407a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800407e:	9200      	str	r2, [sp, #0]
 8004080:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004082:	9101      	str	r1, [sp, #4]
 8004084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004086:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800408a:	641a      	str	r2, [r3, #64]	; 0x40
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004096:	b002      	add	sp, #8
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800

080040a0 <NMI_Handler>:
 80040a0:	4770      	bx	lr

080040a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040a2:	e7fe      	b.n	80040a2 <HardFault_Handler>

080040a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040a4:	e7fe      	b.n	80040a4 <MemManage_Handler>

080040a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040a6:	e7fe      	b.n	80040a6 <BusFault_Handler>

080040a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040a8:	e7fe      	b.n	80040a8 <UsageFault_Handler>

080040aa <SVC_Handler>:
 80040aa:	4770      	bx	lr

080040ac <DebugMon_Handler>:
 80040ac:	4770      	bx	lr

080040ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040ae:	4770      	bx	lr

080040b0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040b0:	f7fe be86 	b.w	8002dc0 <HAL_IncTick>

080040b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80040b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80040b6:	4c10      	ldr	r4, [pc, #64]	; (80040f8 <USART1_IRQHandler+0x44>)
 80040b8:	4620      	mov	r0, r4
 80040ba:	f7ff fce7 	bl	8003a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_IT_SOURCE(&huart1,UART_IT_RXNE))
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	0692      	lsls	r2, r2, #26
 80040c4:	d517      	bpl.n	80040f6 <USART1_IRQHandler+0x42>
  {
  	  __HAL_UART_CLEAR_FLAG(&huart1,UART_IT_RXNE);
 80040c6:	4a0d      	ldr	r2, [pc, #52]	; (80040fc <USART1_IRQHandler+0x48>)
 80040c8:	601a      	str	r2, [r3, #0]
  	  byte_data = USART1->DR;
 80040ca:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <USART1_IRQHandler+0x4c>)
 80040cc:	4a0d      	ldr	r2, [pc, #52]	; (8004104 <USART1_IRQHandler+0x50>)
 80040ce:	685b      	ldr	r3, [r3, #4]

  	  CMD[CMD_Length] = (char)byte_data;
 80040d0:	480d      	ldr	r0, [pc, #52]	; (8004108 <USART1_IRQHandler+0x54>)
  	  byte_data = USART1->DR;
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	7013      	strb	r3, [r2, #0]
  	  CMD[CMD_Length] = (char)byte_data;
 80040d6:	4a0d      	ldr	r2, [pc, #52]	; (800410c <USART1_IRQHandler+0x58>)
 80040d8:	6811      	ldr	r1, [r2, #0]

  	  if (byte_data==10 || byte_data==13)
 80040da:	2b0a      	cmp	r3, #10
  	  CMD[CMD_Length] = (char)byte_data;
 80040dc:	5443      	strb	r3, [r0, r1]
 80040de:	4614      	mov	r4, r2
  	  if (byte_data==10 || byte_data==13)
 80040e0:	d001      	beq.n	80040e6 <USART1_IRQHandler+0x32>
 80040e2:	2b0d      	cmp	r3, #13
 80040e4:	d105      	bne.n	80040f2 <USART1_IRQHandler+0x3e>
  	  {
  		//  CMD_Flag = 1;
  		  HandleUARTCommand(CMD, CMD_Length);
 80040e6:	4808      	ldr	r0, [pc, #32]	; (8004108 <USART1_IRQHandler+0x54>)
 80040e8:	f7ff fee2 	bl	8003eb0 <HandleUARTCommand>
  		  CMD_Length = 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	6023      	str	r3, [r4, #0]
 80040f0:	bd10      	pop	{r4, pc}
  		//  CMD_Flag = 0;
  	  }
  	  else
  	  {
  		  CMD_Length++;
 80040f2:	3101      	adds	r1, #1
 80040f4:	6011      	str	r1, [r2, #0]
 80040f6:	bd10      	pop	{r4, pc}
 80040f8:	20000a30 	.word	0x20000a30
 80040fc:	efffffdf 	.word	0xefffffdf
 8004100:	40011000 	.word	0x40011000
 8004104:	2000092c 	.word	0x2000092c
 8004108:	2000092d 	.word	0x2000092d
 800410c:	2000091c 	.word	0x2000091c

08004110 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004110:	490f      	ldr	r1, [pc, #60]	; (8004150 <SystemInit+0x40>)
 8004112:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004116:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800411e:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <SystemInit+0x44>)
 8004120:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004122:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004124:	f042 0201 	orr.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800412a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004132:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004136:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004138:	4a07      	ldr	r2, [pc, #28]	; (8004158 <SystemInit+0x48>)
 800413a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004142:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004144:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004146:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800414a:	608b      	str	r3, [r1, #8]
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	e000ed00 	.word	0xe000ed00
 8004154:	40023800 	.word	0x40023800
 8004158:	24003010 	.word	0x24003010

0800415c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800415c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800415e:	480b      	ldr	r0, [pc, #44]	; (800418c <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <MX_USART1_UART_Init+0x34>)
 8004162:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004166:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800416a:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800416c:	2300      	movs	r3, #0
 800416e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004170:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004172:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004174:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004176:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004178:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800417a:	f7ff fb5f 	bl	800383c <HAL_UART_Init>
 800417e:	b118      	cbz	r0, 8004188 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8004180:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004184:	f7ff bf6e 	b.w	8004064 <Error_Handler>
 8004188:	bd08      	pop	{r3, pc}
 800418a:	bf00      	nop
 800418c:	20000a30 	.word	0x20000a30
 8004190:	40011000 	.word	0x40011000

08004194 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004194:	b510      	push	{r4, lr}
 8004196:	4604      	mov	r4, r0
 8004198:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800419a:	2214      	movs	r2, #20
 800419c:	2100      	movs	r1, #0
 800419e:	a803      	add	r0, sp, #12
 80041a0:	f000 f8a2 	bl	80042e8 <memset>
  if(uartHandle->Instance==USART1)
 80041a4:	6822      	ldr	r2, [r4, #0]
 80041a6:	4b19      	ldr	r3, [pc, #100]	; (800420c <HAL_UART_MspInit+0x78>)
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d12d      	bne.n	8004208 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041ac:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80041b0:	2400      	movs	r4, #0
 80041b2:	9401      	str	r4, [sp, #4]
 80041b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b6:	4816      	ldr	r0, [pc, #88]	; (8004210 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80041b8:	f042 0210 	orr.w	r2, r2, #16
 80041bc:	645a      	str	r2, [r3, #68]	; 0x44
 80041be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c0:	f002 0210 	and.w	r2, r2, #16
 80041c4:	9201      	str	r2, [sp, #4]
 80041c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c8:	9402      	str	r4, [sp, #8]
 80041ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	631a      	str	r2, [r3, #48]	; 0x30
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	9302      	str	r3, [sp, #8]
 80041da:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80041e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e2:	2302      	movs	r3, #2
 80041e4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041e6:	2301      	movs	r3, #1
 80041e8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ea:	2303      	movs	r3, #3
 80041ec:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ee:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041f0:	2307      	movs	r3, #7
 80041f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f4:	f7fe fe82 	bl	8002efc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80041f8:	2025      	movs	r0, #37	; 0x25
 80041fa:	4622      	mov	r2, r4
 80041fc:	4621      	mov	r1, r4
 80041fe:	f7fe fe03 	bl	8002e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004202:	2025      	movs	r0, #37	; 0x25
 8004204:	f7fe fe34 	bl	8002e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004208:	b008      	add	sp, #32
 800420a:	bd10      	pop	{r4, pc}
 800420c:	40011000 	.word	0x40011000
 8004210:	40020000 	.word	0x40020000

08004214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800424c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004218:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800421a:	e003      	b.n	8004224 <LoopCopyDataInit>

0800421c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800421c:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800421e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004220:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004222:	3104      	adds	r1, #4

08004224 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004224:	480b      	ldr	r0, [pc, #44]	; (8004254 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004226:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004228:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800422a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800422c:	d3f6      	bcc.n	800421c <CopyDataInit>
  ldr  r2, =_sbss
 800422e:	4a0b      	ldr	r2, [pc, #44]	; (800425c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004230:	e002      	b.n	8004238 <LoopFillZerobss>

08004232 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004232:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004234:	f842 3b04 	str.w	r3, [r2], #4

08004238 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004238:	4b09      	ldr	r3, [pc, #36]	; (8004260 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800423a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800423c:	d3f9      	bcc.n	8004232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800423e:	f7ff ff67 	bl	8004110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004242:	f000 f813 	bl	800426c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004246:	f7ff feb3 	bl	8003fb0 <main>
  bx  lr    
 800424a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800424c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004250:	08017cc0 	.word	0x08017cc0
  ldr  r0, =_sdata
 8004254:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004258:	200003dc 	.word	0x200003dc
  ldr  r2, =_sbss
 800425c:	200003dc 	.word	0x200003dc
  ldr  r3, = _ebss
 8004260:	20000a70 	.word	0x20000a70

08004264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004264:	e7fe      	b.n	8004264 <ADC_IRQHandler>

08004266 <__aeabi_memcpy>:
 8004266:	f000 b834 	b.w	80042d2 <memcpy>
	...

0800426c <__libc_init_array>:
 800426c:	b570      	push	{r4, r5, r6, lr}
 800426e:	4e0d      	ldr	r6, [pc, #52]	; (80042a4 <__libc_init_array+0x38>)
 8004270:	4c0d      	ldr	r4, [pc, #52]	; (80042a8 <__libc_init_array+0x3c>)
 8004272:	1ba4      	subs	r4, r4, r6
 8004274:	10a4      	asrs	r4, r4, #2
 8004276:	2500      	movs	r5, #0
 8004278:	42a5      	cmp	r5, r4
 800427a:	d109      	bne.n	8004290 <__libc_init_array+0x24>
 800427c:	4e0b      	ldr	r6, [pc, #44]	; (80042ac <__libc_init_array+0x40>)
 800427e:	4c0c      	ldr	r4, [pc, #48]	; (80042b0 <__libc_init_array+0x44>)
 8004280:	f001 f8b2 	bl	80053e8 <_init>
 8004284:	1ba4      	subs	r4, r4, r6
 8004286:	10a4      	asrs	r4, r4, #2
 8004288:	2500      	movs	r5, #0
 800428a:	42a5      	cmp	r5, r4
 800428c:	d105      	bne.n	800429a <__libc_init_array+0x2e>
 800428e:	bd70      	pop	{r4, r5, r6, pc}
 8004290:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004294:	4798      	blx	r3
 8004296:	3501      	adds	r5, #1
 8004298:	e7ee      	b.n	8004278 <__libc_init_array+0xc>
 800429a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800429e:	4798      	blx	r3
 80042a0:	3501      	adds	r5, #1
 80042a2:	e7f2      	b.n	800428a <__libc_init_array+0x1e>
 80042a4:	08017cb8 	.word	0x08017cb8
 80042a8:	08017cb8 	.word	0x08017cb8
 80042ac:	08017cb8 	.word	0x08017cb8
 80042b0:	08017cbc 	.word	0x08017cbc

080042b4 <memcmp>:
 80042b4:	b510      	push	{r4, lr}
 80042b6:	3901      	subs	r1, #1
 80042b8:	4402      	add	r2, r0
 80042ba:	4290      	cmp	r0, r2
 80042bc:	d101      	bne.n	80042c2 <memcmp+0xe>
 80042be:	2000      	movs	r0, #0
 80042c0:	bd10      	pop	{r4, pc}
 80042c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80042c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80042ca:	42a3      	cmp	r3, r4
 80042cc:	d0f5      	beq.n	80042ba <memcmp+0x6>
 80042ce:	1b18      	subs	r0, r3, r4
 80042d0:	bd10      	pop	{r4, pc}

080042d2 <memcpy>:
 80042d2:	b510      	push	{r4, lr}
 80042d4:	1e43      	subs	r3, r0, #1
 80042d6:	440a      	add	r2, r1
 80042d8:	4291      	cmp	r1, r2
 80042da:	d100      	bne.n	80042de <memcpy+0xc>
 80042dc:	bd10      	pop	{r4, pc}
 80042de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042e6:	e7f7      	b.n	80042d8 <memcpy+0x6>

080042e8 <memset>:
 80042e8:	4402      	add	r2, r0
 80042ea:	4603      	mov	r3, r0
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d100      	bne.n	80042f2 <memset+0xa>
 80042f0:	4770      	bx	lr
 80042f2:	f803 1b01 	strb.w	r1, [r3], #1
 80042f6:	e7f9      	b.n	80042ec <memset+0x4>

080042f8 <strncmp>:
 80042f8:	b510      	push	{r4, lr}
 80042fa:	b16a      	cbz	r2, 8004318 <strncmp+0x20>
 80042fc:	3901      	subs	r1, #1
 80042fe:	1884      	adds	r4, r0, r2
 8004300:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004304:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004308:	4293      	cmp	r3, r2
 800430a:	d103      	bne.n	8004314 <strncmp+0x1c>
 800430c:	42a0      	cmp	r0, r4
 800430e:	d001      	beq.n	8004314 <strncmp+0x1c>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f5      	bne.n	8004300 <strncmp+0x8>
 8004314:	1a98      	subs	r0, r3, r2
 8004316:	bd10      	pop	{r4, pc}
 8004318:	4610      	mov	r0, r2
 800431a:	bd10      	pop	{r4, pc}

0800431c <tanhf>:
 800431c:	b510      	push	{r4, lr}
 800431e:	ee10 4a10 	vmov	r4, s0
 8004322:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004326:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800432a:	ed2d 8b02 	vpush	{d8}
 800432e:	eef0 7a40 	vmov.f32	s15, s0
 8004332:	db0c      	blt.n	800434e <tanhf+0x32>
 8004334:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004338:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800433c:	2c00      	cmp	r4, #0
 800433e:	bfac      	ite	ge
 8004340:	ee37 0a00 	vaddge.f32	s0, s14, s0
 8004344:	ee37 0a40 	vsublt.f32	s0, s14, s0
 8004348:	ecbd 8b02 	vpop	{d8}
 800434c:	bd10      	pop	{r4, pc}
 800434e:	4a1b      	ldr	r2, [pc, #108]	; (80043bc <tanhf+0xa0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	dc30      	bgt.n	80043b6 <tanhf+0x9a>
 8004354:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8004358:	da06      	bge.n	8004368 <tanhf+0x4c>
 800435a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800435e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004362:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004366:	e7ef      	b.n	8004348 <tanhf+0x2c>
 8004368:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800436c:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8004370:	db12      	blt.n	8004398 <tanhf+0x7c>
 8004372:	f000 ffaf 	bl	80052d4 <fabsf>
 8004376:	ee30 0a00 	vadd.f32	s0, s0, s0
 800437a:	f000 fe7f 	bl	800507c <expm1f>
 800437e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8004382:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8004386:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800438a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800438e:	2c00      	cmp	r4, #0
 8004390:	bfb8      	it	lt
 8004392:	eeb1 0a40 	vneglt.f32	s0, s0
 8004396:	e7d7      	b.n	8004348 <tanhf+0x2c>
 8004398:	f000 ff9c 	bl	80052d4 <fabsf>
 800439c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 80043a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80043a4:	f000 fe6a 	bl	800507c <expm1f>
 80043a8:	ee70 7a08 	vadd.f32	s15, s0, s16
 80043ac:	eeb1 7a40 	vneg.f32	s14, s0
 80043b0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80043b4:	e7eb      	b.n	800438e <tanhf+0x72>
 80043b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80043ba:	e7e8      	b.n	800438e <tanhf+0x72>
 80043bc:	41afffff 	.word	0x41afffff

080043c0 <expf>:
 80043c0:	b530      	push	{r4, r5, lr}
 80043c2:	ed2d 8b02 	vpush	{d8}
 80043c6:	4d35      	ldr	r5, [pc, #212]	; (800449c <expf+0xdc>)
 80043c8:	b08b      	sub	sp, #44	; 0x2c
 80043ca:	eeb0 8a40 	vmov.f32	s16, s0
 80043ce:	f000 f9ed 	bl	80047ac <__ieee754_expf>
 80043d2:	f995 3000 	ldrsb.w	r3, [r5]
 80043d6:	3301      	adds	r3, #1
 80043d8:	ee10 4a10 	vmov	r4, s0
 80043dc:	d030      	beq.n	8004440 <expf+0x80>
 80043de:	eeb0 0a48 	vmov.f32	s0, s16
 80043e2:	f000 ff7e 	bl	80052e2 <finitef>
 80043e6:	b358      	cbz	r0, 8004440 <expf+0x80>
 80043e8:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80044a0 <expf+0xe0>
 80043ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80043f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f4:	dd35      	ble.n	8004462 <expf+0xa2>
 80043f6:	2303      	movs	r3, #3
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	4b2a      	ldr	r3, [pc, #168]	; (80044a4 <expf+0xe4>)
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	ee18 0a10 	vmov	r0, s16
 8004402:	2300      	movs	r3, #0
 8004404:	9308      	str	r3, [sp, #32]
 8004406:	f7fd ff9d 	bl	8002344 <__aeabi_f2d>
 800440a:	f995 3000 	ldrsb.w	r3, [r5]
 800440e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004416:	b9cb      	cbnz	r3, 800444c <expf+0x8c>
 8004418:	4b23      	ldr	r3, [pc, #140]	; (80044a8 <expf+0xe8>)
 800441a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800441e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004422:	4668      	mov	r0, sp
 8004424:	f000 fd9f 	bl	8004f66 <matherr>
 8004428:	b1b0      	cbz	r0, 8004458 <expf+0x98>
 800442a:	9b08      	ldr	r3, [sp, #32]
 800442c:	b11b      	cbz	r3, 8004436 <expf+0x76>
 800442e:	f000 ffd5 	bl	80053dc <__errno>
 8004432:	9b08      	ldr	r3, [sp, #32]
 8004434:	6003      	str	r3, [r0, #0]
 8004436:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800443a:	f7fe fa71 	bl	8002920 <__aeabi_d2f>
 800443e:	4604      	mov	r4, r0
 8004440:	ee00 4a10 	vmov	s0, r4
 8004444:	b00b      	add	sp, #44	; 0x2c
 8004446:	ecbd 8b02 	vpop	{d8}
 800444a:	bd30      	pop	{r4, r5, pc}
 800444c:	4917      	ldr	r1, [pc, #92]	; (80044ac <expf+0xec>)
 800444e:	2000      	movs	r0, #0
 8004450:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004454:	2b02      	cmp	r3, #2
 8004456:	d1e4      	bne.n	8004422 <expf+0x62>
 8004458:	f000 ffc0 	bl	80053dc <__errno>
 800445c:	2322      	movs	r3, #34	; 0x22
 800445e:	6003      	str	r3, [r0, #0]
 8004460:	e7e3      	b.n	800442a <expf+0x6a>
 8004462:	eddf 7a13 	vldr	s15, [pc, #76]	; 80044b0 <expf+0xf0>
 8004466:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800446a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446e:	d5e7      	bpl.n	8004440 <expf+0x80>
 8004470:	2304      	movs	r3, #4
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <expf+0xe4>)
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	ee18 0a10 	vmov	r0, s16
 800447c:	2300      	movs	r3, #0
 800447e:	9308      	str	r3, [sp, #32]
 8004480:	f7fd ff60 	bl	8002344 <__aeabi_f2d>
 8004484:	2300      	movs	r3, #0
 8004486:	2200      	movs	r2, #0
 8004488:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800448c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004490:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004494:	f995 3000 	ldrsb.w	r3, [r5]
 8004498:	e7dc      	b.n	8004454 <expf+0x94>
 800449a:	bf00      	nop
 800449c:	20000374 	.word	0x20000374
 80044a0:	42b17180 	.word	0x42b17180
 80044a4:	08017c66 	.word	0x08017c66
 80044a8:	47efffff 	.word	0x47efffff
 80044ac:	7ff00000 	.word	0x7ff00000
 80044b0:	c2cff1b5 	.word	0xc2cff1b5

080044b4 <powf>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	ed2d 8b04 	vpush	{d8-d9}
 80044ba:	4cb5      	ldr	r4, [pc, #724]	; (8004790 <powf+0x2dc>)
 80044bc:	b08a      	sub	sp, #40	; 0x28
 80044be:	eef0 8a40 	vmov.f32	s17, s0
 80044c2:	eeb0 8a60 	vmov.f32	s16, s1
 80044c6:	f000 fa45 	bl	8004954 <__ieee754_powf>
 80044ca:	f994 5000 	ldrsb.w	r5, [r4]
 80044ce:	1c6b      	adds	r3, r5, #1
 80044d0:	eeb0 9a40 	vmov.f32	s18, s0
 80044d4:	4626      	mov	r6, r4
 80044d6:	d05d      	beq.n	8004594 <powf+0xe0>
 80044d8:	eeb4 8a48 	vcmp.f32	s16, s16
 80044dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e0:	d658      	bvs.n	8004594 <powf+0xe0>
 80044e2:	eef4 8a68 	vcmp.f32	s17, s17
 80044e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ea:	d721      	bvc.n	8004530 <powf+0x7c>
 80044ec:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80044f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f4:	d14e      	bne.n	8004594 <powf+0xe0>
 80044f6:	2301      	movs	r3, #1
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	4ba6      	ldr	r3, [pc, #664]	; (8004794 <powf+0x2e0>)
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	ee18 0a90 	vmov	r0, s17
 8004502:	2300      	movs	r3, #0
 8004504:	9308      	str	r3, [sp, #32]
 8004506:	f7fd ff1d 	bl	8002344 <__aeabi_f2d>
 800450a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800450e:	ee18 0a10 	vmov	r0, s16
 8004512:	f7fd ff17 	bl	8002344 <__aeabi_f2d>
 8004516:	4ba0      	ldr	r3, [pc, #640]	; (8004798 <powf+0x2e4>)
 8004518:	2200      	movs	r2, #0
 800451a:	2d02      	cmp	r5, #2
 800451c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004520:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004524:	d030      	beq.n	8004588 <powf+0xd4>
 8004526:	4668      	mov	r0, sp
 8004528:	f000 fd1d 	bl	8004f66 <matherr>
 800452c:	bb30      	cbnz	r0, 800457c <powf+0xc8>
 800452e:	e062      	b.n	80045f6 <powf+0x142>
 8004530:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004538:	d162      	bne.n	8004600 <powf+0x14c>
 800453a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800453e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004542:	d12d      	bne.n	80045a0 <powf+0xec>
 8004544:	2301      	movs	r3, #1
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	4b92      	ldr	r3, [pc, #584]	; (8004794 <powf+0x2e0>)
 800454a:	9301      	str	r3, [sp, #4]
 800454c:	ee18 0a90 	vmov	r0, s17
 8004550:	2300      	movs	r3, #0
 8004552:	9308      	str	r3, [sp, #32]
 8004554:	f7fd fef6 	bl	8002344 <__aeabi_f2d>
 8004558:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800455c:	ee18 0a10 	vmov	r0, s16
 8004560:	f7fd fef0 	bl	8002344 <__aeabi_f2d>
 8004564:	2200      	movs	r2, #0
 8004566:	2300      	movs	r3, #0
 8004568:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800456c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004570:	2d00      	cmp	r5, #0
 8004572:	d0d8      	beq.n	8004526 <powf+0x72>
 8004574:	4b88      	ldr	r3, [pc, #544]	; (8004798 <powf+0x2e4>)
 8004576:	2200      	movs	r2, #0
 8004578:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800457c:	9b08      	ldr	r3, [sp, #32]
 800457e:	b11b      	cbz	r3, 8004588 <powf+0xd4>
 8004580:	f000 ff2c 	bl	80053dc <__errno>
 8004584:	9b08      	ldr	r3, [sp, #32]
 8004586:	6003      	str	r3, [r0, #0]
 8004588:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800458c:	f7fe f9c8 	bl	8002920 <__aeabi_d2f>
 8004590:	ee09 0a10 	vmov	s18, r0
 8004594:	eeb0 0a49 	vmov.f32	s0, s18
 8004598:	b00a      	add	sp, #40	; 0x28
 800459a:	ecbd 8b04 	vpop	{d8-d9}
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	eeb0 0a48 	vmov.f32	s0, s16
 80045a4:	f000 fe9d 	bl	80052e2 <finitef>
 80045a8:	2800      	cmp	r0, #0
 80045aa:	d0f3      	beq.n	8004594 <powf+0xe0>
 80045ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80045b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b4:	d5ee      	bpl.n	8004594 <powf+0xe0>
 80045b6:	2301      	movs	r3, #1
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	4b76      	ldr	r3, [pc, #472]	; (8004794 <powf+0x2e0>)
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	ee18 0a90 	vmov	r0, s17
 80045c2:	2300      	movs	r3, #0
 80045c4:	9308      	str	r3, [sp, #32]
 80045c6:	f7fd febd 	bl	8002344 <__aeabi_f2d>
 80045ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045ce:	ee18 0a10 	vmov	r0, s16
 80045d2:	f7fd feb7 	bl	8002344 <__aeabi_f2d>
 80045d6:	f994 3000 	ldrsb.w	r3, [r4]
 80045da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045de:	b923      	cbnz	r3, 80045ea <powf+0x136>
 80045e0:	2200      	movs	r2, #0
 80045e2:	2300      	movs	r3, #0
 80045e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80045e8:	e79d      	b.n	8004526 <powf+0x72>
 80045ea:	496c      	ldr	r1, [pc, #432]	; (800479c <powf+0x2e8>)
 80045ec:	2000      	movs	r0, #0
 80045ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d197      	bne.n	8004526 <powf+0x72>
 80045f6:	f000 fef1 	bl	80053dc <__errno>
 80045fa:	2321      	movs	r3, #33	; 0x21
 80045fc:	6003      	str	r3, [r0, #0]
 80045fe:	e7bd      	b.n	800457c <powf+0xc8>
 8004600:	f000 fe6f 	bl	80052e2 <finitef>
 8004604:	4605      	mov	r5, r0
 8004606:	2800      	cmp	r0, #0
 8004608:	f040 8091 	bne.w	800472e <powf+0x27a>
 800460c:	eeb0 0a68 	vmov.f32	s0, s17
 8004610:	f000 fe67 	bl	80052e2 <finitef>
 8004614:	2800      	cmp	r0, #0
 8004616:	f000 808a 	beq.w	800472e <powf+0x27a>
 800461a:	eeb0 0a48 	vmov.f32	s0, s16
 800461e:	f000 fe60 	bl	80052e2 <finitef>
 8004622:	2800      	cmp	r0, #0
 8004624:	f000 8083 	beq.w	800472e <powf+0x27a>
 8004628:	eeb4 9a49 	vcmp.f32	s18, s18
 800462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004630:	f994 4000 	ldrsb.w	r4, [r4]
 8004634:	4b57      	ldr	r3, [pc, #348]	; (8004794 <powf+0x2e0>)
 8004636:	d71b      	bvc.n	8004670 <powf+0x1bc>
 8004638:	2201      	movs	r2, #1
 800463a:	ee18 0a90 	vmov	r0, s17
 800463e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004642:	9508      	str	r5, [sp, #32]
 8004644:	f7fd fe7e 	bl	8002344 <__aeabi_f2d>
 8004648:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800464c:	ee18 0a10 	vmov	r0, s16
 8004650:	f7fd fe78 	bl	8002344 <__aeabi_f2d>
 8004654:	2200      	movs	r2, #0
 8004656:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800465a:	2300      	movs	r3, #0
 800465c:	2c00      	cmp	r4, #0
 800465e:	d0c1      	beq.n	80045e4 <powf+0x130>
 8004660:	4610      	mov	r0, r2
 8004662:	4619      	mov	r1, r3
 8004664:	f7fd ffec 	bl	8002640 <__aeabi_ddiv>
 8004668:	2c02      	cmp	r4, #2
 800466a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800466e:	e7c1      	b.n	80045f4 <powf+0x140>
 8004670:	2203      	movs	r2, #3
 8004672:	ee18 0a90 	vmov	r0, s17
 8004676:	e88d 000c 	stmia.w	sp, {r2, r3}
 800467a:	9508      	str	r5, [sp, #32]
 800467c:	f7fd fe62 	bl	8002344 <__aeabi_f2d>
 8004680:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004684:	ee18 0a10 	vmov	r0, s16
 8004688:	f7fd fe5c 	bl	8002344 <__aeabi_f2d>
 800468c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004690:	bb5c      	cbnz	r4, 80046ea <powf+0x236>
 8004692:	4b43      	ldr	r3, [pc, #268]	; (80047a0 <powf+0x2ec>)
 8004694:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8004698:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800469c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80046a4:	d56c      	bpl.n	8004780 <powf+0x2cc>
 80046a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80046aa:	ee68 7a27 	vmul.f32	s15, s16, s15
 80046ae:	ee17 0a90 	vmov	r0, s15
 80046b2:	f7fd fe47 	bl	8002344 <__aeabi_f2d>
 80046b6:	4604      	mov	r4, r0
 80046b8:	460d      	mov	r5, r1
 80046ba:	ec45 4b10 	vmov	d0, r4, r5
 80046be:	f000 fc55 	bl	8004f6c <rint>
 80046c2:	4620      	mov	r0, r4
 80046c4:	ec53 2b10 	vmov	r2, r3, d0
 80046c8:	4629      	mov	r1, r5
 80046ca:	f7fe f8f7 	bl	80028bc <__aeabi_dcmpeq>
 80046ce:	b920      	cbnz	r0, 80046da <powf+0x226>
 80046d0:	4b34      	ldr	r3, [pc, #208]	; (80047a4 <powf+0x2f0>)
 80046d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80046d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80046da:	f996 3000 	ldrsb.w	r3, [r6]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d14e      	bne.n	8004780 <powf+0x2cc>
 80046e2:	f000 fe7b 	bl	80053dc <__errno>
 80046e6:	2322      	movs	r3, #34	; 0x22
 80046e8:	e788      	b.n	80045fc <powf+0x148>
 80046ea:	4b2f      	ldr	r3, [pc, #188]	; (80047a8 <powf+0x2f4>)
 80046ec:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80046f0:	2200      	movs	r2, #0
 80046f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80046fa:	d5ee      	bpl.n	80046da <powf+0x226>
 80046fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004700:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004704:	ee17 0a90 	vmov	r0, s15
 8004708:	f7fd fe1c 	bl	8002344 <__aeabi_f2d>
 800470c:	4604      	mov	r4, r0
 800470e:	460d      	mov	r5, r1
 8004710:	ec45 4b10 	vmov	d0, r4, r5
 8004714:	f000 fc2a 	bl	8004f6c <rint>
 8004718:	4620      	mov	r0, r4
 800471a:	ec53 2b10 	vmov	r2, r3, d0
 800471e:	4629      	mov	r1, r5
 8004720:	f7fe f8cc 	bl	80028bc <__aeabi_dcmpeq>
 8004724:	2800      	cmp	r0, #0
 8004726:	d1d8      	bne.n	80046da <powf+0x226>
 8004728:	2200      	movs	r2, #0
 800472a:	4b1c      	ldr	r3, [pc, #112]	; (800479c <powf+0x2e8>)
 800472c:	e7d3      	b.n	80046d6 <powf+0x222>
 800472e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004736:	f47f af2d 	bne.w	8004594 <powf+0xe0>
 800473a:	eeb0 0a68 	vmov.f32	s0, s17
 800473e:	f000 fdd0 	bl	80052e2 <finitef>
 8004742:	2800      	cmp	r0, #0
 8004744:	f43f af26 	beq.w	8004594 <powf+0xe0>
 8004748:	eeb0 0a48 	vmov.f32	s0, s16
 800474c:	f000 fdc9 	bl	80052e2 <finitef>
 8004750:	2800      	cmp	r0, #0
 8004752:	f43f af1f 	beq.w	8004594 <powf+0xe0>
 8004756:	2304      	movs	r3, #4
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <powf+0x2e0>)
 800475c:	9301      	str	r3, [sp, #4]
 800475e:	ee18 0a90 	vmov	r0, s17
 8004762:	2300      	movs	r3, #0
 8004764:	9308      	str	r3, [sp, #32]
 8004766:	f7fd fded 	bl	8002344 <__aeabi_f2d>
 800476a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800476e:	ee18 0a10 	vmov	r0, s16
 8004772:	f7fd fde7 	bl	8002344 <__aeabi_f2d>
 8004776:	2200      	movs	r2, #0
 8004778:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800477c:	2300      	movs	r3, #0
 800477e:	e7aa      	b.n	80046d6 <powf+0x222>
 8004780:	4668      	mov	r0, sp
 8004782:	f000 fbf0 	bl	8004f66 <matherr>
 8004786:	2800      	cmp	r0, #0
 8004788:	f47f aef8 	bne.w	800457c <powf+0xc8>
 800478c:	e7a9      	b.n	80046e2 <powf+0x22e>
 800478e:	bf00      	nop
 8004790:	20000374 	.word	0x20000374
 8004794:	08017c6b 	.word	0x08017c6b
 8004798:	3ff00000 	.word	0x3ff00000
 800479c:	fff00000 	.word	0xfff00000
 80047a0:	47efffff 	.word	0x47efffff
 80047a4:	c7efffff 	.word	0xc7efffff
 80047a8:	7ff00000 	.word	0x7ff00000

080047ac <__ieee754_expf>:
 80047ac:	ee10 2a10 	vmov	r2, s0
 80047b0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80047b4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80047b8:	d902      	bls.n	80047c0 <__ieee754_expf+0x14>
 80047ba:	ee30 0a00 	vadd.f32	s0, s0, s0
 80047be:	4770      	bx	lr
 80047c0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80047c4:	d106      	bne.n	80047d4 <__ieee754_expf+0x28>
 80047c6:	eddf 7a51 	vldr	s15, [pc, #324]	; 800490c <__ieee754_expf+0x160>
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	bf18      	it	ne
 80047ce:	eeb0 0a67 	vmovne.f32	s0, s15
 80047d2:	4770      	bx	lr
 80047d4:	484e      	ldr	r0, [pc, #312]	; (8004910 <__ieee754_expf+0x164>)
 80047d6:	4282      	cmp	r2, r0
 80047d8:	dd04      	ble.n	80047e4 <__ieee754_expf+0x38>
 80047da:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8004914 <__ieee754_expf+0x168>
 80047de:	ee20 0a00 	vmul.f32	s0, s0, s0
 80047e2:	4770      	bx	lr
 80047e4:	2a00      	cmp	r2, #0
 80047e6:	da03      	bge.n	80047f0 <__ieee754_expf+0x44>
 80047e8:	4a4b      	ldr	r2, [pc, #300]	; (8004918 <__ieee754_expf+0x16c>)
 80047ea:	4291      	cmp	r1, r2
 80047ec:	f200 808a 	bhi.w	8004904 <__ieee754_expf+0x158>
 80047f0:	4a4a      	ldr	r2, [pc, #296]	; (800491c <__ieee754_expf+0x170>)
 80047f2:	4291      	cmp	r1, r2
 80047f4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80047f8:	d954      	bls.n	80048a4 <__ieee754_expf+0xf8>
 80047fa:	4a49      	ldr	r2, [pc, #292]	; (8004920 <__ieee754_expf+0x174>)
 80047fc:	4291      	cmp	r1, r2
 80047fe:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8004802:	d836      	bhi.n	8004872 <__ieee754_expf+0xc6>
 8004804:	4947      	ldr	r1, [pc, #284]	; (8004924 <__ieee754_expf+0x178>)
 8004806:	4411      	add	r1, r2
 8004808:	ed91 7a00 	vldr	s14, [r1]
 800480c:	4946      	ldr	r1, [pc, #280]	; (8004928 <__ieee754_expf+0x17c>)
 800480e:	440a      	add	r2, r1
 8004810:	edd2 7a00 	vldr	s15, [r2]
 8004814:	ee30 7a47 	vsub.f32	s14, s0, s14
 8004818:	f1c3 0201 	rsb	r2, r3, #1
 800481c:	1ad2      	subs	r2, r2, r3
 800481e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8004822:	ee60 6a00 	vmul.f32	s13, s0, s0
 8004826:	eddf 5a41 	vldr	s11, [pc, #260]	; 800492c <__ieee754_expf+0x180>
 800482a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8004930 <__ieee754_expf+0x184>
 800482e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8004832:	eddf 5a40 	vldr	s11, [pc, #256]	; 8004934 <__ieee754_expf+0x188>
 8004836:	eee6 5a85 	vfma.f32	s11, s13, s10
 800483a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8004938 <__ieee754_expf+0x18c>
 800483e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8004842:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800493c <__ieee754_expf+0x190>
 8004846:	eee6 5a85 	vfma.f32	s11, s13, s10
 800484a:	eeb0 5a40 	vmov.f32	s10, s0
 800484e:	eea6 5ae5 	vfms.f32	s10, s13, s11
 8004852:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8004856:	eef0 6a45 	vmov.f32	s13, s10
 800485a:	ee20 5a05 	vmul.f32	s10, s0, s10
 800485e:	bb92      	cbnz	r2, 80048c6 <__ieee754_expf+0x11a>
 8004860:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8004864:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8004868:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800486c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8004870:	4770      	bx	lr
 8004872:	4b33      	ldr	r3, [pc, #204]	; (8004940 <__ieee754_expf+0x194>)
 8004874:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8004944 <__ieee754_expf+0x198>
 8004878:	4413      	add	r3, r2
 800487a:	edd3 7a00 	vldr	s15, [r3]
 800487e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004882:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004948 <__ieee754_expf+0x19c>
 8004886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800488a:	ee17 2a90 	vmov	r2, s15
 800488e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004892:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004896:	eeb0 7a40 	vmov.f32	s14, s0
 800489a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800494c <__ieee754_expf+0x1a0>
 800489e:	ee67 7a80 	vmul.f32	s15, s15, s0
 80048a2:	e7bc      	b.n	800481e <__ieee754_expf+0x72>
 80048a4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 80048a8:	d20b      	bcs.n	80048c2 <__ieee754_expf+0x116>
 80048aa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8004914 <__ieee754_expf+0x168>
 80048ae:	ee70 6a26 	vadd.f32	s13, s0, s13
 80048b2:	eef4 6ac6 	vcmpe.f32	s13, s12
 80048b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ba:	dd02      	ble.n	80048c2 <__ieee754_expf+0x116>
 80048bc:	ee30 0a06 	vadd.f32	s0, s0, s12
 80048c0:	4770      	bx	lr
 80048c2:	2200      	movs	r2, #0
 80048c4:	e7ad      	b.n	8004822 <__ieee754_expf+0x76>
 80048c6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80048ca:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80048ce:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80048d2:	bfb8      	it	lt
 80048d4:	3264      	addlt	r2, #100	; 0x64
 80048d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80048da:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80048de:	ee76 7a40 	vsub.f32	s15, s12, s0
 80048e2:	ee17 3a90 	vmov	r3, s15
 80048e6:	bfab      	itete	ge
 80048e8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80048ec:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80048f0:	ee00 3a10 	vmovge	s0, r3
 80048f4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8004950 <__ieee754_expf+0x1a4>
 80048f8:	bfbc      	itt	lt
 80048fa:	ee00 3a10 	vmovlt	s0, r3
 80048fe:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8004902:	4770      	bx	lr
 8004904:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800490c <__ieee754_expf+0x160>
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	00000000 	.word	0x00000000
 8004910:	42b17217 	.word	0x42b17217
 8004914:	7149f2ca 	.word	0x7149f2ca
 8004918:	42cff1b5 	.word	0x42cff1b5
 800491c:	3eb17218 	.word	0x3eb17218
 8004920:	3f851591 	.word	0x3f851591
 8004924:	08017c78 	.word	0x08017c78
 8004928:	08017c80 	.word	0x08017c80
 800492c:	3331bb4c 	.word	0x3331bb4c
 8004930:	b5ddea0e 	.word	0xb5ddea0e
 8004934:	388ab355 	.word	0x388ab355
 8004938:	bb360b61 	.word	0xbb360b61
 800493c:	3e2aaaab 	.word	0x3e2aaaab
 8004940:	08017c70 	.word	0x08017c70
 8004944:	3fb8aa3b 	.word	0x3fb8aa3b
 8004948:	3f317180 	.word	0x3f317180
 800494c:	3717f7d1 	.word	0x3717f7d1
 8004950:	0d800000 	.word	0x0d800000

08004954 <__ieee754_powf>:
 8004954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004958:	ee10 5a90 	vmov	r5, s1
 800495c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8004960:	ed2d 8b02 	vpush	{d8}
 8004964:	eeb0 8a40 	vmov.f32	s16, s0
 8004968:	eef0 8a60 	vmov.f32	s17, s1
 800496c:	f000 8295 	beq.w	8004e9a <__ieee754_powf+0x546>
 8004970:	ee10 8a10 	vmov	r8, s0
 8004974:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8004978:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800497c:	dc06      	bgt.n	800498c <__ieee754_powf+0x38>
 800497e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8004982:	dd0a      	ble.n	800499a <__ieee754_powf+0x46>
 8004984:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8004988:	f000 8287 	beq.w	8004e9a <__ieee754_powf+0x546>
 800498c:	ecbd 8b02 	vpop	{d8}
 8004990:	48d9      	ldr	r0, [pc, #868]	; (8004cf8 <__ieee754_powf+0x3a4>)
 8004992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004996:	f000 bcaf 	b.w	80052f8 <nanf>
 800499a:	f1b8 0f00 	cmp.w	r8, #0
 800499e:	da1d      	bge.n	80049dc <__ieee754_powf+0x88>
 80049a0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80049a4:	da2c      	bge.n	8004a00 <__ieee754_powf+0xac>
 80049a6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80049aa:	db30      	blt.n	8004a0e <__ieee754_powf+0xba>
 80049ac:	15fb      	asrs	r3, r7, #23
 80049ae:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80049b2:	fa47 f603 	asr.w	r6, r7, r3
 80049b6:	fa06 f303 	lsl.w	r3, r6, r3
 80049ba:	429f      	cmp	r7, r3
 80049bc:	d127      	bne.n	8004a0e <__ieee754_powf+0xba>
 80049be:	f006 0601 	and.w	r6, r6, #1
 80049c2:	f1c6 0602 	rsb	r6, r6, #2
 80049c6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80049ca:	d122      	bne.n	8004a12 <__ieee754_powf+0xbe>
 80049cc:	2d00      	cmp	r5, #0
 80049ce:	f280 826a 	bge.w	8004ea6 <__ieee754_powf+0x552>
 80049d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80049d6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80049da:	e00d      	b.n	80049f8 <__ieee754_powf+0xa4>
 80049dc:	2600      	movs	r6, #0
 80049de:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80049e2:	d1f0      	bne.n	80049c6 <__ieee754_powf+0x72>
 80049e4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80049e8:	f000 8257 	beq.w	8004e9a <__ieee754_powf+0x546>
 80049ec:	dd0a      	ble.n	8004a04 <__ieee754_powf+0xb0>
 80049ee:	2d00      	cmp	r5, #0
 80049f0:	f280 8256 	bge.w	8004ea0 <__ieee754_powf+0x54c>
 80049f4:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8004cfc <__ieee754_powf+0x3a8>
 80049f8:	ecbd 8b02 	vpop	{d8}
 80049fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a00:	2602      	movs	r6, #2
 8004a02:	e7ec      	b.n	80049de <__ieee754_powf+0x8a>
 8004a04:	2d00      	cmp	r5, #0
 8004a06:	daf5      	bge.n	80049f4 <__ieee754_powf+0xa0>
 8004a08:	eeb1 0a68 	vneg.f32	s0, s17
 8004a0c:	e7f4      	b.n	80049f8 <__ieee754_powf+0xa4>
 8004a0e:	2600      	movs	r6, #0
 8004a10:	e7d9      	b.n	80049c6 <__ieee754_powf+0x72>
 8004a12:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8004a16:	d102      	bne.n	8004a1e <__ieee754_powf+0xca>
 8004a18:	ee28 0a08 	vmul.f32	s0, s16, s16
 8004a1c:	e7ec      	b.n	80049f8 <__ieee754_powf+0xa4>
 8004a1e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8004a22:	eeb0 0a48 	vmov.f32	s0, s16
 8004a26:	d108      	bne.n	8004a3a <__ieee754_powf+0xe6>
 8004a28:	f1b8 0f00 	cmp.w	r8, #0
 8004a2c:	db05      	blt.n	8004a3a <__ieee754_powf+0xe6>
 8004a2e:	ecbd 8b02 	vpop	{d8}
 8004a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a36:	f000 ba4f 	b.w	8004ed8 <__ieee754_sqrtf>
 8004a3a:	f000 fc4b 	bl	80052d4 <fabsf>
 8004a3e:	b124      	cbz	r4, 8004a4a <__ieee754_powf+0xf6>
 8004a40:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8004a44:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8004a48:	d117      	bne.n	8004a7a <__ieee754_powf+0x126>
 8004a4a:	2d00      	cmp	r5, #0
 8004a4c:	bfbc      	itt	lt
 8004a4e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8004a52:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8004a56:	f1b8 0f00 	cmp.w	r8, #0
 8004a5a:	dacd      	bge.n	80049f8 <__ieee754_powf+0xa4>
 8004a5c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8004a60:	ea54 0306 	orrs.w	r3, r4, r6
 8004a64:	d104      	bne.n	8004a70 <__ieee754_powf+0x11c>
 8004a66:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004a6a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8004a6e:	e7c3      	b.n	80049f8 <__ieee754_powf+0xa4>
 8004a70:	2e01      	cmp	r6, #1
 8004a72:	d1c1      	bne.n	80049f8 <__ieee754_powf+0xa4>
 8004a74:	eeb1 0a40 	vneg.f32	s0, s0
 8004a78:	e7be      	b.n	80049f8 <__ieee754_powf+0xa4>
 8004a7a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8004a7e:	3801      	subs	r0, #1
 8004a80:	ea56 0300 	orrs.w	r3, r6, r0
 8004a84:	d104      	bne.n	8004a90 <__ieee754_powf+0x13c>
 8004a86:	ee38 8a48 	vsub.f32	s16, s16, s16
 8004a8a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8004a8e:	e7b3      	b.n	80049f8 <__ieee754_powf+0xa4>
 8004a90:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8004a94:	dd6d      	ble.n	8004b72 <__ieee754_powf+0x21e>
 8004a96:	4b9a      	ldr	r3, [pc, #616]	; (8004d00 <__ieee754_powf+0x3ac>)
 8004a98:	429c      	cmp	r4, r3
 8004a9a:	dc06      	bgt.n	8004aaa <__ieee754_powf+0x156>
 8004a9c:	2d00      	cmp	r5, #0
 8004a9e:	daa9      	bge.n	80049f4 <__ieee754_powf+0xa0>
 8004aa0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8004d04 <__ieee754_powf+0x3b0>
 8004aa4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004aa8:	e7a6      	b.n	80049f8 <__ieee754_powf+0xa4>
 8004aaa:	4b97      	ldr	r3, [pc, #604]	; (8004d08 <__ieee754_powf+0x3b4>)
 8004aac:	429c      	cmp	r4, r3
 8004aae:	dd02      	ble.n	8004ab6 <__ieee754_powf+0x162>
 8004ab0:	2d00      	cmp	r5, #0
 8004ab2:	dcf5      	bgt.n	8004aa0 <__ieee754_powf+0x14c>
 8004ab4:	e79e      	b.n	80049f4 <__ieee754_powf+0xa0>
 8004ab6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004aba:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004abe:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8004d0c <__ieee754_powf+0x3b8>
 8004ac2:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8004d10 <__ieee754_powf+0x3bc>
 8004ac6:	eef1 6a40 	vneg.f32	s13, s0
 8004aca:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8004ace:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004ad2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004ad6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004ada:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004ade:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ae2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8004d14 <__ieee754_powf+0x3c0>
 8004ae6:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8004aea:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8004d18 <__ieee754_powf+0x3c4>
 8004aee:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004af2:	eeb0 7a67 	vmov.f32	s14, s15
 8004af6:	eea0 7a06 	vfma.f32	s14, s0, s12
 8004afa:	ee17 3a10 	vmov	r3, s14
 8004afe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004b02:	f023 030f 	bic.w	r3, r3, #15
 8004b06:	ee07 3a10 	vmov	s14, r3
 8004b0a:	eea6 7a86 	vfma.f32	s14, s13, s12
 8004b0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b12:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8004b16:	f025 050f 	bic.w	r5, r5, #15
 8004b1a:	ee07 5a10 	vmov	s14, r5
 8004b1e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8004b22:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8004b26:	ee07 3a10 	vmov	s14, r3
 8004b2a:	ee06 5a90 	vmov	s13, r5
 8004b2e:	eee7 7a28 	vfma.f32	s15, s14, s17
 8004b32:	3e01      	subs	r6, #1
 8004b34:	ea56 0200 	orrs.w	r2, r6, r0
 8004b38:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004b3c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8004b40:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004b44:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8004b48:	ee16 4a90 	vmov	r4, s13
 8004b4c:	bf08      	it	eq
 8004b4e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8004b52:	2c00      	cmp	r4, #0
 8004b54:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004b58:	f340 8186 	ble.w	8004e68 <__ieee754_powf+0x514>
 8004b5c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8004b60:	f340 80fc 	ble.w	8004d5c <__ieee754_powf+0x408>
 8004b64:	eddf 7a67 	vldr	s15, [pc, #412]	; 8004d04 <__ieee754_powf+0x3b0>
 8004b68:	ee28 0a27 	vmul.f32	s0, s16, s15
 8004b6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004b70:	e742      	b.n	80049f8 <__ieee754_powf+0xa4>
 8004b72:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8004b76:	bfbf      	itttt	lt
 8004b78:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8004d1c <__ieee754_powf+0x3c8>
 8004b7c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8004b80:	f06f 0217 	mvnlt.w	r2, #23
 8004b84:	ee17 4a90 	vmovlt	r4, s15
 8004b88:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8004b8c:	bfa8      	it	ge
 8004b8e:	2200      	movge	r2, #0
 8004b90:	3b7f      	subs	r3, #127	; 0x7f
 8004b92:	4413      	add	r3, r2
 8004b94:	4a62      	ldr	r2, [pc, #392]	; (8004d20 <__ieee754_powf+0x3cc>)
 8004b96:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8004b9a:	4294      	cmp	r4, r2
 8004b9c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8004ba0:	dd06      	ble.n	8004bb0 <__ieee754_powf+0x25c>
 8004ba2:	4a60      	ldr	r2, [pc, #384]	; (8004d24 <__ieee754_powf+0x3d0>)
 8004ba4:	4294      	cmp	r4, r2
 8004ba6:	f340 80a5 	ble.w	8004cf4 <__ieee754_powf+0x3a0>
 8004baa:	3301      	adds	r3, #1
 8004bac:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8004bb0:	2400      	movs	r4, #0
 8004bb2:	4a5d      	ldr	r2, [pc, #372]	; (8004d28 <__ieee754_powf+0x3d4>)
 8004bb4:	00a7      	lsls	r7, r4, #2
 8004bb6:	443a      	add	r2, r7
 8004bb8:	ee07 1a90 	vmov	s15, r1
 8004bbc:	ed92 7a00 	vldr	s14, [r2]
 8004bc0:	4a5a      	ldr	r2, [pc, #360]	; (8004d2c <__ieee754_powf+0x3d8>)
 8004bc2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004bc6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004bca:	ee85 5aa6 	vdiv.f32	s10, s11, s13
 8004bce:	1049      	asrs	r1, r1, #1
 8004bd0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8004bd4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8004bd8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8004bdc:	ee37 6ac7 	vsub.f32	s12, s15, s14
 8004be0:	ee06 1a90 	vmov	s13, r1
 8004be4:	ee66 4a05 	vmul.f32	s9, s12, s10
 8004be8:	ee14 ea90 	vmov	lr, s9
 8004bec:	ea02 0e0e 	and.w	lr, r2, lr
 8004bf0:	ee05 ea90 	vmov	s11, lr
 8004bf4:	eeb1 4a65 	vneg.f32	s8, s11
 8004bf8:	eea4 6a26 	vfma.f32	s12, s8, s13
 8004bfc:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8004c00:	ee35 7aa4 	vadd.f32	s14, s11, s9
 8004c04:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8004c08:	eddf 7a49 	vldr	s15, [pc, #292]	; 8004d30 <__ieee754_powf+0x3dc>
 8004c0c:	eea4 6a26 	vfma.f32	s12, s8, s13
 8004c10:	ee66 6a05 	vmul.f32	s13, s12, s10
 8004c14:	ee24 6aa4 	vmul.f32	s12, s9, s9
 8004c18:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8004d34 <__ieee754_powf+0x3e0>
 8004c1c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8004c20:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8004d38 <__ieee754_powf+0x3e4>
 8004c24:	eea6 5a27 	vfma.f32	s10, s12, s15
 8004c28:	eddf 7a38 	vldr	s15, [pc, #224]	; 8004d0c <__ieee754_powf+0x3b8>
 8004c2c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8004c30:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8004d3c <__ieee754_powf+0x3e8>
 8004c34:	eea6 5a27 	vfma.f32	s10, s12, s15
 8004c38:	eddf 7a41 	vldr	s15, [pc, #260]	; 8004d40 <__ieee754_powf+0x3ec>
 8004c3c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8004c40:	ee66 3a06 	vmul.f32	s7, s12, s12
 8004c44:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8004c48:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004c4c:	eeb0 6a45 	vmov.f32	s12, s10
 8004c50:	eea3 7aa7 	vfma.f32	s14, s7, s15
 8004c54:	eea5 6aa5 	vfma.f32	s12, s11, s11
 8004c58:	ee36 6a07 	vadd.f32	s12, s12, s14
 8004c5c:	ee16 1a10 	vmov	r1, s12
 8004c60:	4011      	ands	r1, r2
 8004c62:	ee06 1a10 	vmov	s12, r1
 8004c66:	ee76 7a45 	vsub.f32	s15, s12, s10
 8004c6a:	ed9f 5a36 	vldr	s10, [pc, #216]	; 8004d44 <__ieee754_powf+0x3f0>
 8004c6e:	eee4 7a25 	vfma.f32	s15, s8, s11
 8004c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c76:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8004c7a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004c7e:	eeb0 7a67 	vmov.f32	s14, s15
 8004c82:	eea5 7a86 	vfma.f32	s14, s11, s12
 8004c86:	ee17 1a10 	vmov	r1, s14
 8004c8a:	4011      	ands	r1, r2
 8004c8c:	ee07 1a10 	vmov	s14, r1
 8004c90:	eea4 7a06 	vfma.f32	s14, s8, s12
 8004c94:	ee05 1a90 	vmov	s11, r1
 8004c98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c9c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004d48 <__ieee754_powf+0x3f4>
 8004ca0:	492a      	ldr	r1, [pc, #168]	; (8004d4c <__ieee754_powf+0x3f8>)
 8004ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ca6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004d50 <__ieee754_powf+0x3fc>
 8004caa:	eee5 7a87 	vfma.f32	s15, s11, s14
 8004cae:	4439      	add	r1, r7
 8004cb0:	ed91 7a00 	vldr	s14, [r1]
 8004cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cb8:	ee07 3a90 	vmov	s15, r3
 8004cbc:	eeb0 6a47 	vmov.f32	s12, s14
 8004cc0:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <__ieee754_powf+0x400>)
 8004cc2:	eea5 6a85 	vfma.f32	s12, s11, s10
 8004cc6:	443b      	add	r3, r7
 8004cc8:	edd3 4a00 	vldr	s9, [r3]
 8004ccc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004cd0:	ee36 6a24 	vadd.f32	s12, s12, s9
 8004cd4:	ee76 7a26 	vadd.f32	s15, s12, s13
 8004cd8:	ee17 3a90 	vmov	r3, s15
 8004cdc:	4013      	ands	r3, r2
 8004cde:	ee07 3a90 	vmov	s15, r3
 8004ce2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004ce6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004cea:	eee5 7ac5 	vfms.f32	s15, s11, s10
 8004cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cf2:	e70e      	b.n	8004b12 <__ieee754_powf+0x1be>
 8004cf4:	2401      	movs	r4, #1
 8004cf6:	e75c      	b.n	8004bb2 <__ieee754_powf+0x25e>
 8004cf8:	08017c42 	.word	0x08017c42
 8004cfc:	00000000 	.word	0x00000000
 8004d00:	3f7ffff7 	.word	0x3f7ffff7
 8004d04:	7149f2ca 	.word	0x7149f2ca
 8004d08:	3f800007 	.word	0x3f800007
 8004d0c:	3eaaaaab 	.word	0x3eaaaaab
 8004d10:	3fb8aa00 	.word	0x3fb8aa00
 8004d14:	3fb8aa3b 	.word	0x3fb8aa3b
 8004d18:	36eca570 	.word	0x36eca570
 8004d1c:	4b800000 	.word	0x4b800000
 8004d20:	001cc471 	.word	0x001cc471
 8004d24:	005db3d6 	.word	0x005db3d6
 8004d28:	08017c88 	.word	0x08017c88
 8004d2c:	fffff000 	.word	0xfffff000
 8004d30:	3e6c3255 	.word	0x3e6c3255
 8004d34:	3e53f142 	.word	0x3e53f142
 8004d38:	3e8ba305 	.word	0x3e8ba305
 8004d3c:	3edb6db7 	.word	0x3edb6db7
 8004d40:	3f19999a 	.word	0x3f19999a
 8004d44:	3f763800 	.word	0x3f763800
 8004d48:	3f76384f 	.word	0x3f76384f
 8004d4c:	08017c98 	.word	0x08017c98
 8004d50:	369dc3a0 	.word	0x369dc3a0
 8004d54:	08017c90 	.word	0x08017c90
 8004d58:	3338aa3c 	.word	0x3338aa3c
 8004d5c:	f040 8094 	bne.w	8004e88 <__ieee754_powf+0x534>
 8004d60:	ed1f 6a03 	vldr	s12, [pc, #-12]	; 8004d58 <__ieee754_powf+0x404>
 8004d64:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8004d68:	ee37 6a86 	vadd.f32	s12, s15, s12
 8004d6c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8004d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d74:	f73f aef6 	bgt.w	8004b64 <__ieee754_powf+0x210>
 8004d78:	15db      	asrs	r3, r3, #23
 8004d7a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8004d7e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004d82:	4103      	asrs	r3, r0
 8004d84:	4423      	add	r3, r4
 8004d86:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004d8a:	4948      	ldr	r1, [pc, #288]	; (8004eac <__ieee754_powf+0x558>)
 8004d8c:	3a7f      	subs	r2, #127	; 0x7f
 8004d8e:	4111      	asrs	r1, r2
 8004d90:	ea23 0101 	bic.w	r1, r3, r1
 8004d94:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8004d98:	ee06 1a90 	vmov	s13, r1
 8004d9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004da0:	f1c2 0217 	rsb	r2, r2, #23
 8004da4:	4110      	asrs	r0, r2
 8004da6:	2c00      	cmp	r4, #0
 8004da8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004dac:	bfb8      	it	lt
 8004dae:	4240      	neglt	r0, r0
 8004db0:	ee77 6a27 	vadd.f32	s13, s14, s15
 8004db4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8004eb0 <__ieee754_powf+0x55c>
 8004db8:	ee16 3a90 	vmov	r3, s13
 8004dbc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004dc0:	f023 030f 	bic.w	r3, r3, #15
 8004dc4:	ee06 3a90 	vmov	s13, r3
 8004dc8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004dcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004dd0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004eb4 <__ieee754_powf+0x560>
 8004dd4:	ee26 7a87 	vmul.f32	s14, s13, s14
 8004dd8:	eea7 7a86 	vfma.f32	s14, s15, s12
 8004ddc:	eef0 7a47 	vmov.f32	s15, s14
 8004de0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004eb8 <__ieee754_powf+0x564>
 8004de4:	eeb0 0a67 	vmov.f32	s0, s15
 8004de8:	eea6 0a87 	vfma.f32	s0, s13, s14
 8004dec:	eeb0 6a40 	vmov.f32	s12, s0
 8004df0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8004df4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004df8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004dfc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8004ebc <__ieee754_powf+0x568>
 8004e00:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8004ec0 <__ieee754_powf+0x56c>
 8004e04:	eea7 6a26 	vfma.f32	s12, s14, s13
 8004e08:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8004ec4 <__ieee754_powf+0x570>
 8004e0c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8004e10:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8004ec8 <__ieee754_powf+0x574>
 8004e14:	eea7 6a26 	vfma.f32	s12, s14, s13
 8004e18:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8004ecc <__ieee754_powf+0x578>
 8004e1c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8004e20:	eeb0 6a40 	vmov.f32	s12, s0
 8004e24:	eea7 6a66 	vfms.f32	s12, s14, s13
 8004e28:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004e2c:	eeb0 7a46 	vmov.f32	s14, s12
 8004e30:	ee77 6a66 	vsub.f32	s13, s14, s13
 8004e34:	ee20 6a06 	vmul.f32	s12, s0, s12
 8004e38:	eee0 7a27 	vfma.f32	s15, s0, s15
 8004e3c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004e40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e44:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004e48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004e4c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004e50:	ee10 3a10 	vmov	r3, s0
 8004e54:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8004e58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e5c:	da1a      	bge.n	8004e94 <__ieee754_powf+0x540>
 8004e5e:	f000 fa51 	bl	8005304 <scalbnf>
 8004e62:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004e66:	e5c7      	b.n	80049f8 <__ieee754_powf+0xa4>
 8004e68:	4a19      	ldr	r2, [pc, #100]	; (8004ed0 <__ieee754_powf+0x57c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	dd02      	ble.n	8004e74 <__ieee754_powf+0x520>
 8004e6e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004ed4 <__ieee754_powf+0x580>
 8004e72:	e679      	b.n	8004b68 <__ieee754_powf+0x214>
 8004e74:	d108      	bne.n	8004e88 <__ieee754_powf+0x534>
 8004e76:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8004e7a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e82:	f63f af79 	bhi.w	8004d78 <__ieee754_powf+0x424>
 8004e86:	e7f2      	b.n	8004e6e <__ieee754_powf+0x51a>
 8004e88:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8004e8c:	f73f af74 	bgt.w	8004d78 <__ieee754_powf+0x424>
 8004e90:	2000      	movs	r0, #0
 8004e92:	e78d      	b.n	8004db0 <__ieee754_powf+0x45c>
 8004e94:	ee00 3a10 	vmov	s0, r3
 8004e98:	e7e3      	b.n	8004e62 <__ieee754_powf+0x50e>
 8004e9a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004e9e:	e5ab      	b.n	80049f8 <__ieee754_powf+0xa4>
 8004ea0:	eeb0 0a68 	vmov.f32	s0, s17
 8004ea4:	e5a8      	b.n	80049f8 <__ieee754_powf+0xa4>
 8004ea6:	eeb0 0a48 	vmov.f32	s0, s16
 8004eaa:	e5a5      	b.n	80049f8 <__ieee754_powf+0xa4>
 8004eac:	007fffff 	.word	0x007fffff
 8004eb0:	3f317218 	.word	0x3f317218
 8004eb4:	35bfbe8c 	.word	0x35bfbe8c
 8004eb8:	3f317200 	.word	0x3f317200
 8004ebc:	3331bb4c 	.word	0x3331bb4c
 8004ec0:	b5ddea0e 	.word	0xb5ddea0e
 8004ec4:	388ab355 	.word	0x388ab355
 8004ec8:	bb360b61 	.word	0xbb360b61
 8004ecc:	3e2aaaab 	.word	0x3e2aaaab
 8004ed0:	43160000 	.word	0x43160000
 8004ed4:	0da24260 	.word	0x0da24260

08004ed8 <__ieee754_sqrtf>:
 8004ed8:	ee10 2a10 	vmov	r2, s0
 8004edc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8004ee0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004ee4:	b570      	push	{r4, r5, r6, lr}
 8004ee6:	d302      	bcc.n	8004eee <__ieee754_sqrtf+0x16>
 8004ee8:	eea0 0a00 	vfma.f32	s0, s0, s0
 8004eec:	bd70      	pop	{r4, r5, r6, pc}
 8004eee:	b3b1      	cbz	r1, 8004f5e <__ieee754_sqrtf+0x86>
 8004ef0:	2a00      	cmp	r2, #0
 8004ef2:	da04      	bge.n	8004efe <__ieee754_sqrtf+0x26>
 8004ef4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004ef8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8004efc:	bd70      	pop	{r4, r5, r6, pc}
 8004efe:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8004f02:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8004f06:	d204      	bcs.n	8004f12 <__ieee754_sqrtf+0x3a>
 8004f08:	2100      	movs	r1, #0
 8004f0a:	0210      	lsls	r0, r2, #8
 8004f0c:	d528      	bpl.n	8004f60 <__ieee754_sqrtf+0x88>
 8004f0e:	3901      	subs	r1, #1
 8004f10:	1a5b      	subs	r3, r3, r1
 8004f12:	3b7f      	subs	r3, #127	; 0x7f
 8004f14:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8004f18:	07d9      	lsls	r1, r3, #31
 8004f1a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004f1e:	bf48      	it	mi
 8004f20:	0052      	lslmi	r2, r2, #1
 8004f22:	1059      	asrs	r1, r3, #1
 8004f24:	2300      	movs	r3, #0
 8004f26:	0052      	lsls	r2, r2, #1
 8004f28:	2419      	movs	r4, #25
 8004f2a:	461e      	mov	r6, r3
 8004f2c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8004f30:	1835      	adds	r5, r6, r0
 8004f32:	4295      	cmp	r5, r2
 8004f34:	bfde      	ittt	le
 8004f36:	182e      	addle	r6, r5, r0
 8004f38:	1b52      	suble	r2, r2, r5
 8004f3a:	181b      	addle	r3, r3, r0
 8004f3c:	3c01      	subs	r4, #1
 8004f3e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004f42:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8004f46:	d1f3      	bne.n	8004f30 <__ieee754_sqrtf+0x58>
 8004f48:	b112      	cbz	r2, 8004f50 <__ieee754_sqrtf+0x78>
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	105b      	asrs	r3, r3, #1
 8004f52:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8004f56:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8004f5a:	ee00 3a10 	vmov	s0, r3
 8004f5e:	bd70      	pop	{r4, r5, r6, pc}
 8004f60:	0052      	lsls	r2, r2, #1
 8004f62:	3101      	adds	r1, #1
 8004f64:	e7d1      	b.n	8004f0a <__ieee754_sqrtf+0x32>

08004f66 <matherr>:
 8004f66:	2000      	movs	r0, #0
 8004f68:	4770      	bx	lr
	...

08004f6c <rint>:
 8004f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f6e:	ec51 0b10 	vmov	r0, r1, d0
 8004f72:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8004f76:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8004f7a:	2e13      	cmp	r6, #19
 8004f7c:	ee10 7a10 	vmov	r7, s0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4602      	mov	r2, r0
 8004f84:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8004f88:	dc58      	bgt.n	800503c <rint+0xd0>
 8004f8a:	2e00      	cmp	r6, #0
 8004f8c:	da2b      	bge.n	8004fe6 <rint+0x7a>
 8004f8e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004f92:	4302      	orrs	r2, r0
 8004f94:	d023      	beq.n	8004fde <rint+0x72>
 8004f96:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8004f9a:	4302      	orrs	r2, r0
 8004f9c:	4251      	negs	r1, r2
 8004f9e:	4311      	orrs	r1, r2
 8004fa0:	0b09      	lsrs	r1, r1, #12
 8004fa2:	0c5b      	lsrs	r3, r3, #17
 8004fa4:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8004fa8:	045b      	lsls	r3, r3, #17
 8004faa:	ea41 0703 	orr.w	r7, r1, r3
 8004fae:	4b31      	ldr	r3, [pc, #196]	; (8005074 <rint+0x108>)
 8004fb0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004fba:	ee10 0a10 	vmov	r0, s0
 8004fbe:	4632      	mov	r2, r6
 8004fc0:	463b      	mov	r3, r7
 8004fc2:	f7fd f861 	bl	8002088 <__adddf3>
 8004fc6:	e9cd 0100 	strd	r0, r1, [sp]
 8004fca:	463b      	mov	r3, r7
 8004fcc:	4632      	mov	r2, r6
 8004fce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fd2:	f7fd f857 	bl	8002084 <__aeabi_dsub>
 8004fd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004fda:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8004fde:	ec41 0b10 	vmov	d0, r0, r1
 8004fe2:	b003      	add	sp, #12
 8004fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fe6:	4c24      	ldr	r4, [pc, #144]	; (8005078 <rint+0x10c>)
 8004fe8:	4134      	asrs	r4, r6
 8004fea:	ea01 0704 	and.w	r7, r1, r4
 8004fee:	4307      	orrs	r7, r0
 8004ff0:	d0f5      	beq.n	8004fde <rint+0x72>
 8004ff2:	0861      	lsrs	r1, r4, #1
 8004ff4:	ea03 0001 	and.w	r0, r3, r1
 8004ff8:	4302      	orrs	r2, r0
 8004ffa:	d00b      	beq.n	8005014 <rint+0xa8>
 8004ffc:	ea23 0101 	bic.w	r1, r3, r1
 8005000:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005004:	2e13      	cmp	r6, #19
 8005006:	fa43 f306 	asr.w	r3, r3, r6
 800500a:	bf0c      	ite	eq
 800500c:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8005010:	2200      	movne	r2, #0
 8005012:	430b      	orrs	r3, r1
 8005014:	4619      	mov	r1, r3
 8005016:	4b17      	ldr	r3, [pc, #92]	; (8005074 <rint+0x108>)
 8005018:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800501c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005020:	4610      	mov	r0, r2
 8005022:	462b      	mov	r3, r5
 8005024:	4622      	mov	r2, r4
 8005026:	f7fd f82f 	bl	8002088 <__adddf3>
 800502a:	e9cd 0100 	strd	r0, r1, [sp]
 800502e:	4622      	mov	r2, r4
 8005030:	462b      	mov	r3, r5
 8005032:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005036:	f7fd f825 	bl	8002084 <__aeabi_dsub>
 800503a:	e7d0      	b.n	8004fde <rint+0x72>
 800503c:	2e33      	cmp	r6, #51	; 0x33
 800503e:	dd08      	ble.n	8005052 <rint+0xe6>
 8005040:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005044:	d1cb      	bne.n	8004fde <rint+0x72>
 8005046:	ee10 2a10 	vmov	r2, s0
 800504a:	460b      	mov	r3, r1
 800504c:	f7fd f81c 	bl	8002088 <__adddf3>
 8005050:	e7c5      	b.n	8004fde <rint+0x72>
 8005052:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8005056:	f04f 34ff 	mov.w	r4, #4294967295
 800505a:	40f4      	lsrs	r4, r6
 800505c:	4220      	tst	r0, r4
 800505e:	d0be      	beq.n	8004fde <rint+0x72>
 8005060:	0861      	lsrs	r1, r4, #1
 8005062:	420f      	tst	r7, r1
 8005064:	bf1f      	itttt	ne
 8005066:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800506a:	ea27 0101 	bicne.w	r1, r7, r1
 800506e:	4132      	asrne	r2, r6
 8005070:	430a      	orrne	r2, r1
 8005072:	e7cf      	b.n	8005014 <rint+0xa8>
 8005074:	08017ca0 	.word	0x08017ca0
 8005078:	000fffff 	.word	0x000fffff

0800507c <expm1f>:
 800507c:	ee10 2a10 	vmov	r2, s0
 8005080:	4985      	ldr	r1, [pc, #532]	; (8005298 <expm1f+0x21c>)
 8005082:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8005086:	428b      	cmp	r3, r1
 8005088:	d924      	bls.n	80050d4 <expm1f+0x58>
 800508a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800508e:	d902      	bls.n	8005096 <expm1f+0x1a>
 8005090:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005094:	4770      	bx	lr
 8005096:	d106      	bne.n	80050a6 <expm1f+0x2a>
 8005098:	2a00      	cmp	r2, #0
 800509a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800509e:	bfb8      	it	lt
 80050a0:	eeb0 0a67 	vmovlt.f32	s0, s15
 80050a4:	4770      	bx	lr
 80050a6:	2a00      	cmp	r2, #0
 80050a8:	db07      	blt.n	80050ba <expm1f+0x3e>
 80050aa:	497c      	ldr	r1, [pc, #496]	; (800529c <expm1f+0x220>)
 80050ac:	428b      	cmp	r3, r1
 80050ae:	d963      	bls.n	8005178 <expm1f+0xfc>
 80050b0:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 80052a0 <expm1f+0x224>
 80050b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80050b8:	4770      	bx	lr
 80050ba:	eddf 7a7a 	vldr	s15, [pc, #488]	; 80052a4 <expm1f+0x228>
 80050be:	ee70 7a27 	vadd.f32	s15, s0, s15
 80050c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ca:	f140 80dd 	bpl.w	8005288 <expm1f+0x20c>
 80050ce:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80050d2:	4770      	bx	lr
 80050d4:	4974      	ldr	r1, [pc, #464]	; (80052a8 <expm1f+0x22c>)
 80050d6:	428b      	cmp	r3, r1
 80050d8:	d96d      	bls.n	80051b6 <expm1f+0x13a>
 80050da:	4974      	ldr	r1, [pc, #464]	; (80052ac <expm1f+0x230>)
 80050dc:	428b      	cmp	r3, r1
 80050de:	d84b      	bhi.n	8005178 <expm1f+0xfc>
 80050e0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80052b0 <expm1f+0x234>
 80050e4:	2a00      	cmp	r2, #0
 80050e6:	bfa7      	ittee	ge
 80050e8:	ee30 7a47 	vsubge.f32	s14, s0, s14
 80050ec:	eddf 7a71 	vldrge	s15, [pc, #452]	; 80052b4 <expm1f+0x238>
 80050f0:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 80052b8 <expm1f+0x23c>
 80050f4:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 80050f8:	bfac      	ite	ge
 80050fa:	2301      	movge	r3, #1
 80050fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005100:	ee37 0a67 	vsub.f32	s0, s14, s15
 8005104:	ee37 7a40 	vsub.f32	s14, s14, s0
 8005108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800510c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005110:	ee20 5a25 	vmul.f32	s10, s0, s11
 8005114:	eddf 6a69 	vldr	s13, [pc, #420]	; 80052bc <expm1f+0x240>
 8005118:	ed9f 6a69 	vldr	s12, [pc, #420]	; 80052c0 <expm1f+0x244>
 800511c:	ee20 7a05 	vmul.f32	s14, s0, s10
 8005120:	eea7 6a26 	vfma.f32	s12, s14, s13
 8005124:	eddf 6a67 	vldr	s13, [pc, #412]	; 80052c4 <expm1f+0x248>
 8005128:	eee7 6a06 	vfma.f32	s13, s14, s12
 800512c:	ed9f 6a66 	vldr	s12, [pc, #408]	; 80052c8 <expm1f+0x24c>
 8005130:	eea7 6a26 	vfma.f32	s12, s14, s13
 8005134:	eddf 6a65 	vldr	s13, [pc, #404]	; 80052cc <expm1f+0x250>
 8005138:	eee7 6a06 	vfma.f32	s13, s14, s12
 800513c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005140:	eef0 4a46 	vmov.f32	s9, s12
 8005144:	eee7 4a26 	vfma.f32	s9, s14, s13
 8005148:	eef0 6a64 	vmov.f32	s13, s9
 800514c:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8005150:	eee5 4a66 	vfms.f32	s9, s10, s13
 8005154:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8005158:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800515c:	eee0 6a64 	vfms.f32	s13, s0, s9
 8005160:	eef0 4a66 	vmov.f32	s9, s13
 8005164:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8005168:	ee66 6a87 	vmul.f32	s13, s13, s14
 800516c:	bb8b      	cbnz	r3, 80051d2 <expm1f+0x156>
 800516e:	eef0 7a47 	vmov.f32	s15, s14
 8005172:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8005176:	e027      	b.n	80051c8 <expm1f+0x14c>
 8005178:	eddf 7a55 	vldr	s15, [pc, #340]	; 80052d0 <expm1f+0x254>
 800517c:	2a00      	cmp	r2, #0
 800517e:	ee20 7a27 	vmul.f32	s14, s0, s15
 8005182:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8005186:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800518a:	bfb8      	it	lt
 800518c:	eef0 7a66 	vmovlt.f32	s15, s13
 8005190:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005194:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80052b0 <expm1f+0x234>
 8005198:	eddf 6a46 	vldr	s13, [pc, #280]	; 80052b4 <expm1f+0x238>
 800519c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051a0:	ee17 3a90 	vmov	r3, s15
 80051a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051a8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80051ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80051b0:	eeb0 7a40 	vmov.f32	s14, s0
 80051b4:	e7a4      	b.n	8005100 <expm1f+0x84>
 80051b6:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80051ba:	d208      	bcs.n	80051ce <expm1f+0x152>
 80051bc:	eddf 7a38 	vldr	s15, [pc, #224]	; 80052a0 <expm1f+0x224>
 80051c0:	ee70 7a27 	vadd.f32	s15, s0, s15
 80051c4:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80051c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80051cc:	4770      	bx	lr
 80051ce:	2300      	movs	r3, #0
 80051d0:	e79c      	b.n	800510c <expm1f+0x90>
 80051d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	eed0 7a26 	vfnms.f32	s15, s0, s13
 80051dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051e0:	d106      	bne.n	80051f0 <expm1f+0x174>
 80051e2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80051e6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80051ea:	eea7 0aa5 	vfma.f32	s0, s15, s11
 80051ee:	4770      	bx	lr
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d118      	bne.n	8005226 <expm1f+0x1aa>
 80051f4:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 80051f8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80051fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005200:	bf41      	itttt	mi
 8005202:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8005206:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800520a:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800520e:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8005212:	bf5f      	itttt	pl
 8005214:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8005218:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800521c:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8005220:	eeb0 0a46 	vmovpl.f32	s0, s12
 8005224:	4770      	bx	lr
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	2a39      	cmp	r2, #57	; 0x39
 800522a:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800522e:	d90b      	bls.n	8005248 <expm1f+0x1cc>
 8005230:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005234:	ee36 0a40 	vsub.f32	s0, s12, s0
 8005238:	ee10 3a10 	vmov	r3, s0
 800523c:	440b      	add	r3, r1
 800523e:	ee00 3a10 	vmov	s0, r3
 8005242:	ee30 0a46 	vsub.f32	s0, s0, s12
 8005246:	4770      	bx	lr
 8005248:	2b16      	cmp	r3, #22
 800524a:	dc11      	bgt.n	8005270 <expm1f+0x1f4>
 800524c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005250:	fa42 f303 	asr.w	r3, r2, r3
 8005254:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8005258:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800525c:	ee07 3a90 	vmov	s15, r3
 8005260:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005264:	ee10 3a10 	vmov	r3, s0
 8005268:	440b      	add	r3, r1
 800526a:	ee00 3a10 	vmov	s0, r3
 800526e:	4770      	bx	lr
 8005270:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8005274:	05db      	lsls	r3, r3, #23
 8005276:	ee07 3a10 	vmov	s14, r3
 800527a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800527e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005282:	ee30 0a06 	vadd.f32	s0, s0, s12
 8005286:	e7ed      	b.n	8005264 <expm1f+0x1e8>
 8005288:	eddf 7a11 	vldr	s15, [pc, #68]	; 80052d0 <expm1f+0x254>
 800528c:	ee20 7a27 	vmul.f32	s14, s0, s15
 8005290:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8005294:	e77c      	b.n	8005190 <expm1f+0x114>
 8005296:	bf00      	nop
 8005298:	4195b843 	.word	0x4195b843
 800529c:	42b17217 	.word	0x42b17217
 80052a0:	7149f2ca 	.word	0x7149f2ca
 80052a4:	0da24260 	.word	0x0da24260
 80052a8:	3eb17218 	.word	0x3eb17218
 80052ac:	3f851591 	.word	0x3f851591
 80052b0:	3f317180 	.word	0x3f317180
 80052b4:	3717f7d1 	.word	0x3717f7d1
 80052b8:	b717f7d1 	.word	0xb717f7d1
 80052bc:	b457edbb 	.word	0xb457edbb
 80052c0:	36867e54 	.word	0x36867e54
 80052c4:	b8a670cd 	.word	0xb8a670cd
 80052c8:	3ad00d01 	.word	0x3ad00d01
 80052cc:	bd088889 	.word	0xbd088889
 80052d0:	3fb8aa3b 	.word	0x3fb8aa3b

080052d4 <fabsf>:
 80052d4:	ee10 3a10 	vmov	r3, s0
 80052d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052dc:	ee00 3a10 	vmov	s0, r3
 80052e0:	4770      	bx	lr

080052e2 <finitef>:
 80052e2:	ee10 3a10 	vmov	r3, s0
 80052e6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80052ea:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80052ee:	bfac      	ite	ge
 80052f0:	2000      	movge	r0, #0
 80052f2:	2001      	movlt	r0, #1
 80052f4:	4770      	bx	lr
	...

080052f8 <nanf>:
 80052f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005300 <nanf+0x8>
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	7fc00000 	.word	0x7fc00000

08005304 <scalbnf>:
 8005304:	b508      	push	{r3, lr}
 8005306:	ee10 2a10 	vmov	r2, s0
 800530a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800530e:	ed2d 8b02 	vpush	{d8}
 8005312:	eef0 0a40 	vmov.f32	s1, s0
 8005316:	d004      	beq.n	8005322 <scalbnf+0x1e>
 8005318:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800531c:	d306      	bcc.n	800532c <scalbnf+0x28>
 800531e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8005322:	ecbd 8b02 	vpop	{d8}
 8005326:	eeb0 0a60 	vmov.f32	s0, s1
 800532a:	bd08      	pop	{r3, pc}
 800532c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005330:	d21c      	bcs.n	800536c <scalbnf+0x68>
 8005332:	4b1f      	ldr	r3, [pc, #124]	; (80053b0 <scalbnf+0xac>)
 8005334:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80053b4 <scalbnf+0xb0>
 8005338:	4298      	cmp	r0, r3
 800533a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800533e:	db10      	blt.n	8005362 <scalbnf+0x5e>
 8005340:	ee10 2a90 	vmov	r2, s1
 8005344:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8005348:	3b19      	subs	r3, #25
 800534a:	4403      	add	r3, r0
 800534c:	2bfe      	cmp	r3, #254	; 0xfe
 800534e:	dd0f      	ble.n	8005370 <scalbnf+0x6c>
 8005350:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80053b8 <scalbnf+0xb4>
 8005354:	eeb0 0a48 	vmov.f32	s0, s16
 8005358:	f000 f834 	bl	80053c4 <copysignf>
 800535c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8005360:	e7df      	b.n	8005322 <scalbnf+0x1e>
 8005362:	eddf 7a16 	vldr	s15, [pc, #88]	; 80053bc <scalbnf+0xb8>
 8005366:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800536a:	e7da      	b.n	8005322 <scalbnf+0x1e>
 800536c:	0ddb      	lsrs	r3, r3, #23
 800536e:	e7ec      	b.n	800534a <scalbnf+0x46>
 8005370:	2b00      	cmp	r3, #0
 8005372:	dd06      	ble.n	8005382 <scalbnf+0x7e>
 8005374:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005378:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800537c:	ee00 3a90 	vmov	s1, r3
 8005380:	e7cf      	b.n	8005322 <scalbnf+0x1e>
 8005382:	f113 0f16 	cmn.w	r3, #22
 8005386:	da06      	bge.n	8005396 <scalbnf+0x92>
 8005388:	f24c 3350 	movw	r3, #50000	; 0xc350
 800538c:	4298      	cmp	r0, r3
 800538e:	dcdf      	bgt.n	8005350 <scalbnf+0x4c>
 8005390:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80053bc <scalbnf+0xb8>
 8005394:	e7de      	b.n	8005354 <scalbnf+0x50>
 8005396:	3319      	adds	r3, #25
 8005398:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800539c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80053a0:	eddf 7a07 	vldr	s15, [pc, #28]	; 80053c0 <scalbnf+0xbc>
 80053a4:	ee07 3a10 	vmov	s14, r3
 80053a8:	ee67 0a27 	vmul.f32	s1, s14, s15
 80053ac:	e7b9      	b.n	8005322 <scalbnf+0x1e>
 80053ae:	bf00      	nop
 80053b0:	ffff3cb0 	.word	0xffff3cb0
 80053b4:	4c000000 	.word	0x4c000000
 80053b8:	7149f2ca 	.word	0x7149f2ca
 80053bc:	0da24260 	.word	0x0da24260
 80053c0:	33000000 	.word	0x33000000

080053c4 <copysignf>:
 80053c4:	ee10 3a10 	vmov	r3, s0
 80053c8:	ee10 2a90 	vmov	r2, s1
 80053cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053d0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80053d4:	4313      	orrs	r3, r2
 80053d6:	ee00 3a10 	vmov	s0, r3
 80053da:	4770      	bx	lr

080053dc <__errno>:
 80053dc:	4b01      	ldr	r3, [pc, #4]	; (80053e4 <__errno+0x8>)
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20000378 	.word	0x20000378

080053e8 <_init>:
 80053e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ea:	bf00      	nop
 80053ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ee:	bc08      	pop	{r3}
 80053f0:	469e      	mov	lr, r3
 80053f2:	4770      	bx	lr

080053f4 <_fini>:
 80053f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f6:	bf00      	nop
 80053f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fa:	bc08      	pop	{r3}
 80053fc:	469e      	mov	lr, r3
 80053fe:	4770      	bx	lr
