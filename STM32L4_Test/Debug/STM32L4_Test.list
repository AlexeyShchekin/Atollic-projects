
STM32L4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fa4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800421c  0800421c  0001421c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004224  08004224  00014224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004228  08004228  00014228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  20000000  0800422c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008d0  20000100  0800432c  00020100  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200009d0  0800432c  000209d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025acb  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004a41  00000000  00000000  00045bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000096e3  00000000  00000000  0004a63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001008  00000000  00000000  00053d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001088  00000000  00000000  00054d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009425  00000000  00000000  00055db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005b34  00000000  00000000  0005f1d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00064d09  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002978  00000000  00000000  00064d88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004114 	.word	0x08004114

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	08004114 	.word	0x08004114

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <HAL_InitTick+0x24>)
{
 80004dc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e8:	f000 f884 	bl	80005f4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80004ec:	2200      	movs	r2, #0
 80004ee:	4621      	mov	r1, r4
 80004f0:	f04f 30ff 	mov.w	r0, #4294967295
 80004f4:	f000 f83e 	bl	8000574 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80004f8:	2000      	movs	r0, #0
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	20000080 	.word	0x20000080

08000500 <HAL_Init>:
{
 8000500:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000502:	2003      	movs	r0, #3
 8000504:	f000 f824 	bl	8000550 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000508:	2000      	movs	r0, #0
 800050a:	f7ff ffe5 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 800050e:	f003 fac7 	bl	8003aa0 <HAL_MspInit>
}
 8000512:	2000      	movs	r0, #0
 8000514:	bd08      	pop	{r3, pc}
	...

08000518 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000518:	4a02      	ldr	r2, [pc, #8]	; (8000524 <HAL_IncTick+0xc>)
 800051a:	6813      	ldr	r3, [r2, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20000140 	.word	0x20000140

08000528 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000528:	4b01      	ldr	r3, [pc, #4]	; (8000530 <HAL_GetTick+0x8>)
 800052a:	6818      	ldr	r0, [r3, #0]
}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000140 	.word	0x20000140

08000534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000534:	b538      	push	{r3, r4, r5, lr}
 8000536:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000538:	f7ff fff6 	bl	8000528 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800053c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800053e:	4605      	mov	r5, r0
  {
    wait++;
 8000540:	bf18      	it	ne
 8000542:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000544:	f7ff fff0 	bl	8000528 <HAL_GetTick>
 8000548:	1b40      	subs	r0, r0, r5
 800054a:	4284      	cmp	r4, r0
 800054c:	d8fa      	bhi.n	8000544 <HAL_Delay+0x10>
  {
  }
}
 800054e:	bd38      	pop	{r3, r4, r5, pc}

08000550 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000552:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000554:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000558:	041b      	lsls	r3, r3, #16
 800055a:	0c1b      	lsrs	r3, r3, #16
 800055c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000560:	0200      	lsls	r0, r0, #8
 8000562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000566:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800056a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800056c:	60d3      	str	r3, [r2, #12]
 800056e:	4770      	bx	lr
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	68dc      	ldr	r4, [r3, #12]
 800057a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800057e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000582:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000584:	2b04      	cmp	r3, #4
 8000586:	bf28      	it	cs
 8000588:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800058c:	f04f 0501 	mov.w	r5, #1
 8000590:	fa05 f303 	lsl.w	r3, r5, r3
 8000594:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000598:	bf8c      	ite	hi
 800059a:	3c03      	subhi	r4, #3
 800059c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800059e:	4019      	ands	r1, r3
 80005a0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005a2:	fa05 f404 	lsl.w	r4, r5, r4
 80005a6:	3c01      	subs	r4, #1
 80005a8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	ea42 0201 	orr.w	r2, r2, r1
 80005b0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	bfaf      	iteee	ge
 80005b6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ba:	f000 000f 	andlt.w	r0, r0, #15
 80005be:	4b06      	ldrlt	r3, [pc, #24]	; (80005d8 <HAL_NVIC_SetPriority+0x64>)
 80005c0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	bfa5      	ittet	ge
 80005c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005c8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00
 80005d8:	e000ed14 	.word	0xe000ed14

080005dc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005dc:	0942      	lsrs	r2, r0, #5
 80005de:	2301      	movs	r3, #1
 80005e0:	f000 001f 	and.w	r0, r0, #31
 80005e4:	fa03 f000 	lsl.w	r0, r3, r0
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <HAL_NVIC_EnableIRQ+0x14>)
 80005ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005ee:	4770      	bx	lr
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005f4:	3801      	subs	r0, #1
 80005f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005fa:	d20a      	bcs.n	8000612 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000600:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	21f0      	movs	r1, #240	; 0xf0
 8000604:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000608:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800060c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e000e010 	.word	0xe000e010
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000622:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000624:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000626:	bf0c      	ite	eq
 8000628:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800062c:	f022 0204 	bicne.w	r2, r2, #4
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	4770      	bx	lr
 8000634:	e000e010 	.word	0xe000e010

08000638 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000638:	4770      	bx	lr

0800063a <HAL_SYSTICK_IRQHandler>:
{
 800063a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800063c:	f7ff fffc 	bl	8000638 <HAL_SYSTICK_Callback>
 8000640:	bd08      	pop	{r3, pc}
	...

08000644 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000648:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800064a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80007f8 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000650:	4c67      	ldr	r4, [pc, #412]	; (80007f0 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000652:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 8000654:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000656:	9a01      	ldr	r2, [sp, #4]
 8000658:	40da      	lsrs	r2, r3
 800065a:	d102      	bne.n	8000662 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 800065c:	b005      	add	sp, #20
 800065e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000662:	2601      	movs	r6, #1
    if(iocurrent)
 8000664:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000666:	409e      	lsls	r6, r3
    if(iocurrent)
 8000668:	ea12 0e06 	ands.w	lr, r2, r6
 800066c:	f000 80b1 	beq.w	80007d2 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000670:	684a      	ldr	r2, [r1, #4]
 8000672:	f022 0710 	bic.w	r7, r2, #16
 8000676:	2f02      	cmp	r7, #2
 8000678:	d116      	bne.n	80006a8 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 800067a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800067e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000682:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000686:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800068a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800068e:	f04f 0c0f 	mov.w	ip, #15
 8000692:	fa0c fc0a 	lsl.w	ip, ip, sl
 8000696:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800069a:	690d      	ldr	r5, [r1, #16]
 800069c:	fa05 f50a 	lsl.w	r5, r5, sl
 80006a0:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80006a4:	f8c9 5020 	str.w	r5, [r9, #32]
 80006a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80006ac:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006ae:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80006b2:	fa05 f50c 	lsl.w	r5, r5, ip
 80006b6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006b8:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80006bc:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006c0:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006c4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006c6:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ca:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006cc:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006d0:	d811      	bhi.n	80006f6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80006d2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80006d4:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80006d8:	68cf      	ldr	r7, [r1, #12]
 80006da:	fa07 f70c 	lsl.w	r7, r7, ip
 80006de:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80006e2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006e4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006e6:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80006ea:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80006ee:	409f      	lsls	r7, r3
 80006f0:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80006f4:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80006f6:	f1ba 0f03 	cmp.w	sl, #3
 80006fa:	d107      	bne.n	800070c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80006fc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80006fe:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000702:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8000706:	409f      	lsls	r7, r3
 8000708:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800070a:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 800070c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 800070e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000710:	688e      	ldr	r6, [r1, #8]
 8000712:	fa06 f60c 	lsl.w	r6, r6, ip
 8000716:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000718:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800071a:	00d5      	lsls	r5, r2, #3
 800071c:	d559      	bpl.n	80007d2 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000722:	f045 0501 	orr.w	r5, r5, #1
 8000726:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 800072a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800072e:	f023 0603 	bic.w	r6, r3, #3
 8000732:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000736:	f005 0501 	and.w	r5, r5, #1
 800073a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800073e:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000740:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000744:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000746:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000748:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800074c:	270f      	movs	r7, #15
 800074e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000752:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000756:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800075a:	d03c      	beq.n	80007d6 <HAL_GPIO_Init+0x192>
 800075c:	4d25      	ldr	r5, [pc, #148]	; (80007f4 <HAL_GPIO_Init+0x1b0>)
 800075e:	42a8      	cmp	r0, r5
 8000760:	d03b      	beq.n	80007da <HAL_GPIO_Init+0x196>
 8000762:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000766:	42a8      	cmp	r0, r5
 8000768:	d039      	beq.n	80007de <HAL_GPIO_Init+0x19a>
 800076a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800076e:	42a8      	cmp	r0, r5
 8000770:	d037      	beq.n	80007e2 <HAL_GPIO_Init+0x19e>
 8000772:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000776:	42a8      	cmp	r0, r5
 8000778:	d035      	beq.n	80007e6 <HAL_GPIO_Init+0x1a2>
 800077a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800077e:	42a8      	cmp	r0, r5
 8000780:	d033      	beq.n	80007ea <HAL_GPIO_Init+0x1a6>
 8000782:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000786:	42a8      	cmp	r0, r5
 8000788:	bf14      	ite	ne
 800078a:	2507      	movne	r5, #7
 800078c:	2506      	moveq	r5, #6
 800078e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000792:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000794:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8000796:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000798:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800079c:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 800079e:	bf54      	ite	pl
 80007a0:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007a2:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80007a6:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80007a8:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007aa:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 80007ac:	bf54      	ite	pl
 80007ae:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007b0:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80007b4:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80007b6:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007b8:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 80007ba:	bf54      	ite	pl
 80007bc:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007be:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80007c2:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80007c4:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007c6:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 80007c8:	bf54      	ite	pl
 80007ca:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007cc:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80007d0:	60e5      	str	r5, [r4, #12]
    position++;
 80007d2:	3301      	adds	r3, #1
 80007d4:	e73f      	b.n	8000656 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80007d6:	2500      	movs	r5, #0
 80007d8:	e7d9      	b.n	800078e <HAL_GPIO_Init+0x14a>
 80007da:	2501      	movs	r5, #1
 80007dc:	e7d7      	b.n	800078e <HAL_GPIO_Init+0x14a>
 80007de:	2502      	movs	r5, #2
 80007e0:	e7d5      	b.n	800078e <HAL_GPIO_Init+0x14a>
 80007e2:	2503      	movs	r5, #3
 80007e4:	e7d3      	b.n	800078e <HAL_GPIO_Init+0x14a>
 80007e6:	2504      	movs	r5, #4
 80007e8:	e7d1      	b.n	800078e <HAL_GPIO_Init+0x14a>
 80007ea:	2505      	movs	r5, #5
 80007ec:	e7cf      	b.n	800078e <HAL_GPIO_Init+0x14a>
 80007ee:	bf00      	nop
 80007f0:	40010400 	.word	0x40010400
 80007f4:	48000400 	.word	0x48000400
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007fc:	b10a      	cbz	r2, 8000802 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007fe:	6181      	str	r1, [r0, #24]
 8000800:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000802:	6281      	str	r1, [r0, #40]	; 0x28
 8000804:	4770      	bx	lr

08000806 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000806:	6943      	ldr	r3, [r0, #20]
 8000808:	4059      	eors	r1, r3
 800080a:	6141      	str	r1, [r0, #20]
 800080c:	4770      	bx	lr

0800080e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800080e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000812:	4604      	mov	r4, r0
{
 8000814:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 8000816:	2800      	cmp	r0, #0
 8000818:	d07c      	beq.n	8000914 <HAL_PCD_Init+0x106>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 800081a:	f890 3385 	ldrb.w	r3, [r0, #901]	; 0x385
 800081e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000822:	b91b      	cbnz	r3, 800082c <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000824:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000828:	f003 fa22 	bl	8003c70 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800082c:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800082e:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8000830:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000834:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  __HAL_PCD_DISABLE(hpcd);
 8000838:	f002 f83d 	bl	80028b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 800083c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083e:	466e      	mov	r6, sp
 8000840:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000844:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000846:	e895 0003 	ldmia.w	r5, {r0, r1}
 800084a:	e886 0003 	stmia.w	r6, {r0, r1}
 800084e:	f104 0804 	add.w	r8, r4, #4
 8000852:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000856:	6820      	ldr	r0, [r4, #0]
 8000858:	f002 f813 	bl	8002882 <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800085c:	2100      	movs	r1, #0
 800085e:	6820      	ldr	r0, [r4, #0]
 8000860:	f002 f82f 	bl	80028c2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000864:	2200      	movs	r2, #0
 8000866:	6860      	ldr	r0, [r4, #4]
 8000868:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800086c:	f104 0510 	add.w	r5, r4, #16
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8000870:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000872:	4611      	mov	r1, r2
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000874:	4282      	cmp	r2, r0
 8000876:	f103 031c 	add.w	r3, r3, #28
 800087a:	d13b      	bne.n	80008f4 <HAL_PCD_Init+0xe6>
 800087c:	2200      	movs	r2, #0
 800087e:	4623      	mov	r3, r4
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8000880:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000882:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000886:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (index = 0; index < 15 ; index++)
 800088a:	3201      	adds	r2, #1
 800088c:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0;
 800088e:	f883 71e1 	strb.w	r7, [r3, #481]	; 0x1e1
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000892:	f883 71e3 	strb.w	r7, [r3, #483]	; 0x1e3
    hpcd->OUT_ep[index].maxpacket = 0;
 8000896:	f8c3 71e8 	str.w	r7, [r3, #488]	; 0x1e8
    hpcd->OUT_ep[index].xfer_buff = 0;
 800089a:	f8c3 71ec 	str.w	r7, [r3, #492]	; 0x1ec
    hpcd->OUT_ep[index].xfer_len = 0;
 800089e:	f8c3 71f4 	str.w	r7, [r3, #500]	; 0x1f4
 80008a2:	f103 031c 	add.w	r3, r3, #28
  for (index = 0; index < 15 ; index++)
 80008a6:	d1ec      	bne.n	8000882 <HAL_PCD_Init+0x74>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80008a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008aa:	466e      	mov	r6, sp
 80008ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80008ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80008b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008b6:	e886 0003 	stmia.w	r6, {r0, r1}
 80008ba:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80008be:	6820      	ldr	r0, [r4, #0]
 80008c0:	f002 f816 	bl	80028f0 <USB_DevInit>

  hpcd->USB_Address = 0;
  
  hpcd->State= HAL_PCD_STATE_READY;
 80008c4:	2301      	movs	r3, #1
  hpcd->USB_Address = 0;
 80008c6:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State= HAL_PCD_STATE_READY;
 80008ca:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 80008ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d102      	bne.n	80008da <HAL_PCD_Init+0xcc>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 80008d4:	4620      	mov	r0, r4
 80008d6:	f000 fc54 	bl	8001182 <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 80008da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d102      	bne.n	80008e6 <HAL_PCD_Init+0xd8>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 80008e0:	4620      	mov	r0, r4
 80008e2:	f000 fc61 	bl	80011a8 <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 80008e6:	6820      	ldr	r0, [r4, #0]
 80008e8:	f002 fac1 	bl	8002e6e <USB_DevDisconnect>
  return HAL_OK;
 80008ec:	2000      	movs	r0, #0
}
 80008ee:	b00a      	add	sp, #40	; 0x28
 80008f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->IN_ep[index].num = index;
 80008f4:	f803 2c1c 	strb.w	r2, [r3, #-28]
    hpcd->IN_ep[index].tx_fifo_num = index;
 80008f8:	f823 2c16 	strh.w	r2, [r3, #-22]
    hpcd->IN_ep[index].is_in = 1;
 80008fc:	f803 6c1b 	strb.w	r6, [r3, #-27]
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000900:	f803 1c19 	strb.w	r1, [r3, #-25]
    hpcd->IN_ep[index].maxpacket =  0;
 8000904:	f843 1c14 	str.w	r1, [r3, #-20]
    hpcd->IN_ep[index].xfer_buff = 0;
 8000908:	f843 1c10 	str.w	r1, [r3, #-16]
    hpcd->IN_ep[index].xfer_len = 0;
 800090c:	f843 1c08 	str.w	r1, [r3, #-8]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000910:	3201      	adds	r2, #1
 8000912:	e7af      	b.n	8000874 <HAL_PCD_Init+0x66>
    return HAL_ERROR;
 8000914:	2001      	movs	r0, #1
 8000916:	e7ea      	b.n	80008ee <HAL_PCD_Init+0xe0>

08000918 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8000918:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 800091c:	2b01      	cmp	r3, #1
{ 
 800091e:	b510      	push	{r4, lr}
 8000920:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000922:	d00c      	beq.n	800093e <HAL_PCD_Start+0x26>
 8000924:	2301      	movs	r3, #1
 8000926:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  USB_DevConnect (hpcd->Instance);
 800092a:	6800      	ldr	r0, [r0, #0]
 800092c:	f002 fa93 	bl	8002e56 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000930:	6820      	ldr	r0, [r4, #0]
 8000932:	f001 ffba 	bl	80028aa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000936:	2000      	movs	r0, #0
 8000938:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800093c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800093e:	2002      	movs	r0, #2
}
 8000940:	bd10      	pop	{r4, pc}
	...

08000944 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000948:	6807      	ldr	r7, [r0, #0]
{
 800094a:	b087      	sub	sp, #28
 800094c:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep = NULL;
  uint32_t hclk = 80000000;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800094e:	4638      	mov	r0, r7
 8000950:	f002 fac7 	bl	8002ee2 <USB_GetMode>
 8000954:	9002      	str	r0, [sp, #8]
 8000956:	2800      	cmp	r0, #0
 8000958:	f040 8155 	bne.w	8000c06 <HAL_PCD_IRQHandler+0x2c2>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 800095c:	6820      	ldr	r0, [r4, #0]
 800095e:	f002 fa92 	bl	8002e86 <USB_ReadInterrupts>
 8000962:	2800      	cmp	r0, #0
 8000964:	f000 814f 	beq.w	8000c06 <HAL_PCD_IRQHandler+0x2c2>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000968:	6820      	ldr	r0, [r4, #0]
 800096a:	f002 fa8c 	bl	8002e86 <USB_ReadInterrupts>
 800096e:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000970:	bf48      	it	mi
 8000972:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000974:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000976:	bf42      	ittt	mi
 8000978:	6953      	ldrmi	r3, [r2, #20]
 800097a:	f003 0302 	andmi.w	r3, r3, #2
 800097e:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000980:	f002 fa81 	bl	8002e86 <USB_ReadInterrupts>
 8000984:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8000988:	d00c      	beq.n	80009a4 <HAL_PCD_IRQHandler+0x60>
    {
      epnum = 0;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800098a:	6820      	ldr	r0, [r4, #0]
 800098c:	f002 fa7f 	bl	8002e8e <USB_ReadDevAllOutEpInterrupt>
 8000990:	f507 6930 	add.w	r9, r7, #2816	; 0xb00
 8000994:	4680      	mov	r8, r0
 8000996:	46a3      	mov	fp, r4
      
      while (ep_intr)
 8000998:	464e      	mov	r6, r9
      epnum = 0;
 800099a:	2500      	movs	r5, #0
      while (ep_intr)
 800099c:	f1b8 0f00 	cmp.w	r8, #0
 80009a0:	f040 8134 	bne.w	8000c0c <HAL_PCD_IRQHandler+0x2c8>
        epnum++;
        ep_intr >>= 1;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80009a4:	6820      	ldr	r0, [r4, #0]
 80009a6:	f002 fa6e 	bl	8002e86 <USB_ReadInterrupts>
 80009aa:	0342      	lsls	r2, r0, #13
 80009ac:	d50b      	bpl.n	80009c6 <HAL_PCD_IRQHandler+0x82>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80009ae:	6820      	ldr	r0, [r4, #0]
 80009b0:	f002 fa75 	bl	8002e9e <USB_ReadDevAllInEpInterrupt>
 80009b4:	4626      	mov	r6, r4
 80009b6:	4683      	mov	fp, r0
 80009b8:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      
      epnum = 0;
 80009bc:	2500      	movs	r5, #0
      
      while ( ep_intr )
 80009be:	f1bb 0f00 	cmp.w	fp, #0
 80009c2:	f040 81a1 	bne.w	8000d08 <HAL_PCD_IRQHandler+0x3c4>
        ep_intr >>= 1;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80009c6:	6820      	ldr	r0, [r4, #0]
 80009c8:	f002 fa5d 	bl	8002e86 <USB_ReadInterrupts>
 80009cc:	2800      	cmp	r0, #0
 80009ce:	da15      	bge.n	80009fc <HAL_PCD_IRQHandler+0xb8>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80009d0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80009d4:	f023 0301 	bic.w	r3, r3, #1
 80009d8:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
      
      if(hpcd->LPM_State == LPM_L1)
 80009dc:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	f040 822c 	bne.w	8000e3e <HAL_PCD_IRQHandler+0x4fa>
      {
        hpcd->LPM_State = LPM_L0;
 80009e6:	2100      	movs	r1, #0
 80009e8:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80009ec:	4620      	mov	r0, r4
 80009ee:	f003 faa5 	bl	8003f3c <HAL_PCDEx_LPM_Callback>
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80009f2:	6822      	ldr	r2, [r4, #0]
 80009f4:	6953      	ldr	r3, [r2, #20]
 80009f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80009fa:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80009fc:	6820      	ldr	r0, [r4, #0]
 80009fe:	f002 fa42 	bl	8002e86 <USB_ReadInterrupts>
 8000a02:	0503      	lsls	r3, r0, #20
 8000a04:	d50b      	bpl.n	8000a1e <HAL_PCD_IRQHandler+0xda>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000a06:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8000a0a:	07de      	lsls	r6, r3, #31
 8000a0c:	d502      	bpl.n	8000a14 <HAL_PCD_IRQHandler+0xd0>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8000a0e:	4620      	mov	r0, r4
 8000a10:	f003 f998 	bl	8003d44 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000a14:	6822      	ldr	r2, [r4, #0]
 8000a16:	6953      	ldr	r3, [r2, #20]
 8000a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a1c:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8000a1e:	6820      	ldr	r0, [r4, #0]
 8000a20:	f002 fa31 	bl	8002e86 <USB_ReadInterrupts>
 8000a24:	0100      	lsls	r0, r0, #4
 8000a26:	d514      	bpl.n	8000a52 <HAL_PCD_IRQHandler+0x10e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 8000a28:	6823      	ldr	r3, [r4, #0]
 8000a2a:	695a      	ldr	r2, [r3, #20]
 8000a2c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8000a30:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8000a32:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 8000a36:	2a00      	cmp	r2, #0
 8000a38:	f040 8205 	bne.w	8000e46 <HAL_PCD_IRQHandler+0x502>
      {   
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8000a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8000a3e:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8000a40:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8000a44:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8000a48:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	f003 fa75 	bl	8003f3c <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }
    
    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000a52:	6820      	ldr	r0, [r4, #0]
 8000a54:	f002 fa17 	bl	8002e86 <USB_ReadInterrupts>
 8000a58:	04c1      	lsls	r1, r0, #19
 8000a5a:	d537      	bpl.n	8000acc <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000a5c:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 8000a60:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0x10);
 8000a62:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000a64:	f023 0301 	bic.w	r3, r3, #1
 8000a68:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0x10);
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	f001 ffd8 	bl	8002a20 <USB_FlushTxFifo>
      
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000a70:	6861      	ldr	r1, [r4, #4]
 8000a72:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(index)->DIEPINT = 0xFF;
 8000a76:	22ff      	movs	r2, #255	; 0xff
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000a78:	9802      	ldr	r0, [sp, #8]
 8000a7a:	4288      	cmp	r0, r1
 8000a7c:	f040 81e7 	bne.w	8000e4e <HAL_PCD_IRQHandler+0x50a>
        USBx_OUTEP(index)->DOEPINT = 0xFF;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
 8000a84:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8000a86:	69f3      	ldr	r3, [r6, #28]
 8000a88:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000a8c:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8000a8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	f000 81e4 	beq.w	8000e5e <HAL_PCD_IRQHandler+0x51a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8000a96:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8000a9a:	f043 030b 	orr.w	r3, r3, #11
 8000a9e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8000aa2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000aa4:	f043 030b 	orr.w	r3, r3, #11
 8000aa8:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000aaa:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000aae:	7c21      	ldrb	r1, [r4, #16]
 8000ab0:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000ab2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000ab6:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000aba:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8000abe:	f002 fa2f 	bl	8002f20 <USB_EP0_OutStart>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000ac2:	6822      	ldr	r2, [r4, #0]
 8000ac4:	6953      	ldr	r3, [r2, #20]
 8000ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aca:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000acc:	6820      	ldr	r0, [r4, #0]
 8000ace:	f002 f9da 	bl	8002e86 <USB_ReadInterrupts>
 8000ad2:	0482      	lsls	r2, r0, #18
 8000ad4:	d520      	bpl.n	8000b18 <HAL_PCD_IRQHandler+0x1d4>
    {
      USB_ActivateSetup(hpcd->Instance);
 8000ad6:	6820      	ldr	r0, [r4, #0]
 8000ad8:	f002 fa07 	bl	8002eea <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000adc:	6822      	ldr	r2, [r4, #0]
 8000ade:	68d3      	ldr	r3, [r2, #12]
 8000ae0:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000ae4:	60d3      	str	r3, [r2, #12]
      
      hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	60e3      	str	r3, [r4, #12]
      hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ; 
 8000aea:	2340      	movs	r3, #64	; 0x40
 8000aec:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */

      /* Get hclk frequency value */
      hclk = HAL_RCC_GetHCLKFreq();
 8000aee:	f000 ff67 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
    
      if((hclk >= 14200000)&&(hclk < 15000000))
 8000af2:	4b82      	ldr	r3, [pc, #520]	; (8000cfc <HAL_PCD_IRQHandler+0x3b8>)
 8000af4:	4a82      	ldr	r2, [pc, #520]	; (8000d00 <HAL_PCD_IRQHandler+0x3bc>)
 8000af6:	4403      	add	r3, r0
 8000af8:	4293      	cmp	r3, r2
 8000afa:	6823      	ldr	r3, [r4, #0]
 8000afc:	f200 81b8 	bhi.w	8000e70 <HAL_PCD_IRQHandler+0x52c>
      {
        /* hclk Clock Range between 14.2-15 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 8000b00:	68da      	ldr	r2, [r3, #12]
 8000b02:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
      }
      
      else /* if(hclk >= 32000000) */
      {
        /* hclk Clock Range between 32-80 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8000b06:	60da      	str	r2, [r3, #12]
      }  
      
      HAL_PCD_ResetCallback(hpcd);
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f003 f90e 	bl	8003d2a <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000b0e:	6822      	ldr	r2, [r4, #0]
 8000b10:	6953      	ldr	r3, [r2, #20]
 8000b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b16:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000b18:	6820      	ldr	r0, [r4, #0]
 8000b1a:	f002 f9b4 	bl	8002e86 <USB_ReadInterrupts>
 8000b1e:	06c3      	lsls	r3, r0, #27
 8000b20:	d52b      	bpl.n	8000b7a <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000b22:	6822      	ldr	r2, [r4, #0]
 8000b24:	6993      	ldr	r3, [r2, #24]
 8000b26:	f023 0310 	bic.w	r3, r3, #16
 8000b2a:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8000b2c:	6a3e      	ldr	r6, [r7, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000b2e:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8000b32:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000b34:	f006 090f 	and.w	r9, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000b38:	f040 81ea 	bne.w	8000f10 <HAL_PCD_IRQHandler+0x5cc>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8000b3c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000b40:	421e      	tst	r6, r3
 8000b42:	d015      	beq.n	8000b70 <HAL_PCD_IRQHandler+0x22c>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8000b44:	f04f 081c 	mov.w	r8, #28
 8000b48:	fb08 4809 	mla	r8, r8, r9, r4
 8000b4c:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000b50:	4632      	mov	r2, r6
 8000b52:	f8d8 11ec 	ldr.w	r1, [r8, #492]	; 0x1ec
 8000b56:	4638      	mov	r0, r7
 8000b58:	f002 f925 	bl	8002da6 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000b5c:	f8d8 31ec 	ldr.w	r3, [r8, #492]	; 0x1ec
 8000b60:	4433      	add	r3, r6
 8000b62:	f8c8 31ec 	str.w	r3, [r8, #492]	; 0x1ec
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000b66:	f8d8 31f8 	ldr.w	r3, [r8, #504]	; 0x1f8
 8000b6a:	441e      	add	r6, r3
 8000b6c:	f8c8 61f8 	str.w	r6, [r8, #504]	; 0x1f8
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000b70:	6822      	ldr	r2, [r4, #0]
 8000b72:	6993      	ldr	r3, [r2, #24]
 8000b74:	f043 0310 	orr.w	r3, r3, #16
 8000b78:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000b7a:	6820      	ldr	r0, [r4, #0]
 8000b7c:	f002 f983 	bl	8002e86 <USB_ReadInterrupts>
 8000b80:	0707      	lsls	r7, r0, #28
 8000b82:	d507      	bpl.n	8000b94 <HAL_PCD_IRQHandler+0x250>
    {
      HAL_PCD_SOFCallback(hpcd);
 8000b84:	4620      	mov	r0, r4
 8000b86:	f003 f8cc 	bl	8003d22 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000b8a:	6822      	ldr	r2, [r4, #0]
 8000b8c:	6953      	ldr	r3, [r2, #20]
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000b94:	6820      	ldr	r0, [r4, #0]
 8000b96:	f002 f976 	bl	8002e86 <USB_ReadInterrupts>
 8000b9a:	02c6      	lsls	r6, r0, #11
 8000b9c:	d508      	bpl.n	8000bb0 <HAL_PCD_IRQHandler+0x26c>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8000b9e:	b2e9      	uxtb	r1, r5
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	f003 f905 	bl	8003db0 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000ba6:	6822      	ldr	r2, [r4, #0]
 8000ba8:	6953      	ldr	r3, [r2, #20]
 8000baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bae:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000bb0:	6820      	ldr	r0, [r4, #0]
 8000bb2:	f002 f968 	bl	8002e86 <USB_ReadInterrupts>
 8000bb6:	0280      	lsls	r0, r0, #10
 8000bb8:	d508      	bpl.n	8000bcc <HAL_PCD_IRQHandler+0x288>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8000bba:	b2e9      	uxtb	r1, r5
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f003 f8f3 	bl	8003da8 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000bc2:	6822      	ldr	r2, [r4, #0]
 8000bc4:	6953      	ldr	r3, [r2, #20]
 8000bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bca:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000bcc:	6820      	ldr	r0, [r4, #0]
 8000bce:	f002 f95a 	bl	8002e86 <USB_ReadInterrupts>
 8000bd2:	0041      	lsls	r1, r0, #1
 8000bd4:	d507      	bpl.n	8000be6 <HAL_PCD_IRQHandler+0x2a2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	f003 f8ee 	bl	8003db8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000bdc:	6822      	ldr	r2, [r4, #0]
 8000bde:	6953      	ldr	r3, [r2, #20]
 8000be0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000be4:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000be6:	6820      	ldr	r0, [r4, #0]
 8000be8:	f002 f94d 	bl	8002e86 <USB_ReadInterrupts>
 8000bec:	0742      	lsls	r2, r0, #29
 8000bee:	d50a      	bpl.n	8000c06 <HAL_PCD_IRQHandler+0x2c2>
    {
      temp = hpcd->Instance->GOTGINT;
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000bf4:	076b      	lsls	r3, r5, #29
 8000bf6:	d502      	bpl.n	8000bfe <HAL_PCD_IRQHandler+0x2ba>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f003 f8e1 	bl	8003dc0 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	4315      	orrs	r5, r2
 8000c04:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000c06:	b007      	add	sp, #28
 8000c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1)
 8000c0c:	f018 0f01 	tst.w	r8, #1
 8000c10:	d049      	beq.n	8000ca6 <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000c12:	b2ea      	uxtb	r2, r5
 8000c14:	4611      	mov	r1, r2
 8000c16:	6820      	ldr	r0, [r4, #0]
 8000c18:	9203      	str	r2, [sp, #12]
 8000c1a:	f002 f948 	bl	8002eae <USB_ReadDevOutEPInterrupt>
          if (( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000c1e:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000c22:	4682      	mov	sl, r0
          if (( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000c24:	d032      	beq.n	8000c8c <HAL_PCD_IRQHandler+0x348>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000c26:	2101      	movs	r1, #1
 8000c28:	60b1      	str	r1, [r6, #8]
            if (USBx->GSNPSID == USB_OTG_CORE_ID_310A)
 8000c2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000c2c:	4b35      	ldr	r3, [pc, #212]	; (8000d04 <HAL_PCD_IRQHandler+0x3c0>)
 8000c2e:	9a03      	ldr	r2, [sp, #12]
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d13f      	bne.n	8000cb4 <HAL_PCD_IRQHandler+0x370>
              if (!(USBx_OUTEP(0)->DOEPINT & (0x1 << 15)))
 8000c34:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8000c38:	0409      	lsls	r1, r1, #16
 8000c3a:	d41f      	bmi.n	8000c7c <HAL_PCD_IRQHandler+0x338>
                  if (hpcd->Init.dma_enable == 1)
 8000c3c:	6921      	ldr	r1, [r4, #16]
 8000c3e:	2901      	cmp	r1, #1
 8000c40:	d10c      	bne.n	8000c5c <HAL_PCD_IRQHandler+0x318>
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8000c42:	6931      	ldr	r1, [r6, #16]
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8000c44:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8000c48:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8000c4c:	1a41      	subs	r1, r0, r1
                  	hpcd->OUT_ep[epnum].xfer_count =
 8000c4e:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                    hpcd->OUT_ep[epnum].xfer_buff +=
 8000c52:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 8000c56:	4408      	add	r0, r1
 8000c58:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
                HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f003 f84e 	bl	8003d00 <HAL_PCD_DataOutStageCallback>
                if (hpcd->Init.dma_enable == 1)
 8000c64:	6921      	ldr	r1, [r4, #16]
 8000c66:	2901      	cmp	r1, #1
 8000c68:	d108      	bne.n	8000c7c <HAL_PCD_IRQHandler+0x338>
                  if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8000c6a:	b93d      	cbnz	r5, 8000c7c <HAL_PCD_IRQHandler+0x338>
 8000c6c:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 8000c70:	b922      	cbnz	r2, 8000c7c <HAL_PCD_IRQHandler+0x338>
                    USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8000c72:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8000c76:	6820      	ldr	r0, [r4, #0]
 8000c78:	f002 f952 	bl	8002f20 <USB_EP0_OutStart>
              USBx_OUTEP(0)->DOEPINT |= (0x1 << 15) | (0x1 << 5);
 8000c7c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8000c80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c84:	f042 0220 	orr.w	r2, r2, #32
 8000c88:	f8c9 2008 	str.w	r2, [r9, #8]
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000c8c:	f01a 0f08 	tst.w	sl, #8
 8000c90:	d004      	beq.n	8000c9c <HAL_PCD_IRQHandler+0x358>
            HAL_PCD_SetupStageCallback(hpcd);
 8000c92:	4620      	mov	r0, r4
 8000c94:	f003 f82e 	bl	8003cf4 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000c98:	2308      	movs	r3, #8
 8000c9a:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000c9c:	f01a 0f10 	tst.w	sl, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000ca0:	bf1c      	itt	ne
 8000ca2:	2310      	movne	r3, #16
 8000ca4:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8000ca6:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8000ca8:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8000cac:	3620      	adds	r6, #32
 8000cae:	f10b 0b1c 	add.w	fp, fp, #28
 8000cb2:	e673      	b.n	800099c <HAL_PCD_IRQHandler+0x58>
              if (hpcd->Init.dma_enable == 1)
 8000cb4:	6921      	ldr	r1, [r4, #16]
 8000cb6:	2901      	cmp	r1, #1
 8000cb8:	d10c      	bne.n	8000cd4 <HAL_PCD_IRQHandler+0x390>
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8000cba:	6931      	ldr	r1, [r6, #16]
                                               hpcd->OUT_ep[epnum].maxpacket -
 8000cbc:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8000cc0:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                               hpcd->OUT_ep[epnum].maxpacket -
 8000cc4:	1a41      	subs	r1, r0, r1
                hpcd->OUT_ep[epnum].xfer_count =
 8000cc6:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8000cca:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 8000cce:	4408      	add	r0, r1
 8000cd0:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
              HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f003 f812 	bl	8003d00 <HAL_PCD_DataOutStageCallback>
              if (hpcd->Init.dma_enable == 1)
 8000cdc:	6921      	ldr	r1, [r4, #16]
 8000cde:	2901      	cmp	r1, #1
 8000ce0:	d1d4      	bne.n	8000c8c <HAL_PCD_IRQHandler+0x348>
                if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	d1d2      	bne.n	8000c8c <HAL_PCD_IRQHandler+0x348>
 8000ce6:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	d1ce      	bne.n	8000c8c <HAL_PCD_IRQHandler+0x348>
                  USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8000cee:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8000cf2:	6820      	ldr	r0, [r4, #0]
 8000cf4:	f002 f914 	bl	8002f20 <USB_EP0_OutStart>
 8000cf8:	e7c8      	b.n	8000c8c <HAL_PCD_IRQHandler+0x348>
 8000cfa:	bf00      	nop
 8000cfc:	ff275340 	.word	0xff275340
 8000d00:	000c34ff 	.word	0x000c34ff
 8000d04:	4f54310a 	.word	0x4f54310a
        if (ep_intr & 0x1) /* In ITR */
 8000d08:	f01b 0f01 	tst.w	fp, #1
 8000d0c:	d074      	beq.n	8000df8 <HAL_PCD_IRQHandler+0x4b4>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000d0e:	fa5f fa85 	uxtb.w	sl, r5
 8000d12:	4651      	mov	r1, sl
 8000d14:	6820      	ldr	r0, [r4, #0]
 8000d16:	f002 f8d4 	bl	8002ec2 <USB_ReadDevInEPInterrupt>
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000d1a:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000d1e:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000d20:	d020      	beq.n	8000d64 <HAL_PCD_IRQHandler+0x420>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d22:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            fifoemptymsk = 0x1 << epnum;
 8000d26:	2101      	movs	r1, #1
 8000d28:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d2a:	ea23 0301 	bic.w	r3, r3, r1
 8000d2e:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000d32:	2301      	movs	r3, #1
 8000d34:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1)
 8000d38:	6923      	ldr	r3, [r4, #16]
 8000d3a:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8000d3c:	bf01      	itttt	eq
 8000d3e:	6cb3      	ldreq	r3, [r6, #72]	; 0x48
 8000d40:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 8000d42:	189b      	addeq	r3, r3, r2
 8000d44:	64b3      	streq	r3, [r6, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8000d46:	4651      	mov	r1, sl
 8000d48:	4620      	mov	r0, r4
 8000d4a:	f002 ffe2 	bl	8003d12 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 8000d4e:	6921      	ldr	r1, [r4, #16]
 8000d50:	2901      	cmp	r1, #1
 8000d52:	d107      	bne.n	8000d64 <HAL_PCD_IRQHandler+0x420>
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8000d54:	b935      	cbnz	r5, 8000d64 <HAL_PCD_IRQHandler+0x420>
 8000d56:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000d58:	b923      	cbnz	r3, 8000d64 <HAL_PCD_IRQHandler+0x420>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8000d5a:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8000d5e:	6820      	ldr	r0, [r4, #0]
 8000d60:	f002 f8de 	bl	8002f20 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000d64:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000d68:	bf1c      	itt	ne
 8000d6a:	2308      	movne	r3, #8
 8000d6c:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000d70:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000d74:	bf1c      	itt	ne
 8000d76:	2310      	movne	r3, #16
 8000d78:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000d7c:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000d80:	bf1c      	itt	ne
 8000d82:	2340      	movne	r3, #64	; 0x40
 8000d84:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000d88:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000d8c:	bf1c      	itt	ne
 8000d8e:	2302      	movne	r3, #2
 8000d90:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000d94:	f018 0f80 	tst.w	r8, #128	; 0x80
 8000d98:	d02e      	beq.n	8000df8 <HAL_PCD_IRQHandler+0x4b4>
  * @param  epnum: endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	9303      	str	r3, [sp, #12]
  int32_t len = 0U;
  uint32_t len32b = 0;
  uint32_t fifoemptymsk = 0;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8000d9e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8000da0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000da2:	eba3 0802 	sub.w	r8, r3, r2
 8000da6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000da8:	4598      	cmp	r8, r3
 8000daa:	bf28      	it	cs
 8000dac:	4698      	movcs	r8, r3
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3) / 4;
 8000dae:	f108 0303 	add.w	r3, r8, #3
 8000db2:	2204      	movs	r2, #4
 8000db4:	fb93 f3f2 	sdiv	r3, r3, r2
 8000db8:	9304      	str	r3, [sp, #16]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8000dba:	9b03      	ldr	r3, [sp, #12]
 8000dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000dc0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8000dc4:	9305      	str	r3, [sp, #20]
 8000dc6:	9b05      	ldr	r3, [sp, #20]
 8000dc8:	9a04      	ldr	r2, [sp, #16]
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d904      	bls.n	8000ddc <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 8000dd2:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8000dd4:	6d33      	ldr	r3, [r6, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d900      	bls.n	8000ddc <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 8000dda:	b9a3      	cbnz	r3, 8000e06 <HAL_PCD_IRQHandler+0x4c2>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0)
 8000ddc:	f1b8 0f00 	cmp.w	r8, #0
 8000de0:	dc0a      	bgt.n	8000df8 <HAL_PCD_IRQHandler+0x4b4>
  {
    fifoemptymsk = 0x1 << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000de2:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = 0x1 << epnum;
 8000de4:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000de6:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 8000dea:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1 << epnum;
 8000dee:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000df0:	ea23 0302 	bic.w	r3, r3, r2
 8000df4:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        epnum++;
 8000df8:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8000dfa:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8000dfe:	361c      	adds	r6, #28
 8000e00:	f109 0920 	add.w	r9, r9, #32
 8000e04:	e5db      	b.n	80009be <HAL_PCD_IRQHandler+0x7a>
    len = ep->xfer_len - ep->xfer_count;
 8000e06:	eba3 0802 	sub.w	r8, r3, r2
 8000e0a:	6c73      	ldr	r3, [r6, #68]	; 0x44
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000e0c:	9803      	ldr	r0, [sp, #12]
 8000e0e:	4598      	cmp	r8, r3
 8000e10:	bf28      	it	cs
 8000e12:	4698      	movcs	r8, r3
    len32b = (len + 3) / 4;
 8000e14:	2204      	movs	r2, #4
 8000e16:	f108 0303 	add.w	r3, r8, #3
 8000e1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e1e:	9304      	str	r3, [sp, #16]
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000e20:	7c23      	ldrb	r3, [r4, #16]
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	4652      	mov	r2, sl
 8000e26:	fa1f f388 	uxth.w	r3, r8
 8000e2a:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8000e2c:	f001 ffaa 	bl	8002d84 <USB_WritePacket>
    ep->xfer_buff  += len;
 8000e30:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8000e32:	4443      	add	r3, r8
 8000e34:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8000e36:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8000e38:	4443      	add	r3, r8
 8000e3a:	6573      	str	r3, [r6, #84]	; 0x54
 8000e3c:	e7c3      	b.n	8000dc6 <HAL_PCD_IRQHandler+0x482>
        HAL_PCD_ResumeCallback(hpcd);
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f002 ff98 	bl	8003d74 <HAL_PCD_ResumeCallback>
 8000e44:	e5d5      	b.n	80009f2 <HAL_PCD_IRQHandler+0xae>
        HAL_PCD_SuspendCallback(hpcd);
 8000e46:	4620      	mov	r0, r4
 8000e48:	f002 ff7c 	bl	8003d44 <HAL_PCD_SuspendCallback>
 8000e4c:	e601      	b.n	8000a52 <HAL_PCD_IRQHandler+0x10e>
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000e4e:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(index)->DIEPINT = 0xFF;
 8000e50:	609a      	str	r2, [r3, #8]
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000e52:	3001      	adds	r0, #1
        USBx_OUTEP(index)->DOEPINT = 0xFF;
 8000e54:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000e58:	9002      	str	r0, [sp, #8]
 8000e5a:	3320      	adds	r3, #32
 8000e5c:	e60c      	b.n	8000a78 <HAL_PCD_IRQHandler+0x134>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8000e5e:	6973      	ldr	r3, [r6, #20]
 8000e60:	f043 030b 	orr.w	r3, r3, #11
 8000e64:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000e66:	6933      	ldr	r3, [r6, #16]
 8000e68:	f043 030b 	orr.w	r3, r3, #11
 8000e6c:	6133      	str	r3, [r6, #16]
 8000e6e:	e61c      	b.n	8000aaa <HAL_PCD_IRQHandler+0x166>
      else if((hclk >= 15000000)&&(hclk < 16000000))
 8000e70:	4a2f      	ldr	r2, [pc, #188]	; (8000f30 <HAL_PCD_IRQHandler+0x5ec>)
 8000e72:	4930      	ldr	r1, [pc, #192]	; (8000f34 <HAL_PCD_IRQHandler+0x5f0>)
 8000e74:	4402      	add	r2, r0
 8000e76:	428a      	cmp	r2, r1
 8000e78:	d803      	bhi.n	8000e82 <HAL_PCD_IRQHandler+0x53e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000e80:	e641      	b.n	8000b06 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 16000000)&&(hclk < 17200000))
 8000e82:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8000e86:	492c      	ldr	r1, [pc, #176]	; (8000f38 <HAL_PCD_IRQHandler+0x5f4>)
 8000e88:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8000e8c:	428a      	cmp	r2, r1
 8000e8e:	d803      	bhi.n	8000e98 <HAL_PCD_IRQHandler+0x554>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8000e96:	e636      	b.n	8000b06 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 17200000)&&(hclk < 18500000))
 8000e98:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8000e9c:	4927      	ldr	r1, [pc, #156]	; (8000f3c <HAL_PCD_IRQHandler+0x5f8>)
 8000e9e:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8000ea2:	428a      	cmp	r2, r1
 8000ea4:	d803      	bhi.n	8000eae <HAL_PCD_IRQHandler+0x56a>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000eac:	e62b      	b.n	8000b06 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 18500000)&&(hclk < 20000000))
 8000eae:	4a24      	ldr	r2, [pc, #144]	; (8000f40 <HAL_PCD_IRQHandler+0x5fc>)
 8000eb0:	4924      	ldr	r1, [pc, #144]	; (8000f44 <HAL_PCD_IRQHandler+0x600>)
 8000eb2:	4402      	add	r2, r0
 8000eb4:	428a      	cmp	r2, r1
 8000eb6:	d803      	bhi.n	8000ec0 <HAL_PCD_IRQHandler+0x57c>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8000eb8:	68da      	ldr	r2, [r3, #12]
 8000eba:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8000ebe:	e622      	b.n	8000b06 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 20000000)&&(hclk < 21800000))
 8000ec0:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <HAL_PCD_IRQHandler+0x604>)
 8000ec2:	4922      	ldr	r1, [pc, #136]	; (8000f4c <HAL_PCD_IRQHandler+0x608>)
 8000ec4:	4402      	add	r2, r0
 8000ec6:	428a      	cmp	r2, r1
 8000ec8:	d803      	bhi.n	8000ed2 <HAL_PCD_IRQHandler+0x58e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8000ed0:	e619      	b.n	8000b06 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 21800000)&&(hclk < 24000000))
 8000ed2:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <HAL_PCD_IRQHandler+0x60c>)
 8000ed4:	491f      	ldr	r1, [pc, #124]	; (8000f54 <HAL_PCD_IRQHandler+0x610>)
 8000ed6:	4402      	add	r2, r0
 8000ed8:	428a      	cmp	r2, r1
 8000eda:	d803      	bhi.n	8000ee4 <HAL_PCD_IRQHandler+0x5a0>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8000ee2:	e610      	b.n	8000b06 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 24000000)&&(hclk < 27700000))
 8000ee4:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8000ee8:	491b      	ldr	r1, [pc, #108]	; (8000f58 <HAL_PCD_IRQHandler+0x614>)
 8000eea:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8000eee:	428a      	cmp	r2, r1
 8000ef0:	d803      	bhi.n	8000efa <HAL_PCD_IRQHandler+0x5b6>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8000ef2:	68da      	ldr	r2, [r3, #12]
 8000ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ef8:	e605      	b.n	8000b06 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 27700000)&&(hclk < 32000000))
 8000efa:	4a18      	ldr	r2, [pc, #96]	; (8000f5c <HAL_PCD_IRQHandler+0x618>)
 8000efc:	4918      	ldr	r1, [pc, #96]	; (8000f60 <HAL_PCD_IRQHandler+0x61c>)
 8000efe:	4402      	add	r2, r0
 8000f00:	428a      	cmp	r2, r1
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	bf94      	ite	ls
 8000f06:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8000f0a:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8000f0e:	e5fa      	b.n	8000b06 <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8000f10:	2b06      	cmp	r3, #6
 8000f12:	f47f ae2d 	bne.w	8000b70 <HAL_PCD_IRQHandler+0x22c>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8000f16:	2208      	movs	r2, #8
 8000f18:	f504 7162 	add.w	r1, r4, #904	; 0x388
 8000f1c:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f1e:	f04f 081c 	mov.w	r8, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8000f22:	f001 ff40 	bl	8002da6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f26:	fb08 4809 	mla	r8, r8, r9, r4
 8000f2a:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000f2e:	e61a      	b.n	8000b66 <HAL_PCD_IRQHandler+0x222>
 8000f30:	ff1b1e40 	.word	0xff1b1e40
 8000f34:	000f423f 	.word	0x000f423f
 8000f38:	00124f7f 	.word	0x00124f7f
 8000f3c:	0013d61f 	.word	0x0013d61f
 8000f40:	fee5b660 	.word	0xfee5b660
 8000f44:	0016e35f 	.word	0x0016e35f
 8000f48:	feced300 	.word	0xfeced300
 8000f4c:	001b773f 	.word	0x001b773f
 8000f50:	feb35bc0 	.word	0xfeb35bc0
 8000f54:	002191bf 	.word	0x002191bf
 8000f58:	0038751f 	.word	0x0038751f
 8000f5c:	fe5954e0 	.word	0xfe5954e0
 8000f60:	00419cdf 	.word	0x00419cdf

08000f64 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8000f64:	f890 2384 	ldrb.w	r2, [r0, #900]	; 0x384
 8000f68:	2a01      	cmp	r2, #1
{
 8000f6a:	b510      	push	{r4, lr}
 8000f6c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000f6e:	d00b      	beq.n	8000f88 <HAL_PCD_SetAddress+0x24>
 8000f70:	2201      	movs	r2, #1
 8000f72:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  hpcd->USB_Address = address;
 8000f76:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  USB_SetDevAddress(hpcd->Instance, address);
 8000f7a:	6800      	ldr	r0, [r0, #0]
 8000f7c:	f001 ff5b 	bl	8002e36 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8000f80:	2000      	movs	r0, #0
 8000f82:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8000f86:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000f88:	2002      	movs	r0, #2
}
 8000f8a:	bd10      	pop	{r4, pc}

08000f8c <HAL_PCD_EP_Open>:
{
 8000f8c:	b570      	push	{r4, r5, r6, lr}
 8000f8e:	4604      	mov	r4, r0
  if ((ep_addr & 0x80) == 0x80)
 8000f90:	b248      	sxtb	r0, r1
 8000f92:	2800      	cmp	r0, #0
 8000f94:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8000f98:	f04f 051c 	mov.w	r5, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f9c:	bfb5      	itete	lt
 8000f9e:	fb05 4106 	mlalt	r1, r5, r6, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000fa2:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fa6:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000fa8:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 8000fac:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7F;
 8000fae:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000fb0:	7048      	strb	r0, [r1, #1]
  ep->type = ep_type;
 8000fb2:	70cb      	strb	r3, [r1, #3]
  __HAL_LOCK(hpcd);
 8000fb4:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->maxpacket = ep_mps;
 8000fb8:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd);
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d009      	beq.n	8000fd2 <HAL_PCD_EP_Open+0x46>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000fc4:	6820      	ldr	r0, [r4, #0]
 8000fc6:	f001 fd54 	bl	8002a72 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return ret;
 8000fd0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8000fd2:	2002      	movs	r0, #2
}
 8000fd4:	bd70      	pop	{r4, r5, r6, pc}

08000fd6 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8000fd6:	b24b      	sxtb	r3, r1
 8000fd8:	2b00      	cmp	r3, #0
{  
 8000fda:	b510      	push	{r4, lr}
 8000fdc:	f04f 021c 	mov.w	r2, #28
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fe6:	bfb5      	itete	lt
 8000fe8:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000fec:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000ff0:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000ff2:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 8000ff6:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8000ff8:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000ffa:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000ffc:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
 8001000:	2b01      	cmp	r3, #1
 8001002:	d009      	beq.n	8001018 <HAL_PCD_EP_Close+0x42>
 8001004:	2301      	movs	r3, #1
 8001006:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 800100a:	6820      	ldr	r0, [r4, #0]
 800100c:	f001 fd70 	bl	8002af0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001010:	2000      	movs	r0, #0
 8001012:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8001016:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8001018:	2002      	movs	r0, #2
}
 800101a:	bd10      	pop	{r4, pc}

0800101c <HAL_PCD_EP_Receive>:
{
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001022:	241c      	movs	r4, #28
 8001024:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8001028:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800102c:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
  ep->xfer_len = len;
 8001030:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  ep->xfer_count = 0;
 8001034:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 8001036:	f8c4 21ec 	str.w	r2, [r4, #492]	; 0x1ec
  ep->xfer_count = 0;
 800103a:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  ep->is_in = 0;
 800103e:	f884 31e1 	strb.w	r3, [r4, #481]	; 0x1e1
  ep->num = ep_addr & 0x7F;
 8001042:	f884 51e0 	strb.w	r5, [r4, #480]	; 0x1e0
 8001046:	6902      	ldr	r2, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001048:	6800      	ldr	r0, [r0, #0]
 800104a:	b2d2      	uxtb	r2, r2
  if ((ep_addr & 0x7F) == 0 )
 800104c:	b91d      	cbnz	r5, 8001056 <HAL_PCD_EP_Receive+0x3a>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 800104e:	f001 fe35 	bl	8002cbc <USB_EP0StartXfer>
}
 8001052:	2000      	movs	r0, #0
 8001054:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001056:	f001 fd79 	bl	8002b4c <USB_EPStartXfer>
 800105a:	e7fa      	b.n	8001052 <HAL_PCD_EP_Receive+0x36>

0800105c <HAL_PCD_EP_Transmit>:
{
 800105c:	b538      	push	{r3, r4, r5, lr}
 800105e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001062:	241c      	movs	r4, #28
 8001064:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8001068:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800106c:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800106e:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1;
 8001074:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 8001076:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1;
 8001078:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & 0x7F;
 800107c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 8001080:	6902      	ldr	r2, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8001082:	6800      	ldr	r0, [r0, #0]
 8001084:	b2d2      	uxtb	r2, r2
  if ((ep_addr & 0x7F) == 0 )
 8001086:	b91d      	cbnz	r5, 8001090 <HAL_PCD_EP_Transmit+0x34>
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8001088:	f001 fe18 	bl	8002cbc <USB_EP0StartXfer>
}
 800108c:	2000      	movs	r0, #0
 800108e:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance, ep,  hpcd->Init.dma_enable);
 8001090:	f001 fd5c 	bl	8002b4c <USB_EPStartXfer>
 8001094:	e7fa      	b.n	800108c <HAL_PCD_EP_Transmit+0x30>

08001096 <HAL_PCD_EP_SetStall>:
{
 8001096:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8001098:	b24b      	sxtb	r3, r1
 800109a:	2b00      	cmp	r3, #0
 800109c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80010a0:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010a4:	bfb5      	itete	lt
 80010a6:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80010aa:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010ae:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 80010b0:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_stall = 1;
 80010b4:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80010b6:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80010b8:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1;
 80010ba:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80010bc:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80010be:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 80010c0:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 80010c4:	4293      	cmp	r3, r2
{
 80010c6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80010c8:	d00f      	beq.n	80010ea <HAL_PCD_EP_SetStall+0x54>
 80010ca:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  USB_EPSetStall(hpcd->Instance , ep);
 80010ce:	6800      	ldr	r0, [r0, #0]
 80010d0:	f001 fe79 	bl	8002dc6 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80010d4:	b92d      	cbnz	r5, 80010e2 <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance,  hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80010d6:	f504 7262 	add.w	r2, r4, #904	; 0x388
 80010da:	7c21      	ldrb	r1, [r4, #16]
 80010dc:	6820      	ldr	r0, [r4, #0]
 80010de:	f001 ff1f 	bl	8002f20 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80010e2:	2000      	movs	r0, #0
 80010e4:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80010e8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80010ea:	2002      	movs	r0, #2
}
 80010ec:	bd38      	pop	{r3, r4, r5, pc}

080010ee <HAL_PCD_EP_ClrStall>:
{
 80010ee:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80010f0:	b24b      	sxtb	r3, r1
 80010f2:	2b00      	cmp	r3, #0
{
 80010f4:	4605      	mov	r5, r0
 80010f6:	f04f 021c 	mov.w	r2, #28
 80010fa:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010fe:	bfb5      	itete	lt
 8001100:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8001104:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001108:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 800110a:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800110e:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 8001110:	2400      	movs	r4, #0
 8001112:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001114:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001116:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001118:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 800111c:	2b01      	cmp	r3, #1
 800111e:	d009      	beq.n	8001134 <HAL_PCD_EP_ClrStall+0x46>
 8001120:	2301      	movs	r3, #1
 8001122:	f885 3384 	strb.w	r3, [r5, #900]	; 0x384
  USB_EPClearStall(hpcd->Instance , ep);
 8001126:	6828      	ldr	r0, [r5, #0]
 8001128:	f001 fe6c 	bl	8002e04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 800112c:	f885 4384 	strb.w	r4, [r5, #900]	; 0x384
  return HAL_OK;
 8001130:	4620      	mov	r0, r4
 8001132:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001134:	2002      	movs	r0, #2
}
 8001136:	bd38      	pop	{r3, r4, r5, pc}

08001138 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001138:	6800      	ldr	r0, [r0, #0]
{
 800113a:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800113c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 800113e:	b921      	cbnz	r1, 800114a <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (size << 16) | Tx_Offset;
 8001140:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001144:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
  }
  
  return HAL_OK;
}
 8001146:	2000      	movs	r0, #0
 8001148:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800114a:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (index = 0; index < (fifo - 1); index++)
 800114c:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800114e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (index = 0; index < (fifo - 1); index++)
 8001152:	1e4e      	subs	r6, r1, #1
 8001154:	b2ec      	uxtb	r4, r5
 8001156:	42b4      	cmp	r4, r6
 8001158:	f105 0501 	add.w	r5, r5, #1
 800115c:	db06      	blt.n	800116c <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
 800115e:	313f      	adds	r1, #63	; 0x3f
 8001160:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001164:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001168:	6043      	str	r3, [r0, #4]
 800116a:	e7ec      	b.n	8001146 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[index] >> 16);
 800116c:	3440      	adds	r4, #64	; 0x40
 800116e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8001172:	6864      	ldr	r4, [r4, #4]
 8001174:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8001178:	e7ec      	b.n	8001154 <HAL_PCDEx_SetTxFiFo+0x1c>

0800117a <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800117a:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 800117c:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800117e:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001180:	4770      	bx	lr

08001182 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001182:	6802      	ldr	r2, [r0, #0]
{
 8001184:	4603      	mov	r3, r0
  
  hpcd->lpm_active = ENABLE;
 8001186:	2101      	movs	r1, #1
 8001188:	f8c0 13c0 	str.w	r1, [r0, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 800118c:	2000      	movs	r0, #0
 800118e:	f883 03b8 	strb.w	r0, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001192:	6993      	ldr	r3, [r2, #24]
 8001194:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001198:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800119a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	f043 0303 	orr.w	r3, r3, #3
 80011a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
}
 80011a6:	4770      	bx	lr

080011a8 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80011a8:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 80011aa:	2301      	movs	r3, #1
 80011ac:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 80011b0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80011b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b6:	6393      	str	r3, [r2, #56]	; 0x38
  
  return HAL_OK;  
}
 80011b8:	2000      	movs	r0, #0
 80011ba:	4770      	bx	lr

080011bc <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 80011bc:	4a02      	ldr	r2, [pc, #8]	; (80011c8 <HAL_PWR_EnableBkUpAccess+0xc>)
 80011be:	6813      	ldr	r3, [r2, #0]
 80011c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	4770      	bx	lr
 80011c8:	40007000 	.word	0x40007000

080011cc <HAL_PWR_DisableBkUpAccess>:
  *        (RTC registers, RTC backup data registers).    
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);   
 80011cc:	4a02      	ldr	r2, [pc, #8]	; (80011d8 <HAL_PWR_DisableBkUpAccess+0xc>)
 80011ce:	6813      	ldr	r3, [r2, #0]
 80011d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4770      	bx	lr
 80011d8:	40007000 	.word	0x40007000

080011dc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <HAL_PWREx_GetVoltageRange+0xc>)
 80011de:	6818      	ldr	r0, [r3, #0]
#endif  
}
 80011e0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40007000 	.word	0x40007000

080011ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ee:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f4:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f8:	d11a      	bne.n	8001230 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011fa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80011fe:	d013      	beq.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001200:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001202:	4912      	ldr	r1, [pc, #72]	; (800124c <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001204:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800120c:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	fbb2 f1f1 	udiv	r1, r2, r1
 8001216:	2232      	movs	r2, #50	; 0x32
 8001218:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800121a:	b112      	cbz	r2, 8001222 <HAL_PWREx_ControlVoltageScaling+0x36>
 800121c:	6959      	ldr	r1, [r3, #20]
 800121e:	0549      	lsls	r1, r1, #21
 8001220:	d404      	bmi.n	800122c <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	055b      	lsls	r3, r3, #21
 8001226:	d40d      	bmi.n	8001244 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8001228:	2000      	movs	r0, #0
 800122a:	4770      	bx	lr
        wait_loop_index--;
 800122c:	3a01      	subs	r2, #1
 800122e:	e7f4      	b.n	800121a <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001230:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001234:	bf1f      	itttt	ne
 8001236:	681a      	ldrne	r2, [r3, #0]
 8001238:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 800123c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001240:	601a      	strne	r2, [r3, #0]
 8001242:	e7f1      	b.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8001244:	2003      	movs	r0, #3
}  
 8001246:	4770      	bx	lr
 8001248:	40007000 	.word	0x40007000
 800124c:	000f4240 	.word	0x000f4240
 8001250:	20000080 	.word	0x20000080

08001254 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.  
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001254:	4a02      	ldr	r2, [pc, #8]	; (8001260 <HAL_PWREx_EnableVddUSB+0xc>)
 8001256:	6853      	ldr	r3, [r2, #4]
 8001258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800125c:	6053      	str	r3, [r2, #4]
 800125e:	4770      	bx	lr
 8001260:	40007000 	.word	0x40007000

08001264 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001264:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001266:	4d1e      	ldr	r5, [pc, #120]	; (80012e0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001268:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800126a:	00da      	lsls	r2, r3, #3
{
 800126c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800126e:	d518      	bpl.n	80012a2 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001270:	f7ff ffb4 	bl	80011dc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001274:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001278:	d123      	bne.n	80012c2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800127a:	2c80      	cmp	r4, #128	; 0x80
 800127c:	d929      	bls.n	80012d2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800127e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001280:	bf8c      	ite	hi
 8001282:	2002      	movhi	r0, #2
 8001284:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001286:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001288:	6813      	ldr	r3, [r2, #0]
 800128a:	f023 0307 	bic.w	r3, r3, #7
 800128e:	4303      	orrs	r3, r0
 8001290:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8001292:	6813      	ldr	r3, [r2, #0]
 8001294:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001298:	1a18      	subs	r0, r3, r0
 800129a:	bf18      	it	ne
 800129c:	2001      	movne	r0, #1
 800129e:	b003      	add	sp, #12
 80012a0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	65ab      	str	r3, [r5, #88]	; 0x58
 80012aa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80012b4:	f7ff ff92 	bl	80011dc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80012b8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80012ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012be:	65ab      	str	r3, [r5, #88]	; 0x58
 80012c0:	e7d8      	b.n	8001274 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80012c2:	2c80      	cmp	r4, #128	; 0x80
 80012c4:	d807      	bhi.n	80012d6 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80012c6:	d008      	beq.n	80012da <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80012c8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80012cc:	4258      	negs	r0, r3
 80012ce:	4158      	adcs	r0, r3
 80012d0:	e7d9      	b.n	8001286 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80012d2:	2000      	movs	r0, #0
 80012d4:	e7d7      	b.n	8001286 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80012d6:	2003      	movs	r0, #3
 80012d8:	e7d5      	b.n	8001286 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80012da:	2002      	movs	r0, #2
 80012dc:	e7d3      	b.n	8001286 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40022000 	.word	0x40022000

080012e8 <HAL_RCC_MCOConfig>:
{
 80012e8:	b570      	push	{r4, r5, r6, lr}
  __MCO1_CLK_ENABLE();
 80012ea:	4c11      	ldr	r4, [pc, #68]	; (8001330 <HAL_RCC_MCOConfig+0x48>)
 80012ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80012f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 80012f6:	b086      	sub	sp, #24
  __MCO1_CLK_ENABLE();
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = MCO1_PIN;
 8001300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001304:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
{
 8001308:	460d      	mov	r5, r1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800130e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
{
 8001316:	4616      	mov	r6, r2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800131a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800131c:	f7ff f992 	bl	8000644 <HAL_GPIO_Init>
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8001320:	68a1      	ldr	r1, [r4, #8]
 8001322:	f021 41ee 	bic.w	r1, r1, #1996488704	; 0x77000000
 8001326:	4331      	orrs	r1, r6
 8001328:	4329      	orrs	r1, r5
 800132a:	60a1      	str	r1, [r4, #8]
}
 800132c:	b006      	add	sp, #24
 800132e:	bd70      	pop	{r4, r5, r6, pc}
 8001330:	40021000 	.word	0x40021000

08001334 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001334:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	f012 0f0c 	tst.w	r2, #12
{
 800133c:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800133e:	d009      	beq.n	8001354 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001346:	2a0c      	cmp	r2, #12
 8001348:	d12d      	bne.n	80013a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	f002 0203 	and.w	r2, r2, #3
 8001350:	2a01      	cmp	r2, #1
 8001352:	d128      	bne.n	80013a6 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001354:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001356:	4924      	ldr	r1, [pc, #144]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xb4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001358:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800135a:	bf55      	itete	pl
 800135c:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001360:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001362:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001366:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800136a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800136e:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8001370:	f011 0f0c 	tst.w	r1, #12
 8001374:	bf0c      	ite	eq
 8001376:	4610      	moveq	r0, r2
 8001378:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800137a:	6899      	ldr	r1, [r3, #8]
 800137c:	f001 010c 	and.w	r1, r1, #12
 8001380:	290c      	cmp	r1, #12
 8001382:	d12d      	bne.n	80013e0 <HAL_RCC_GetSysClockFreq+0xac>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001384:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001386:	68d8      	ldr	r0, [r3, #12]
 8001388:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800138c:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800138e:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 8001392:	2802      	cmp	r0, #2
 8001394:	d016      	beq.n	80013c4 <HAL_RCC_GetSysClockFreq+0x90>
 8001396:	2803      	cmp	r0, #3
 8001398:	d014      	beq.n	80013c4 <HAL_RCC_GetSysClockFreq+0x90>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800139a:	fbb2 f2f1 	udiv	r2, r2, r1
 800139e:	68d8      	ldr	r0, [r3, #12]
 80013a0:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80013a4:	e014      	b.n	80013d0 <HAL_RCC_GetSysClockFreq+0x9c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	f002 020c 	and.w	r2, r2, #12
 80013ac:	2a04      	cmp	r2, #4
 80013ae:	d007      	beq.n	80013c0 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	f002 020c 	and.w	r2, r2, #12
 80013b6:	2a08      	cmp	r2, #8
 80013b8:	d002      	beq.n	80013c0 <HAL_RCC_GetSysClockFreq+0x8c>
  uint32_t sysclockfreq = 0U;
 80013ba:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80013bc:	2200      	movs	r2, #0
 80013be:	e7dc      	b.n	800137a <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSE_VALUE;
 80013c0:	480a      	ldr	r0, [pc, #40]	; (80013ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80013c2:	e7fb      	b.n	80013bc <HAL_RCC_GetSysClockFreq+0x88>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	4809      	ldr	r0, [pc, #36]	; (80013ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80013c8:	fbb0 f0f1 	udiv	r0, r0, r1
 80013cc:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80013d6:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80013d8:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80013da:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80013dc:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80013e0:	bd10      	pop	{r4, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	08004164 	.word	0x08004164
 80013ec:	00f42400 	.word	0x00f42400

080013f0 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013f0:	6803      	ldr	r3, [r0, #0]
{
 80013f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80013f6:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013f8:	06d8      	lsls	r0, r3, #27
 80013fa:	d53b      	bpl.n	8001474 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80013fc:	4ca9      	ldr	r4, [pc, #676]	; (80016a4 <HAL_RCC_OscConfig+0x2b4>)
 80013fe:	68a3      	ldr	r3, [r4, #8]
 8001400:	f013 0f0c 	tst.w	r3, #12
 8001404:	d160      	bne.n	80014c8 <HAL_RCC_OscConfig+0xd8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001406:	6823      	ldr	r3, [r4, #0]
 8001408:	0799      	lsls	r1, r3, #30
 800140a:	d505      	bpl.n	8001418 <HAL_RCC_OscConfig+0x28>
 800140c:	69ab      	ldr	r3, [r5, #24]
 800140e:	b91b      	cbnz	r3, 8001418 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8001410:	2001      	movs	r0, #1
}
 8001412:	b002      	add	sp, #8
 8001414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	6a28      	ldr	r0, [r5, #32]
 800141c:	071a      	lsls	r2, r3, #28
 800141e:	bf56      	itet	pl
 8001420:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001424:	6823      	ldrmi	r3, [r4, #0]
 8001426:	091b      	lsrpl	r3, r3, #4
 8001428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800142c:	4283      	cmp	r3, r0
 800142e:	d236      	bcs.n	800149e <HAL_RCC_OscConfig+0xae>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001430:	f7ff ff18 	bl	8001264 <RCC_SetFlashLatencyFromMSIRange>
 8001434:	2800      	cmp	r0, #0
 8001436:	d1eb      	bne.n	8001410 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001438:	6823      	ldr	r3, [r4, #0]
 800143a:	f043 0308 	orr.w	r3, r3, #8
 800143e:	6023      	str	r3, [r4, #0]
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	6a2a      	ldr	r2, [r5, #32]
 8001444:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001448:	4313      	orrs	r3, r2
 800144a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800144c:	6863      	ldr	r3, [r4, #4]
 800144e:	69ea      	ldr	r2, [r5, #28]
 8001450:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001454:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001458:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800145a:	f7ff ff6b 	bl	8001334 <HAL_RCC_GetSysClockFreq>
 800145e:	68a3      	ldr	r3, [r4, #8]
 8001460:	4a91      	ldr	r2, [pc, #580]	; (80016a8 <HAL_RCC_OscConfig+0x2b8>)
 8001462:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001466:	5cd3      	ldrb	r3, [r2, r3]
 8001468:	40d8      	lsrs	r0, r3
 800146a:	4b90      	ldr	r3, [pc, #576]	; (80016ac <HAL_RCC_OscConfig+0x2bc>)
 800146c:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800146e:	2000      	movs	r0, #0
 8001470:	f7ff f832 	bl	80004d8 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001474:	682b      	ldr	r3, [r5, #0]
 8001476:	07de      	lsls	r6, r3, #31
 8001478:	d45b      	bmi.n	8001532 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147a:	682b      	ldr	r3, [r5, #0]
 800147c:	079c      	lsls	r4, r3, #30
 800147e:	f100 80a3 	bmi.w	80015c8 <HAL_RCC_OscConfig+0x1d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	682b      	ldr	r3, [r5, #0]
 8001484:	0719      	lsls	r1, r3, #28
 8001486:	f100 80e1 	bmi.w	800164c <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148a:	682b      	ldr	r3, [r5, #0]
 800148c:	075a      	lsls	r2, r3, #29
 800148e:	f100 810f 	bmi.w	80016b0 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001492:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001494:	2a00      	cmp	r2, #0
 8001496:	f040 8176 	bne.w	8001786 <HAL_RCC_OscConfig+0x396>
  return HAL_OK;
 800149a:	2000      	movs	r0, #0
 800149c:	e7b9      	b.n	8001412 <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	6023      	str	r3, [r4, #0]
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014ac:	4303      	orrs	r3, r0
 80014ae:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b0:	6863      	ldr	r3, [r4, #4]
 80014b2:	69ea      	ldr	r2, [r5, #28]
 80014b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80014b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014bc:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014be:	f7ff fed1 	bl	8001264 <RCC_SetFlashLatencyFromMSIRange>
 80014c2:	2800      	cmp	r0, #0
 80014c4:	d0c9      	beq.n	800145a <HAL_RCC_OscConfig+0x6a>
 80014c6:	e7a3      	b.n	8001410 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014c8:	69ab      	ldr	r3, [r5, #24]
 80014ca:	b313      	cbz	r3, 8001512 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_MSI_ENABLE();
 80014cc:	6823      	ldr	r3, [r4, #0]
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014d4:	f7ff f828 	bl	8000528 <HAL_GetTick>
 80014d8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	079b      	lsls	r3, r3, #30
 80014de:	d511      	bpl.n	8001504 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	f043 0308 	orr.w	r3, r3, #8
 80014e6:	6023      	str	r3, [r4, #0]
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	6a2a      	ldr	r2, [r5, #32]
 80014ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014f0:	4313      	orrs	r3, r2
 80014f2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f4:	6863      	ldr	r3, [r4, #4]
 80014f6:	69ea      	ldr	r2, [r5, #28]
 80014f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80014fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001500:	6063      	str	r3, [r4, #4]
 8001502:	e7b7      	b.n	8001474 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001504:	f7ff f810 	bl	8000528 <HAL_GetTick>
 8001508:	1b80      	subs	r0, r0, r6
 800150a:	2802      	cmp	r0, #2
 800150c:	d9e5      	bls.n	80014da <HAL_RCC_OscConfig+0xea>
            return HAL_TIMEOUT;
 800150e:	2003      	movs	r0, #3
 8001510:	e77f      	b.n	8001412 <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 8001512:	6823      	ldr	r3, [r4, #0]
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800151a:	f7ff f805 	bl	8000528 <HAL_GetTick>
 800151e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	079f      	lsls	r7, r3, #30
 8001524:	d5a6      	bpl.n	8001474 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001526:	f7fe ffff 	bl	8000528 <HAL_GetTick>
 800152a:	1b80      	subs	r0, r0, r6
 800152c:	2802      	cmp	r0, #2
 800152e:	d9f7      	bls.n	8001520 <HAL_RCC_OscConfig+0x130>
 8001530:	e7ed      	b.n	800150e <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001532:	4c5c      	ldr	r4, [pc, #368]	; (80016a4 <HAL_RCC_OscConfig+0x2b4>)
 8001534:	68a3      	ldr	r3, [r4, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b08      	cmp	r3, #8
 800153c:	d009      	beq.n	8001552 <HAL_RCC_OscConfig+0x162>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800153e:	68a3      	ldr	r3, [r4, #8]
 8001540:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001544:	2b0c      	cmp	r3, #12
 8001546:	d10b      	bne.n	8001560 <HAL_RCC_OscConfig+0x170>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001548:	68e3      	ldr	r3, [r4, #12]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	2b03      	cmp	r3, #3
 8001550:	d106      	bne.n	8001560 <HAL_RCC_OscConfig+0x170>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	0398      	lsls	r0, r3, #14
 8001556:	d590      	bpl.n	800147a <HAL_RCC_OscConfig+0x8a>
 8001558:	686b      	ldr	r3, [r5, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d18d      	bne.n	800147a <HAL_RCC_OscConfig+0x8a>
 800155e:	e757      	b.n	8001410 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001560:	686b      	ldr	r3, [r5, #4]
 8001562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001566:	d110      	bne.n	800158a <HAL_RCC_OscConfig+0x19a>
 8001568:	6823      	ldr	r3, [r4, #0]
 800156a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001570:	f7fe ffda 	bl	8000528 <HAL_GetTick>
 8001574:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	0399      	lsls	r1, r3, #14
 800157a:	f53f af7e 	bmi.w	800147a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800157e:	f7fe ffd3 	bl	8000528 <HAL_GetTick>
 8001582:	1b80      	subs	r0, r0, r6
 8001584:	2864      	cmp	r0, #100	; 0x64
 8001586:	d9f6      	bls.n	8001576 <HAL_RCC_OscConfig+0x186>
 8001588:	e7c1      	b.n	800150e <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800158e:	d104      	bne.n	800159a <HAL_RCC_OscConfig+0x1aa>
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001596:	6023      	str	r3, [r4, #0]
 8001598:	e7e6      	b.n	8001568 <HAL_RCC_OscConfig+0x178>
 800159a:	6822      	ldr	r2, [r4, #0]
 800159c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015a0:	6022      	str	r2, [r4, #0]
 80015a2:	6822      	ldr	r2, [r4, #0]
 80015a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015a8:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1e0      	bne.n	8001570 <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 80015ae:	f7fe ffbb 	bl	8000528 <HAL_GetTick>
 80015b2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	039a      	lsls	r2, r3, #14
 80015b8:	f57f af5f 	bpl.w	800147a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7fe ffb4 	bl	8000528 <HAL_GetTick>
 80015c0:	1b80      	subs	r0, r0, r6
 80015c2:	2864      	cmp	r0, #100	; 0x64
 80015c4:	d9f6      	bls.n	80015b4 <HAL_RCC_OscConfig+0x1c4>
 80015c6:	e7a2      	b.n	800150e <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80015c8:	4c36      	ldr	r4, [pc, #216]	; (80016a4 <HAL_RCC_OscConfig+0x2b4>)
 80015ca:	68a3      	ldr	r3, [r4, #8]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d009      	beq.n	80015e8 <HAL_RCC_OscConfig+0x1f8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015d4:	68a3      	ldr	r3, [r4, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80015da:	2b0c      	cmp	r3, #12
 80015dc:	d113      	bne.n	8001606 <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015de:	68e3      	ldr	r3, [r4, #12]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d10e      	bne.n	8001606 <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	055b      	lsls	r3, r3, #21
 80015ec:	d503      	bpl.n	80015f6 <HAL_RCC_OscConfig+0x206>
 80015ee:	68eb      	ldr	r3, [r5, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f43f af0d 	beq.w	8001410 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f6:	6863      	ldr	r3, [r4, #4]
 80015f8:	692a      	ldr	r2, [r5, #16]
 80015fa:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80015fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001602:	6063      	str	r3, [r4, #4]
 8001604:	e73d      	b.n	8001482 <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001606:	68eb      	ldr	r3, [r5, #12]
 8001608:	b17b      	cbz	r3, 800162a <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001612:	f7fe ff89 	bl	8000528 <HAL_GetTick>
 8001616:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001618:	6823      	ldr	r3, [r4, #0]
 800161a:	055f      	lsls	r7, r3, #21
 800161c:	d4eb      	bmi.n	80015f6 <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161e:	f7fe ff83 	bl	8000528 <HAL_GetTick>
 8001622:	1b80      	subs	r0, r0, r6
 8001624:	2802      	cmp	r0, #2
 8001626:	d9f7      	bls.n	8001618 <HAL_RCC_OscConfig+0x228>
 8001628:	e771      	b.n	800150e <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001630:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001632:	f7fe ff79 	bl	8000528 <HAL_GetTick>
 8001636:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	0558      	lsls	r0, r3, #21
 800163c:	f57f af21 	bpl.w	8001482 <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001640:	f7fe ff72 	bl	8000528 <HAL_GetTick>
 8001644:	1b80      	subs	r0, r0, r6
 8001646:	2802      	cmp	r0, #2
 8001648:	d9f6      	bls.n	8001638 <HAL_RCC_OscConfig+0x248>
 800164a:	e760      	b.n	800150e <HAL_RCC_OscConfig+0x11e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800164c:	696b      	ldr	r3, [r5, #20]
 800164e:	4c15      	ldr	r4, [pc, #84]	; (80016a4 <HAL_RCC_OscConfig+0x2b4>)
 8001650:	b19b      	cbz	r3, 800167a <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSI_ENABLE();
 8001652:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800165e:	f7fe ff63 	bl	8000528 <HAL_GetTick>
 8001662:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001664:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001668:	079b      	lsls	r3, r3, #30
 800166a:	f53f af0e 	bmi.w	800148a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166e:	f7fe ff5b 	bl	8000528 <HAL_GetTick>
 8001672:	1b80      	subs	r0, r0, r6
 8001674:	2802      	cmp	r0, #2
 8001676:	d9f5      	bls.n	8001664 <HAL_RCC_OscConfig+0x274>
 8001678:	e749      	b.n	800150e <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_LSI_DISABLE();
 800167a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001686:	f7fe ff4f 	bl	8000528 <HAL_GetTick>
 800168a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800168c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001690:	079f      	lsls	r7, r3, #30
 8001692:	f57f aefa 	bpl.w	800148a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001696:	f7fe ff47 	bl	8000528 <HAL_GetTick>
 800169a:	1b80      	subs	r0, r0, r6
 800169c:	2802      	cmp	r0, #2
 800169e:	d9f5      	bls.n	800168c <HAL_RCC_OscConfig+0x29c>
 80016a0:	e735      	b.n	800150e <HAL_RCC_OscConfig+0x11e>
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	0800414a 	.word	0x0800414a
 80016ac:	20000080 	.word	0x20000080
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016b0:	4c66      	ldr	r4, [pc, #408]	; (800184c <HAL_RCC_OscConfig+0x45c>)
 80016b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016b4:	00de      	lsls	r6, r3, #3
 80016b6:	d427      	bmi.n	8001708 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016be:	65a3      	str	r3, [r4, #88]	; 0x58
 80016c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80016ca:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016cc:	4e60      	ldr	r6, [pc, #384]	; (8001850 <HAL_RCC_OscConfig+0x460>)
 80016ce:	6833      	ldr	r3, [r6, #0]
 80016d0:	05d8      	lsls	r0, r3, #23
 80016d2:	d51b      	bpl.n	800170c <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d4:	68ab      	ldr	r3, [r5, #8]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d129      	bne.n	800172e <HAL_RCC_OscConfig+0x33e>
 80016da:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80016e6:	f7fe ff1f 	bl	8000528 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016ee:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80016f0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80016f4:	079a      	lsls	r2, r3, #30
 80016f6:	d540      	bpl.n	800177a <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 80016f8:	2f00      	cmp	r7, #0
 80016fa:	f43f aeca 	beq.w	8001492 <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001704:	65a3      	str	r3, [r4, #88]	; 0x58
 8001706:	e6c4      	b.n	8001492 <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8001708:	2700      	movs	r7, #0
 800170a:	e7df      	b.n	80016cc <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800170c:	6833      	ldr	r3, [r6, #0]
 800170e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001712:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001714:	f7fe ff08 	bl	8000528 <HAL_GetTick>
 8001718:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171a:	6833      	ldr	r3, [r6, #0]
 800171c:	05d9      	lsls	r1, r3, #23
 800171e:	d4d9      	bmi.n	80016d4 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001720:	f7fe ff02 	bl	8000528 <HAL_GetTick>
 8001724:	eba0 0008 	sub.w	r0, r0, r8
 8001728:	2802      	cmp	r0, #2
 800172a:	d9f6      	bls.n	800171a <HAL_RCC_OscConfig+0x32a>
 800172c:	e6ef      	b.n	800150e <HAL_RCC_OscConfig+0x11e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172e:	2b05      	cmp	r3, #5
 8001730:	d106      	bne.n	8001740 <HAL_RCC_OscConfig+0x350>
 8001732:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800173e:	e7cc      	b.n	80016da <HAL_RCC_OscConfig+0x2ea>
 8001740:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001744:	f022 0201 	bic.w	r2, r2, #1
 8001748:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800174c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001750:	f022 0204 	bic.w	r2, r2, #4
 8001754:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1c4      	bne.n	80016e6 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 800175c:	f7fe fee4 	bl	8000528 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001760:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001764:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001766:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800176a:	079b      	lsls	r3, r3, #30
 800176c:	d5c4      	bpl.n	80016f8 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176e:	f7fe fedb 	bl	8000528 <HAL_GetTick>
 8001772:	1b80      	subs	r0, r0, r6
 8001774:	4540      	cmp	r0, r8
 8001776:	d9f6      	bls.n	8001766 <HAL_RCC_OscConfig+0x376>
 8001778:	e6c9      	b.n	800150e <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7fe fed5 	bl	8000528 <HAL_GetTick>
 800177e:	1b80      	subs	r0, r0, r6
 8001780:	4540      	cmp	r0, r8
 8001782:	d9b5      	bls.n	80016f0 <HAL_RCC_OscConfig+0x300>
 8001784:	e6c3      	b.n	800150e <HAL_RCC_OscConfig+0x11e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001786:	4c31      	ldr	r4, [pc, #196]	; (800184c <HAL_RCC_OscConfig+0x45c>)
 8001788:	68a3      	ldr	r3, [r4, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b0c      	cmp	r3, #12
 8001790:	f43f ae3e 	beq.w	8001410 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8001794:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001796:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800179c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800179e:	d137      	bne.n	8001810 <HAL_RCC_OscConfig+0x420>
        tickstart = HAL_GetTick();
 80017a0:	f7fe fec2 	bl	8000528 <HAL_GetTick>
 80017a4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80017a6:	6823      	ldr	r3, [r4, #0]
 80017a8:	019f      	lsls	r7, r3, #6
 80017aa:	d42b      	bmi.n	8001804 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ac:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80017ae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017b4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80017b6:	3a01      	subs	r2, #1
 80017b8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80017bc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80017be:	0912      	lsrs	r2, r2, #4
 80017c0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80017c4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80017c6:	0852      	lsrs	r2, r2, #1
 80017c8:	3a01      	subs	r2, #1
 80017ca:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80017ce:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80017d0:	0852      	lsrs	r2, r2, #1
 80017d2:	3a01      	subs	r2, #1
 80017d4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80017d8:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e0:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017e2:	68e3      	ldr	r3, [r4, #12]
 80017e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e8:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80017ea:	f7fe fe9d 	bl	8000528 <HAL_GetTick>
 80017ee:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	0198      	lsls	r0, r3, #6
 80017f4:	f53f ae51 	bmi.w	800149a <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7fe fe96 	bl	8000528 <HAL_GetTick>
 80017fc:	1b40      	subs	r0, r0, r5
 80017fe:	2802      	cmp	r0, #2
 8001800:	d9f6      	bls.n	80017f0 <HAL_RCC_OscConfig+0x400>
 8001802:	e684      	b.n	800150e <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7fe fe90 	bl	8000528 <HAL_GetTick>
 8001808:	1b80      	subs	r0, r0, r6
 800180a:	2802      	cmp	r0, #2
 800180c:	d9cb      	bls.n	80017a6 <HAL_RCC_OscConfig+0x3b6>
 800180e:	e67e      	b.n	800150e <HAL_RCC_OscConfig+0x11e>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001810:	6823      	ldr	r3, [r4, #0]
 8001812:	0119      	lsls	r1, r3, #4
 8001814:	d406      	bmi.n	8001824 <HAL_RCC_OscConfig+0x434>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8001816:	6823      	ldr	r3, [r4, #0]
           &&
 8001818:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800181a:	bf5e      	ittt	pl
 800181c:	68e3      	ldrpl	r3, [r4, #12]
 800181e:	f023 0303 	bicpl.w	r3, r3, #3
 8001822:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001824:	68e3      	ldr	r3, [r4, #12]
 8001826:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800182a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001830:	f7fe fe7a 	bl	8000528 <HAL_GetTick>
 8001834:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001836:	6823      	ldr	r3, [r4, #0]
 8001838:	019b      	lsls	r3, r3, #6
 800183a:	f57f ae2e 	bpl.w	800149a <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183e:	f7fe fe73 	bl	8000528 <HAL_GetTick>
 8001842:	1b40      	subs	r0, r0, r5
 8001844:	2802      	cmp	r0, #2
 8001846:	d9f6      	bls.n	8001836 <HAL_RCC_OscConfig+0x446>
 8001848:	e661      	b.n	800150e <HAL_RCC_OscConfig+0x11e>
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	40007000 	.word	0x40007000

08001854 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001854:	4a56      	ldr	r2, [pc, #344]	; (80019b0 <HAL_RCC_ClockConfig+0x15c>)
 8001856:	6813      	ldr	r3, [r2, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	428b      	cmp	r3, r1
{
 800185e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001862:	4605      	mov	r5, r0
 8001864:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001866:	d32b      	bcc.n	80018c0 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001868:	682b      	ldr	r3, [r5, #0]
 800186a:	07d9      	lsls	r1, r3, #31
 800186c:	d435      	bmi.n	80018da <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186e:	6829      	ldr	r1, [r5, #0]
 8001870:	078a      	lsls	r2, r1, #30
 8001872:	f100 8083 	bmi.w	800197c <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001876:	4a4e      	ldr	r2, [pc, #312]	; (80019b0 <HAL_RCC_ClockConfig+0x15c>)
 8001878:	6813      	ldr	r3, [r2, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	429e      	cmp	r6, r3
 8001880:	f0c0 8084 	bcc.w	800198c <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	f011 0f04 	tst.w	r1, #4
 8001888:	4c4a      	ldr	r4, [pc, #296]	; (80019b4 <HAL_RCC_ClockConfig+0x160>)
 800188a:	f040 808a 	bne.w	80019a2 <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	070b      	lsls	r3, r1, #28
 8001890:	d506      	bpl.n	80018a0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001892:	68a3      	ldr	r3, [r4, #8]
 8001894:	692a      	ldr	r2, [r5, #16]
 8001896:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800189a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800189e:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018a0:	f7ff fd48 	bl	8001334 <HAL_RCC_GetSysClockFreq>
 80018a4:	68a3      	ldr	r3, [r4, #8]
 80018a6:	4a44      	ldr	r2, [pc, #272]	; (80019b8 <HAL_RCC_ClockConfig+0x164>)
 80018a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018ac:	5cd3      	ldrb	r3, [r2, r3]
 80018ae:	40d8      	lsrs	r0, r3
 80018b0:	4b42      	ldr	r3, [pc, #264]	; (80019bc <HAL_RCC_ClockConfig+0x168>)
 80018b2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80018b4:	2000      	movs	r0, #0
 80018b6:	f7fe fe0f 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 80018ba:	2000      	movs	r0, #0
}
 80018bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c0:	6813      	ldr	r3, [r2, #0]
 80018c2:	f023 0307 	bic.w	r3, r3, #7
 80018c6:	430b      	orrs	r3, r1
 80018c8:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 80018ca:	6813      	ldr	r3, [r2, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	4299      	cmp	r1, r3
 80018d2:	d0c9      	beq.n	8001868 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80018d4:	2001      	movs	r0, #1
 80018d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018da:	686a      	ldr	r2, [r5, #4]
 80018dc:	4c35      	ldr	r4, [pc, #212]	; (80019b4 <HAL_RCC_ClockConfig+0x160>)
 80018de:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80018e0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e2:	d11c      	bne.n	800191e <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80018e4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80018e8:	d0f4      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ea:	68a3      	ldr	r3, [r4, #8]
 80018ec:	f023 0303 	bic.w	r3, r3, #3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80018f4:	f7fe fe18 	bl	8000528 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f8:	686b      	ldr	r3, [r5, #4]
 80018fa:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 80018fc:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fe:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001902:	d118      	bne.n	8001936 <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001904:	68a3      	ldr	r3, [r4, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b0c      	cmp	r3, #12
 800190c:	d0af      	beq.n	800186e <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190e:	f7fe fe0b 	bl	8000528 <HAL_GetTick>
 8001912:	1bc0      	subs	r0, r0, r7
 8001914:	4540      	cmp	r0, r8
 8001916:	d9f5      	bls.n	8001904 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8001918:	2003      	movs	r0, #3
 800191a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191e:	2a02      	cmp	r2, #2
 8001920:	d102      	bne.n	8001928 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001922:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001926:	e7df      	b.n	80018e8 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001928:	b912      	cbnz	r2, 8001930 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800192a:	f013 0f02 	tst.w	r3, #2
 800192e:	e7db      	b.n	80018e8 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001930:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001934:	e7d8      	b.n	80018e8 <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001936:	2b02      	cmp	r3, #2
 8001938:	d10a      	bne.n	8001950 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800193a:	68a3      	ldr	r3, [r4, #8]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b08      	cmp	r3, #8
 8001942:	d094      	beq.n	800186e <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001944:	f7fe fdf0 	bl	8000528 <HAL_GetTick>
 8001948:	1bc0      	subs	r0, r0, r7
 800194a:	4540      	cmp	r0, r8
 800194c:	d9f5      	bls.n	800193a <HAL_RCC_ClockConfig+0xe6>
 800194e:	e7e3      	b.n	8001918 <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001950:	b973      	cbnz	r3, 8001970 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8001952:	68a3      	ldr	r3, [r4, #8]
 8001954:	f013 0f0c 	tst.w	r3, #12
 8001958:	d089      	beq.n	800186e <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195a:	f7fe fde5 	bl	8000528 <HAL_GetTick>
 800195e:	1bc0      	subs	r0, r0, r7
 8001960:	4540      	cmp	r0, r8
 8001962:	d9f6      	bls.n	8001952 <HAL_RCC_ClockConfig+0xfe>
 8001964:	e7d8      	b.n	8001918 <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001966:	f7fe fddf 	bl	8000528 <HAL_GetTick>
 800196a:	1bc0      	subs	r0, r0, r7
 800196c:	4540      	cmp	r0, r8
 800196e:	d8d3      	bhi.n	8001918 <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001970:	68a3      	ldr	r3, [r4, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b04      	cmp	r3, #4
 8001978:	d1f5      	bne.n	8001966 <HAL_RCC_ClockConfig+0x112>
 800197a:	e778      	b.n	800186e <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <HAL_RCC_ClockConfig+0x160>)
 800197e:	68a8      	ldr	r0, [r5, #8]
 8001980:	6893      	ldr	r3, [r2, #8]
 8001982:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001986:	4303      	orrs	r3, r0
 8001988:	6093      	str	r3, [r2, #8]
 800198a:	e774      	b.n	8001876 <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198c:	6813      	ldr	r3, [r2, #0]
 800198e:	f023 0307 	bic.w	r3, r3, #7
 8001992:	4333      	orrs	r3, r6
 8001994:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001996:	6813      	ldr	r3, [r2, #0]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	429e      	cmp	r6, r3
 800199e:	d199      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x80>
 80019a0:	e770      	b.n	8001884 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a2:	68a3      	ldr	r3, [r4, #8]
 80019a4:	68ea      	ldr	r2, [r5, #12]
 80019a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60a3      	str	r3, [r4, #8]
 80019ae:	e76e      	b.n	800188e <HAL_RCC_ClockConfig+0x3a>
 80019b0:	40022000 	.word	0x40022000
 80019b4:	40021000 	.word	0x40021000
 80019b8:	0800414a 	.word	0x0800414a
 80019bc:	20000080 	.word	0x20000080

080019c0 <HAL_RCC_GetHCLKFreq>:
}
 80019c0:	4b01      	ldr	r3, [pc, #4]	; (80019c8 <HAL_RCC_GetHCLKFreq+0x8>)
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000080 	.word	0x20000080

080019cc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80019d6:	5cd3      	ldrb	r3, [r2, r3]
 80019d8:	4a03      	ldr	r2, [pc, #12]	; (80019e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80019da:	6810      	ldr	r0, [r2, #0]
}
 80019dc:	40d8      	lsrs	r0, r3
 80019de:	4770      	bx	lr
 80019e0:	40021000 	.word	0x40021000
 80019e4:	0800415a 	.word	0x0800415a
 80019e8:	20000080 	.word	0x20000080

080019ec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <HAL_RCC_GetPCLK2Freq+0x14>)
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <HAL_RCC_GetPCLK2Freq+0x18>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80019f6:	5cd3      	ldrb	r3, [r2, r3]
 80019f8:	4a03      	ldr	r2, [pc, #12]	; (8001a08 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80019fa:	6810      	ldr	r0, [r2, #0]
}
 80019fc:	40d8      	lsrs	r0, r3
 80019fe:	4770      	bx	lr
 8001a00:	40021000 	.word	0x40021000
 8001a04:	0800415a 	.word	0x0800415a
 8001a08:	20000080 	.word	0x20000080

08001a0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001a0e:	4b45      	ldr	r3, [pc, #276]	; (8001b24 <RCCEx_PLLSAI1_Config+0x118>)
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	f012 0f03 	tst.w	r2, #3
{
 8001a16:	4605      	mov	r5, r0
 8001a18:	460e      	mov	r6, r1
 8001a1a:	461c      	mov	r4, r3
 8001a1c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001a1e:	d02a      	beq.n	8001a76 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	f002 0203 	and.w	r2, r2, #3
 8001a26:	4282      	cmp	r2, r0
 8001a28:	d13c      	bne.n	8001aa4 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8001a2a:	2a00      	cmp	r2, #0
 8001a2c:	d03a      	beq.n	8001aa4 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001a2e:	68db      	ldr	r3, [r3, #12]
       ||
 8001a30:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001a32:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001a36:	3301      	adds	r3, #1
       ||
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d133      	bne.n	8001aa4 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a42:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a44:	f7fe fd70 	bl	8000528 <HAL_GetTick>
 8001a48:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	011a      	lsls	r2, r3, #4
 8001a4e:	d432      	bmi.n	8001ab6 <RCCEx_PLLSAI1_Config+0xaa>
 8001a50:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001a52:	2e00      	cmp	r6, #0
 8001a54:	d036      	beq.n	8001ac4 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001a56:	2e01      	cmp	r6, #1
 8001a58:	d150      	bne.n	8001afc <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001a5a:	6922      	ldr	r2, [r4, #16]
 8001a5c:	6928      	ldr	r0, [r5, #16]
 8001a5e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001a62:	0840      	lsrs	r0, r0, #1
 8001a64:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001a68:	3801      	subs	r0, #1
 8001a6a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001a6e:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001a72:	6122      	str	r2, [r4, #16]
 8001a74:	e032      	b.n	8001adc <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001a76:	2802      	cmp	r0, #2
 8001a78:	d010      	beq.n	8001a9c <RCCEx_PLLSAI1_Config+0x90>
 8001a7a:	2803      	cmp	r0, #3
 8001a7c:	d014      	beq.n	8001aa8 <RCCEx_PLLSAI1_Config+0x9c>
 8001a7e:	2801      	cmp	r0, #1
 8001a80:	d110      	bne.n	8001aa4 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	079f      	lsls	r7, r3, #30
 8001a86:	d538      	bpl.n	8001afa <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001a88:	68e3      	ldr	r3, [r4, #12]
 8001a8a:	686a      	ldr	r2, [r5, #4]
 8001a8c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001a90:	3a01      	subs	r2, #1
 8001a92:	4318      	orrs	r0, r3
 8001a94:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001a98:	60e0      	str	r0, [r4, #12]
 8001a9a:	e7cf      	b.n	8001a3c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001aa2:	d1f1      	bne.n	8001a88 <RCCEx_PLLSAI1_Config+0x7c>
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	0391      	lsls	r1, r2, #14
 8001aac:	d4ec      	bmi.n	8001a88 <RCCEx_PLLSAI1_Config+0x7c>
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001ab4:	e7f5      	b.n	8001aa2 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ab6:	f7fe fd37 	bl	8000528 <HAL_GetTick>
 8001aba:	1bc0      	subs	r0, r0, r7
 8001abc:	2802      	cmp	r0, #2
 8001abe:	d9c4      	bls.n	8001a4a <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ac4:	6921      	ldr	r1, [r4, #16]
 8001ac6:	68eb      	ldr	r3, [r5, #12]
 8001ac8:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001acc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001ad0:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8001ada:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001adc:	6823      	ldr	r3, [r4, #0]
 8001ade:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ae2:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7fe fd20 	bl	8000528 <HAL_GetTick>
 8001ae8:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	d513      	bpl.n	8001b18 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001af0:	6923      	ldr	r3, [r4, #16]
 8001af2:	69aa      	ldr	r2, [r5, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	6123      	str	r3, [r4, #16]
 8001af8:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001afc:	6923      	ldr	r3, [r4, #16]
 8001afe:	6968      	ldr	r0, [r5, #20]
 8001b00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001b04:	0840      	lsrs	r0, r0, #1
 8001b06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001b0a:	3801      	subs	r0, #1
 8001b0c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001b10:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001b14:	6123      	str	r3, [r4, #16]
 8001b16:	e7e1      	b.n	8001adc <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001b18:	f7fe fd06 	bl	8000528 <HAL_GetTick>
 8001b1c:	1b80      	subs	r0, r0, r6
 8001b1e:	2802      	cmp	r0, #2
 8001b20:	d9e3      	bls.n	8001aea <RCCEx_PLLSAI1_Config+0xde>
 8001b22:	e7cd      	b.n	8001ac0 <RCCEx_PLLSAI1_Config+0xb4>
 8001b24:	40021000 	.word	0x40021000

08001b28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <RCCEx_PLLSAI2_Config+0xf8>)
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	f012 0f03 	tst.w	r2, #3
{
 8001b32:	4605      	mov	r5, r0
 8001b34:	460e      	mov	r6, r1
 8001b36:	461c      	mov	r4, r3
 8001b38:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001b3a:	d028      	beq.n	8001b8e <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	f002 0203 	and.w	r2, r2, #3
 8001b42:	4282      	cmp	r2, r0
 8001b44:	d13a      	bne.n	8001bbc <RCCEx_PLLSAI2_Config+0x94>
       ||
 8001b46:	2a00      	cmp	r2, #0
 8001b48:	d038      	beq.n	8001bbc <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001b4a:	68db      	ldr	r3, [r3, #12]
       ||
 8001b4c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001b4e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001b52:	3301      	adds	r3, #1
       ||
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d131      	bne.n	8001bbc <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b60:	f7fe fce2 	bl	8000528 <HAL_GetTick>
 8001b64:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	009a      	lsls	r2, r3, #2
 8001b6a:	d430      	bmi.n	8001bce <RCCEx_PLLSAI2_Config+0xa6>
 8001b6c:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001b6e:	2e00      	cmp	r6, #0
 8001b70:	d034      	beq.n	8001bdc <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001b72:	6963      	ldr	r3, [r4, #20]
 8001b74:	6929      	ldr	r1, [r5, #16]
 8001b76:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001b7a:	0849      	lsrs	r1, r1, #1
 8001b7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001b80:	3901      	subs	r1, #1
 8001b82:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001b86:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001b8a:	6163      	str	r3, [r4, #20]
 8001b8c:	e032      	b.n	8001bf4 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8001b8e:	2802      	cmp	r0, #2
 8001b90:	d010      	beq.n	8001bb4 <RCCEx_PLLSAI2_Config+0x8c>
 8001b92:	2803      	cmp	r0, #3
 8001b94:	d014      	beq.n	8001bc0 <RCCEx_PLLSAI2_Config+0x98>
 8001b96:	2801      	cmp	r0, #1
 8001b98:	d110      	bne.n	8001bbc <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	079f      	lsls	r7, r3, #30
 8001b9e:	d538      	bpl.n	8001c12 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001ba0:	68e3      	ldr	r3, [r4, #12]
 8001ba2:	686a      	ldr	r2, [r5, #4]
 8001ba4:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001ba8:	3a01      	subs	r2, #1
 8001baa:	4318      	orrs	r0, r3
 8001bac:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001bb0:	60e0      	str	r0, [r4, #12]
 8001bb2:	e7d1      	b.n	8001b58 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001bba:	d1f1      	bne.n	8001ba0 <RCCEx_PLLSAI2_Config+0x78>
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	0391      	lsls	r1, r2, #14
 8001bc4:	d4ec      	bmi.n	8001ba0 <RCCEx_PLLSAI2_Config+0x78>
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001bcc:	e7f5      	b.n	8001bba <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001bce:	f7fe fcab 	bl	8000528 <HAL_GetTick>
 8001bd2:	1bc0      	subs	r0, r0, r7
 8001bd4:	2802      	cmp	r0, #2
 8001bd6:	d9c6      	bls.n	8001b66 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001bd8:	2003      	movs	r0, #3
 8001bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001bdc:	6962      	ldr	r2, [r4, #20]
 8001bde:	68eb      	ldr	r3, [r5, #12]
 8001be0:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001be4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001be8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001bf2:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfc:	f7fe fc94 	bl	8000528 <HAL_GetTick>
 8001c00:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	d505      	bpl.n	8001c14 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001c08:	6963      	ldr	r3, [r4, #20]
 8001c0a:	696a      	ldr	r2, [r5, #20]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	6163      	str	r3, [r4, #20]
 8001c10:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001c14:	f7fe fc88 	bl	8000528 <HAL_GetTick>
 8001c18:	1b80      	subs	r0, r0, r6
 8001c1a:	2802      	cmp	r0, #2
 8001c1c:	d9f1      	bls.n	8001c02 <RCCEx_PLLSAI2_Config+0xda>
 8001c1e:	e7db      	b.n	8001bd8 <RCCEx_PLLSAI2_Config+0xb0>
 8001c20:	40021000 	.word	0x40021000

08001c24 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001c24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c28:	6806      	ldr	r6, [r0, #0]
 8001c2a:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001c2e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c30:	d024      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001c32:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001c34:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001c38:	d02c      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001c3a:	d802      	bhi.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c3c:	b1c1      	cbz	r1, 8001c70 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001c3e:	2601      	movs	r6, #1
 8001c40:	e01c      	b.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001c42:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001c46:	d00d      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001c48:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001c4c:	d1f7      	bne.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c4e:	4a53      	ldr	r2, [pc, #332]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001c50:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001c52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001c56:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001c5a:	430b      	orrs	r3, r1
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001c60:	2600      	movs	r6, #0
 8001c62:	e00b      	b.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c64:	4a4d      	ldr	r2, [pc, #308]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001c66:	68d3      	ldr	r3, [r2, #12]
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6c:	60d3      	str	r3, [r2, #12]
      break;
 8001c6e:	e7ee      	b.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c70:	3004      	adds	r0, #4
 8001c72:	f7ff fecb 	bl	8001a0c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c76:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	d0e8      	beq.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	04d8      	lsls	r0, r3, #19
 8001c80:	d506      	bpl.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001c82:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001c84:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001c88:	d07c      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001c8a:	d808      	bhi.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001c8c:	b1a9      	cbz	r1, 8001cba <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8001c8e:	2601      	movs	r6, #1
 8001c90:	4635      	mov	r5, r6
 8001c92:	e021      	b.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c94:	2100      	movs	r1, #0
 8001c96:	3020      	adds	r0, #32
 8001c98:	f7ff ff46 	bl	8001b28 <RCCEx_PLLSAI2_Config>
 8001c9c:	e7eb      	b.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001c9e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8001ca2:	d004      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001ca4:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001ca8:	d1f1      	bne.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001caa:	4635      	mov	r5, r6
 8001cac:	e009      	b.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cae:	4a3b      	ldr	r2, [pc, #236]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001cb0:	68d3      	ldr	r3, [r2, #12]
 8001cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb6:	60d3      	str	r3, [r2, #12]
 8001cb8:	e7f7      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cba:	1d20      	adds	r0, r4, #4
 8001cbc:	f7ff fea6 	bl	8001a0c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001cc0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001cc2:	2d00      	cmp	r5, #0
 8001cc4:	d164      	bne.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001cc6:	4a35      	ldr	r2, [pc, #212]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001cc8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001cca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001cce:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	0399      	lsls	r1, r3, #14
 8001cdc:	f140 815b 	bpl.w	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x372>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce0:	4f2e      	ldr	r7, [pc, #184]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ce4:	00da      	lsls	r2, r3, #3
 8001ce6:	d455      	bmi.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cee:	65bb      	str	r3, [r7, #88]	; 0x58
 8001cf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001cfa:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cfe:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001da0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001d02:	f8d9 3000 	ldr.w	r3, [r9]
 8001d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0a:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001d0e:	f7fe fc0b 	bl	8000528 <HAL_GetTick>
 8001d12:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8001d14:	f8d9 3000 	ldr.w	r3, [r9]
 8001d18:	05db      	lsls	r3, r3, #23
 8001d1a:	d543      	bpl.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    if(ret == HAL_OK)
 8001d1c:	2d00      	cmp	r5, #0
 8001d1e:	d148      	bne.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d24:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001d28:	d015      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001d2a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d011      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x132>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d36:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001d3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d42:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d56:	07d8      	lsls	r0, r3, #31
 8001d58:	d509      	bpl.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x14a>
        tickstart = HAL_GetTick();
 8001d5a:	f7fe fbe5 	bl	8000528 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001d62:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001d64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d68:	0799      	lsls	r1, r3, #30
 8001d6a:	f140 810d 	bpl.w	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x364>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d72:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d80:	4635      	mov	r5, r6
 8001d82:	e016      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d84:	2100      	movs	r1, #0
 8001d86:	f104 0020 	add.w	r0, r4, #32
 8001d8a:	f7ff fecd 	bl	8001b28 <RCCEx_PLLSAI2_Config>
 8001d8e:	e797      	b.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001d90:	462e      	mov	r6, r5
 8001d92:	e7a1      	b.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8001d94:	f04f 0800 	mov.w	r8, #0
 8001d98:	e7b1      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da4:	f7fe fbc0 	bl	8000528 <HAL_GetTick>
 8001da8:	eba0 000a 	sub.w	r0, r0, sl
 8001dac:	2802      	cmp	r0, #2
 8001dae:	d9b1      	bls.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8001db0:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001db2:	f1b8 0f00 	cmp.w	r8, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	07da      	lsls	r2, r3, #31
 8001dc4:	d508      	bpl.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dc6:	498a      	ldr	r1, [pc, #552]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001dc8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001dca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001dce:	f022 0203 	bic.w	r2, r2, #3
 8001dd2:	4302      	orrs	r2, r0
 8001dd4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dd8:	079f      	lsls	r7, r3, #30
 8001dda:	d508      	bpl.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ddc:	4984      	ldr	r1, [pc, #528]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001dde:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001de0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001de4:	f022 020c 	bic.w	r2, r2, #12
 8001de8:	4302      	orrs	r2, r0
 8001dea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001dee:	075e      	lsls	r6, r3, #29
 8001df0:	d508      	bpl.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001df2:	497f      	ldr	r1, [pc, #508]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001df4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001df6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001dfa:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001dfe:	4302      	orrs	r2, r0
 8001e00:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e04:	0718      	lsls	r0, r3, #28
 8001e06:	d508      	bpl.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e08:	4979      	ldr	r1, [pc, #484]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e0a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001e0c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e10:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001e14:	4302      	orrs	r2, r0
 8001e16:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e1a:	06d9      	lsls	r1, r3, #27
 8001e1c:	d508      	bpl.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e1e:	4974      	ldr	r1, [pc, #464]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e20:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001e22:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e26:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e2a:	4302      	orrs	r2, r0
 8001e2c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e30:	069a      	lsls	r2, r3, #26
 8001e32:	d508      	bpl.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x222>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e34:	496e      	ldr	r1, [pc, #440]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e36:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001e38:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001e40:	4302      	orrs	r2, r0
 8001e42:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e46:	059f      	lsls	r7, r3, #22
 8001e48:	d508      	bpl.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e4a:	4969      	ldr	r1, [pc, #420]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e4c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001e4e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e52:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001e56:	4302      	orrs	r2, r0
 8001e58:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e5c:	055e      	lsls	r6, r3, #21
 8001e5e:	d508      	bpl.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e60:	4963      	ldr	r1, [pc, #396]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e62:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001e64:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e68:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e6c:	4302      	orrs	r2, r0
 8001e6e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e72:	0658      	lsls	r0, r3, #25
 8001e74:	d508      	bpl.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e76:	495e      	ldr	r1, [pc, #376]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e78:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001e7a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e7e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001e82:	4302      	orrs	r2, r0
 8001e84:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e88:	0619      	lsls	r1, r3, #24
 8001e8a:	d508      	bpl.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e8c:	4958      	ldr	r1, [pc, #352]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e90:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e94:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001e98:	4302      	orrs	r2, r0
 8001e9a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e9e:	05da      	lsls	r2, r3, #23
 8001ea0:	d508      	bpl.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ea2:	4953      	ldr	r1, [pc, #332]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ea6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001eaa:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001eae:	4302      	orrs	r2, r0
 8001eb0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001eb4:	049b      	lsls	r3, r3, #18
 8001eb6:	d50f      	bpl.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001eb8:	4a4d      	ldr	r2, [pc, #308]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001eba:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001ebc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ec0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001ec4:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001ec6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001eca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001ece:	d164      	bne.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ed0:	68d3      	ldr	r3, [r2, #12]
 8001ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ed6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	031f      	lsls	r7, r3, #12
 8001edc:	d50f      	bpl.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x2da>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ede:	4a44      	ldr	r2, [pc, #272]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001ee0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001ee2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ee6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001eea:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001eec:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001ef4:	d15c      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ef6:	68d3      	ldr	r3, [r2, #12]
 8001ef8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001efc:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	035e      	lsls	r6, r3, #13
 8001f02:	d50f      	bpl.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x300>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f04:	4a3a      	ldr	r2, [pc, #232]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001f06:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001f08:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f0c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001f10:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f12:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f1a:	d154      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f1c:	68d3      	ldr	r3, [r2, #12]
 8001f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f22:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	0458      	lsls	r0, r3, #17
 8001f28:	d512      	bpl.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f2a:	4931      	ldr	r1, [pc, #196]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001f2c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001f2e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f32:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001f36:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001f38:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001f40:	d14c      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001f42:	2102      	movs	r1, #2
 8001f44:	1d20      	adds	r0, r4, #4
 8001f46:	f7ff fd61 	bl	8001a0c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001f4a:	2800      	cmp	r0, #0
 8001f4c:	bf18      	it	ne
 8001f4e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001f50:	6822      	ldr	r2, [r4, #0]
 8001f52:	0411      	lsls	r1, r2, #16
 8001f54:	d508      	bpl.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001f56:	4926      	ldr	r1, [pc, #152]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001f58:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001f5a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f62:	4303      	orrs	r3, r0
 8001f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f68:	03d3      	lsls	r3, r2, #15
 8001f6a:	d509      	bpl.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f6c:	4a20      	ldr	r2, [pc, #128]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001f6e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001f72:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001f80:	4628      	mov	r0, r5
 8001f82:	b002      	add	sp, #8
 8001f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f88:	f7fe face 	bl	8000528 <HAL_GetTick>
 8001f8c:	1b40      	subs	r0, r0, r5
 8001f8e:	4548      	cmp	r0, r9
 8001f90:	f67f aee8 	bls.w	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001f94:	e70c      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8001f96:	4635      	mov	r5, r6
 8001f98:	e712      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001f9a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001f9e:	d19b      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	1d20      	adds	r0, r4, #4
 8001fa4:	f7ff fd32 	bl	8001a0c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	bf18      	it	ne
 8001fac:	4605      	movne	r5, r0
 8001fae:	e793      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001fb0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001fb4:	d1a3      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	1d20      	adds	r0, r4, #4
 8001fba:	f7ff fd27 	bl	8001a0c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001fbe:	2800      	cmp	r0, #0
 8001fc0:	bf18      	it	ne
 8001fc2:	4605      	movne	r5, r0
 8001fc4:	e79b      	b.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x2da>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001fc6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001fca:	d1ab      	bne.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x300>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fcc:	2101      	movs	r1, #1
 8001fce:	1d20      	adds	r0, r4, #4
 8001fd0:	f7ff fd1c 	bl	8001a0c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	bf18      	it	ne
 8001fd8:	4605      	movne	r5, r0
 8001fda:	e7a3      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x300>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001fdc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001fe0:	d1b6      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	f104 0020 	add.w	r0, r4, #32
 8001fe8:	f7ff fd9e 	bl	8001b28 <RCCEx_PLLSAI2_Config>
 8001fec:	e7ad      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <HAL_RCCEx_EnableLSCO>:
{
 8001ff4:	b570      	push	{r4, r5, r6, lr}
  __LSCO_CLK_ENABLE();
 8001ff6:	4c21      	ldr	r4, [pc, #132]	; (800207c <HAL_RCCEx_EnableLSCO+0x88>)
 8001ff8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002000:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 8002002:	b088      	sub	sp, #32
  __LSCO_CLK_ENABLE();
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LSCO_PIN;
 800200c:	2304      	movs	r3, #4
 800200e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002010:	2303      	movs	r3, #3
 8002012:	9304      	str	r3, [sp, #16]
{
 8002014:	4606      	mov	r6, r0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002016:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2500      	movs	r5, #0
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 800201a:	a903      	add	r1, sp, #12
 800201c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002020:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8002024:	f7fe fb0e 	bl	8000644 <HAL_GPIO_Init>
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002028:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800202a:	00da      	lsls	r2, r3, #3
 800202c:	d409      	bmi.n	8002042 <HAL_RCCEx_EnableLSCO+0x4e>
    __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	65a3      	str	r3, [r4, #88]	; 0x58
 8002036:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	9302      	str	r3, [sp, #8]
 800203e:	9b02      	ldr	r3, [sp, #8]
    pwrclkchanged = SET;
 8002040:	2501      	movs	r5, #1
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_RCCEx_EnableLSCO+0x8c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	05db      	lsls	r3, r3, #23
 8002048:	d415      	bmi.n	8002076 <HAL_RCCEx_EnableLSCO+0x82>
    HAL_PWR_EnableBkUpAccess();
 800204a:	f7ff f8b7 	bl	80011bc <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 800204e:	2301      	movs	r3, #1
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8002050:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8002054:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8002058:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 800205c:	4330      	orrs	r0, r6
 800205e:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
  if(backupchanged == SET)
 8002062:	b10b      	cbz	r3, 8002068 <HAL_RCCEx_EnableLSCO+0x74>
    HAL_PWR_DisableBkUpAccess();
 8002064:	f7ff f8b2 	bl	80011cc <HAL_PWR_DisableBkUpAccess>
  if(pwrclkchanged == SET)
 8002068:	b11d      	cbz	r5, 8002072 <HAL_RCCEx_EnableLSCO+0x7e>
    __HAL_RCC_PWR_CLK_DISABLE();
 800206a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800206c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002070:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8002072:	b008      	add	sp, #32
 8002074:	bd70      	pop	{r4, r5, r6, pc}
  FlagStatus       backupchanged = RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	e7ea      	b.n	8002050 <HAL_RCCEx_EnableLSCO+0x5c>
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	40007000 	.word	0x40007000

08002084 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002084:	6802      	ldr	r2, [r0, #0]
{
 8002086:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002088:	68d3      	ldr	r3, [r2, #12]
 800208a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800208e:	60d3      	str	r3, [r2, #12]
{
 8002090:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 8002092:	f7fe fa49 	bl	8000528 <HAL_GetTick>
 8002096:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	069b      	lsls	r3, r3, #26
 800209e:	d501      	bpl.n	80020a4 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80020a0:	2000      	movs	r0, #0
 80020a2:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80020a4:	f7fe fa40 	bl	8000528 <HAL_GetTick>
 80020a8:	1b40      	subs	r0, r0, r5
 80020aa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020ae:	d9f3      	bls.n	8002098 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80020b0:	2003      	movs	r0, #3
}
 80020b2:	bd38      	pop	{r3, r4, r5, pc}

080020b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80020b4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80020b6:	6803      	ldr	r3, [r0, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	0652      	lsls	r2, r2, #25
{
 80020bc:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80020be:	d501      	bpl.n	80020c4 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80020c0:	2000      	movs	r0, #0
 80020c2:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80020ca:	f7fe fa2d 	bl	8000528 <HAL_GetTick>
 80020ce:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	065b      	lsls	r3, r3, #25
 80020d6:	d4f3      	bmi.n	80020c0 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80020d8:	f7fe fa26 	bl	8000528 <HAL_GetTick>
 80020dc:	1b40      	subs	r0, r0, r5
 80020de:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020e2:	d9f5      	bls.n	80020d0 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80020e4:	2003      	movs	r0, #3
}
 80020e6:	bd38      	pop	{r3, r4, r5, pc}

080020e8 <HAL_RTC_Init>:
{
 80020e8:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80020ea:	4604      	mov	r4, r0
 80020ec:	b1d8      	cbz	r0, 8002126 <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80020ee:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80020f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020f6:	b91b      	cbnz	r3, 8002100 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 80020f8:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 80020fc:	f001 fcc0 	bl	8003a80 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002100:	2302      	movs	r3, #2
 8002102:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	22ca      	movs	r2, #202	; 0xca
 800210a:	625a      	str	r2, [r3, #36]	; 0x24
 800210c:	2253      	movs	r2, #83	; 0x53
 800210e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002110:	4620      	mov	r0, r4
 8002112:	f7ff ffcf 	bl	80020b4 <RTC_EnterInitMode>
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	4605      	mov	r5, r0
 800211a:	b130      	cbz	r0, 800212a <HAL_RTC_Init+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800211c:	22ff      	movs	r2, #255	; 0xff
 800211e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002120:	2304      	movs	r3, #4
 8002122:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 8002126:	2501      	movs	r5, #1
 8002128:	e031      	b.n	800218e <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800212a:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800212c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800212e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8002132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002136:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002138:	6862      	ldr	r2, [r4, #4]
 800213a:	6899      	ldr	r1, [r3, #8]
 800213c:	4302      	orrs	r2, r0
 800213e:	69a0      	ldr	r0, [r4, #24]
 8002140:	4302      	orrs	r2, r0
 8002142:	430a      	orrs	r2, r1
 8002144:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002146:	68e2      	ldr	r2, [r4, #12]
 8002148:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	68a1      	ldr	r1, [r4, #8]
 800214e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002152:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800215a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	069b      	lsls	r3, r3, #26
 8002160:	d405      	bmi.n	800216e <HAL_RTC_Init+0x86>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002162:	4620      	mov	r0, r4
 8002164:	f7ff ff8e 	bl	8002084 <HAL_RTC_WaitForSynchro>
 8002168:	b108      	cbz	r0, 800216e <HAL_RTC_Init+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	e7d6      	b.n	800211c <HAL_RTC_Init+0x34>
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800216e:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002170:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002174:	f022 0203 	bic.w	r2, r2, #3
 8002178:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800217a:	69e2      	ldr	r2, [r4, #28]
 800217c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800217e:	4302      	orrs	r2, r0
 8002180:	430a      	orrs	r2, r1
 8002182:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002184:	22ff      	movs	r2, #255	; 0xff
 8002186:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002188:	2301      	movs	r3, #1
 800218a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800218e:	4628      	mov	r0, r5
 8002190:	bd38      	pop	{r3, r4, r5, pc}

08002192 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8002192:	2300      	movs	r3, #0

  while(Value >= 10)
 8002194:	2809      	cmp	r0, #9
 8002196:	d803      	bhi.n	80021a0 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8002198:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800219c:	b2c0      	uxtb	r0, r0
 800219e:	4770      	bx	lr
    Value -= 10;
 80021a0:	380a      	subs	r0, #10
    bcdhigh++;
 80021a2:	3301      	adds	r3, #1
    Value -= 10;
 80021a4:	b2c0      	uxtb	r0, r0
 80021a6:	e7f5      	b.n	8002194 <RTC_ByteToBcd2+0x2>

080021a8 <HAL_RTC_SetTime>:
{
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80021aa:	f890 3020 	ldrb.w	r3, [r0, #32]
 80021ae:	2b01      	cmp	r3, #1
{
 80021b0:	4606      	mov	r6, r0
 80021b2:	460f      	mov	r7, r1
 80021b4:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 80021b8:	d033      	beq.n	8002222 <HAL_RTC_SetTime+0x7a>
 80021ba:	2301      	movs	r3, #1
 80021bc:	f880 3020 	strb.w	r3, [r0, #32]
 80021c0:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021c2:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
 80021c6:	7808      	ldrb	r0, [r1, #0]
 80021c8:	784d      	ldrb	r5, [r1, #1]
 80021ca:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80021cc:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 80021ce:	bb52      	cbnz	r2, 8002226 <HAL_RTC_SetTime+0x7e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80021d0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00;
 80021d4:	bf08      	it	eq
 80021d6:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80021d8:	f7ff ffdb 	bl	8002192 <RTC_ByteToBcd2>
 80021dc:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80021de:	4628      	mov	r0, r5
 80021e0:	f7ff ffd7 	bl	8002192 <RTC_ByteToBcd2>
 80021e4:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7ff ffd3 	bl	8002192 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));
 80021ec:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80021ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80021f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80021f6:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021fa:	6833      	ldr	r3, [r6, #0]
 80021fc:	22ca      	movs	r2, #202	; 0xca
 80021fe:	625a      	str	r2, [r3, #36]	; 0x24
 8002200:	2253      	movs	r2, #83	; 0x53
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002204:	4630      	mov	r0, r6
 8002206:	f7ff ff55 	bl	80020b4 <RTC_EnterInitMode>
 800220a:	6833      	ldr	r3, [r6, #0]
 800220c:	4605      	mov	r5, r0
 800220e:	b1b8      	cbz	r0, 8002240 <HAL_RTC_SetTime+0x98>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002210:	22ff      	movs	r2, #255	; 0xff
 8002212:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002214:	2304      	movs	r3, #4
 8002216:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800221a:	2300      	movs	r3, #0
 800221c:	f886 3020 	strb.w	r3, [r6, #32]
        return HAL_ERROR;
 8002220:	2501      	movs	r5, #1
}
 8002222:	4628      	mov	r0, r5
 8002224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002226:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8) | \
 800222a:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00;
 800222e:	bf08      	it	eq
 8002230:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002232:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002236:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16));
 8002238:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800223a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800223e:	e7dc      	b.n	80021fa <HAL_RTC_SetTime+0x52>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002240:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8002244:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8002248:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800224a:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800224c:	6938      	ldr	r0, [r7, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800224e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002252:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	6899      	ldr	r1, [r3, #8]
 8002258:	4302      	orrs	r2, r0
 800225a:	430a      	orrs	r2, r1
 800225c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002264:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	069b      	lsls	r3, r3, #26
 800226a:	d40c      	bmi.n	8002286 <HAL_RTC_SetTime+0xde>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800226c:	4630      	mov	r0, r6
 800226e:	f7ff ff09 	bl	8002084 <HAL_RTC_WaitForSynchro>
 8002272:	b140      	cbz	r0, 8002286 <HAL_RTC_SetTime+0xde>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002274:	6833      	ldr	r3, [r6, #0]
 8002276:	22ff      	movs	r2, #255	; 0xff
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800227a:	2304      	movs	r3, #4
 800227c:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002280:	f886 5020 	strb.w	r5, [r6, #32]
 8002284:	e7cc      	b.n	8002220 <HAL_RTC_SetTime+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002286:	6833      	ldr	r3, [r6, #0]
 8002288:	22ff      	movs	r2, #255	; 0xff
 800228a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800228c:	2301      	movs	r3, #1
 800228e:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 8002292:	2300      	movs	r3, #0
 8002294:	f886 3020 	strb.w	r3, [r6, #32]
   return HAL_OK;
 8002298:	e7c3      	b.n	8002222 <HAL_RTC_SetTime+0x7a>

0800229a <HAL_RTC_SetDate>:
{
 800229a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 800229c:	f890 3020 	ldrb.w	r3, [r0, #32]
 80022a0:	2b01      	cmp	r3, #1
{
 80022a2:	4605      	mov	r5, r0
 80022a4:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 80022a8:	d034      	beq.n	8002314 <HAL_RTC_SetDate+0x7a>
 80022aa:	2301      	movs	r3, #1
 80022ac:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80022b0:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
 80022b4:	784b      	ldrb	r3, [r1, #1]
 80022b6:	78c8      	ldrb	r0, [r1, #3]
 80022b8:	788e      	ldrb	r6, [r1, #2]
 80022ba:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80022bc:	2a00      	cmp	r2, #0
 80022be:	d14e      	bne.n	800235e <HAL_RTC_SetDate+0xc4>
 80022c0:	06da      	lsls	r2, r3, #27
 80022c2:	d503      	bpl.n	80022cc <HAL_RTC_SetDate+0x32>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80022c4:	f023 0310 	bic.w	r3, r3, #16
 80022c8:	330a      	adds	r3, #10
 80022ca:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80022cc:	f7ff ff61 	bl	8002192 <RTC_ByteToBcd2>
 80022d0:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80022d2:	7848      	ldrb	r0, [r1, #1]
 80022d4:	f7ff ff5d 	bl	8002192 <RTC_ByteToBcd2>
 80022d8:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80022da:	4630      	mov	r0, r6
 80022dc:	f7ff ff59 	bl	8002192 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80022e0:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 80022e4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80022e8:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022ec:	682b      	ldr	r3, [r5, #0]
 80022ee:	22ca      	movs	r2, #202	; 0xca
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24
 80022f2:	2253      	movs	r2, #83	; 0x53
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80022f6:	4628      	mov	r0, r5
 80022f8:	f7ff fedc 	bl	80020b4 <RTC_EnterInitMode>
 80022fc:	682b      	ldr	r3, [r5, #0]
 80022fe:	4606      	mov	r6, r0
 8002300:	b150      	cbz	r0, 8002318 <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002302:	22ff      	movs	r2, #255	; 0xff
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002306:	2304      	movs	r3, #4
 8002308:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800230c:	2300      	movs	r3, #0
 800230e:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 8002312:	2601      	movs	r6, #1
}
 8002314:	4630      	mov	r0, r6
 8002316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002318:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 800231c:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8002320:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002328:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	069b      	lsls	r3, r3, #26
 800232e:	d40c      	bmi.n	800234a <HAL_RTC_SetDate+0xb0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002330:	4628      	mov	r0, r5
 8002332:	f7ff fea7 	bl	8002084 <HAL_RTC_WaitForSynchro>
 8002336:	b140      	cbz	r0, 800234a <HAL_RTC_SetDate+0xb0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002338:	682b      	ldr	r3, [r5, #0]
 800233a:	22ff      	movs	r2, #255	; 0xff
 800233c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800233e:	2304      	movs	r3, #4
 8002340:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002344:	f885 6020 	strb.w	r6, [r5, #32]
 8002348:	e7e3      	b.n	8002312 <HAL_RTC_SetDate+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800234a:	682b      	ldr	r3, [r5, #0]
 800234c:	22ff      	movs	r2, #255	; 0xff
 800234e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002350:	2301      	movs	r3, #1
 8002352:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002356:	2300      	movs	r3, #0
 8002358:	f885 3020 	strb.w	r3, [r5, #32]
    return HAL_OK;
 800235c:	e7da      	b.n	8002314 <HAL_RTC_SetDate+0x7a>
                  (((uint32_t)sDate->Month) << 8) | \
 800235e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002360:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8002364:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002366:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 800236a:	e7bf      	b.n	80022ec <HAL_RTC_SetDate+0x52>

0800236c <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800236c:	6803      	ldr	r3, [r0, #0]
 800236e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002370:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002374:	4770      	bx	lr

08002376 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002376:	6803      	ldr	r3, [r0, #0]
 8002378:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800237a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 800237e:	4770      	bx	lr

08002380 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8002380:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002382:	69c1      	ldr	r1, [r0, #28]
{
 8002384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002386:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002388:	6883      	ldr	r3, [r0, #8]
 800238a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800238c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800238e:	4303      	orrs	r3, r0
 8002390:	6960      	ldr	r0, [r4, #20]
 8002392:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002394:	48ba      	ldr	r0, [pc, #744]	; (8002680 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002396:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002398:	4028      	ands	r0, r5
 800239a:	4303      	orrs	r3, r0
 800239c:	6013      	str	r3, [r2, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800239e:	6853      	ldr	r3, [r2, #4]
 80023a0:	68e0      	ldr	r0, [r4, #12]
 80023a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023a6:	4303      	orrs	r3, r0
 80023a8:	6053      	str	r3, [r2, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023aa:	4bb6      	ldr	r3, [pc, #728]	; (8002684 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023ac:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023ae:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023b0:	bf1c      	itt	ne
 80023b2:	6a23      	ldrne	r3, [r4, #32]
 80023b4:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023b6:	6893      	ldr	r3, [r2, #8]
 80023b8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80023bc:	4303      	orrs	r3, r0
 80023be:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c0:	4bb1      	ldr	r3, [pc, #708]	; (8002688 <UART_SetConfig+0x308>)
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d119      	bne.n	80023fa <UART_SetConfig+0x7a>
 80023c6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80023ca:	4ab0      	ldr	r2, [pc, #704]	; (800268c <UART_SetConfig+0x30c>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d0:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023d4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80023d8:	5cd3      	ldrb	r3, [r2, r3]
 80023da:	f040 8138 	bne.w	800264e <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 80023de:	2b08      	cmp	r3, #8
 80023e0:	f200 808f 	bhi.w	8002502 <UART_SetConfig+0x182>
 80023e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023e8:	00ca011a 	.word	0x00ca011a
 80023ec:	008d00f9 	.word	0x008d00f9
 80023f0:	008d0114 	.word	0x008d0114
 80023f4:	008d008d 	.word	0x008d008d
 80023f8:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023fa:	4ba5      	ldr	r3, [pc, #660]	; (8002690 <UART_SetConfig+0x310>)
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d107      	bne.n	8002410 <UART_SetConfig+0x90>
 8002400:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002404:	4aa3      	ldr	r2, [pc, #652]	; (8002694 <UART_SetConfig+0x314>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	e7e1      	b.n	80023d4 <UART_SetConfig+0x54>
 8002410:	4ba1      	ldr	r3, [pc, #644]	; (8002698 <UART_SetConfig+0x318>)
 8002412:	429a      	cmp	r2, r3
 8002414:	d123      	bne.n	800245e <UART_SetConfig+0xde>
 8002416:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002422:	2b10      	cmp	r3, #16
 8002424:	f000 80f1 	beq.w	800260a <UART_SetConfig+0x28a>
 8002428:	d80b      	bhi.n	8002442 <UART_SetConfig+0xc2>
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80f3 	beq.w	8002616 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002430:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
      ret = HAL_ERROR;
 8002434:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002438:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800243c:	f000 80f8 	beq.w	8002630 <UART_SetConfig+0x2b0>
 8002440:	e0a8      	b.n	8002594 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002442:	2b20      	cmp	r3, #32
 8002444:	f000 80c6 	beq.w	80025d4 <UART_SetConfig+0x254>
 8002448:	2b30      	cmp	r3, #48	; 0x30
 800244a:	d1f1      	bne.n	8002430 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800244c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002450:	f040 80b8 	bne.w	80025c4 <UART_SetConfig+0x244>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002454:	6860      	ldr	r0, [r4, #4]
 8002456:	0843      	lsrs	r3, r0, #1
 8002458:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800245c:	e0c3      	b.n	80025e6 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800245e:	4b8f      	ldr	r3, [pc, #572]	; (800269c <UART_SetConfig+0x31c>)
 8002460:	429a      	cmp	r2, r3
 8002462:	d11e      	bne.n	80024a2 <UART_SetConfig+0x122>
 8002464:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	f000 80bb 	beq.w	80025ec <UART_SetConfig+0x26c>
 8002476:	d80a      	bhi.n	800248e <UART_SetConfig+0x10e>
 8002478:	b97b      	cbnz	r3, 800249a <UART_SetConfig+0x11a>
  if(UART_INSTANCE_LOWPOWER(huart))
 800247a:	4b82      	ldr	r3, [pc, #520]	; (8002684 <UART_SetConfig+0x304>)
 800247c:	429a      	cmp	r2, r3
 800247e:	f040 80ca 	bne.w	8002616 <UART_SetConfig+0x296>
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002482:	f7ff faa3 	bl	80019cc <HAL_RCC_GetPCLK1Freq>
      break;
 8002486:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002488:	bbb0      	cbnz	r0, 80024f8 <UART_SetConfig+0x178>
 800248a:	4602      	mov	r2, r0
 800248c:	e03a      	b.n	8002504 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800248e:	2b80      	cmp	r3, #128	; 0x80
 8002490:	f000 809d 	beq.w	80025ce <UART_SetConfig+0x24e>
 8002494:	2bc0      	cmp	r3, #192	; 0xc0
 8002496:	f000 80b0 	beq.w	80025fa <UART_SetConfig+0x27a>
  if(UART_INSTANCE_LOWPOWER(huart))
 800249a:	4b7a      	ldr	r3, [pc, #488]	; (8002684 <UART_SetConfig+0x304>)
 800249c:	429a      	cmp	r2, r3
 800249e:	d1c7      	bne.n	8002430 <UART_SetConfig+0xb0>
 80024a0:	e02f      	b.n	8002502 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024a2:	4b7f      	ldr	r3, [pc, #508]	; (80026a0 <UART_SetConfig+0x320>)
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d111      	bne.n	80024cc <UART_SetConfig+0x14c>
 80024a8:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80024ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b8:	f000 8098 	beq.w	80025ec <UART_SetConfig+0x26c>
 80024bc:	d9dc      	bls.n	8002478 <UART_SetConfig+0xf8>
 80024be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c2:	f000 8084 	beq.w	80025ce <UART_SetConfig+0x24e>
 80024c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024ca:	e7e4      	b.n	8002496 <UART_SetConfig+0x116>
 80024cc:	4b6d      	ldr	r3, [pc, #436]	; (8002684 <UART_SetConfig+0x304>)
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d1ae      	bne.n	8002430 <UART_SetConfig+0xb0>
 80024d2:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e2:	f000 8083 	beq.w	80025ec <UART_SetConfig+0x26c>
 80024e6:	d9c7      	bls.n	8002478 <UART_SetConfig+0xf8>
 80024e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ec:	d06f      	beq.n	80025ce <UART_SetConfig+0x24e>
 80024ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80024f2:	e7d0      	b.n	8002496 <UART_SetConfig+0x116>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80024f4:	486b      	ldr	r0, [pc, #428]	; (80026a4 <UART_SetConfig+0x324>)
  if(UART_INSTANCE_LOWPOWER(huart))
 80024f6:	2302      	movs	r3, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 80024f8:	6862      	ldr	r2, [r4, #4]
 80024fa:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80024fe:	4281      	cmp	r1, r0
 8002500:	d905      	bls.n	800250e <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8002502:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002504:	2300      	movs	r3, #0
 8002506:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002508:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 800250a:	4610      	mov	r0, r2
 800250c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800250e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002512:	d8f6      	bhi.n	8002502 <UART_SetConfig+0x182>
        switch (clocksource)
 8002514:	2b08      	cmp	r3, #8
 8002516:	d82e      	bhi.n	8002576 <UART_SetConfig+0x1f6>
 8002518:	e8df f003 	tbb	[pc, r3]
 800251c:	2d1c2d05 	.word	0x2d1c2d05
 8002520:	2d2d2d24 	.word	0x2d2d2d24
 8002524:	27          	.byte	0x27
 8002525:	00          	.byte	0x00
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002526:	f7ff fa51 	bl	80019cc <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800252a:	6862      	ldr	r2, [r4, #4]
 800252c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002530:	0856      	lsrs	r6, r2, #1
 8002532:	2700      	movs	r7, #0
 8002534:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002538:	2300      	movs	r3, #0
 800253a:	4630      	mov	r0, r6
 800253c:	4639      	mov	r1, r7
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800253e:	f7fd fe43 	bl	80001c8 <__aeabi_uldivmod>
          break;
 8002542:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002544:	4b58      	ldr	r3, [pc, #352]	; (80026a8 <UART_SetConfig+0x328>)
 8002546:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800254a:	4299      	cmp	r1, r3
 800254c:	d8d9      	bhi.n	8002502 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	60d8      	str	r0, [r3, #12]
 8002552:	e7d7      	b.n	8002504 <UART_SetConfig+0x184>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002554:	4855      	ldr	r0, [pc, #340]	; (80026ac <UART_SetConfig+0x32c>)
 8002556:	0855      	lsrs	r5, r2, #1
 8002558:	2300      	movs	r3, #0
 800255a:	2100      	movs	r1, #0
 800255c:	1940      	adds	r0, r0, r5
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800255e:	f141 0100 	adc.w	r1, r1, #0
 8002562:	e7ec      	b.n	800253e <UART_SetConfig+0x1be>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002564:	f7fe fee6 	bl	8001334 <HAL_RCC_GetSysClockFreq>
 8002568:	e7df      	b.n	800252a <UART_SetConfig+0x1aa>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800256a:	0850      	lsrs	r0, r2, #1
 800256c:	2100      	movs	r1, #0
 800256e:	2300      	movs	r3, #0
 8002570:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002574:	e7f3      	b.n	800255e <UART_SetConfig+0x1de>
          ret = HAL_ERROR;
 8002576:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002578:	2000      	movs	r0, #0
 800257a:	e7e3      	b.n	8002544 <UART_SetConfig+0x1c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800257c:	f7ff fa36 	bl	80019ec <HAL_RCC_GetPCLK2Freq>
 8002580:	e04e      	b.n	8002620 <UART_SetConfig+0x2a0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002582:	f7ff fa23 	bl	80019cc <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002586:	6862      	ldr	r2, [r4, #4]
 8002588:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800258c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002590:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002592:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002594:	f1a3 0010 	sub.w	r0, r3, #16
 8002598:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800259c:	4288      	cmp	r0, r1
 800259e:	d8b0      	bhi.n	8002502 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 80025a0:	6821      	ldr	r1, [r4, #0]
 80025a2:	60cb      	str	r3, [r1, #12]
 80025a4:	e7ae      	b.n	8002504 <UART_SetConfig+0x184>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80025a6:	f7ff fa21 	bl	80019ec <HAL_RCC_GetPCLK2Freq>
 80025aa:	e7ec      	b.n	8002586 <UART_SetConfig+0x206>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80025ac:	6860      	ldr	r0, [r4, #4]
 80025ae:	0843      	lsrs	r3, r0, #1
 80025b0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80025b4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80025b8:	fbb3 f3f0 	udiv	r3, r3, r0
 80025bc:	e7e8      	b.n	8002590 <UART_SetConfig+0x210>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025be:	f7fe feb9 	bl	8001334 <HAL_RCC_GetSysClockFreq>
 80025c2:	e7e0      	b.n	8002586 <UART_SetConfig+0x206>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80025c4:	6860      	ldr	r0, [r4, #4]
 80025c6:	0843      	lsrs	r3, r0, #1
 80025c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025cc:	e7f4      	b.n	80025b8 <UART_SetConfig+0x238>
  if(UART_INSTANCE_LOWPOWER(huart))
 80025ce:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <UART_SetConfig+0x304>)
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d08f      	beq.n	80024f4 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025d4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80025d8:	d1e8      	bne.n	80025ac <UART_SetConfig+0x22c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80025da:	6860      	ldr	r0, [r4, #4]
 80025dc:	0843      	lsrs	r3, r0, #1
 80025de:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80025e2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80025e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80025ea:	e01f      	b.n	800262c <UART_SetConfig+0x2ac>
  if(UART_INSTANCE_LOWPOWER(huart))
 80025ec:	4b25      	ldr	r3, [pc, #148]	; (8002684 <UART_SetConfig+0x304>)
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d10b      	bne.n	800260a <UART_SetConfig+0x28a>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80025f2:	f7fe fe9f 	bl	8001334 <HAL_RCC_GetSysClockFreq>
      break;
 80025f6:	2304      	movs	r3, #4
 80025f8:	e746      	b.n	8002488 <UART_SetConfig+0x108>
  if(UART_INSTANCE_LOWPOWER(huart))
 80025fa:	4b22      	ldr	r3, [pc, #136]	; (8002684 <UART_SetConfig+0x304>)
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f47f af25 	bne.w	800244c <UART_SetConfig+0xcc>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002602:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if(UART_INSTANCE_LOWPOWER(huart))
 8002606:	2308      	movs	r3, #8
 8002608:	e776      	b.n	80024f8 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800260a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800260e:	d1d6      	bne.n	80025be <UART_SetConfig+0x23e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002610:	f7fe fe90 	bl	8001334 <HAL_RCC_GetSysClockFreq>
 8002614:	e004      	b.n	8002620 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002616:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800261a:	d1b2      	bne.n	8002582 <UART_SetConfig+0x202>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800261c:	f7ff f9d6 	bl	80019cc <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002620:	6861      	ldr	r1, [r4, #4]
 8002622:	084a      	lsrs	r2, r1, #1
 8002624:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002628:	fbb3 f3f1 	udiv	r3, r3, r1
 800262c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800262e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002630:	f1a3 0010 	sub.w	r0, r3, #16
 8002634:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002638:	4288      	cmp	r0, r1
 800263a:	f63f af62 	bhi.w	8002502 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 800263e:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002642:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002644:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002648:	430b      	orrs	r3, r1
 800264a:	60c3      	str	r3, [r0, #12]
 800264c:	e75a      	b.n	8002504 <UART_SetConfig+0x184>
    switch (clocksource)
 800264e:	2b08      	cmp	r3, #8
 8002650:	f63f af57 	bhi.w	8002502 <UART_SetConfig+0x182>
 8002654:	a201      	add	r2, pc, #4	; (adr r2, 800265c <UART_SetConfig+0x2dc>)
 8002656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265a:	bf00      	nop
 800265c:	08002583 	.word	0x08002583
 8002660:	080025a7 	.word	0x080025a7
 8002664:	080025ad 	.word	0x080025ad
 8002668:	08002503 	.word	0x08002503
 800266c:	080025bf 	.word	0x080025bf
 8002670:	08002503 	.word	0x08002503
 8002674:	08002503 	.word	0x08002503
 8002678:	08002503 	.word	0x08002503
 800267c:	080025c5 	.word	0x080025c5
 8002680:	efff69f3 	.word	0xefff69f3
 8002684:	40008000 	.word	0x40008000
 8002688:	40013800 	.word	0x40013800
 800268c:	0800412c 	.word	0x0800412c
 8002690:	40004400 	.word	0x40004400
 8002694:	08004130 	.word	0x08004130
 8002698:	40004800 	.word	0x40004800
 800269c:	40004c00 	.word	0x40004c00
 80026a0:	40005000 	.word	0x40005000
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	000ffcff 	.word	0x000ffcff
 80026ac:	f4240000 	.word	0xf4240000

080026b0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026b2:	07da      	lsls	r2, r3, #31
{
 80026b4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026b6:	d506      	bpl.n	80026c6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026b8:	6801      	ldr	r1, [r0, #0]
 80026ba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80026bc:	684a      	ldr	r2, [r1, #4]
 80026be:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80026c2:	4322      	orrs	r2, r4
 80026c4:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026c6:	079c      	lsls	r4, r3, #30
 80026c8:	d506      	bpl.n	80026d8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026ca:	6801      	ldr	r1, [r0, #0]
 80026cc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80026ce:	684a      	ldr	r2, [r1, #4]
 80026d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026d4:	4322      	orrs	r2, r4
 80026d6:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026d8:	0759      	lsls	r1, r3, #29
 80026da:	d506      	bpl.n	80026ea <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026dc:	6801      	ldr	r1, [r0, #0]
 80026de:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80026e0:	684a      	ldr	r2, [r1, #4]
 80026e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026e6:	4322      	orrs	r2, r4
 80026e8:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026ea:	071a      	lsls	r2, r3, #28
 80026ec:	d506      	bpl.n	80026fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026ee:	6801      	ldr	r1, [r0, #0]
 80026f0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80026f2:	684a      	ldr	r2, [r1, #4]
 80026f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026f8:	4322      	orrs	r2, r4
 80026fa:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026fc:	06dc      	lsls	r4, r3, #27
 80026fe:	d506      	bpl.n	800270e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002700:	6801      	ldr	r1, [r0, #0]
 8002702:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002704:	688a      	ldr	r2, [r1, #8]
 8002706:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800270a:	4322      	orrs	r2, r4
 800270c:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800270e:	0699      	lsls	r1, r3, #26
 8002710:	d506      	bpl.n	8002720 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002712:	6801      	ldr	r1, [r0, #0]
 8002714:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002716:	688a      	ldr	r2, [r1, #8]
 8002718:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800271c:	4322      	orrs	r2, r4
 800271e:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002720:	065a      	lsls	r2, r3, #25
 8002722:	d50f      	bpl.n	8002744 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002724:	6801      	ldr	r1, [r0, #0]
 8002726:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002728:	684a      	ldr	r2, [r1, #4]
 800272a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800272e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002730:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002734:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002736:	d105      	bne.n	8002744 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002738:	684a      	ldr	r2, [r1, #4]
 800273a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800273c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002740:	4322      	orrs	r2, r4
 8002742:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002744:	061b      	lsls	r3, r3, #24
 8002746:	d506      	bpl.n	8002756 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002748:	6802      	ldr	r2, [r0, #0]
 800274a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800274c:	6853      	ldr	r3, [r2, #4]
 800274e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002752:	430b      	orrs	r3, r1
 8002754:	6053      	str	r3, [r2, #4]
 8002756:	bd10      	pop	{r4, pc}

08002758 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800275c:	9d06      	ldr	r5, [sp, #24]
 800275e:	4604      	mov	r4, r0
 8002760:	460f      	mov	r7, r1
 8002762:	4616      	mov	r6, r2
 8002764:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002766:	6821      	ldr	r1, [r4, #0]
 8002768:	69ca      	ldr	r2, [r1, #28]
 800276a:	ea37 0302 	bics.w	r3, r7, r2
 800276e:	bf0c      	ite	eq
 8002770:	2201      	moveq	r2, #1
 8002772:	2200      	movne	r2, #0
 8002774:	42b2      	cmp	r2, r6
 8002776:	d002      	beq.n	800277e <UART_WaitOnFlagUntilTimeout+0x26>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002778:	2000      	movs	r0, #0
}
 800277a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800277e:	1c6b      	adds	r3, r5, #1
 8002780:	d0f2      	beq.n	8002768 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002782:	b99d      	cbnz	r5, 80027ac <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800278c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002796:	2320      	movs	r3, #32
 8002798:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 800279c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80027a0:	2300      	movs	r3, #0
 80027a2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80027a6:	2003      	movs	r0, #3
 80027a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80027ac:	f7fd febc 	bl	8000528 <HAL_GetTick>
 80027b0:	eba0 0008 	sub.w	r0, r0, r8
 80027b4:	4285      	cmp	r5, r0
 80027b6:	d2d6      	bcs.n	8002766 <UART_WaitOnFlagUntilTimeout+0xe>
 80027b8:	e7e4      	b.n	8002784 <UART_WaitOnFlagUntilTimeout+0x2c>

080027ba <UART_CheckIdleState>:
{
 80027ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027bc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027be:	2600      	movs	r6, #0
 80027c0:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 80027c2:	f7fd feb1 	bl	8000528 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80027cc:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027ce:	d417      	bmi.n	8002800 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	075b      	lsls	r3, r3, #29
 80027d6:	d50a      	bpl.n	80027ee <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2200      	movs	r2, #0
 80027e0:	462b      	mov	r3, r5
 80027e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80027e6:	4620      	mov	r0, r4
 80027e8:	f7ff ffb6 	bl	8002758 <UART_WaitOnFlagUntilTimeout>
 80027ec:	b9a0      	cbnz	r0, 8002818 <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 80027ee:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80027f0:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80027f2:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 80027f6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 80027fa:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 80027fe:	e00c      	b.n	800281a <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	4632      	mov	r2, r6
 8002808:	4603      	mov	r3, r0
 800280a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800280e:	4620      	mov	r0, r4
 8002810:	f7ff ffa2 	bl	8002758 <UART_WaitOnFlagUntilTimeout>
 8002814:	2800      	cmp	r0, #0
 8002816:	d0db      	beq.n	80027d0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002818:	2003      	movs	r0, #3
}
 800281a:	b002      	add	sp, #8
 800281c:	bd70      	pop	{r4, r5, r6, pc}

0800281e <HAL_UART_Init>:
{
 800281e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002820:	4604      	mov	r4, r0
 8002822:	b360      	cbz	r0, 800287e <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002824:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002828:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800282c:	b91b      	cbnz	r3, 8002836 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800282e:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002832:	f001 f9d7 	bl	8003be4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002836:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002838:	2324      	movs	r3, #36	; 0x24
 800283a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 800283e:	6813      	ldr	r3, [r2, #0]
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002846:	4620      	mov	r0, r4
 8002848:	f7ff fd9a 	bl	8002380 <UART_SetConfig>
 800284c:	2801      	cmp	r0, #1
 800284e:	d016      	beq.n	800287e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002852:	b113      	cbz	r3, 800285a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002854:	4620      	mov	r0, r4
 8002856:	f7ff ff2b 	bl	80026b0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002862:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800286a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002872:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002874:	601a      	str	r2, [r3, #0]
}
 8002876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800287a:	f7ff bf9e 	b.w	80027ba <UART_CheckIdleState>
}
 800287e:	2001      	movs	r0, #1
 8002880:	bd10      	pop	{r4, pc}

08002882 <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002882:	b084      	sub	sp, #16
 8002884:	b538      	push	{r3, r4, r5, lr}
 8002886:	ad05      	add	r5, sp, #20
 8002888:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800288c:	68c3      	ldr	r3, [r0, #12]
 800288e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
{
 8002892:	4604      	mov	r4, r0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002894:	60c3      	str	r3, [r0, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 8002896:	f000 fb55 	bl	8002f44 <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800289a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800289e:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 80028a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028a4:	2000      	movs	r0, #0
 80028a6:	b004      	add	sp, #16
 80028a8:	4770      	bx	lr

080028aa <USB_EnableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80028aa:	6883      	ldr	r3, [r0, #8]
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80028b2:	2000      	movs	r0, #0
 80028b4:	4770      	bx	lr

080028b6 <USB_DisableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80028b6:	6883      	ldr	r3, [r0, #8]
 80028b8:	f023 0301 	bic.w	r3, r3, #1
 80028bc:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80028be:	2000      	movs	r0, #0
 80028c0:	4770      	bx	lr

080028c2 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 80028c2:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80028c4:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_HOST_MODE)
 80028c6:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80028c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80028cc:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_HOST_MODE)
 80028ce:	d108      	bne.n	80028e2 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80028d0:	68c3      	ldr	r3, [r0, #12]
 80028d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028d6:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 80028d8:	2032      	movs	r0, #50	; 0x32
 80028da:	f7fd fe2b 	bl	8000534 <HAL_Delay>
  
  return HAL_OK;
}
 80028de:	2000      	movs	r0, #0
 80028e0:	bd08      	pop	{r3, pc}
  else if ( mode == USB_DEVICE_MODE)
 80028e2:	2900      	cmp	r1, #0
 80028e4:	d1f8      	bne.n	80028d8 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80028e6:	68c3      	ldr	r3, [r0, #12]
 80028e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028ec:	60c3      	str	r3, [r0, #12]
 80028ee:	e7f3      	b.n	80028d8 <USB_SetCurrentMode+0x16>

080028f0 <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80028f0:	b084      	sub	sp, #16
 80028f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028f6:	4604      	mov	r4, r0
 80028f8:	a809      	add	r0, sp, #36	; 0x24
 80028fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80028fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002900:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8002902:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002906:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800290a:	4689      	mov	r9, r1
 800290c:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 800290e:	b95f      	cbnz	r7, 8002928 <USB_DevInit+0x38>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8002910:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002912:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002916:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800291e:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002926:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 8002928:	2500      	movs	r5, #0
 800292a:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800292e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002932:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002936:	2103      	movs	r1, #3
 8002938:	4620      	mov	r0, r4
 800293a:	f000 f893 	bl	8002a64 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 800293e:	2110      	movs	r1, #16
 8002940:	4620      	mov	r0, r4
 8002942:	f000 f86d 	bl	8002a20 <USB_FlushTxFifo>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002946:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  USB_FlushRxFifo(USBx);
 800294a:	4620      	mov	r0, r4
 800294c:	f000 f87a 	bl	8002a44 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8002950:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 8002954:	6135      	str	r5, [r6, #16]
 8002956:	462a      	mov	r2, r5
  USBx_DEVICE->DOEPMSK = 0;
 8002958:	6175      	str	r5, [r6, #20]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800295a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800295e:	61b3      	str	r3, [r6, #24]
    {
      USBx_INEP(index)->DIEPCTL = 0;
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8002960:	20ff      	movs	r0, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0;
 8002962:	61f5      	str	r5, [r6, #28]
 8002964:	f504 6310 	add.w	r3, r4, #2304	; 0x900
  for (index = 0; index < cfg.dev_endpoints; index++)
 8002968:	454d      	cmp	r5, r9
 800296a:	d13c      	bne.n	80029e6 <USB_DevInit+0xf6>
 800296c:	2200      	movs	r2, #0
 800296e:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8002972:	4611      	mov	r1, r2
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8002978:	f04f 0eff 	mov.w	lr, #255	; 0xff
  for (index = 0; index < cfg.dev_endpoints; index++)
 800297c:	4295      	cmp	r5, r2
 800297e:	d13e      	bne.n	80029fe <USB_DevInit+0x10e>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002980:	6933      	ldr	r3, [r6, #16]
  
  if (cfg.dma_enable == 1)
 8002982:	f1b8 0f01 	cmp.w	r8, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800298a:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 800298c:	d108      	bne.n	80029a0 <USB_DevInit+0xb0>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 800298e:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <USB_DevInit+0x128>)
 8002990:	6333      	str	r3, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8002992:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002998:	f043 0303 	orr.w	r3, r3, #3
 800299c:	6333      	str	r3, [r6, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 800299e:	6b33      	ldr	r3, [r6, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 80029a4:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80029a8:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80029aa:	f1b8 0f00 	cmp.w	r8, #0
 80029ae:	d103      	bne.n	80029b8 <USB_DevInit+0xc8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80029b0:	69a3      	ldr	r3, [r4, #24]
 80029b2:	f043 0310 	orr.w	r3, r3, #16
 80029b6:	61a3      	str	r3, [r4, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80029b8:	69a2      	ldr	r2, [r4, #24]
 80029ba:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <USB_DevInit+0x12c>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 80029c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80029c2:	b11b      	cbz	r3, 80029cc <USB_DevInit+0xdc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80029c4:	69a3      	ldr	r3, [r4, #24]
 80029c6:	f043 0308 	orr.w	r3, r3, #8
 80029ca:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80029cc:	2f01      	cmp	r7, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80029ce:	bf01      	itttt	eq
 80029d0:	69a3      	ldreq	r3, [r4, #24]
 80029d2:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80029d6:	f043 0304 	orreq.w	r3, r3, #4
 80029da:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 80029dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029e0:	2000      	movs	r0, #0
 80029e2:	b004      	add	sp, #16
 80029e4:	4770      	bx	lr
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80029e6:	f8d3 e000 	ldr.w	lr, [r3]
 80029ea:	f1be 0f00 	cmp.w	lr, #0
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80029ee:	bfb4      	ite	lt
 80029f0:	6019      	strlt	r1, [r3, #0]
      USBx_INEP(index)->DIEPCTL = 0;
 80029f2:	601a      	strge	r2, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 80029f4:	3501      	adds	r5, #1
    USBx_INEP(index)->DIEPTSIZ = 0;
 80029f6:	611a      	str	r2, [r3, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 80029f8:	6098      	str	r0, [r3, #8]
 80029fa:	3320      	adds	r3, #32
 80029fc:	e7b4      	b.n	8002968 <USB_DevInit+0x78>
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80029fe:	f8d3 c000 	ldr.w	ip, [r3]
 8002a02:	f1bc 0f00 	cmp.w	ip, #0
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002a06:	bfb4      	ite	lt
 8002a08:	6018      	strlt	r0, [r3, #0]
      USBx_OUTEP(index)->DOEPCTL = 0;
 8002a0a:	6019      	strge	r1, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8002a0c:	3201      	adds	r2, #1
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 8002a0e:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8002a10:	f8c3 e008 	str.w	lr, [r3, #8]
 8002a14:	3320      	adds	r3, #32
 8002a16:	e7b1      	b.n	800297c <USB_DevInit+0x8c>
 8002a18:	00800100 	.word	0x00800100
 8002a1c:	803c3800 	.word	0x803c3800

08002a20 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002a20:	0189      	lsls	r1, r1, #6
 8002a22:	f041 0120 	orr.w	r1, r1, #32
 8002a26:	4a06      	ldr	r2, [pc, #24]	; (8002a40 <USB_FlushTxFifo+0x20>)
 8002a28:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 8002a2a:	3a01      	subs	r2, #1
 8002a2c:	d005      	beq.n	8002a3a <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002a2e:	6903      	ldr	r3, [r0, #16]
 8002a30:	f013 0320 	ands.w	r3, r3, #32
 8002a34:	d1f9      	bne.n	8002a2a <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8002a36:	4618      	mov	r0, r3
 8002a38:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002a3a:	2003      	movs	r0, #3
}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	00030d41 	.word	0x00030d41

08002a44 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002a44:	2310      	movs	r3, #16
 8002a46:	4a06      	ldr	r2, [pc, #24]	; (8002a60 <USB_FlushRxFifo+0x1c>)
 8002a48:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8002a4a:	3a01      	subs	r2, #1
 8002a4c:	d005      	beq.n	8002a5a <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002a4e:	6903      	ldr	r3, [r0, #16]
 8002a50:	f013 0310 	ands.w	r3, r3, #16
 8002a54:	d1f9      	bne.n	8002a4a <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8002a56:	4618      	mov	r0, r3
 8002a58:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002a5a:	2003      	movs	r0, #3
}
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	00030d41 	.word	0x00030d41

08002a64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8002a64:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002a68:	4319      	orrs	r1, r3
 8002a6a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8002a6e:	2000      	movs	r0, #0
 8002a70:	4770      	bx	lr

08002a72 <USB_ActivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002a72:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1)
 8002a74:	784b      	ldrb	r3, [r1, #1]
 8002a76:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8002a78:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8002a7c:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d11b      	bne.n	8002abc <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8002a84:	40a3      	lsls	r3, r4
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8002a8a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8002a8e:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8002a90:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	0412      	lsls	r2, r2, #16
 8002a98:	d40e      	bmi.n	8002ab8 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8002a9a:	688a      	ldr	r2, [r1, #8]
 8002a9c:	78c8      	ldrb	r0, [r1, #3]
 8002a9e:	681d      	ldr	r5, [r3, #0]
 8002aa0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002aa4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002aa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aac:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 8002ab0:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8002ab4:	4328      	orrs	r0, r5
 8002ab6:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8002ab8:	2000      	movs	r0, #0
 8002aba:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8002abc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ac0:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8002ac2:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8002ac6:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8002ac8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8002acc:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8002ace:	6803      	ldr	r3, [r0, #0]
 8002ad0:	041b      	lsls	r3, r3, #16
 8002ad2:	d4f1      	bmi.n	8002ab8 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8002ad4:	688b      	ldr	r3, [r1, #8]
 8002ad6:	78c9      	ldrb	r1, [r1, #3]
 8002ad8:	6802      	ldr	r2, [r0, #0]
 8002ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8002aea:	4313      	orrs	r3, r2
 8002aec:	6003      	str	r3, [r0, #0]
 8002aee:	e7e3      	b.n	8002ab8 <USB_ActivateEndpoint+0x46>

08002af0 <USB_DeactivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002af0:	b510      	push	{r4, lr}
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8002af2:	784b      	ldrb	r3, [r1, #1]
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8002af4:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8002af8:	7809      	ldrb	r1, [r1, #0]
 8002afa:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d111      	bne.n	8002b26 <USB_DeactivateEndpoint+0x36>
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8002b02:	408b      	lsls	r3, r1
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	401c      	ands	r4, r3
 8002b0a:	63d4      	str	r4, [r2, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8002b0c:	69d4      	ldr	r4, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8002b0e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8002b12:	4023      	ands	r3, r4
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8002b14:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8002b18:	61d3      	str	r3, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8002b1a:	6803      	ldr	r3, [r0, #0]
 8002b1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b20:	6003      	str	r3, [r0, #0]
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
  }
  return HAL_OK;
}
 8002b22:	2000      	movs	r0, #0
 8002b24:	bd10      	pop	{r4, pc}
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8002b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b2a:	408b      	lsls	r3, r1
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	401c      	ands	r4, r3
 8002b30:	63d4      	str	r4, [r2, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8002b32:	69d4      	ldr	r4, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8002b34:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8002b38:	4023      	ands	r3, r4
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8002b3a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8002b3e:	61d3      	str	r3, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8002b40:	6803      	ldr	r3, [r0, #0]
 8002b42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b46:	6003      	str	r3, [r0, #0]
 8002b48:	e7eb      	b.n	8002b22 <USB_DeactivateEndpoint+0x32>
	...

08002b4c <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8002b4e:	784b      	ldrb	r3, [r1, #1]
 8002b50:	780c      	ldrb	r4, [r1, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	694b      	ldr	r3, [r1, #20]
 8002b56:	d163      	bne.n	8002c20 <USB_EPStartXfer+0xd4>
 8002b58:	2520      	movs	r5, #32
 8002b5a:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002b5e:	fb15 6404 	smlabb	r4, r5, r4, r6
 8002b62:	6925      	ldr	r5, [r4, #16]
    if (ep->xfer_len == 0)
 8002b64:	bb73      	cbnz	r3, 8002bc4 <USB_EPStartXfer+0x78>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002b66:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002b6a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002b6e:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8002b70:	6925      	ldr	r5, [r4, #16]
 8002b72:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002b76:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8002b78:	6925      	ldr	r5, [r4, #16]
 8002b7a:	0ced      	lsrs	r5, r5, #19
 8002b7c:	04ed      	lsls	r5, r5, #19
 8002b7e:	6125      	str	r5, [r4, #16]
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
      }       
    }
      if (ep->type != EP_TYPE_ISOC)
 8002b80:	78cf      	ldrb	r7, [r1, #3]
 8002b82:	780d      	ldrb	r5, [r1, #0]
 8002b84:	2f01      	cmp	r7, #1
 8002b86:	f000 8089 	beq.w	8002c9c <USB_EPStartXfer+0x150>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8002b8a:	b14b      	cbz	r3, 8002ba0 <USB_EPStartXfer+0x54>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8002b8c:	f8d0 c834 	ldr.w	ip, [r0, #2100]	; 0x834
 8002b90:	2401      	movs	r4, #1
 8002b92:	40ac      	lsls	r4, r5
 8002b94:	ea44 040c 	orr.w	r4, r4, ip
 8002b98:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 8002b9c:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002ba0:	780d      	ldrb	r5, [r1, #0]
 8002ba2:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8002ba6:	2f01      	cmp	r7, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002ba8:	6834      	ldr	r4, [r6, #0]
 8002baa:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8002bae:	6034      	str	r4, [r6, #0]
    if (ep->type == EP_TYPE_ISOC)
 8002bb0:	d105      	bne.n	8002bbe <USB_EPStartXfer+0x72>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8002bb2:	9200      	str	r2, [sp, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	462a      	mov	r2, r5
 8002bb8:	68c9      	ldr	r1, [r1, #12]
 8002bba:	f000 f8e3 	bl	8002d84 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	b003      	add	sp, #12
 8002bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002bc4:	0ced      	lsrs	r5, r5, #19
 8002bc6:	04ed      	lsls	r5, r5, #19
 8002bc8:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002bca:	6925      	ldr	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8002bcc:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002bce:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002bd2:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002bd6:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8002bd8:	19dd      	adds	r5, r3, r7
 8002bda:	3d01      	subs	r5, #1
 8002bdc:	fbb5 f7f7 	udiv	r7, r5, r7
 8002be0:	4d35      	ldr	r5, [pc, #212]	; (8002cb8 <USB_EPStartXfer+0x16c>)
 8002be2:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8002be6:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 8002bea:	ea45 050e 	orr.w	r5, r5, lr
 8002bee:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8002bf0:	6927      	ldr	r7, [r4, #16]
 8002bf2:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8002bf6:	433d      	orrs	r5, r7
 8002bf8:	6125      	str	r5, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8002bfa:	78cd      	ldrb	r5, [r1, #3]
 8002bfc:	2d01      	cmp	r5, #1
 8002bfe:	d1bf      	bne.n	8002b80 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8002c00:	6925      	ldr	r5, [r4, #16]
 8002c02:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8002c06:	6125      	str	r5, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 8002c08:	6925      	ldr	r5, [r4, #16]
 8002c0a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002c0e:	6125      	str	r5, [r4, #16]
 8002c10:	e7b6      	b.n	8002b80 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002c12:	fb14 6405 	smlabb	r4, r4, r5, r6
 8002c16:	6825      	ldr	r5, [r4, #0]
 8002c18:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002c1c:	6025      	str	r5, [r4, #0]
 8002c1e:	e7bf      	b.n	8002ba0 <USB_EPStartXfer+0x54>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8002c20:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8002c24:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 8002c28:	6914      	ldr	r4, [r2, #16]
 8002c2a:	0ce4      	lsrs	r4, r4, #19
 8002c2c:	04e4      	lsls	r4, r4, #19
 8002c2e:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8002c30:	6914      	ldr	r4, [r2, #16]
 8002c32:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002c36:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002c3a:	6114      	str	r4, [r2, #16]
 8002c3c:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0)
 8002c3e:	b9db      	cbnz	r3, 8002c78 <USB_EPStartXfer+0x12c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002c40:	6913      	ldr	r3, [r2, #16]
 8002c42:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002c46:	431c      	orrs	r4, r3
 8002c48:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;      
 8002c4a:	6913      	ldr	r3, [r2, #16]
 8002c4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c50:	6113      	str	r3, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 8002c52:	78cb      	ldrb	r3, [r1, #3]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d10a      	bne.n	8002c6e <USB_EPStartXfer+0x122>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8002c58:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002c5c:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002c60:	6813      	ldr	r3, [r2, #0]
 8002c62:	bf0c      	ite	eq
 8002c64:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002c68:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6013      	str	r3, [r2, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002c6e:	6813      	ldr	r3, [r2, #0]
 8002c70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002c74:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002c76:	e7a2      	b.n	8002bbe <USB_EPStartXfer+0x72>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 8002c78:	4d0f      	ldr	r5, [pc, #60]	; (8002cb8 <USB_EPStartXfer+0x16c>)
 8002c7a:	6916      	ldr	r6, [r2, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket; 
 8002c7c:	4423      	add	r3, r4
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 8002c84:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 8002c88:	4335      	orrs	r5, r6
 8002c8a:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	6915      	ldr	r5, [r2, #16]
 8002c90:	435c      	muls	r4, r3
 8002c92:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002c96:	432c      	orrs	r4, r5
 8002c98:	6114      	str	r4, [r2, #16]
 8002c9a:	e7da      	b.n	8002c52 <USB_EPStartXfer+0x106>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8002c9c:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8002ca0:	f414 7f80 	tst.w	r4, #256	; 0x100
 8002ca4:	f04f 0420 	mov.w	r4, #32
 8002ca8:	d0b3      	beq.n	8002c12 <USB_EPStartXfer+0xc6>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002caa:	fb14 6405 	smlabb	r4, r4, r5, r6
 8002cae:	6825      	ldr	r5, [r4, #0]
 8002cb0:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8002cb4:	6025      	str	r5, [r4, #0]
 8002cb6:	e773      	b.n	8002ba0 <USB_EPStartXfer+0x54>
 8002cb8:	1ff80000 	.word	0x1ff80000

08002cbc <USB_EP0StartXfer>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8002cbc:	784b      	ldrb	r3, [r1, #1]
 8002cbe:	2b01      	cmp	r3, #1
{
 8002cc0:	b530      	push	{r4, r5, lr}
 8002cc2:	780b      	ldrb	r3, [r1, #0]
 8002cc4:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1)
 8002cc6:	d13e      	bne.n	8002d46 <USB_EP0StartXfer+0x8a>
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f500 6410 	add.w	r4, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002cce:	fb12 4303 	smlabb	r3, r2, r3, r4
 8002cd2:	691a      	ldr	r2, [r3, #16]
    if (ep->xfer_len == 0)
 8002cd4:	b9fd      	cbnz	r5, 8002d16 <USB_EP0StartXfer+0x5a>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002cd6:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8002cda:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8002cde:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002ce6:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	0cd2      	lsrs	r2, r2, #19
 8002cec:	04d2      	lsls	r2, r2, #19
 8002cee:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0)
 8002cf0:	694b      	ldr	r3, [r1, #20]
 8002cf2:	b13b      	cbz	r3, 8002d04 <USB_EP0StartXfer+0x48>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1 << (ep->num);
 8002cf4:	780d      	ldrb	r5, [r1, #0]
 8002cf6:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	40ab      	lsls	r3, r5
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8002d04:	780b      	ldrb	r3, [r1, #0]
 8002d06:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002d10:	601a      	str	r2, [r3, #0]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8002d12:	2000      	movs	r0, #0
 8002d14:	bd30      	pop	{r4, r5, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002d16:	0cd2      	lsrs	r2, r2, #19
 8002d18:	04d2      	lsls	r2, r2, #19
 8002d1a:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8002d22:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8002d26:	611a      	str	r2, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8002d28:	688a      	ldr	r2, [r1, #8]
 8002d2a:	4295      	cmp	r5, r2
        ep->xfer_len = ep->maxpacket;
 8002d2c:	bf88      	it	hi
 8002d2e:	614a      	strhi	r2, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002d36:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8002d38:	694a      	ldr	r2, [r1, #20]
 8002d3a:	691d      	ldr	r5, [r3, #16]
 8002d3c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8002d40:	432a      	orrs	r2, r5
 8002d42:	611a      	str	r2, [r3, #16]
 8002d44:	e7d4      	b.n	8002cf0 <USB_EP0StartXfer+0x34>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8002d46:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8002d4a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002d4e:	6903      	ldr	r3, [r0, #16]
 8002d50:	0cdb      	lsrs	r3, r3, #19
 8002d52:	04db      	lsls	r3, r3, #19
 8002d54:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8002d56:	6903      	ldr	r3, [r0, #16]
 8002d58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002d5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002d60:	6103      	str	r3, [r0, #16]
 8002d62:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0)
 8002d64:	b105      	cbz	r5, 8002d68 <USB_EP0StartXfer+0xac>
      ep->xfer_len = ep->maxpacket;
 8002d66:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8002d68:	6902      	ldr	r2, [r0, #16]
 8002d6a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002d6e:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8002d70:	6902      	ldr	r2, [r0, #16]
 8002d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d76:	4313      	orrs	r3, r2
 8002d78:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8002d7a:	6803      	ldr	r3, [r0, #0]
 8002d7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002d80:	6003      	str	r3, [r0, #0]
 8002d82:	e7c6      	b.n	8002d12 <USB_EP0StartXfer+0x56>

08002d84 <USB_WritePacket>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  uint32_t count32b= 0 , index= 0;
  count32b =  (len + 3) / 4;
 8002d84:	3303      	adds	r3, #3
  for (index = 0; index < count32b; index++, src += 4)
  {
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002d86:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
{
 8002d8a:	b510      	push	{r4, lr}
  count32b =  (len + 3) / 4;
 8002d8c:	109b      	asrs	r3, r3, #2
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002d8e:	eb00 3202 	add.w	r2, r0, r2, lsl #12
  for (index = 0; index < count32b; index++, src += 4)
 8002d92:	2400      	movs	r4, #0
 8002d94:	429c      	cmp	r4, r3
 8002d96:	d101      	bne.n	8002d9c <USB_WritePacket+0x18>
  }
  return HAL_OK;
}
 8002d98:	2000      	movs	r0, #0
 8002d9a:	bd10      	pop	{r4, pc}
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002d9c:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8002da0:	6010      	str	r0, [r2, #0]
  for (index = 0; index < count32b; index++, src += 4)
 8002da2:	3401      	adds	r4, #1
 8002da4:	e7f6      	b.n	8002d94 <USB_WritePacket+0x10>

08002da6 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002da6:	b510      	push	{r4, lr}
  uint32_t index=0;
  uint32_t count32b = (len + 3) / 4;
 8002da8:	3203      	adds	r2, #3
 8002daa:	1092      	asrs	r2, r2, #2
  
  for ( index = 0; index < count32b; index++, dest += 4 )
 8002dac:	2300      	movs	r3, #0
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8002dae:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( index = 0; index < count32b; index++, dest += 4 )
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d102      	bne.n	8002dbc <USB_ReadPacket+0x16>
    
  }
  return ((void *)dest);
}
 8002db6:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8002dba:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8002dbc:	6804      	ldr	r4, [r0, #0]
 8002dbe:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( index = 0; index < count32b; index++, dest += 4 )
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	e7f5      	b.n	8002db2 <USB_ReadPacket+0xc>

08002dc6 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8002dc6:	784b      	ldrb	r3, [r1, #1]
 8002dc8:	780a      	ldrb	r2, [r1, #0]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	f04f 0320 	mov.w	r3, #32
 8002dd0:	d10b      	bne.n	8002dea <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 8002dd2:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8002dd6:	fb13 0002 	smlabb	r0, r3, r2, r0
 8002dda:	6803      	ldr	r3, [r0, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db0b      	blt.n	8002df8 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8002de0:	6803      	ldr	r3, [r0, #0]
 8002de2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002de6:	6003      	str	r3, [r0, #0]
 8002de8:	e006      	b.n	8002df8 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 8002dea:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8002dee:	fb13 0002 	smlabb	r0, r3, r2, r0
 8002df2:	6803      	ldr	r3, [r0, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	daf3      	bge.n	8002de0 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002df8:	6803      	ldr	r3, [r0, #0]
 8002dfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dfe:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8002e00:	2000      	movs	r0, #0
 8002e02:	4770      	bx	lr

08002e04 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8002e04:	784b      	ldrb	r3, [r1, #1]
 8002e06:	780a      	ldrb	r2, [r1, #0]
 8002e08:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e0a:	bf0c      	ite	eq
 8002e0c:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e10:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8002e14:	2320      	movs	r3, #32
 8002e16:	fb13 0002 	smlabb	r0, r3, r2, r0
 8002e1a:	6803      	ldr	r3, [r0, #0]
 8002e1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e20:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8002e22:	78cb      	ldrb	r3, [r1, #3]
 8002e24:	3b02      	subs	r3, #2
 8002e26:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002e28:	bf9e      	ittt	ls
 8002e2a:	6803      	ldrls	r3, [r0, #0]
 8002e2c:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8002e30:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8002e32:	2000      	movs	r0, #0
 8002e34:	4770      	bx	lr

08002e36 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8002e36:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002e3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e3e:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8002e42:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002e46:	0109      	lsls	r1, r1, #4
 8002e48:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8002e4c:	4319      	orrs	r1, r3
 8002e4e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8002e52:	2000      	movs	r0, #0
 8002e54:	4770      	bx	lr

08002e56 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8002e56:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ; 
 8002e58:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002e5c:	f023 0302 	bic.w	r3, r3, #2
 8002e60:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8002e64:	2003      	movs	r0, #3
 8002e66:	f7fd fb65 	bl	8000534 <HAL_Delay>
  
  return HAL_OK;  
}
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	bd08      	pop	{r3, pc}

08002e6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8002e6e:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 8002e70:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002e74:	f043 0302 	orr.w	r3, r3, #2
 8002e78:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8002e7c:	2003      	movs	r0, #3
 8002e7e:	f7fd fb59 	bl	8000534 <HAL_Delay>
  
  return HAL_OK;  
}
 8002e82:	2000      	movs	r0, #0
 8002e84:	bd08      	pop	{r3, pc}

08002e86 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->GINTSTS;
 8002e86:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002e88:	6980      	ldr	r0, [r0, #24]
  return tmpreg;  
}
 8002e8a:	4010      	ands	r0, r2
 8002e8c:	4770      	bx	lr

08002e8e <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8002e8e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002e92:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002e96:	69c0      	ldr	r0, [r0, #28]
 8002e98:	4018      	ands	r0, r3
  return ((tmpreg & 0xffff0000) >> 16);
}
 8002e9a:	0c00      	lsrs	r0, r0, #16
 8002e9c:	4770      	bx	lr

08002e9e <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8002e9e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002ea2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002ea6:	69c0      	ldr	r0, [r0, #28]
 8002ea8:	4018      	ands	r0, r3
  return ((tmpreg & 0xFFFF));
}
 8002eaa:	b280      	uxth	r0, r0
 8002eac:	4770      	bx	lr

08002eae <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t tmpreg;
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8002eae:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002eb2:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002eb6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8002eba:	688a      	ldr	r2, [r1, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002ebc:	6940      	ldr	r0, [r0, #20]
  return tmpreg;
}
 8002ebe:	4010      	ands	r0, r2
 8002ec0:	4770      	bx	lr

08002ec2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum: endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8002ec2:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, msk = 0, emp = 0;
  
  msk = USBx_DEVICE->DIEPMSK;
 8002ec4:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002ec8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1) << 7;
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8002ecc:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1) << 7;
 8002ed0:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8002ed2:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1) << 7;
 8002ed6:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8002ed8:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	4323      	orrs	r3, r4
  return tmpreg;
}
 8002ede:	4018      	ands	r0, r3
 8002ee0:	bd10      	pop	{r4, pc}

08002ee2 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1);
 8002ee2:	6940      	ldr	r0, [r0, #20]
}
 8002ee4:	f000 0001 	and.w	r0, r0, #1
 8002ee8:	4770      	bx	lr

08002eea <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002eea:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002eee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ef2:	f023 0307 	bic.w	r3, r3, #7
 8002ef6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002efa:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	f002 0206 	and.w	r2, r2, #6
 8002f04:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 8002f06:	bf02      	ittt	eq
 8002f08:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8002f0c:	f042 0203 	orreq.w	r2, r2, #3
 8002f10:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f1a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	4770      	bx	lr

08002f20 <USB_EP0_OutStart>:
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(psetup);

  USBx_OUTEP(0)->DOEPTSIZ = 0;
 8002f20:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002f24:	2000      	movs	r0, #0
 8002f26:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002f2e:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	f042 0218 	orr.w	r2, r2, #24
 8002f36:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8002f3e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
}
 8002f40:	4770      	bx	lr
	...

08002f44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3301      	adds	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4a13      	ldr	r2, [pc, #76]	; (8002fa8 <USB_CoreReset+0x64>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e01b      	b.n	8002f9a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	daf2      	bge.n	8002f50 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f043 0201 	orr.w	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a09      	ldr	r2, [pc, #36]	; (8002fa8 <USB_CoreReset+0x64>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d901      	bls.n	8002f8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e006      	b.n	8002f9a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d0f0      	beq.n	8002f7a <USB_CoreReset+0x36>
  
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	00030d40 	.word	0x00030d40

08002fac <USBD_CUSTOM_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgDesc);
 8002fac:	2329      	movs	r3, #41	; 0x29
 8002fae:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgDesc;
}
 8002fb0:	4800      	ldr	r0, [pc, #0]	; (8002fb4 <USBD_CUSTOM_HID_GetCfgDesc+0x8>)
 8002fb2:	4770      	bx	lr
 8002fb4:	2000003c 	.word	0x2000003c

08002fb8 <USBD_CUSTOM_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8002fb8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	7618      	strb	r0, [r3, #24]

  return USBD_OK;
}
 8002fc0:	4770      	bx	lr

08002fc2 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8002fc2:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8002fc4:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218

  if (hhid->IsReportAvailable == 1)
 8002fc8:	6963      	ldr	r3, [r4, #20]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <USBD_CUSTOM_HID_EP0_RxReady+0x1c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8002fce:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002fd2:	7861      	ldrb	r1, [r4, #1]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	7820      	ldrb	r0, [r4, #0]
 8002fd8:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0;      
 8002fda:	2300      	movs	r3, #0
 8002fdc:	6163      	str	r3, [r4, #20]
  }

  return USBD_OK;
}
 8002fde:	2000      	movs	r0, #0
 8002fe0:	bd10      	pop	{r4, pc}
	...

08002fe4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8002fe4:	230a      	movs	r3, #10
 8002fe6:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8002fe8:	4800      	ldr	r0, [pc, #0]	; (8002fec <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8002fea:	4770      	bx	lr
 8002fec:	20000074 	.word	0x20000074

08002ff0 <USBD_CUSTOM_HID_DataOut>:
{
 8002ff0:	b538      	push	{r3, r4, r5, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8002ff2:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8002ff6:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002ffa:	7869      	ldrb	r1, [r5, #1]
 8002ffc:	68db      	ldr	r3, [r3, #12]
{
 8002ffe:	4604      	mov	r4, r0
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8003000:	7828      	ldrb	r0, [r5, #0]
 8003002:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf, 
 8003004:	2308      	movs	r3, #8
 8003006:	462a      	mov	r2, r5
 8003008:	2101      	movs	r1, #1
 800300a:	4620      	mov	r0, r4
 800300c:	f000 ff88 	bl	8003f20 <USBD_LL_PrepareReceive>
}
 8003010:	2000      	movs	r0, #0
 8003012:	bd38      	pop	{r3, r4, r5, pc}

08003014 <USBD_CUSTOM_HID_Setup>:
{
 8003014:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003016:	780c      	ldrb	r4, [r1, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8003018:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800301c:	f014 0460 	ands.w	r4, r4, #96	; 0x60
{
 8003020:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003022:	d02d      	beq.n	8003080 <USBD_CUSTOM_HID_Setup+0x6c>
 8003024:	2c20      	cmp	r4, #32
 8003026:	d10c      	bne.n	8003042 <USBD_CUSTOM_HID_Setup+0x2e>
    switch (req->bRequest)
 8003028:	784a      	ldrb	r2, [r1, #1]
 800302a:	3a02      	subs	r2, #2
 800302c:	2a09      	cmp	r2, #9
 800302e:	d821      	bhi.n	8003074 <USBD_CUSTOM_HID_Setup+0x60>
 8003030:	e8df f002 	tbb	[pc, r2]
 8003034:	20200914 	.word	0x20200914
 8003038:	18202020 	.word	0x18202020
 800303c:	0510      	.short	0x0510
      hhid->Protocol = (uint8_t)(req->wValue);
 800303e:	788a      	ldrb	r2, [r1, #2]
 8003040:	609a      	str	r2, [r3, #8]
  return USBD_OK;
 8003042:	2400      	movs	r4, #0
 8003044:	e01a      	b.n	800307c <USBD_CUSTOM_HID_Setup+0x68>
      USBD_CtlSendData (pdev, 
 8003046:	2201      	movs	r2, #1
 8003048:	f103 0108 	add.w	r1, r3, #8
      USBD_CtlSendData (pdev, 
 800304c:	4628      	mov	r0, r5
 800304e:	f000 fb7f 	bl	8003750 <USBD_CtlSendData>
 8003052:	e7f6      	b.n	8003042 <USBD_CUSTOM_HID_Setup+0x2e>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8003054:	884a      	ldrh	r2, [r1, #2]
 8003056:	0a12      	lsrs	r2, r2, #8
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	e7f2      	b.n	8003042 <USBD_CUSTOM_HID_Setup+0x2e>
      USBD_CtlSendData (pdev, 
 800305c:	2201      	movs	r2, #1
 800305e:	f103 010c 	add.w	r1, r3, #12
 8003062:	e7f3      	b.n	800304c <USBD_CUSTOM_HID_Setup+0x38>
      hhid->IsReportAvailable = 1;
 8003064:	2201      	movs	r2, #1
 8003066:	615a      	str	r2, [r3, #20]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
 8003068:	4628      	mov	r0, r5
 800306a:	798a      	ldrb	r2, [r1, #6]
 800306c:	4619      	mov	r1, r3
 800306e:	f000 fb84 	bl	800377a <USBD_CtlPrepareRx>
 8003072:	e7e6      	b.n	8003042 <USBD_CUSTOM_HID_Setup+0x2e>
      USBD_CtlError (pdev, req);
 8003074:	4628      	mov	r0, r5
 8003076:	f000 fb44 	bl	8003702 <USBD_CtlError>
      return USBD_FAIL; 
 800307a:	2402      	movs	r4, #2
}
 800307c:	4620      	mov	r0, r4
 800307e:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 8003080:	784a      	ldrb	r2, [r1, #1]
 8003082:	2a0a      	cmp	r2, #10
 8003084:	d01a      	beq.n	80030bc <USBD_CUSTOM_HID_Setup+0xa8>
 8003086:	2a0b      	cmp	r2, #11
 8003088:	d01e      	beq.n	80030c8 <USBD_CUSTOM_HID_Setup+0xb4>
 800308a:	2a06      	cmp	r2, #6
 800308c:	d1f6      	bne.n	800307c <USBD_CUSTOM_HID_Setup+0x68>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800308e:	884b      	ldrh	r3, [r1, #2]
 8003090:	0a1b      	lsrs	r3, r3, #8
 8003092:	2b22      	cmp	r3, #34	; 0x22
 8003094:	d107      	bne.n	80030a6 <USBD_CUSTOM_HID_Setup+0x92>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8003096:	88ca      	ldrh	r2, [r1, #6]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8003098:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 800309c:	2a26      	cmp	r2, #38	; 0x26
 800309e:	bf28      	it	cs
 80030a0:	2226      	movcs	r2, #38	; 0x26
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	e7d2      	b.n	800304c <USBD_CUSTOM_HID_Setup+0x38>
      else if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80030a6:	2b21      	cmp	r3, #33	; 0x21
 80030a8:	d105      	bne.n	80030b6 <USBD_CUSTOM_HID_Setup+0xa2>
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 80030aa:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_CUSTOM_HID_Desc;   
 80030ac:	4908      	ldr	r1, [pc, #32]	; (80030d0 <USBD_CUSTOM_HID_Setup+0xbc>)
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 80030ae:	2a09      	cmp	r2, #9
 80030b0:	bf28      	it	cs
 80030b2:	2209      	movcs	r2, #9
 80030b4:	e7ca      	b.n	800304c <USBD_CUSTOM_HID_Setup+0x38>
  uint8_t  *pbuf = NULL;
 80030b6:	4621      	mov	r1, r4
  uint16_t len = 0;
 80030b8:	4622      	mov	r2, r4
 80030ba:	e7c7      	b.n	800304c <USBD_CUSTOM_HID_Setup+0x38>
      USBD_CtlSendData (pdev,
 80030bc:	2201      	movs	r2, #1
 80030be:	f103 0110 	add.w	r1, r3, #16
 80030c2:	f000 fb45 	bl	8003750 <USBD_CtlSendData>
      break;
 80030c6:	e7d9      	b.n	800307c <USBD_CUSTOM_HID_Setup+0x68>
      hhid->AltSetting = (uint8_t)(req->wValue);
 80030c8:	788a      	ldrb	r2, [r1, #2]
 80030ca:	611a      	str	r2, [r3, #16]
      break;
 80030cc:	e7d6      	b.n	800307c <USBD_CUSTOM_HID_Setup+0x68>
 80030ce:	bf00      	nop
 80030d0:	20000068 	.word	0x20000068

080030d4 <USBD_CUSTOM_HID_DeInit>:
{
 80030d4:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 80030d6:	2181      	movs	r1, #129	; 0x81
{
 80030d8:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80030da:	f000 fec7 	bl	8003e6c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80030de:	2101      	movs	r1, #1
 80030e0:	4620      	mov	r0, r4
 80030e2:	f000 fec3 	bl	8003e6c <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 80030e6:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80030ea:	b153      	cbz	r3, 8003102 <USBD_CUSTOM_HID_DeInit+0x2e>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80030ec:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80030f4:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80030f8:	f000 ff56 	bl	8003fa8 <USBD_static_free>
    pdev->pClassData = NULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8003102:	2000      	movs	r0, #0
 8003104:	bd10      	pop	{r4, pc}

08003106 <USBD_CUSTOM_HID_Init>:
{
 8003106:	b570      	push	{r4, r5, r6, lr}
  USBD_LL_OpenEP(pdev,
 8003108:	2308      	movs	r3, #8
{
 800310a:	4605      	mov	r5, r0
  USBD_LL_OpenEP(pdev,
 800310c:	2203      	movs	r2, #3
 800310e:	2181      	movs	r1, #129	; 0x81
 8003110:	f000 fe9c 	bl	8003e4c <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8003114:	2308      	movs	r3, #8
 8003116:	2203      	movs	r2, #3
 8003118:	2101      	movs	r1, #1
 800311a:	4628      	mov	r0, r5
 800311c:	f000 fe96 	bl	8003e4c <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8003120:	201c      	movs	r0, #28
 8003122:	f000 ff3d 	bl	8003fa0 <USBD_static_malloc>
 8003126:	4606      	mov	r6, r0
 8003128:	f8c5 0218 	str.w	r0, [r5, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800312c:	b168      	cbz	r0, 800314a <USBD_CUSTOM_HID_Init+0x44>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800312e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
    hhid->state = CUSTOM_HID_IDLE;
 8003132:	2400      	movs	r4, #0
 8003134:	7604      	strb	r4, [r0, #24]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, 
 800313a:	2308      	movs	r3, #8
 800313c:	4632      	mov	r2, r6
 800313e:	2101      	movs	r1, #1
 8003140:	4628      	mov	r0, r5
 8003142:	f000 feed 	bl	8003f20 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8003146:	4620      	mov	r0, r4
 8003148:	bd70      	pop	{r4, r5, r6, pc}
    ret = 1; 
 800314a:	2001      	movs	r0, #1
}
 800314c:	bd70      	pop	{r4, r5, r6, pc}

0800314e <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800314e:	b119      	cbz	r1, 8003158 <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8003150:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8003154:	2000      	movs	r0, #0
 8003156:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003158:	2002      	movs	r0, #2
  }
  
  return ret;
}
 800315a:	4770      	bx	lr

0800315c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800315c:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800315e:	b180      	cbz	r0, 8003182 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003160:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003164:	b113      	cbz	r3, 800316c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003166:	2300      	movs	r3, #0
 8003168:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800316c:	b109      	cbz	r1, 8003172 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800316e:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003172:	2301      	movs	r3, #1
 8003174:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8003178:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800317a:	f000 fe25 	bl	8003dc8 <USBD_LL_Init>
  
  return USBD_OK; 
 800317e:	2000      	movs	r0, #0
 8003180:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8003182:	2002      	movs	r0, #2
}
 8003184:	bd08      	pop	{r3, pc}

08003186 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003186:	b119      	cbz	r1, 8003190 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003188:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800318c:	2000      	movs	r0, #0
 800318e:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003190:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003192:	4770      	bx	lr

08003194 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003194:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8003196:	f000 fe4b 	bl	8003e30 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800319a:	2000      	movs	r0, #0
 800319c:	bd08      	pop	{r3, pc}

0800319e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800319e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80031a0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80031a4:	b90b      	cbnz	r3, 80031aa <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80031a6:	2002      	movs	r0, #2
 80031a8:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4798      	blx	r3
 80031ae:	2800      	cmp	r0, #0
 80031b0:	d1f9      	bne.n	80031a6 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80031b2:	bd08      	pop	{r3, pc}

080031b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80031b4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80031b6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4798      	blx	r3
  return USBD_OK;
}
 80031be:	2000      	movs	r0, #0
 80031c0:	bd08      	pop	{r3, pc}

080031c2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80031c2:	b538      	push	{r3, r4, r5, lr}
 80031c4:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80031c6:	f500 7502 	add.w	r5, r0, #520	; 0x208
 80031ca:	4628      	mov	r0, r5
 80031cc:	f000 fa85 	bl	80036da <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80031d0:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80031d2:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80031d6:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80031da:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80031de:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80031e2:	f001 031f 	and.w	r3, r1, #31
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d00e      	beq.n	8003208 <USBD_LL_SetupStage+0x46>
 80031ea:	d307      	bcc.n	80031fc <USBD_LL_SetupStage+0x3a>
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d010      	beq.n	8003212 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80031f0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80031f4:	4620      	mov	r0, r4
 80031f6:	f000 fe47 	bl	8003e88 <USBD_LL_StallEP>
    break;
 80031fa:	e003      	b.n	8003204 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80031fc:	4629      	mov	r1, r5
 80031fe:	4620      	mov	r0, r4
 8003200:	f000 f8e6 	bl	80033d0 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8003204:	2000      	movs	r0, #0
 8003206:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003208:	4629      	mov	r1, r5
 800320a:	4620      	mov	r0, r4
 800320c:	f000 f9ea 	bl	80035e4 <USBD_StdItfReq>
    break;
 8003210:	e7f8      	b.n	8003204 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8003212:	4629      	mov	r1, r5
 8003214:	4620      	mov	r0, r4
 8003216:	f000 f9fd 	bl	8003614 <USBD_StdEPReq>
    break;
 800321a:	e7f3      	b.n	8003204 <USBD_LL_SetupStage+0x42>

0800321c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	4604      	mov	r4, r0
 8003220:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003222:	bb11      	cbnz	r1, 800326a <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003224:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8003228:	2b03      	cmp	r3, #3
 800322a:	d10f      	bne.n	800324c <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 800322c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8003230:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003234:	4293      	cmp	r3, r2
 8003236:	d90b      	bls.n	8003250 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8003238:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800323a:	429a      	cmp	r2, r3
 800323c:	bf28      	it	cs
 800323e:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8003240:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8003244:	b292      	uxth	r2, r2
 8003246:	4629      	mov	r1, r5
 8003248:	f000 faa6 	bl	8003798 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800324c:	2000      	movs	r0, #0
 800324e:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003250:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	b123      	cbz	r3, 8003262 <USBD_LL_DataOutStage+0x46>
 8003258:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800325c:	2a03      	cmp	r2, #3
 800325e:	d100      	bne.n	8003262 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8003260:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003262:	4620      	mov	r0, r4
 8003264:	f000 faa0 	bl	80037a8 <USBD_CtlSendStatus>
 8003268:	e7f0      	b.n	800324c <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 800326a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0eb      	beq.n	800324c <USBD_LL_DataOutStage+0x30>
 8003274:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003278:	2a03      	cmp	r2, #3
 800327a:	d1e7      	bne.n	800324c <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 800327c:	4798      	blx	r3
 800327e:	e7e5      	b.n	800324c <USBD_LL_DataOutStage+0x30>

08003280 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	4613      	mov	r3, r2
 8003284:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003286:	460e      	mov	r6, r1
 8003288:	2900      	cmp	r1, #0
 800328a:	d13d      	bne.n	8003308 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800328c:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003290:	2a02      	cmp	r2, #2
 8003292:	d10f      	bne.n	80032b4 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8003294:	69c5      	ldr	r5, [r0, #28]
 8003296:	6a02      	ldr	r2, [r0, #32]
 8003298:	4295      	cmp	r5, r2
 800329a:	d914      	bls.n	80032c6 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800329c:	1aaa      	subs	r2, r5, r2
 800329e:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 80032a0:	4619      	mov	r1, r3
 80032a2:	b292      	uxth	r2, r2
 80032a4:	f000 fa61 	bl	800376a <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80032a8:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80032aa:	461a      	mov	r2, r3
 80032ac:	4619      	mov	r1, r3
 80032ae:	4620      	mov	r0, r4
 80032b0:	f000 fe36 	bl	8003f20 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80032b4:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d102      	bne.n	80032c2 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80032c2:	2000      	movs	r0, #0
 80032c4:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80032c6:	6983      	ldr	r3, [r0, #24]
 80032c8:	fbb3 f5f2 	udiv	r5, r3, r2
 80032cc:	fb02 3515 	mls	r5, r2, r5, r3
 80032d0:	b965      	cbnz	r5, 80032ec <USBD_LL_DataInStage+0x6c>
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d80a      	bhi.n	80032ec <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80032d6:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80032da:	4293      	cmp	r3, r2
 80032dc:	d206      	bcs.n	80032ec <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80032de:	462a      	mov	r2, r5
 80032e0:	f000 fa43 	bl	800376a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80032e4:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80032e8:	462b      	mov	r3, r5
 80032ea:	e7de      	b.n	80032aa <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80032ec:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	b12b      	cbz	r3, 8003300 <USBD_LL_DataInStage+0x80>
 80032f4:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80032f8:	2a03      	cmp	r2, #3
 80032fa:	d101      	bne.n	8003300 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80032fc:	4620      	mov	r0, r4
 80032fe:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8003300:	4620      	mov	r0, r4
 8003302:	f000 fa5c 	bl	80037be <USBD_CtlReceiveStatus>
 8003306:	e7d5      	b.n	80032b4 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8003308:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0d7      	beq.n	80032c2 <USBD_LL_DataInStage+0x42>
 8003312:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003316:	2a03      	cmp	r2, #3
 8003318:	d1d3      	bne.n	80032c2 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 800331a:	4798      	blx	r3
 800331c:	e7d1      	b.n	80032c2 <USBD_LL_DataInStage+0x42>

0800331e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800331e:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003320:	2200      	movs	r2, #0
{
 8003322:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8003324:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003326:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8003328:	2340      	movs	r3, #64	; 0x40
 800332a:	f000 fd8f 	bl	8003e4c <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800332e:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003330:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8003334:	2200      	movs	r2, #0
 8003336:	2180      	movs	r1, #128	; 0x80
 8003338:	4620      	mov	r0, r4
 800333a:	f000 fd87 	bl	8003e4c <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800333e:	2301      	movs	r3, #1
 8003340:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8003344:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003348:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800334a:	b12b      	cbz	r3, 8003358 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800334c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003350:	7921      	ldrb	r1, [r4, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4620      	mov	r0, r4
 8003356:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8003358:	2000      	movs	r0, #0
 800335a:	bd38      	pop	{r3, r4, r5, pc}

0800335c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800335c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800335e:	2000      	movs	r0, #0
 8003360:	4770      	bx	lr

08003362 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003362:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003366:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800336a:	2304      	movs	r3, #4
 800336c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003370:	2000      	movs	r0, #0
 8003372:	4770      	bx	lr

08003374 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8003374:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8003378:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800337c:	2000      	movs	r0, #0
 800337e:	4770      	bx	lr

08003380 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003380:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003382:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003386:	2a03      	cmp	r2, #3
 8003388:	d104      	bne.n	8003394 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800338a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	b103      	cbz	r3, 8003394 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003392:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8003394:	2000      	movs	r0, #0
 8003396:	bd08      	pop	{r3, pc}

08003398 <USBD_LL_IsoINIncomplete>:
 8003398:	2000      	movs	r0, #0
 800339a:	4770      	bx	lr

0800339c <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 800339c:	2000      	movs	r0, #0
 800339e:	4770      	bx	lr

080033a0 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 80033a0:	2000      	movs	r0, #0
 80033a2:	4770      	bx	lr

080033a4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80033a4:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80033a6:	2201      	movs	r2, #1
 80033a8:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80033ac:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 80033b0:	7901      	ldrb	r1, [r0, #4]
 80033b2:	6852      	ldr	r2, [r2, #4]
 80033b4:	4790      	blx	r2
   
  return USBD_OK;
}
 80033b6:	2000      	movs	r0, #0
 80033b8:	bd08      	pop	{r3, pc}

080033ba <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80033ba:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 80033bc:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80033be:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80033c0:	f000 fd62 	bl	8003e88 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80033c4:	4620      	mov	r0, r4
 80033c6:	2100      	movs	r1, #0
}
 80033c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80033cc:	f000 bd5c 	b.w	8003e88 <USBD_LL_StallEP>

080033d0 <USBD_StdDevReq>:
{
 80033d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80033d2:	784b      	ldrb	r3, [r1, #1]
{
 80033d4:	4604      	mov	r4, r0
 80033d6:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80033d8:	2b09      	cmp	r3, #9
 80033da:	f200 8089 	bhi.w	80034f0 <USBD_StdDevReq+0x120>
 80033de:	e8df f013 	tbh	[pc, r3, lsl #1]
 80033e2:	00d8      	.short	0x00d8
 80033e4:	008700f4 	.word	0x008700f4
 80033e8:	008700e8 	.word	0x008700e8
 80033ec:	000a007c 	.word	0x000a007c
 80033f0:	00c80087 	.word	0x00c80087
 80033f4:	009c      	.short	0x009c
  switch (req->wValue >> 8)
 80033f6:	8849      	ldrh	r1, [r1, #2]
 80033f8:	0a0b      	lsrs	r3, r1, #8
 80033fa:	3b01      	subs	r3, #1
 80033fc:	2b0e      	cmp	r3, #14
 80033fe:	d877      	bhi.n	80034f0 <USBD_StdDevReq+0x120>
 8003400:	e8df f003 	tbb	[pc, r3]
 8003404:	76312420 	.word	0x76312420
 8003408:	76615876 	.word	0x76615876
 800340c:	76767676 	.word	0x76767676
 8003410:	7676      	.short	0x7676
 8003412:	08          	.byte	0x08
 8003413:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8003414:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003418:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800341a:	7c20      	ldrb	r0, [r4, #16]
 800341c:	f10d 0106 	add.w	r1, sp, #6
 8003420:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8003422:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003426:	2a00      	cmp	r2, #0
 8003428:	d072      	beq.n	8003510 <USBD_StdDevReq+0x140>
 800342a:	88eb      	ldrh	r3, [r5, #6]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d06f      	beq.n	8003510 <USBD_StdDevReq+0x140>
    len = MIN(len , req->wLength);
 8003430:	429a      	cmp	r2, r3
 8003432:	bf28      	it	cs
 8003434:	461a      	movcs	r2, r3
 8003436:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800343a:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 800343c:	4620      	mov	r0, r4
 800343e:	f000 f987 	bl	8003750 <USBD_CtlSendData>
 8003442:	e065      	b.n	8003510 <USBD_StdDevReq+0x140>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003444:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	e7e6      	b.n	800341a <USBD_StdDevReq+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800344c:	7c02      	ldrb	r2, [r0, #16]
 800344e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003452:	b932      	cbnz	r2, 8003462 <USBD_StdDevReq+0x92>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003456:	f10d 0006 	add.w	r0, sp, #6
 800345a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800345c:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800345e:	7043      	strb	r3, [r0, #1]
 8003460:	e7df      	b.n	8003422 <USBD_StdDevReq+0x52>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	e7f7      	b.n	8003456 <USBD_StdDevReq+0x86>
    switch ((uint8_t)(req->wValue))
 8003466:	b2c9      	uxtb	r1, r1
 8003468:	2905      	cmp	r1, #5
 800346a:	d81c      	bhi.n	80034a6 <USBD_StdDevReq+0xd6>
 800346c:	e8df f001 	tbb	[pc, r1]
 8003470:	0f0b0703 	.word	0x0f0b0703
 8003474:	1713      	.short	0x1713
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003476:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	e7cd      	b.n	800341a <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800347e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	e7c9      	b.n	800341a <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003486:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	e7c5      	b.n	800341a <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800348e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	e7c1      	b.n	800341a <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003496:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	e7bd      	b.n	800341a <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800349e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	e7b9      	b.n	800341a <USBD_StdDevReq+0x4a>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 80034a6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80034aa:	f10d 0206 	add.w	r2, sp, #6
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	4798      	blx	r3
 80034b2:	e7b6      	b.n	8003422 <USBD_StdDevReq+0x52>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80034b4:	7c03      	ldrb	r3, [r0, #16]
 80034b6:	b9db      	cbnz	r3, 80034f0 <USBD_StdDevReq+0x120>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80034b8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80034bc:	f10d 0006 	add.w	r0, sp, #6
 80034c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c2:	4798      	blx	r3
 80034c4:	e7ad      	b.n	8003422 <USBD_StdDevReq+0x52>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80034c6:	7c03      	ldrb	r3, [r0, #16]
 80034c8:	b993      	cbnz	r3, 80034f0 <USBD_StdDevReq+0x120>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80034ca:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80034ce:	f10d 0006 	add.w	r0, sp, #6
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80034d6:	2307      	movs	r3, #7
 80034d8:	e7c1      	b.n	800345e <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80034da:	888b      	ldrh	r3, [r1, #4]
 80034dc:	b943      	cbnz	r3, 80034f0 <USBD_StdDevReq+0x120>
 80034de:	88cb      	ldrh	r3, [r1, #6]
 80034e0:	b933      	cbnz	r3, 80034f0 <USBD_StdDevReq+0x120>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80034e2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80034e6:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80034e8:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80034ea:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80034ee:	d103      	bne.n	80034f8 <USBD_StdDevReq+0x128>
    USBD_CtlError(pdev , req);
 80034f0:	4620      	mov	r0, r4
 80034f2:	f7ff ff62 	bl	80033ba <USBD_CtlError.constprop.0>
    break;
 80034f6:	e00b      	b.n	8003510 <USBD_StdDevReq+0x140>
      pdev->dev_address = dev_addr;
 80034f8:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80034fc:	4629      	mov	r1, r5
 80034fe:	f000 fcf3 	bl	8003ee8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003502:	4620      	mov	r0, r4
 8003504:	f000 f950 	bl	80037a8 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8003508:	b12d      	cbz	r5, 8003516 <USBD_StdDevReq+0x146>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800350a:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800350c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8003510:	2000      	movs	r0, #0
 8003512:	b003      	add	sp, #12
 8003514:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003516:	2301      	movs	r3, #1
 8003518:	e7f8      	b.n	800350c <USBD_StdDevReq+0x13c>
  cfgidx = (uint8_t)(req->wValue);                 
 800351a:	7889      	ldrb	r1, [r1, #2]
 800351c:	4d30      	ldr	r5, [pc, #192]	; (80035e0 <USBD_StdDevReq+0x210>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800351e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8003520:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003522:	d8e5      	bhi.n	80034f0 <USBD_StdDevReq+0x120>
    switch (pdev->dev_state) 
 8003524:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003528:	2b02      	cmp	r3, #2
 800352a:	d00c      	beq.n	8003546 <USBD_StdDevReq+0x176>
 800352c:	2b03      	cmp	r3, #3
 800352e:	d1df      	bne.n	80034f0 <USBD_StdDevReq+0x120>
      if (cfgidx == 0) 
 8003530:	b9b1      	cbnz	r1, 8003560 <USBD_StdDevReq+0x190>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003532:	2302      	movs	r3, #2
 8003534:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8003538:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800353a:	f7ff fe3b 	bl	80031b4 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800353e:	4620      	mov	r0, r4
 8003540:	f000 f932 	bl	80037a8 <USBD_CtlSendStatus>
 8003544:	e7e4      	b.n	8003510 <USBD_StdDevReq+0x140>
      if (cfgidx) 
 8003546:	2900      	cmp	r1, #0
 8003548:	d0f9      	beq.n	800353e <USBD_StdDevReq+0x16e>
        pdev->dev_config = cfgidx;
 800354a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800354c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800354e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003550:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003554:	4620      	mov	r0, r4
 8003556:	f7ff fe22 	bl	800319e <USBD_SetClassConfig>
 800355a:	2802      	cmp	r0, #2
 800355c:	d1ef      	bne.n	800353e <USBD_StdDevReq+0x16e>
 800355e:	e7c7      	b.n	80034f0 <USBD_StdDevReq+0x120>
      else  if (cfgidx != pdev->dev_config) 
 8003560:	6841      	ldr	r1, [r0, #4]
 8003562:	2901      	cmp	r1, #1
 8003564:	d0eb      	beq.n	800353e <USBD_StdDevReq+0x16e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8003566:	b2c9      	uxtb	r1, r1
 8003568:	f7ff fe24 	bl	80031b4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800356c:	7829      	ldrb	r1, [r5, #0]
 800356e:	6061      	str	r1, [r4, #4]
 8003570:	e7f0      	b.n	8003554 <USBD_StdDevReq+0x184>
  if (req->wLength != 1) 
 8003572:	88ca      	ldrh	r2, [r1, #6]
 8003574:	2a01      	cmp	r2, #1
 8003576:	d1bb      	bne.n	80034f0 <USBD_StdDevReq+0x120>
    switch (pdev->dev_state )  
 8003578:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800357c:	2b02      	cmp	r3, #2
 800357e:	d003      	beq.n	8003588 <USBD_StdDevReq+0x1b8>
 8003580:	2b03      	cmp	r3, #3
 8003582:	d1b5      	bne.n	80034f0 <USBD_StdDevReq+0x120>
      USBD_CtlSendData (pdev, 
 8003584:	1d01      	adds	r1, r0, #4
 8003586:	e759      	b.n	800343c <USBD_StdDevReq+0x6c>
      pdev->dev_default_config = 0;
 8003588:	4601      	mov	r1, r0
 800358a:	2300      	movs	r3, #0
 800358c:	f841 3f08 	str.w	r3, [r1, #8]!
 8003590:	e754      	b.n	800343c <USBD_StdDevReq+0x6c>
  switch (pdev->dev_state) 
 8003592:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003596:	3b02      	subs	r3, #2
 8003598:	2b01      	cmp	r3, #1
 800359a:	d8a9      	bhi.n	80034f0 <USBD_StdDevReq+0x120>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800359c:	2301      	movs	r3, #1
 800359e:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80035a0:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80035a4:	b10b      	cbz	r3, 80035aa <USBD_StdDevReq+0x1da>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80035a6:	2303      	movs	r3, #3
 80035a8:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80035aa:	2202      	movs	r2, #2
 80035ac:	f104 010c 	add.w	r1, r4, #12
 80035b0:	e744      	b.n	800343c <USBD_StdDevReq+0x6c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80035b2:	884b      	ldrh	r3, [r1, #2]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d1ab      	bne.n	8003510 <USBD_StdDevReq+0x140>
      pdev->dev_remote_wakeup = 0; 
 80035b8:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80035bc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80035c0:	4629      	mov	r1, r5
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4620      	mov	r0, r4
 80035c6:	4798      	blx	r3
 80035c8:	e7b9      	b.n	800353e <USBD_StdDevReq+0x16e>
  switch (pdev->dev_state)
 80035ca:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80035ce:	3b02      	subs	r3, #2
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d88d      	bhi.n	80034f0 <USBD_StdDevReq+0x120>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80035d4:	884b      	ldrh	r3, [r1, #2]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d19a      	bne.n	8003510 <USBD_StdDevReq+0x140>
      pdev->dev_remote_wakeup = 0; 
 80035da:	2300      	movs	r3, #0
 80035dc:	e7ec      	b.n	80035b8 <USBD_StdDevReq+0x1e8>
 80035de:	bf00      	nop
 80035e0:	2000011c 	.word	0x2000011c

080035e4 <USBD_StdItfReq>:
{
 80035e4:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80035e6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80035ea:	2b03      	cmp	r3, #3
{
 80035ec:	4604      	mov	r4, r0
 80035ee:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80035f0:	d10d      	bne.n	800360e <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80035f2:	790b      	ldrb	r3, [r1, #4]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d80a      	bhi.n	800360e <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80035f8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003600:	88eb      	ldrh	r3, [r5, #6]
 8003602:	b913      	cbnz	r3, 800360a <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8003604:	4620      	mov	r0, r4
 8003606:	f000 f8cf 	bl	80037a8 <USBD_CtlSendStatus>
}
 800360a:	2000      	movs	r0, #0
 800360c:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800360e:	f7ff fed4 	bl	80033ba <USBD_CtlError.constprop.0>
    break;
 8003612:	e7fa      	b.n	800360a <USBD_StdItfReq+0x26>

08003614 <USBD_StdEPReq>:
{
 8003614:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8003616:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8003618:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800361a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800361e:	2a20      	cmp	r2, #32
{
 8003620:	4604      	mov	r4, r0
 8003622:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8003624:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8003626:	d105      	bne.n	8003634 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8003628:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	4798      	blx	r3
}
 8003630:	2000      	movs	r0, #0
 8003632:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8003634:	784a      	ldrb	r2, [r1, #1]
 8003636:	2a01      	cmp	r2, #1
 8003638:	d01c      	beq.n	8003674 <USBD_StdEPReq+0x60>
 800363a:	d32a      	bcc.n	8003692 <USBD_StdEPReq+0x7e>
 800363c:	2a03      	cmp	r2, #3
 800363e:	d1f7      	bne.n	8003630 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003640:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003644:	2a02      	cmp	r2, #2
 8003646:	d040      	beq.n	80036ca <USBD_StdEPReq+0xb6>
 8003648:	2a03      	cmp	r2, #3
 800364a:	d002      	beq.n	8003652 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 800364c:	f7ff feb5 	bl	80033ba <USBD_CtlError.constprop.0>
      break;
 8003650:	e7ee      	b.n	8003630 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003652:	884a      	ldrh	r2, [r1, #2]
 8003654:	b922      	cbnz	r2, 8003660 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003656:	065e      	lsls	r6, r3, #25
 8003658:	d002      	beq.n	8003660 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800365a:	4619      	mov	r1, r3
 800365c:	f000 fc14 	bl	8003e88 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8003660:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003664:	4629      	mov	r1, r5
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4620      	mov	r0, r4
 800366a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800366c:	4620      	mov	r0, r4
 800366e:	f000 f89b 	bl	80037a8 <USBD_CtlSendStatus>
 8003672:	e7dd      	b.n	8003630 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003674:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003678:	2a02      	cmp	r2, #2
 800367a:	d026      	beq.n	80036ca <USBD_StdEPReq+0xb6>
 800367c:	2a03      	cmp	r2, #3
 800367e:	d1e5      	bne.n	800364c <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003680:	884a      	ldrh	r2, [r1, #2]
 8003682:	2a00      	cmp	r2, #0
 8003684:	d1d4      	bne.n	8003630 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8003686:	0659      	lsls	r1, r3, #25
 8003688:	d0f0      	beq.n	800366c <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800368a:	4619      	mov	r1, r3
 800368c:	f000 fc0a 	bl	8003ea4 <USBD_LL_ClearStallEP>
 8003690:	e7e6      	b.n	8003660 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8003692:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003696:	2a02      	cmp	r2, #2
 8003698:	d017      	beq.n	80036ca <USBD_StdEPReq+0xb6>
 800369a:	2a03      	cmp	r2, #3
 800369c:	d1d6      	bne.n	800364c <USBD_StdEPReq+0x38>
 800369e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80036a2:	f016 0f80 	tst.w	r6, #128	; 0x80
 80036a6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80036aa:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80036ac:	bf14      	ite	ne
 80036ae:	3514      	addne	r5, #20
 80036b0:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80036b4:	f000 fc04 	bl	8003ec0 <USBD_LL_IsStallEP>
 80036b8:	b168      	cbz	r0, 80036d6 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 80036ba:	2301      	movs	r3, #1
 80036bc:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80036be:	2202      	movs	r2, #2
 80036c0:	4629      	mov	r1, r5
 80036c2:	4620      	mov	r0, r4
 80036c4:	f000 f844 	bl	8003750 <USBD_CtlSendData>
      break;
 80036c8:	e7b2      	b.n	8003630 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 80036ca:	065a      	lsls	r2, r3, #25
 80036cc:	d0b0      	beq.n	8003630 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80036ce:	4619      	mov	r1, r3
 80036d0:	f000 fbda 	bl	8003e88 <USBD_LL_StallEP>
 80036d4:	e7ac      	b.n	8003630 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80036d6:	6028      	str	r0, [r5, #0]
 80036d8:	e7f1      	b.n	80036be <USBD_StdEPReq+0xaa>

080036da <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80036da:	780b      	ldrb	r3, [r1, #0]
 80036dc:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80036de:	784b      	ldrb	r3, [r1, #1]
 80036e0:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80036e2:	78ca      	ldrb	r2, [r1, #3]
 80036e4:	788b      	ldrb	r3, [r1, #2]
 80036e6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80036ea:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80036ec:	794a      	ldrb	r2, [r1, #5]
 80036ee:	790b      	ldrb	r3, [r1, #4]
 80036f0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80036f4:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80036f6:	79ca      	ldrb	r2, [r1, #7]
 80036f8:	798b      	ldrb	r3, [r1, #6]
 80036fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80036fe:	80c3      	strh	r3, [r0, #6]
 8003700:	4770      	bx	lr

08003702 <USBD_CtlError>:
{
 8003702:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8003704:	2180      	movs	r1, #128	; 0x80
{
 8003706:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8003708:	f000 fbbe 	bl	8003e88 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800370c:	4620      	mov	r0, r4
 800370e:	2100      	movs	r1, #0
}
 8003710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8003714:	f000 bbb8 	b.w	8003e88 <USBD_LL_StallEP>

08003718 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003718:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800371a:	b188      	cbz	r0, 8003740 <USBD_GetString+0x28>
 800371c:	4605      	mov	r5, r0
 800371e:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8003720:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2c00      	cmp	r4, #0
 8003728:	d1f9      	bne.n	800371e <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	3302      	adds	r3, #2
 800372e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8003730:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003732:	2303      	movs	r3, #3
 8003734:	704b      	strb	r3, [r1, #1]
 8003736:	3801      	subs	r0, #1
 8003738:	2302      	movs	r3, #2
    while (*desc != '\0') 
 800373a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800373e:	b905      	cbnz	r5, 8003742 <USBD_GetString+0x2a>
 8003740:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8003748:	3302      	adds	r3, #2
 800374a:	b2db      	uxtb	r3, r3
 800374c:	548c      	strb	r4, [r1, r2]
 800374e:	e7f4      	b.n	800373a <USBD_GetString+0x22>

08003750 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003750:	b510      	push	{r4, lr}
 8003752:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003754:	2202      	movs	r2, #2
 8003756:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800375a:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800375c:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800375e:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003760:	2100      	movs	r1, #0
 8003762:	f000 fbcf 	bl	8003f04 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003766:	2000      	movs	r0, #0
 8003768:	bd10      	pop	{r4, pc}

0800376a <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800376a:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800376c:	4613      	mov	r3, r2
 800376e:	460a      	mov	r2, r1
 8003770:	2100      	movs	r1, #0
 8003772:	f000 fbc7 	bl	8003f04 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003776:	2000      	movs	r0, #0
 8003778:	bd08      	pop	{r3, pc}

0800377a <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800377a:	b510      	push	{r4, lr}
 800377c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800377e:	2203      	movs	r2, #3
 8003780:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8003784:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8003788:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 800378a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 800378e:	2100      	movs	r1, #0
 8003790:	f000 fbc6 	bl	8003f20 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8003794:	2000      	movs	r0, #0
 8003796:	bd10      	pop	{r4, pc}

08003798 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003798:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800379a:	4613      	mov	r3, r2
 800379c:	460a      	mov	r2, r1
 800379e:	2100      	movs	r1, #0
 80037a0:	f000 fbbe 	bl	8003f20 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80037a4:	2000      	movs	r0, #0
 80037a6:	bd08      	pop	{r3, pc}

080037a8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80037a8:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80037aa:	2304      	movs	r3, #4
 80037ac:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80037b0:	2300      	movs	r3, #0
 80037b2:	461a      	mov	r2, r3
 80037b4:	4619      	mov	r1, r3
 80037b6:	f000 fba5 	bl	8003f04 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80037ba:	2000      	movs	r0, #0
 80037bc:	bd08      	pop	{r3, pc}

080037be <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80037be:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80037c0:	2305      	movs	r3, #5
 80037c2:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80037c6:	2300      	movs	r3, #0
 80037c8:	461a      	mov	r2, r3
 80037ca:	4619      	mov	r1, r3
 80037cc:	f000 fba8 	bl	8003f20 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80037d0:	2000      	movs	r0, #0
 80037d2:	bd08      	pop	{r3, pc}

080037d4 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037d4:	4b3a      	ldr	r3, [pc, #232]	; (80038c0 <MX_GPIO_Init+0xec>)
{
 80037d6:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037da:	f042 0204 	orr.w	r2, r2, #4
 80037de:	64da      	str	r2, [r3, #76]	; 0x4c
 80037e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 80037e2:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037e4:	f002 0204 	and.w	r2, r2, #4
 80037e8:	9200      	str	r2, [sp, #0]
 80037ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80037f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037f6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80037fa:	9201      	str	r2, [sp, #4]
 80037fc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003800:	f042 0201 	orr.w	r2, r2, #1
 8003804:	64da      	str	r2, [r3, #76]	; 0x4c
 8003806:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003808:	f002 0201 	and.w	r2, r2, #1
 800380c:	9202      	str	r2, [sp, #8]
 800380e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003810:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003812:	f042 0202 	orr.w	r2, r2, #2
 8003816:	64da      	str	r2, [r3, #76]	; 0x4c
 8003818:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800381a:	f002 0202 	and.w	r2, r2, #2
 800381e:	9203      	str	r2, [sp, #12]
 8003820:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003824:	f042 0208 	orr.w	r2, r2, #8
 8003828:	64da      	str	r2, [r3, #76]	; 0x4c
 800382a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382c:	f003 0308 	and.w	r3, r3, #8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003830:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003832:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003834:	2130      	movs	r1, #48	; 0x30
 8003836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383a:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800383c:	2503      	movs	r5, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800383e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003840:	f7fc ffdc 	bl	80007fc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 8003844:	f643 73ff 	movw	r3, #16383	; 0x3fff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003848:	a905      	add	r1, sp, #20
 800384a:	481e      	ldr	r0, [pc, #120]	; (80038c4 <MX_GPIO_Init+0xf0>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 800384c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800384e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003852:	f7fc fef7 	bl	8000644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA6 
                           PA7 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6 
 8003856:	f248 03ce 	movw	r3, #32974	; 0x80ce
                          |GPIO_PIN_7|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800385a:	a905      	add	r1, sp, #20
 800385c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6 
 8003860:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003862:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003864:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003866:	f7fc feed 	bl	8000644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800386a:	2330      	movs	r3, #48	; 0x30
 800386c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800386e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003870:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003876:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003878:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387c:	f7fc fee2 	bl	8000644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8003880:	f64f 73ff 	movw	r3, #65535	; 0xffff
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003884:	a905      	add	r1, sp, #20
 8003886:	4810      	ldr	r0, [pc, #64]	; (80038c8 <MX_GPIO_Init+0xf4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8003888:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800388a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800388e:	f7fc fed9 	bl	8000644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003896:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003898:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80038a6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a8:	f7fc fecc 	bl	8000644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038ac:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038ae:	a905      	add	r1, sp, #20
 80038b0:	4806      	ldr	r0, [pc, #24]	; (80038cc <MX_GPIO_Init+0xf8>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038b2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038b4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038b8:	f7fc fec4 	bl	8000644 <HAL_GPIO_Init>

}
 80038bc:	b00b      	add	sp, #44	; 0x2c
 80038be:	bd30      	pop	{r4, r5, pc}
 80038c0:	40021000 	.word	0x40021000
 80038c4:	48000800 	.word	0x48000800
 80038c8:	48000400 	.word	0x48000400
 80038cc:	48000c00 	.word	0x48000c00

080038d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	b0b8      	sub	sp, #224	; 0xe0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability 
    */
  HAL_PWR_EnableBkUpAccess();
 80038d4:	f7fd fc72 	bl	80011bc <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80038d8:	4a2d      	ldr	r2, [pc, #180]	; (8003990 <SystemClock_Config+0xc0>)
 80038da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80038de:	f023 0318 	bic.w	r3, r3, #24
 80038e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80038e6:	230d      	movs	r3, #13
 80038e8:	9305      	str	r3, [sp, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ee:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80038f0:	2301      	movs	r3, #1
 80038f2:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80038f4:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLN = 12;
 80038f6:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80038f8:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038fa:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038fc:	2603      	movs	r6, #3
  RCC_OscInitStruct.PLL.PLLN = 12;
 80038fe:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003900:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003902:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003904:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003906:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003908:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800390a:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800390c:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800390e:	f7fd fd6f 	bl	80013f0 <HAL_RCC_OscConfig>
 8003912:	b100      	cbz	r0, 8003916 <SystemClock_Config+0x46>
 8003914:	e7fe      	b.n	8003914 <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003916:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003918:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800391a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800391c:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800391e:	4629      	mov	r1, r5
 8003920:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003922:	e88d 0048 	stmia.w	sp, {r3, r6}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003926:	f7fd ff95 	bl	8001854 <HAL_RCC_ClockConfig>
 800392a:	b100      	cbz	r0, 800392e <SystemClock_Config+0x5e>
 800392c:	e7fe      	b.n	800392c <SystemClock_Config+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 800392e:	4b19      	ldr	r3, [pc, #100]	; (8003994 <SystemClock_Config+0xc4>)
 8003930:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003932:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003936:	9024      	str	r0, [sp, #144]	; 0x90
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003938:	9337      	str	r3, [sp, #220]	; 0xdc
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800393a:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800393c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003940:	9331      	str	r3, [sp, #196]	; 0xc4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003942:	f7fe f96f 	bl	8001c24 <HAL_RCCEx_PeriphCLKConfig>
 8003946:	4605      	mov	r5, r0
 8003948:	b100      	cbz	r0, 800394c <SystemClock_Config+0x7c>
 800394a:	e7fe      	b.n	800394a <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 800394c:	4602      	mov	r2, r0
 800394e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8003952:	f7fd fcc9 	bl	80012e8 <HAL_RCC_MCOConfig>

  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8003956:	4628      	mov	r0, r5
 8003958:	f7fe fb4c 	bl	8001ff4 <HAL_RCCEx_EnableLSCO>

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800395c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003960:	f7fd fc44 	bl	80011ec <HAL_PWREx_ControlVoltageScaling>
 8003964:	4605      	mov	r5, r0
 8003966:	b100      	cbz	r0, 800396a <SystemClock_Config+0x9a>
 8003968:	e7fe      	b.n	8003968 <SystemClock_Config+0x98>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800396a:	f7fe f829 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
 800396e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003972:	fbb0 f0f3 	udiv	r0, r0, r3
 8003976:	f7fc fe3d 	bl	80005f4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800397a:	4620      	mov	r0, r4
 800397c:	f7fc fe50 	bl	8000620 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003980:	462a      	mov	r2, r5
 8003982:	4629      	mov	r1, r5
 8003984:	f04f 30ff 	mov.w	r0, #4294967295
 8003988:	f7fc fdf4 	bl	8000574 <HAL_NVIC_SetPriority>
}
 800398c:	b038      	add	sp, #224	; 0xe0
 800398e:	bd70      	pop	{r4, r5, r6, pc}
 8003990:	40021000 	.word	0x40021000
 8003994:	00022001 	.word	0x00022001

08003998 <main>:
{
 8003998:	b508      	push	{r3, lr}
  HAL_Init();
 800399a:	f7fc fdb1 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 800399e:	f7ff ff97 	bl	80038d0 <SystemClock_Config>
  MX_GPIO_Init();
 80039a2:	f7ff ff17 	bl	80037d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80039a6:	f000 f8fb 	bl	8003ba0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80039aa:	f000 f817 	bl	80039dc <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 80039ae:	f000 f93f 	bl	8003c30 <MX_USB_DEVICE_Init>
  HAL_GPIO_TogglePin(GPIOA,LED1_Pin);
 80039b2:	2110      	movs	r1, #16
 80039b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039b8:	f7fc ff25 	bl	8000806 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA,LED1_Pin);
 80039bc:	2110      	movs	r1, #16
 80039be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039c2:	f7fc ff20 	bl	8000806 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA,LED2_Pin);
 80039c6:	2120      	movs	r1, #32
 80039c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039cc:	f7fc ff1b 	bl	8000806 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80039d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039d4:	f7fc fdae 	bl	8000534 <HAL_Delay>
 80039d8:	e7f0      	b.n	80039bc <main+0x24>

080039da <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80039da:	e7fe      	b.n	80039da <_Error_Handler>

080039dc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80039dc:	b530      	push	{r4, r5, lr}
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 80039de:	4d25      	ldr	r5, [pc, #148]	; (8003a74 <MX_RTC_Init+0x98>)
 80039e0:	4b25      	ldr	r3, [pc, #148]	; (8003a78 <MX_RTC_Init+0x9c>)
 80039e2:	602b      	str	r3, [r5, #0]
{
 80039e4:	b087      	sub	sp, #28
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 80039e6:	2100      	movs	r1, #0
 80039e8:	4628      	mov	r0, r5
 80039ea:	f7fe fcc4 	bl	8002376 <HAL_RTCEx_BKUPRead>
 80039ee:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80039f2:	4298      	cmp	r0, r3
 80039f4:	d03c      	beq.n	8003a70 <MX_RTC_Init+0x94>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 80039f6:	237f      	movs	r3, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80039f8:	2400      	movs	r4, #0
  hrtc.Init.AsynchPrediv = 127;
 80039fa:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80039fc:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 80039fe:	23ff      	movs	r3, #255	; 0xff
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003a00:	606c      	str	r4, [r5, #4]
  hrtc.Init.SynchPrediv = 255;
 8003a02:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003a04:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003a06:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003a08:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003a0a:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003a0c:	f7fe fb6c 	bl	80020e8 <HAL_RTC_Init>
 8003a10:	b118      	cbz	r0, 8003a1a <MX_RTC_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003a12:	214e      	movs	r1, #78	; 0x4e
 8003a14:	4819      	ldr	r0, [pc, #100]	; (8003a7c <MX_RTC_Init+0xa0>)
 8003a16:	f7ff ffe0 	bl	80039da <_Error_Handler>
  sTime.Hours = 0x0;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	a901      	add	r1, sp, #4
 8003a1e:	4815      	ldr	r0, [pc, #84]	; (8003a74 <MX_RTC_Init+0x98>)
  sTime.Hours = 0x0;
 8003a20:	f88d 4004 	strb.w	r4, [sp, #4]
  sTime.Minutes = 0x0;
 8003a24:	f88d 4005 	strb.w	r4, [sp, #5]
  sTime.Seconds = 0x0;
 8003a28:	f88d 4006 	strb.w	r4, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003a2c:	9404      	str	r4, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003a2e:	9405      	str	r4, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003a30:	f7fe fbba 	bl	80021a8 <HAL_RTC_SetTime>
 8003a34:	b118      	cbz	r0, 8003a3e <MX_RTC_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003a36:	215a      	movs	r1, #90	; 0x5a
 8003a38:	4810      	ldr	r0, [pc, #64]	; (8003a7c <MX_RTC_Init+0xa0>)
 8003a3a:	f7ff ffce 	bl	80039da <_Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003a3e:	2201      	movs	r2, #1
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;
 8003a40:	2300      	movs	r3, #0

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003a42:	4669      	mov	r1, sp
 8003a44:	480b      	ldr	r0, [pc, #44]	; (8003a74 <MX_RTC_Init+0x98>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003a46:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8003a4a:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8003a4e:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 8003a52:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003a56:	f7fe fc20 	bl	800229a <HAL_RTC_SetDate>
 8003a5a:	b118      	cbz	r0, 8003a64 <MX_RTC_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003a5c:	2164      	movs	r1, #100	; 0x64
 8003a5e:	4807      	ldr	r0, [pc, #28]	; (8003a7c <MX_RTC_Init+0xa0>)
 8003a60:	f7ff ffbb 	bl	80039da <_Error_Handler>
  }

    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8003a64:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4802      	ldr	r0, [pc, #8]	; (8003a74 <MX_RTC_Init+0x98>)
 8003a6c:	f7fe fc7e 	bl	800236c <HAL_RTCEx_BKUPWrite>
  }

}
 8003a70:	b007      	add	sp, #28
 8003a72:	bd30      	pop	{r4, r5, pc}
 8003a74:	20000144 	.word	0x20000144
 8003a78:	40002800 	.word	0x40002800
 8003a7c:	0800413d 	.word	0x0800413d

08003a80 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8003a80:	6802      	ldr	r2, [r0, #0]
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RTC_MspInit+0x18>)
 8003a84:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a86:	bf01      	itttt	eq
 8003a88:	4a04      	ldreq	r2, [pc, #16]	; (8003a9c <HAL_RTC_MspInit+0x1c>)
 8003a8a:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 8003a8e:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8003a92:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 8003a96:	4770      	bx	lr
 8003a98:	40002800 	.word	0x40002800
 8003a9c:	40021000 	.word	0x40021000

08003aa0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa0:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <HAL_MspInit+0x88>)
{
 8003aa2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	661a      	str	r2, [r3, #96]	; 0x60
 8003aac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003aae:	f002 0201 	and.w	r2, r2, #1
 8003ab2:	9200      	str	r2, [sp, #0]
 8003ab4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ab6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ab8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003abc:	659a      	str	r2, [r3, #88]	; 0x58
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ac6:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aca:	f7fc fd41 	bl	8000550 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	f06f 000b 	mvn.w	r0, #11
 8003ad6:	f7fc fd4d 	bl	8000574 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003ada:	2200      	movs	r2, #0
 8003adc:	4611      	mov	r1, r2
 8003ade:	f06f 000a 	mvn.w	r0, #10
 8003ae2:	f7fc fd47 	bl	8000574 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	4611      	mov	r1, r2
 8003aea:	f06f 0009 	mvn.w	r0, #9
 8003aee:	f7fc fd41 	bl	8000574 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003af2:	2200      	movs	r2, #0
 8003af4:	4611      	mov	r1, r2
 8003af6:	f06f 0004 	mvn.w	r0, #4
 8003afa:	f7fc fd3b 	bl	8000574 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003afe:	2200      	movs	r2, #0
 8003b00:	4611      	mov	r1, r2
 8003b02:	f06f 0003 	mvn.w	r0, #3
 8003b06:	f7fc fd35 	bl	8000574 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	f06f 0001 	mvn.w	r0, #1
 8003b12:	f7fc fd2f 	bl	8000574 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003b16:	2200      	movs	r2, #0
 8003b18:	4611      	mov	r1, r2
 8003b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1e:	f7fc fd29 	bl	8000574 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b22:	b003      	add	sp, #12
 8003b24:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b28:	40021000 	.word	0x40021000

08003b2c <NMI_Handler>:
 8003b2c:	4770      	bx	lr

08003b2e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003b2e:	e7fe      	b.n	8003b2e <HardFault_Handler>

08003b30 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003b30:	e7fe      	b.n	8003b30 <MemManage_Handler>

08003b32 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003b32:	e7fe      	b.n	8003b32 <BusFault_Handler>

08003b34 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003b34:	e7fe      	b.n	8003b34 <UsageFault_Handler>

08003b36 <SVC_Handler>:
 8003b36:	4770      	bx	lr

08003b38 <DebugMon_Handler>:
 8003b38:	4770      	bx	lr

08003b3a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003b3a:	4770      	bx	lr

08003b3c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003b3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b3e:	f7fc fceb 	bl	8000518 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003b46:	f7fc bd78 	b.w	800063a <HAL_SYSTICK_IRQHandler>
	...

08003b4c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003b4c:	4801      	ldr	r0, [pc, #4]	; (8003b54 <OTG_FS_IRQHandler+0x8>)
 8003b4e:	f7fc bef9 	b.w	8000944 <HAL_PCD_IRQHandler>
 8003b52:	bf00      	nop
 8003b54:	20000404 	.word	0x20000404

08003b58 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b58:	490f      	ldr	r1, [pc, #60]	; (8003b98 <SystemInit+0x40>)
 8003b5a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003b5e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003b66:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <SystemInit+0x44>)
 8003b68:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003b6a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003b72:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003b7a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003b80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b84:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003b8e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b94:	608b      	str	r3, [r1, #8]
 8003b96:	4770      	bx	lr
 8003b98:	e000ed00 	.word	0xe000ed00
 8003b9c:	40021000 	.word	0x40021000

08003ba0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ba0:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8003ba2:	480d      	ldr	r0, [pc, #52]	; (8003bd8 <MX_USART1_UART_Init+0x38>)
  huart1.Init.BaudRate = 115200;
 8003ba4:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <MX_USART1_UART_Init+0x3c>)
 8003ba6:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003baa:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bae:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003bb4:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bb6:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bb8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bba:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bbc:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bbe:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bc0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bc2:	f7fe fe2c 	bl	800281e <HAL_UART_Init>
 8003bc6:	b128      	cbz	r0, 8003bd4 <MX_USART1_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003bc8:	214e      	movs	r1, #78	; 0x4e
 8003bca:	4805      	ldr	r0, [pc, #20]	; (8003be0 <MX_USART1_UART_Init+0x40>)
  }

}
 8003bcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003bd0:	f7ff bf03 	b.w	80039da <_Error_Handler>
 8003bd4:	bd08      	pop	{r3, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000168 	.word	0x20000168
 8003bdc:	40013800 	.word	0x40013800
 8003be0:	08004194 	.word	0x08004194

08003be4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003be4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8003be6:	6802      	ldr	r2, [r0, #0]
 8003be8:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <HAL_UART_MspInit+0x48>)
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d11a      	bne.n	8003c24 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bee:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf2:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bf4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bfa:	661a      	str	r2, [r3, #96]	; 0x60
 8003bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c0a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c14:	2303      	movs	r3, #3
 8003c16:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c1c:	2307      	movs	r3, #7
 8003c1e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c20:	f7fc fd10 	bl	8000644 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003c24:	b007      	add	sp, #28
 8003c26:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c2a:	bf00      	nop
 8003c2c:	40013800 	.word	0x40013800

08003c30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003c30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8003c32:	2200      	movs	r2, #0
 8003c34:	490a      	ldr	r1, [pc, #40]	; (8003c60 <MX_USB_DEVICE_Init+0x30>)
 8003c36:	480b      	ldr	r0, [pc, #44]	; (8003c64 <MX_USB_DEVICE_Init+0x34>)
 8003c38:	f7ff fa90 	bl	800315c <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 8003c3c:	490a      	ldr	r1, [pc, #40]	; (8003c68 <MX_USB_DEVICE_Init+0x38>)
 8003c3e:	4809      	ldr	r0, [pc, #36]	; (8003c64 <MX_USB_DEVICE_Init+0x34>)
 8003c40:	f7ff faa1 	bl	8003186 <USBD_RegisterClass>
  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 8003c44:	4909      	ldr	r1, [pc, #36]	; (8003c6c <MX_USB_DEVICE_Init+0x3c>)
 8003c46:	4807      	ldr	r0, [pc, #28]	; (8003c64 <MX_USB_DEVICE_Init+0x34>)
 8003c48:	f7ff fa81 	bl	800314e <USBD_CUSTOM_HID_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 8003c4c:	4805      	ldr	r0, [pc, #20]	; (8003c64 <MX_USB_DEVICE_Init+0x34>)
 8003c4e:	f000 f9ac 	bl	8003faa <USBD_LL_BatteryCharging>
 8003c52:	b120      	cbz	r0, 8003c5e <MX_USB_DEVICE_Init+0x2e>
  USBD_Start(&hUsbDeviceFS);
 8003c54:	4803      	ldr	r0, [pc, #12]	; (8003c64 <MX_USB_DEVICE_Init+0x34>)
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003c56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  USBD_Start(&hUsbDeviceFS);
 8003c5a:	f7ff ba9b 	b.w	8003194 <USBD_Start>
 8003c5e:	bd08      	pop	{r3, pc}
 8003c60:	200000bc 	.word	0x200000bc
 8003c64:	200001e0 	.word	0x200001e0
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	200000ac 	.word	0x200000ac

08003c70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003c70:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8003c72:	6803      	ldr	r3, [r0, #0]
 8003c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003c78:	b088      	sub	sp, #32
  if(pcdHandle->Instance==USB_OTG_FS)
 8003c7a:	d133      	bne.n	8003ce4 <HAL_PCD_MspInit+0x74>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003c7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003c80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c82:	2302      	movs	r3, #2
 8003c84:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c86:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003c88:	4c19      	ldr	r4, [pc, #100]	; (8003cf0 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c90:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003c92:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003c98:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9a:	f7fc fcd3 	bl	8000644 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003c9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003ca0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ca4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003ca6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	d418      	bmi.n	8003ce8 <HAL_PCD_MspInit+0x78>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	65a3      	str	r3, [r4, #88]	; 0x58
 8003cbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc4:	9302      	str	r3, [sp, #8]
 8003cc6:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8003cc8:	f7fd fac4 	bl	8001254 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ccc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2043      	movs	r0, #67	; 0x43
 8003cd8:	4611      	mov	r1, r2
 8003cda:	f7fc fc4b 	bl	8000574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003cde:	2043      	movs	r0, #67	; 0x43
 8003ce0:	f7fc fc7c 	bl	80005dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003ce4:	b008      	add	sp, #32
 8003ce6:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8003ce8:	f7fd fab4 	bl	8001254 <HAL_PWREx_EnableVddUSB>
 8003cec:	e7f2      	b.n	8003cd4 <HAL_PCD_MspInit+0x64>
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000

08003cf4 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003cf4:	f500 7162 	add.w	r1, r0, #904	; 0x388
 8003cf8:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003cfc:	f7ff ba61 	b.w	80031c2 <USBD_LL_SetupStage>

08003d00 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003d00:	231c      	movs	r3, #28
 8003d02:	fb03 0301 	mla	r3, r3, r1, r0
 8003d06:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003d0a:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8003d0e:	f7ff ba85 	b.w	800321c <USBD_LL_DataOutStage>

08003d12 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003d12:	231c      	movs	r3, #28
 8003d14:	fb03 0301 	mla	r3, r3, r1, r0
 8003d18:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003d1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d1e:	f7ff baaf 	b.w	8003280 <USBD_LL_DataInStage>

08003d22 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003d22:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003d26:	f7ff bb2b 	b.w	8003380 <USBD_LL_SOF>

08003d2a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8003d2a:	b510      	push	{r4, lr}
 8003d2c:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003d2e:	2101      	movs	r1, #1
 8003d30:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003d34:	f7ff fb12 	bl	800335c <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003d38:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
}
 8003d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003d40:	f7ff baed 	b.w	800331e <USBD_LL_Reset>

08003d44 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003d44:	6802      	ldr	r2, [r0, #0]
 8003d46:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
{
 8003d4a:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
{
 8003d50:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003d52:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003d56:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003d5a:	f7ff fb02 	bl	8003362 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003d5e:	6a23      	ldr	r3, [r4, #32]
 8003d60:	b123      	cbz	r3, 8003d6c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003d62:	4a03      	ldr	r2, [pc, #12]	; (8003d70 <HAL_PCD_SuspendCallback+0x2c>)
 8003d64:	6913      	ldr	r3, [r2, #16]
 8003d66:	f043 0306 	orr.w	r3, r3, #6
 8003d6a:	6113      	str	r3, [r2, #16]
 8003d6c:	bd10      	pop	{r4, pc}
 8003d6e:	bf00      	nop
 8003d70:	e000ed00 	.word	0xe000ed00

08003d74 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8003d74:	6802      	ldr	r2, [r0, #0]
 8003d76:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
{
 8003d7e:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8003d80:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8003d84:	6a03      	ldr	r3, [r0, #32]
{
 8003d86:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8003d88:	b133      	cbz	r3, 8003d98 <HAL_PCD_ResumeCallback+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003d8a:	4a06      	ldr	r2, [pc, #24]	; (8003da4 <HAL_PCD_ResumeCallback+0x30>)
 8003d8c:	6913      	ldr	r3, [r2, #16]
 8003d8e:	f023 0306 	bic.w	r3, r3, #6
 8003d92:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8003d94:	f7ff fd9c 	bl	80038d0 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003d98:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
}
 8003d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003da0:	f7ff bae8 	b.w	8003374 <USBD_LL_Resume>
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003da8:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003dac:	f7ff baf6 	b.w	800339c <USBD_LL_IsoOUTIncomplete>

08003db0 <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003db0:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003db4:	f7ff baf0 	b.w	8003398 <USBD_LL_IsoINIncomplete>

08003db8 <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003db8:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003dbc:	f7ff baf0 	b.w	80033a0 <USBD_LL_DevConnected>

08003dc0 <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8003dc0:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003dc4:	f7ff baee 	b.w	80033a4 <USBD_LL_DevDisconnected>

08003dc8 <USBD_LL_Init>:
{
 8003dc8:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 8003dca:	7802      	ldrb	r2, [r0, #0]
 8003dcc:	bb52      	cbnz	r2, 8003e24 <USBD_LL_Init+0x5c>
  hpcd_USB_OTG_FS.pData = pdev;
 8003dce:	4b16      	ldr	r3, [pc, #88]	; (8003e28 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003dd0:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 8003dd2:	f8c3 03c8 	str.w	r0, [r3, #968]	; 0x3c8
  pdev->pData = &hpcd_USB_OTG_FS;
 8003dd6:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003dda:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003dde:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003de2:	2101      	movs	r1, #1
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003de4:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003de6:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003de8:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003dea:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003dec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003dee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003df0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8003df2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003df6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003df8:	f7fc fd09 	bl	800080e <HAL_PCD_Init>
 8003dfc:	b120      	cbz	r0, 8003e08 <USBD_LL_Init+0x40>
    _Error_Handler(__FILE__, __LINE__);
 8003dfe:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8003e02:	480a      	ldr	r0, [pc, #40]	; (8003e2c <USBD_LL_Init+0x64>)
 8003e04:	f7ff fde9 	bl	80039da <_Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8003e08:	2180      	movs	r1, #128	; 0x80
 8003e0a:	4807      	ldr	r0, [pc, #28]	; (8003e28 <USBD_LL_Init+0x60>)
 8003e0c:	f7fd f9b5 	bl	800117a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8003e10:	2240      	movs	r2, #64	; 0x40
 8003e12:	2100      	movs	r1, #0
 8003e14:	4804      	ldr	r0, [pc, #16]	; (8003e28 <USBD_LL_Init+0x60>)
 8003e16:	f7fd f98f 	bl	8001138 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8003e1a:	2280      	movs	r2, #128	; 0x80
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	4802      	ldr	r0, [pc, #8]	; (8003e28 <USBD_LL_Init+0x60>)
 8003e20:	f7fd f98a 	bl	8001138 <HAL_PCDEx_SetTxFiFo>
}
 8003e24:	2000      	movs	r0, #0
 8003e26:	bd08      	pop	{r3, pc}
 8003e28:	20000404 	.word	0x20000404
 8003e2c:	080041a7 	.word	0x080041a7

08003e30 <USBD_LL_Start>:
{
 8003e30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003e32:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e36:	f7fc fd6f 	bl	8000918 <HAL_PCD_Start>
 8003e3a:	2803      	cmp	r0, #3
 8003e3c:	bf9a      	itte	ls
 8003e3e:	4b02      	ldrls	r3, [pc, #8]	; (8003e48 <USBD_LL_Start+0x18>)
 8003e40:	5c18      	ldrbls	r0, [r3, r0]
 8003e42:	2002      	movhi	r0, #2
}
 8003e44:	bd08      	pop	{r3, pc}
 8003e46:	bf00      	nop
 8003e48:	080041a3 	.word	0x080041a3

08003e4c <USBD_LL_OpenEP>:
{
 8003e4c:	b510      	push	{r4, lr}
 8003e4e:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003e50:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e54:	4613      	mov	r3, r2
 8003e56:	4622      	mov	r2, r4
 8003e58:	f7fd f898 	bl	8000f8c <HAL_PCD_EP_Open>
 8003e5c:	2803      	cmp	r0, #3
 8003e5e:	bf9a      	itte	ls
 8003e60:	4b01      	ldrls	r3, [pc, #4]	; (8003e68 <USBD_LL_OpenEP+0x1c>)
 8003e62:	5c18      	ldrbls	r0, [r3, r0]
 8003e64:	2002      	movhi	r0, #2
}
 8003e66:	bd10      	pop	{r4, pc}
 8003e68:	080041a3 	.word	0x080041a3

08003e6c <USBD_LL_CloseEP>:
{
 8003e6c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003e6e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e72:	f7fd f8b0 	bl	8000fd6 <HAL_PCD_EP_Close>
 8003e76:	2803      	cmp	r0, #3
 8003e78:	bf9a      	itte	ls
 8003e7a:	4b02      	ldrls	r3, [pc, #8]	; (8003e84 <USBD_LL_CloseEP+0x18>)
 8003e7c:	5c18      	ldrbls	r0, [r3, r0]
 8003e7e:	2002      	movhi	r0, #2
}
 8003e80:	bd08      	pop	{r3, pc}
 8003e82:	bf00      	nop
 8003e84:	080041a3 	.word	0x080041a3

08003e88 <USBD_LL_StallEP>:
{
 8003e88:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003e8a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e8e:	f7fd f902 	bl	8001096 <HAL_PCD_EP_SetStall>
 8003e92:	2803      	cmp	r0, #3
 8003e94:	bf9a      	itte	ls
 8003e96:	4b02      	ldrls	r3, [pc, #8]	; (8003ea0 <USBD_LL_StallEP+0x18>)
 8003e98:	5c18      	ldrbls	r0, [r3, r0]
 8003e9a:	2002      	movhi	r0, #2
}
 8003e9c:	bd08      	pop	{r3, pc}
 8003e9e:	bf00      	nop
 8003ea0:	080041a3 	.word	0x080041a3

08003ea4 <USBD_LL_ClearStallEP>:
{
 8003ea4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003ea6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003eaa:	f7fd f920 	bl	80010ee <HAL_PCD_EP_ClrStall>
 8003eae:	2803      	cmp	r0, #3
 8003eb0:	bf9a      	itte	ls
 8003eb2:	4b02      	ldrls	r3, [pc, #8]	; (8003ebc <USBD_LL_ClearStallEP+0x18>)
 8003eb4:	5c18      	ldrbls	r0, [r3, r0]
 8003eb6:	2002      	movhi	r0, #2
}
 8003eb8:	bd08      	pop	{r3, pc}
 8003eba:	bf00      	nop
 8003ebc:	080041a3 	.word	0x080041a3

08003ec0 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8003ec0:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003ec4:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8003ec8:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003ecc:	bf1b      	ittet	ne
 8003ece:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8003ed2:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003ed6:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003eda:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003ede:	bf08      	it	eq
 8003ee0:	f891 01e2 	ldrbeq.w	r0, [r1, #482]	; 0x1e2
}
 8003ee4:	4770      	bx	lr
	...

08003ee8 <USBD_LL_SetUSBAddress>:
{
 8003ee8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003eea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003eee:	f7fd f839 	bl	8000f64 <HAL_PCD_SetAddress>
 8003ef2:	2803      	cmp	r0, #3
 8003ef4:	bf9a      	itte	ls
 8003ef6:	4b02      	ldrls	r3, [pc, #8]	; (8003f00 <USBD_LL_SetUSBAddress+0x18>)
 8003ef8:	5c18      	ldrbls	r0, [r3, r0]
 8003efa:	2002      	movhi	r0, #2
}
 8003efc:	bd08      	pop	{r3, pc}
 8003efe:	bf00      	nop
 8003f00:	080041a3 	.word	0x080041a3

08003f04 <USBD_LL_Transmit>:
{
 8003f04:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003f06:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003f0a:	f7fd f8a7 	bl	800105c <HAL_PCD_EP_Transmit>
 8003f0e:	2803      	cmp	r0, #3
 8003f10:	bf9a      	itte	ls
 8003f12:	4b02      	ldrls	r3, [pc, #8]	; (8003f1c <USBD_LL_Transmit+0x18>)
 8003f14:	5c18      	ldrbls	r0, [r3, r0]
 8003f16:	2002      	movhi	r0, #2
}
 8003f18:	bd08      	pop	{r3, pc}
 8003f1a:	bf00      	nop
 8003f1c:	080041a3 	.word	0x080041a3

08003f20 <USBD_LL_PrepareReceive>:
{
 8003f20:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003f22:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003f26:	f7fd f879 	bl	800101c <HAL_PCD_EP_Receive>
 8003f2a:	2803      	cmp	r0, #3
 8003f2c:	bf9a      	itte	ls
 8003f2e:	4b02      	ldrls	r3, [pc, #8]	; (8003f38 <USBD_LL_PrepareReceive+0x18>)
 8003f30:	5c18      	ldrbls	r0, [r3, r0]
 8003f32:	2002      	movhi	r0, #2
}
 8003f34:	bd08      	pop	{r3, pc}
 8003f36:	bf00      	nop
 8003f38:	080041a3 	.word	0x080041a3

08003f3c <HAL_PCDEx_LPM_Callback>:
{
 8003f3c:	b510      	push	{r4, lr}
 8003f3e:	4604      	mov	r4, r0
  switch (msg)
 8003f40:	b111      	cbz	r1, 8003f48 <HAL_PCDEx_LPM_Callback+0xc>
 8003f42:	2901      	cmp	r1, #1
 8003f44:	d016      	beq.n	8003f74 <HAL_PCDEx_LPM_Callback+0x38>
 8003f46:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8003f48:	6a03      	ldr	r3, [r0, #32]
 8003f4a:	b133      	cbz	r3, 8003f5a <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 8003f4c:	f7ff fcc0 	bl	80038d0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003f50:	4a12      	ldr	r2, [pc, #72]	; (8003f9c <HAL_PCDEx_LPM_Callback+0x60>)
 8003f52:	6913      	ldr	r3, [r2, #16]
 8003f54:	f023 0306 	bic.w	r3, r3, #6
 8003f58:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8003f5a:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8003f5c:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8003f60:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 8003f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8003f70:	f7ff ba00 	b.w	8003374 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003f74:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8003f76:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003f7a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8003f86:	f7ff f9ec 	bl	8003362 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8003f8a:	6a23      	ldr	r3, [r4, #32]
 8003f8c:	b123      	cbz	r3, 8003f98 <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003f8e:	4a03      	ldr	r2, [pc, #12]	; (8003f9c <HAL_PCDEx_LPM_Callback+0x60>)
 8003f90:	6913      	ldr	r3, [r2, #16]
 8003f92:	f043 0306 	orr.w	r3, r3, #6
 8003f96:	6113      	str	r3, [r2, #16]
 8003f98:	bd10      	pop	{r4, pc}
 8003f9a:	bf00      	nop
 8003f9c:	e000ed00 	.word	0xe000ed00

08003fa0 <USBD_static_malloc>:
}
 8003fa0:	4800      	ldr	r0, [pc, #0]	; (8003fa4 <USBD_static_malloc+0x4>)
 8003fa2:	4770      	bx	lr
 8003fa4:	20000120 	.word	0x20000120

08003fa8 <USBD_static_free>:
{
 8003fa8:	4770      	bx	lr

08003faa <USBD_LL_BatteryCharging>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
  if (hpcd->Init.battery_charging_enable == ENABLE)
 8003faa:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	2b01      	cmp	r3, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003fb2:	bf14      	ite	ne
 8003fb4:	2002      	movne	r0, #2
 8003fb6:	2000      	moveq	r0, #0
 8003fb8:	4770      	bx	lr

08003fba <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003fba:	2000      	movs	r0, #0
 8003fbc:	4770      	bx	lr

08003fbe <CUSTOM_HID_OutEvent_FS>:
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	4770      	bx	lr

08003fc2 <CUSTOM_HID_Init_FS>:
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	4770      	bx	lr
	...

08003fc8 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003fc8:	2312      	movs	r3, #18
 8003fca:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8003fcc:	4800      	ldr	r0, [pc, #0]	; (8003fd0 <USBD_FS_DeviceDescriptor+0x8>)
 8003fce:	4770      	bx	lr
 8003fd0:	200000e8 	.word	0x200000e8

08003fd4 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8003fd8:	4800      	ldr	r0, [pc, #0]	; (8003fdc <USBD_FS_LangIDStrDescriptor+0x8>)
 8003fda:	4770      	bx	lr
 8003fdc:	200000fc 	.word	0x200000fc

08003fe0 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 8003fe0:	230c      	movs	r3, #12
 8003fe2:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8003fe4:	4800      	ldr	r0, [pc, #0]	; (8003fe8 <USBD_FS_USR_BOSDescriptor+0x8>)
 8003fe6:	4770      	bx	lr
 8003fe8:	200000dc 	.word	0x200000dc

08003fec <USBD_FS_ManufacturerStrDescriptor>:
{
 8003fec:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003fee:	4c04      	ldr	r4, [pc, #16]	; (8004000 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003ff0:	4804      	ldr	r0, [pc, #16]	; (8004004 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003ff2:	460a      	mov	r2, r1
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	f7ff fb8f 	bl	8003718 <USBD_GetString>
}
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	bd10      	pop	{r4, pc}
 8003ffe:	bf00      	nop
 8004000:	200007d0 	.word	0x200007d0
 8004004:	080041e1 	.word	0x080041e1

08004008 <USBD_FS_ProductStrDescriptor>:
{
 8004008:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800400a:	4c04      	ldr	r4, [pc, #16]	; (800401c <USBD_FS_ProductStrDescriptor+0x14>)
 800400c:	4804      	ldr	r0, [pc, #16]	; (8004020 <USBD_FS_ProductStrDescriptor+0x18>)
 800400e:	460a      	mov	r2, r1
 8004010:	4621      	mov	r1, r4
 8004012:	f7ff fb81 	bl	8003718 <USBD_GetString>
}
 8004016:	4620      	mov	r0, r4
 8004018:	bd10      	pop	{r4, pc}
 800401a:	bf00      	nop
 800401c:	200007d0 	.word	0x200007d0
 8004020:	080041f4 	.word	0x080041f4

08004024 <USBD_FS_SerialStrDescriptor>:
{
 8004024:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8004026:	4c04      	ldr	r4, [pc, #16]	; (8004038 <USBD_FS_SerialStrDescriptor+0x14>)
 8004028:	4804      	ldr	r0, [pc, #16]	; (800403c <USBD_FS_SerialStrDescriptor+0x18>)
 800402a:	460a      	mov	r2, r1
 800402c:	4621      	mov	r1, r4
 800402e:	f7ff fb73 	bl	8003718 <USBD_GetString>
}
 8004032:	4620      	mov	r0, r4
 8004034:	bd10      	pop	{r4, pc}
 8004036:	bf00      	nop
 8004038:	200007d0 	.word	0x200007d0
 800403c:	0800420e 	.word	0x0800420e

08004040 <USBD_FS_ConfigStrDescriptor>:
{
 8004040:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004042:	4c04      	ldr	r4, [pc, #16]	; (8004054 <USBD_FS_ConfigStrDescriptor+0x14>)
 8004044:	4804      	ldr	r0, [pc, #16]	; (8004058 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004046:	460a      	mov	r2, r1
 8004048:	4621      	mov	r1, r4
 800404a:	f7ff fb65 	bl	8003718 <USBD_GetString>
}
 800404e:	4620      	mov	r0, r4
 8004050:	bd10      	pop	{r4, pc}
 8004052:	bf00      	nop
 8004054:	200007d0 	.word	0x200007d0
 8004058:	080041ba 	.word	0x080041ba

0800405c <USBD_FS_InterfaceStrDescriptor>:
{
 800405c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800405e:	4c04      	ldr	r4, [pc, #16]	; (8004070 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004060:	4804      	ldr	r0, [pc, #16]	; (8004074 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8004062:	460a      	mov	r2, r1
 8004064:	4621      	mov	r1, r4
 8004066:	f7ff fb57 	bl	8003718 <USBD_GetString>
}
 800406a:	4620      	mov	r0, r4
 800406c:	bd10      	pop	{r4, pc}
 800406e:	bf00      	nop
 8004070:	200007d0 	.word	0x200007d0
 8004074:	080041cc 	.word	0x080041cc

08004078 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800407c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800407e:	e003      	b.n	8004088 <LoopCopyDataInit>

08004080 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004082:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004084:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004086:	3104      	adds	r1, #4

08004088 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004088:	480b      	ldr	r0, [pc, #44]	; (80040b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800408a:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <LoopForever+0xe>)
	adds	r2, r0, r1
 800408c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800408e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004090:	d3f6      	bcc.n	8004080 <CopyDataInit>
	ldr	r2, =_sbss
 8004092:	4a0b      	ldr	r2, [pc, #44]	; (80040c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004094:	e002      	b.n	800409c <LoopFillZerobss>

08004096 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004096:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004098:	f842 3b04 	str.w	r3, [r2], #4

0800409c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800409c:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <LoopForever+0x16>)
	cmp	r2, r3
 800409e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80040a0:	d3f9      	bcc.n	8004096 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80040a2:	f7ff fd59 	bl	8003b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040a6:	f000 f811 	bl	80040cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80040aa:	f7ff fc75 	bl	8003998 <main>

080040ae <LoopForever>:

LoopForever:
    b LoopForever
 80040ae:	e7fe      	b.n	80040ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80040b0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80040b4:	0800422c 	.word	0x0800422c
	ldr	r0, =_sdata
 80040b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80040bc:	20000100 	.word	0x20000100
	ldr	r2, =_sbss
 80040c0:	20000100 	.word	0x20000100
	ldr	r3, = _ebss
 80040c4:	200009d0 	.word	0x200009d0

080040c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040c8:	e7fe      	b.n	80040c8 <ADC1_2_IRQHandler>
	...

080040cc <__libc_init_array>:
 80040cc:	b570      	push	{r4, r5, r6, lr}
 80040ce:	4e0d      	ldr	r6, [pc, #52]	; (8004104 <__libc_init_array+0x38>)
 80040d0:	4c0d      	ldr	r4, [pc, #52]	; (8004108 <__libc_init_array+0x3c>)
 80040d2:	1ba4      	subs	r4, r4, r6
 80040d4:	10a4      	asrs	r4, r4, #2
 80040d6:	2500      	movs	r5, #0
 80040d8:	42a5      	cmp	r5, r4
 80040da:	d109      	bne.n	80040f0 <__libc_init_array+0x24>
 80040dc:	4e0b      	ldr	r6, [pc, #44]	; (800410c <__libc_init_array+0x40>)
 80040de:	4c0c      	ldr	r4, [pc, #48]	; (8004110 <__libc_init_array+0x44>)
 80040e0:	f000 f818 	bl	8004114 <_init>
 80040e4:	1ba4      	subs	r4, r4, r6
 80040e6:	10a4      	asrs	r4, r4, #2
 80040e8:	2500      	movs	r5, #0
 80040ea:	42a5      	cmp	r5, r4
 80040ec:	d105      	bne.n	80040fa <__libc_init_array+0x2e>
 80040ee:	bd70      	pop	{r4, r5, r6, pc}
 80040f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040f4:	4798      	blx	r3
 80040f6:	3501      	adds	r5, #1
 80040f8:	e7ee      	b.n	80040d8 <__libc_init_array+0xc>
 80040fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040fe:	4798      	blx	r3
 8004100:	3501      	adds	r5, #1
 8004102:	e7f2      	b.n	80040ea <__libc_init_array+0x1e>
 8004104:	08004224 	.word	0x08004224
 8004108:	08004224 	.word	0x08004224
 800410c:	08004224 	.word	0x08004224
 8004110:	08004228 	.word	0x08004228

08004114 <_init>:
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	bf00      	nop
 8004118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411a:	bc08      	pop	{r3}
 800411c:	469e      	mov	lr, r3
 800411e:	4770      	bx	lr

08004120 <_fini>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	bf00      	nop
 8004124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004126:	bc08      	pop	{r3}
 8004128:	469e      	mov	lr, r3
 800412a:	4770      	bx	lr
