
SoundProcessor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000331c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003458  08003458  00013458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080034b8  080034b8  000134b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  080034bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000120  20000074  08003530  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000194  08003530  00020194  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014a03  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e7c  00000000  00000000  00034aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004338  00000000  00000000  0003791c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000748  00000000  00000000  0003bc58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c20  00000000  00000000  0003c3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005b90  00000000  00000000  0003cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a7c  00000000  00000000  00042b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000455cc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000017c8  00000000  00000000  00045648  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000074 	.word	0x20000074
 8000158:	00000000 	.word	0x00000000
 800015c:	08003440 	.word	0x08003440

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000078 	.word	0x20000078
 8000178:	08003440 	.word	0x08003440

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ba:	f1a4 0401 	sub.w	r4, r4, #1
 80002be:	d1e9      	bne.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f092 0f00 	teq	r2, #0
 8000466:	bf14      	ite	ne
 8000468:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e720      	b.n	80002c0 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aedc 	beq.w	800026e <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6c1      	b.n	800026e <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_frsub>:
 8000a8c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a90:	e002      	b.n	8000a98 <__addsf3>
 8000a92:	bf00      	nop

08000a94 <__aeabi_fsub>:
 8000a94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a98 <__addsf3>:
 8000a98:	0042      	lsls	r2, r0, #1
 8000a9a:	bf1f      	itttt	ne
 8000a9c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa0:	ea92 0f03 	teqne	r2, r3
 8000aa4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aac:	d06a      	beq.n	8000b84 <__addsf3+0xec>
 8000aae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ab2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab6:	bfc1      	itttt	gt
 8000ab8:	18d2      	addgt	r2, r2, r3
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	4048      	eorgt	r0, r1
 8000abe:	4041      	eorgt	r1, r0
 8000ac0:	bfb8      	it	lt
 8000ac2:	425b      	neglt	r3, r3
 8000ac4:	2b19      	cmp	r3, #25
 8000ac6:	bf88      	it	hi
 8000ac8:	4770      	bxhi	lr
 8000aca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ae2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4249      	negne	r1, r1
 8000aea:	ea92 0f03 	teq	r2, r3
 8000aee:	d03f      	beq.n	8000b70 <__addsf3+0xd8>
 8000af0:	f1a2 0201 	sub.w	r2, r2, #1
 8000af4:	fa41 fc03 	asr.w	ip, r1, r3
 8000af8:	eb10 000c 	adds.w	r0, r0, ip
 8000afc:	f1c3 0320 	rsb	r3, r3, #32
 8000b00:	fa01 f103 	lsl.w	r1, r1, r3
 8000b04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b08:	d502      	bpl.n	8000b10 <__addsf3+0x78>
 8000b0a:	4249      	negs	r1, r1
 8000b0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b14:	d313      	bcc.n	8000b3e <__addsf3+0xa6>
 8000b16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b1a:	d306      	bcc.n	8000b2a <__addsf3+0x92>
 8000b1c:	0840      	lsrs	r0, r0, #1
 8000b1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b22:	f102 0201 	add.w	r2, r2, #1
 8000b26:	2afe      	cmp	r2, #254	; 0xfe
 8000b28:	d251      	bcs.n	8000bce <__addsf3+0x136>
 8000b2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b32:	bf08      	it	eq
 8000b34:	f020 0001 	biceq.w	r0, r0, #1
 8000b38:	ea40 0003 	orr.w	r0, r0, r3
 8000b3c:	4770      	bx	lr
 8000b3e:	0049      	lsls	r1, r1, #1
 8000b40:	eb40 0000 	adc.w	r0, r0, r0
 8000b44:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b48:	f1a2 0201 	sub.w	r2, r2, #1
 8000b4c:	d1ed      	bne.n	8000b2a <__addsf3+0x92>
 8000b4e:	fab0 fc80 	clz	ip, r0
 8000b52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b56:	ebb2 020c 	subs.w	r2, r2, ip
 8000b5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5e:	bfaa      	itet	ge
 8000b60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b64:	4252      	neglt	r2, r2
 8000b66:	4318      	orrge	r0, r3
 8000b68:	bfbc      	itt	lt
 8000b6a:	40d0      	lsrlt	r0, r2
 8000b6c:	4318      	orrlt	r0, r3
 8000b6e:	4770      	bx	lr
 8000b70:	f092 0f00 	teq	r2, #0
 8000b74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b78:	bf06      	itte	eq
 8000b7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7e:	3201      	addeq	r2, #1
 8000b80:	3b01      	subne	r3, #1
 8000b82:	e7b5      	b.n	8000af0 <__addsf3+0x58>
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d021      	beq.n	8000bd8 <__addsf3+0x140>
 8000b94:	ea92 0f03 	teq	r2, r3
 8000b98:	d004      	beq.n	8000ba4 <__addsf3+0x10c>
 8000b9a:	f092 0f00 	teq	r2, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	4608      	moveq	r0, r1
 8000ba2:	4770      	bx	lr
 8000ba4:	ea90 0f01 	teq	r0, r1
 8000ba8:	bf1c      	itt	ne
 8000baa:	2000      	movne	r0, #0
 8000bac:	4770      	bxne	lr
 8000bae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bb2:	d104      	bne.n	8000bbe <__addsf3+0x126>
 8000bb4:	0040      	lsls	r0, r0, #1
 8000bb6:	bf28      	it	cs
 8000bb8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bbc:	4770      	bx	lr
 8000bbe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bc2:	bf3c      	itt	cc
 8000bc4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bxcc	lr
 8000bca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	4770      	bx	lr
 8000bd8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bdc:	bf16      	itet	ne
 8000bde:	4608      	movne	r0, r1
 8000be0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be4:	4601      	movne	r1, r0
 8000be6:	0242      	lsls	r2, r0, #9
 8000be8:	bf06      	itte	eq
 8000bea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bee:	ea90 0f01 	teqeq	r0, r1
 8000bf2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_ui2f>:
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	e004      	b.n	8000c08 <__aeabi_i2f+0x8>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_i2f>:
 8000c00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c04:	bf48      	it	mi
 8000c06:	4240      	negmi	r0, r0
 8000c08:	ea5f 0c00 	movs.w	ip, r0
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c14:	4601      	mov	r1, r0
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	e01c      	b.n	8000c56 <__aeabi_l2f+0x2a>

08000c1c <__aeabi_ul2f>:
 8000c1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c20:	bf08      	it	eq
 8000c22:	4770      	bxeq	lr
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e00a      	b.n	8000c40 <__aeabi_l2f+0x14>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_l2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c38:	d502      	bpl.n	8000c40 <__aeabi_l2f+0x14>
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	ea5f 0c01 	movs.w	ip, r1
 8000c44:	bf02      	ittt	eq
 8000c46:	4684      	moveq	ip, r0
 8000c48:	4601      	moveq	r1, r0
 8000c4a:	2000      	moveq	r0, #0
 8000c4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c50:	bf08      	it	eq
 8000c52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c5a:	fabc f28c 	clz	r2, ip
 8000c5e:	3a08      	subs	r2, #8
 8000c60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c64:	db10      	blt.n	8000c88 <__aeabi_l2f+0x5c>
 8000c66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c70:	f1c2 0220 	rsb	r2, r2, #32
 8000c74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c78:	fa20 f202 	lsr.w	r2, r0, r2
 8000c7c:	eb43 0002 	adc.w	r0, r3, r2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f102 0220 	add.w	r2, r2, #32
 8000c8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c98:	fa21 f202 	lsr.w	r2, r1, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_fmul>:
 8000ca8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb0:	bf1e      	ittt	ne
 8000cb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb6:	ea92 0f0c 	teqne	r2, ip
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d06f      	beq.n	8000da0 <__aeabi_fmul+0xf8>
 8000cc0:	441a      	add	r2, r3
 8000cc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc6:	0240      	lsls	r0, r0, #9
 8000cc8:	bf18      	it	ne
 8000cca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cce:	d01e      	beq.n	8000d0e <__aeabi_fmul+0x66>
 8000cd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000ce0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce8:	bf3e      	ittt	cc
 8000cea:	0049      	lslcc	r1, r1, #1
 8000cec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cf0:	005b      	lslcc	r3, r3, #1
 8000cf2:	ea40 0001 	orr.w	r0, r0, r1
 8000cf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cfa:	2afd      	cmp	r2, #253	; 0xfd
 8000cfc:	d81d      	bhi.n	8000d3a <__aeabi_fmul+0x92>
 8000cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d06:	bf08      	it	eq
 8000d08:	f020 0001 	biceq.w	r0, r0, #1
 8000d0c:	4770      	bx	lr
 8000d0e:	f090 0f00 	teq	r0, #0
 8000d12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d16:	bf08      	it	eq
 8000d18:	0249      	lsleq	r1, r1, #9
 8000d1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d22:	3a7f      	subs	r2, #127	; 0x7f
 8000d24:	bfc2      	ittt	gt
 8000d26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2e:	4770      	bxgt	lr
 8000d30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	3a01      	subs	r2, #1
 8000d3a:	dc5d      	bgt.n	8000df8 <__aeabi_fmul+0x150>
 8000d3c:	f112 0f19 	cmn.w	r2, #25
 8000d40:	bfdc      	itt	le
 8000d42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d46:	4770      	bxle	lr
 8000d48:	f1c2 0200 	rsb	r2, r2, #0
 8000d4c:	0041      	lsls	r1, r0, #1
 8000d4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d52:	f1c2 0220 	rsb	r2, r2, #32
 8000d56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5e:	f140 0000 	adc.w	r0, r0, #0
 8000d62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d66:	bf08      	it	eq
 8000d68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6c:	4770      	bx	lr
 8000d6e:	f092 0f00 	teq	r2, #0
 8000d72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d76:	bf02      	ittt	eq
 8000d78:	0040      	lsleq	r0, r0, #1
 8000d7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7e:	3a01      	subeq	r2, #1
 8000d80:	d0f9      	beq.n	8000d76 <__aeabi_fmul+0xce>
 8000d82:	ea40 000c 	orr.w	r0, r0, ip
 8000d86:	f093 0f00 	teq	r3, #0
 8000d8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8e:	bf02      	ittt	eq
 8000d90:	0049      	lsleq	r1, r1, #1
 8000d92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d96:	3b01      	subeq	r3, #1
 8000d98:	d0f9      	beq.n	8000d8e <__aeabi_fmul+0xe6>
 8000d9a:	ea41 010c 	orr.w	r1, r1, ip
 8000d9e:	e78f      	b.n	8000cc0 <__aeabi_fmul+0x18>
 8000da0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da4:	ea92 0f0c 	teq	r2, ip
 8000da8:	bf18      	it	ne
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d00a      	beq.n	8000dc6 <__aeabi_fmul+0x11e>
 8000db0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db4:	bf18      	it	ne
 8000db6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	d1d8      	bne.n	8000d6e <__aeabi_fmul+0xc6>
 8000dbc:	ea80 0001 	eor.w	r0, r0, r1
 8000dc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc4:	4770      	bx	lr
 8000dc6:	f090 0f00 	teq	r0, #0
 8000dca:	bf17      	itett	ne
 8000dcc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dd0:	4608      	moveq	r0, r1
 8000dd2:	f091 0f00 	teqne	r1, #0
 8000dd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dda:	d014      	beq.n	8000e06 <__aeabi_fmul+0x15e>
 8000ddc:	ea92 0f0c 	teq	r2, ip
 8000de0:	d101      	bne.n	8000de6 <__aeabi_fmul+0x13e>
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	d10f      	bne.n	8000e06 <__aeabi_fmul+0x15e>
 8000de6:	ea93 0f0c 	teq	r3, ip
 8000dea:	d103      	bne.n	8000df4 <__aeabi_fmul+0x14c>
 8000dec:	024b      	lsls	r3, r1, #9
 8000dee:	bf18      	it	ne
 8000df0:	4608      	movne	r0, r1
 8000df2:	d108      	bne.n	8000e06 <__aeabi_fmul+0x15e>
 8000df4:	ea80 0001 	eor.w	r0, r0, r1
 8000df8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bx	lr
 8000e06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_fdiv>:
 8000e10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e18:	bf1e      	ittt	ne
 8000e1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1e:	ea92 0f0c 	teqne	r2, ip
 8000e22:	ea93 0f0c 	teqne	r3, ip
 8000e26:	d069      	beq.n	8000efc <__aeabi_fdiv+0xec>
 8000e28:	eba2 0203 	sub.w	r2, r2, r3
 8000e2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e30:	0249      	lsls	r1, r1, #9
 8000e32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e36:	d037      	beq.n	8000ea8 <__aeabi_fdiv+0x98>
 8000e38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	bf38      	it	cc
 8000e4c:	005b      	lslcc	r3, r3, #1
 8000e4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e56:	428b      	cmp	r3, r1
 8000e58:	bf24      	itt	cs
 8000e5a:	1a5b      	subcs	r3, r3, r1
 8000e5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e64:	bf24      	itt	cs
 8000e66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e72:	bf24      	itt	cs
 8000e74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e80:	bf24      	itt	cs
 8000e82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e8a:	011b      	lsls	r3, r3, #4
 8000e8c:	bf18      	it	ne
 8000e8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e92:	d1e0      	bne.n	8000e56 <__aeabi_fdiv+0x46>
 8000e94:	2afd      	cmp	r2, #253	; 0xfd
 8000e96:	f63f af50 	bhi.w	8000d3a <__aeabi_fmul+0x92>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ea0:	bf08      	it	eq
 8000ea2:	f020 0001 	biceq.w	r0, r0, #1
 8000ea6:	4770      	bx	lr
 8000ea8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eb0:	327f      	adds	r2, #127	; 0x7f
 8000eb2:	bfc2      	ittt	gt
 8000eb4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ebc:	4770      	bxgt	lr
 8000ebe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec2:	f04f 0300 	mov.w	r3, #0
 8000ec6:	3a01      	subs	r2, #1
 8000ec8:	e737      	b.n	8000d3a <__aeabi_fmul+0x92>
 8000eca:	f092 0f00 	teq	r2, #0
 8000ece:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ed2:	bf02      	ittt	eq
 8000ed4:	0040      	lsleq	r0, r0, #1
 8000ed6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eda:	3a01      	subeq	r2, #1
 8000edc:	d0f9      	beq.n	8000ed2 <__aeabi_fdiv+0xc2>
 8000ede:	ea40 000c 	orr.w	r0, r0, ip
 8000ee2:	f093 0f00 	teq	r3, #0
 8000ee6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0049      	lsleq	r1, r1, #1
 8000eee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ef2:	3b01      	subeq	r3, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fdiv+0xda>
 8000ef6:	ea41 010c 	orr.w	r1, r1, ip
 8000efa:	e795      	b.n	8000e28 <__aeabi_fdiv+0x18>
 8000efc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f00:	ea92 0f0c 	teq	r2, ip
 8000f04:	d108      	bne.n	8000f18 <__aeabi_fdiv+0x108>
 8000f06:	0242      	lsls	r2, r0, #9
 8000f08:	f47f af7d 	bne.w	8000e06 <__aeabi_fmul+0x15e>
 8000f0c:	ea93 0f0c 	teq	r3, ip
 8000f10:	f47f af70 	bne.w	8000df4 <__aeabi_fmul+0x14c>
 8000f14:	4608      	mov	r0, r1
 8000f16:	e776      	b.n	8000e06 <__aeabi_fmul+0x15e>
 8000f18:	ea93 0f0c 	teq	r3, ip
 8000f1c:	d104      	bne.n	8000f28 <__aeabi_fdiv+0x118>
 8000f1e:	024b      	lsls	r3, r1, #9
 8000f20:	f43f af4c 	beq.w	8000dbc <__aeabi_fmul+0x114>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e76e      	b.n	8000e06 <__aeabi_fmul+0x15e>
 8000f28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f2c:	bf18      	it	ne
 8000f2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f32:	d1ca      	bne.n	8000eca <__aeabi_fdiv+0xba>
 8000f34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f38:	f47f af5c 	bne.w	8000df4 <__aeabi_fmul+0x14c>
 8000f3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f40:	f47f af3c 	bne.w	8000dbc <__aeabi_fmul+0x114>
 8000f44:	e75f      	b.n	8000e06 <__aeabi_fmul+0x15e>
 8000f46:	bf00      	nop

08000f48 <__aeabi_f2uiz>:
 8000f48:	0042      	lsls	r2, r0, #1
 8000f4a:	d20e      	bcs.n	8000f6a <__aeabi_f2uiz+0x22>
 8000f4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f50:	d30b      	bcc.n	8000f6a <__aeabi_f2uiz+0x22>
 8000f52:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f5a:	d409      	bmi.n	8000f70 <__aeabi_f2uiz+0x28>
 8000f5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	4770      	bx	lr
 8000f6a:	f04f 0000 	mov.w	r0, #0
 8000f6e:	4770      	bx	lr
 8000f70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f74:	d101      	bne.n	8000f7a <__aeabi_f2uiz+0x32>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	d102      	bne.n	8000f80 <__aeabi_f2uiz+0x38>
 8000f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7e:	4770      	bx	lr
 8000f80:	f04f 0000 	mov.w	r0, #0
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_InitTick+0x24>)
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_InitTick+0x28>)
 8000f90:	6810      	ldr	r0, [r2, #0]
 8000f92:	fba3 3000 	umull	r3, r0, r3, r0
 8000f96:	0980      	lsrs	r0, r0, #6
 8000f98:	f000 fb80 	bl	800169c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000f9c:	4621      	mov	r1, r4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f000 fb38 	bl	8001618 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000fa8:	2000      	movs	r0, #0
 8000faa:	bd10      	pop	{r4, pc}
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	10624dd3 	.word	0x10624dd3

08000fb4 <HAL_Init>:
{
 8000fb4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f000 fb1c 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff ffe3 	bl	8000f88 <HAL_InitTick>
  HAL_MspInit();
 8000fc2:	f001 fffb 	bl	8002fbc <HAL_MspInit>
}
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	bd08      	pop	{r3, pc}
 8000fca:	bf00      	nop

08000fcc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000fcc:	4a02      	ldr	r2, [pc, #8]	; (8000fd8 <HAL_IncTick+0xc>)
 8000fce:	6813      	ldr	r3, [r2, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	2000009c 	.word	0x2000009c

08000fdc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fdc:	4b01      	ldr	r3, [pc, #4]	; (8000fe4 <HAL_GetTick+0x8>)
 8000fde:	6818      	ldr	r0, [r3, #0]
}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	2000009c 	.word	0x2000009c

08000fe8 <HAL_ADC_Init>:
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	f000 80c0 	beq.w	800116e <HAL_ADC_Init+0x186>
{
 8000fee:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ff0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 8090 	beq.w	800111c <HAL_ADC_Init+0x134>
    HAL_ADC_MspInit(hadc);
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ffc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ffe:	06db      	lsls	r3, r3, #27
 8001000:	d46c      	bmi.n	80010dc <HAL_ADC_Init+0xf4>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001002:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001004:	4a5b      	ldr	r2, [pc, #364]	; (8001174 <HAL_ADC_Init+0x18c>)
    ADC_STATE_CLR_SET(hadc->State,
 8001006:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800100a:	f023 0302 	bic.w	r3, r3, #2
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 8001014:	6853      	ldr	r3, [r2, #4]
 8001016:	6861      	ldr	r1, [r4, #4]
 8001018:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800101c:	430b      	orrs	r3, r1
 800101e:	6053      	str	r3, [r2, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001020:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001024:	fa90 f0a0 	rbit	r0, r0
 8001028:	2202      	movs	r2, #2
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                 |
                hadc->Init.EOCSelection                              |
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 800102a:	fab0 f080 	clz	r0, r0
                hadc->Init.ChannelsBank                              |
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 800102e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001030:	fa92 f2a2 	rbit	r2, r2
 8001034:	fab2 f282 	clz	r2, r2
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8001038:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800103a:	68e1      	ldr	r1, [r4, #12]
 800103c:	6967      	ldr	r7, [r4, #20]
 800103e:	6a23      	ldr	r3, [r4, #32]
 8001040:	fa06 f000 	lsl.w	r0, r6, r0
 8001044:	4339      	orrs	r1, r7
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001046:	6b66      	ldr	r6, [r4, #52]	; 0x34
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8001048:	430b      	orrs	r3, r1
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 800104a:	fa05 f202 	lsl.w	r2, r5, r2
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 800104e:	4303      	orrs	r3, r0
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001050:	2e10      	cmp	r6, #16
                hadc->Init.ChannelsBank                              |
 8001052:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001056:	d002      	beq.n	800105e <HAL_ADC_Init+0x76>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001058:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800105a:	4316      	orrs	r6, r2
 800105c:	4333      	orrs	r3, r6
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800105e:	6822      	ldr	r2, [r4, #0]
 8001060:	6811      	ldr	r1, [r2, #0]
 8001062:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 8001066:	d021      	beq.n	80010ac <HAL_ADC_Init+0xc4>
 8001068:	6920      	ldr	r0, [r4, #16]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800106a:	6895      	ldr	r5, [r2, #8]
 800106c:	4942      	ldr	r1, [pc, #264]	; (8001178 <HAL_ADC_Init+0x190>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800106e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 8001072:	ea01 0105 	and.w	r1, r1, r5
 8001076:	ea41 0103 	orr.w	r1, r1, r3
 800107a:	6091      	str	r1, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800107c:	d031      	beq.n	80010e2 <HAL_ADC_Init+0xfa>
 800107e:	2801      	cmp	r0, #1
 8001080:	d02f      	beq.n	80010e2 <HAL_ADC_Init+0xfa>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001082:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001084:	f021 71f8 	bic.w	r1, r1, #32505856	; 0x1f00000
 8001088:	6311      	str	r1, [r2, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800108a:	6891      	ldr	r1, [r2, #8]
 800108c:	4a3b      	ldr	r2, [pc, #236]	; (800117c <HAL_ADC_Init+0x194>)
 800108e:	400a      	ands	r2, r1
 8001090:	4293      	cmp	r3, r2
 8001092:	d039      	beq.n	8001108 <HAL_ADC_Init+0x120>
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 8001094:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001096:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001098:	f023 0312 	bic.w	r3, r3, #18
 800109c:	f043 0310 	orr.w	r3, r3, #16
 80010a0:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80010a4:	4303      	orrs	r3, r0
 80010a6:	6523      	str	r3, [r4, #80]	; 0x50
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80010a8:	b003      	add	sp, #12
 80010aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80010ac:	69a0      	ldr	r0, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80010ae:	68a6      	ldr	r6, [r4, #8]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80010b0:	4303      	orrs	r3, r0
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80010b2:	6920      	ldr	r0, [r4, #16]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80010b4:	69e7      	ldr	r7, [r4, #28]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80010b6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80010ba:	ea46 0607 	orr.w	r6, r6, r7
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80010be:	d03d      	beq.n	800113c <HAL_ADC_Init+0x154>
 80010c0:	2801      	cmp	r0, #1
 80010c2:	bf08      	it	eq
 80010c4:	f44f 7180 	moveq.w	r1, #256	; 0x100
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
                  hadc->Init.LowPowerAutoPowerOff           |
 80010ca:	4331      	orrs	r1, r6
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010cc:	2f01      	cmp	r7, #1
 80010ce:	d037      	beq.n	8001140 <HAL_ADC_Init+0x158>
        MODIFY_REG(hadc->Instance->CR1,
 80010d0:	6856      	ldr	r6, [r2, #4]
 80010d2:	4d2b      	ldr	r5, [pc, #172]	; (8001180 <HAL_ADC_Init+0x198>)
 80010d4:	4035      	ands	r5, r6
 80010d6:	4329      	orrs	r1, r5
 80010d8:	6051      	str	r1, [r2, #4]
 80010da:	e7c6      	b.n	800106a <HAL_ADC_Init+0x82>
    return HAL_ERROR;
 80010dc:	2001      	movs	r0, #1
}
 80010de:	b003      	add	sp, #12
 80010e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80010e2:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80010e4:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80010e8:	fa91 f1a1 	rbit	r1, r1
 80010ec:	fab1 f081 	clz	r0, r1
 80010f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80010f2:	f025 75f8 	bic.w	r5, r5, #32505856	; 0x1f00000
 80010f6:	3901      	subs	r1, #1
 80010f8:	4081      	lsls	r1, r0
 80010fa:	4329      	orrs	r1, r5
 80010fc:	6311      	str	r1, [r2, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80010fe:	6891      	ldr	r1, [r2, #8]
 8001100:	4a1e      	ldr	r2, [pc, #120]	; (800117c <HAL_ADC_Init+0x194>)
 8001102:	400a      	ands	r2, r1
 8001104:	4293      	cmp	r3, r2
 8001106:	d1c5      	bne.n	8001094 <HAL_ADC_Init+0xac>
      ADC_CLEAR_ERRORCODE(hadc);
 8001108:	2000      	movs	r0, #0
 800110a:	6520      	str	r0, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 800110c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800110e:	f023 0303 	bic.w	r3, r3, #3
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8001118:	b003      	add	sp, #12
 800111a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111c:	4a19      	ldr	r2, [pc, #100]	; (8001184 <HAL_ADC_Init+0x19c>)
    ADC_CLEAR_ERRORCODE(hadc);
 800111e:	6503      	str	r3, [r0, #80]	; 0x50
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001120:	6a11      	ldr	r1, [r2, #32]
    hadc->Lock = HAL_UNLOCKED;
 8001122:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	f041 0101 	orr.w	r1, r1, #1
 800112a:	6211      	str	r1, [r2, #32]
 800112c:	6a13      	ldr	r3, [r2, #32]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8001136:	f001 fd1b 	bl	8002b70 <HAL_ADC_MspInit>
 800113a:	e75f      	b.n	8000ffc <HAL_ADC_Init+0x14>
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800113c:	4601      	mov	r1, r0
 800113e:	e7c3      	b.n	80010c8 <HAL_ADC_Init+0xe0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001140:	b965      	cbnz	r5, 800115c <HAL_ADC_Init+0x174>
 8001142:	f44f 4560 	mov.w	r5, #57344	; 0xe000
 8001146:	fa95 f5a5 	rbit	r5, r5
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800114a:	fab5 f685 	clz	r6, r5
 800114e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001150:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001154:	3d01      	subs	r5, #1
 8001156:	40b5      	lsls	r5, r6
 8001158:	4329      	orrs	r1, r5
 800115a:	e7b9      	b.n	80010d0 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800115c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800115e:	f045 0520 	orr.w	r5, r5, #32
 8001162:	64e5      	str	r5, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001164:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8001166:	f045 0501 	orr.w	r5, r5, #1
 800116a:	6525      	str	r5, [r4, #80]	; 0x50
 800116c:	e7b0      	b.n	80010d0 <HAL_ADC_Init+0xe8>
    return HAL_ERROR;
 800116e:	2001      	movs	r0, #1
}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40012700 	.word	0x40012700
 8001178:	c0fff18d 	.word	0xc0fff18d
 800117c:	bf80fffe 	.word	0xbf80fffe
 8001180:	fcfc16ff 	.word	0xfcfc16ff
 8001184:	40023800 	.word	0x40023800

08001188 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001188:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800118a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800118c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001190:	d122      	bne.n	80011d8 <ADC_DMAConvCplt+0x50>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001194:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 800119a:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800119c:	64da      	str	r2, [r3, #76]	; 0x4c
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800119e:	688a      	ldr	r2, [r1, #8]
 80011a0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80011a4:	d114      	bne.n	80011d0 <ADC_DMAConvCplt+0x48>
 80011a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011a8:	b992      	cbnz	r2, 80011d0 <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011aa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011ac:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 80011b0:	d115      	bne.n	80011de <ADC_DMAConvCplt+0x56>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011b2:	684a      	ldr	r2, [r1, #4]
 80011b4:	f022 0220 	bic.w	r2, r2, #32
 80011b8:	604a      	str	r2, [r1, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011c0:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011c4:	04d2      	lsls	r2, r2, #19
 80011c6:	d403      	bmi.n	80011d0 <ADC_DMAConvCplt+0x48>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011ca:	f042 0201 	orr.w	r2, r2, #1
 80011ce:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fdbb 	bl	8002d4c <HAL_ADC_ConvCpltCallback>
 80011d6:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	4718      	bx	r3
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011de:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011e0:	0550      	lsls	r0, r2, #21
 80011e2:	d4f5      	bmi.n	80011d0 <ADC_DMAConvCplt+0x48>
 80011e4:	e7e5      	b.n	80011b2 <ADC_DMAConvCplt+0x2a>
 80011e6:	bf00      	nop

080011e8 <HAL_ADC_ConvHalfCpltCallback>:
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop

080011ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80011ec:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80011ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80011f0:	f7ff fffa 	bl	80011e8 <HAL_ADC_ConvHalfCpltCallback>
 80011f4:	bd08      	pop	{r3, pc}
 80011f6:	bf00      	nop

080011f8 <HAL_ADC_LevelOutOfWindowCallback>:
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop

080011fc <HAL_ADC_ErrorCallback>:
{
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop

08001200 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001200:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001202:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8001206:	4618      	mov	r0, r3
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800120c:	64da      	str	r2, [r3, #76]	; 0x4c
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800120e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001210:	f042 0204 	orr.w	r2, r2, #4
 8001214:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_ADC_ErrorCallback(hadc); 
 8001216:	f7ff fff1 	bl	80011fc <HAL_ADC_ErrorCallback>
 800121a:	bd08      	pop	{r3, pc}

0800121c <HAL_ADC_IRQHandler>:
{
 800121c:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800121e:	6803      	ldr	r3, [r0, #0]
{
 8001220:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	0691      	lsls	r1, r2, #26
 8001226:	d502      	bpl.n	800122e <HAL_ADC_IRQHandler+0x12>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	0792      	lsls	r2, r2, #30
 800122c:	d444      	bmi.n	80012b8 <HAL_ADC_IRQHandler+0x9c>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	0612      	lsls	r2, r2, #24
 8001232:	d502      	bpl.n	800123a <HAL_ADC_IRQHandler+0x1e>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	0755      	lsls	r5, r2, #29
 8001238:	d40c      	bmi.n	8001254 <HAL_ADC_IRQHandler+0x38>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	0655      	lsls	r5, r2, #25
 800123e:	d502      	bpl.n	8001246 <HAL_ADC_IRQHandler+0x2a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	07d0      	lsls	r0, r2, #31
 8001244:	d46d      	bmi.n	8001322 <HAL_ADC_IRQHandler+0x106>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	0151      	lsls	r1, r2, #5
 800124a:	d502      	bpl.n	8001252 <HAL_ADC_IRQHandler+0x36>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	0692      	lsls	r2, r2, #26
 8001250:	d45a      	bmi.n	8001308 <HAL_ADC_IRQHandler+0xec>
 8001252:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001254:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001256:	06d0      	lsls	r0, r2, #27
 8001258:	d403      	bmi.n	8001262 <HAL_ADC_IRQHandler+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800125a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800125c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001260:	64e2      	str	r2, [r4, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001268:	d11e      	bne.n	80012a8 <HAL_ADC_IRQHandler+0x8c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800126a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800126c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001270:	d002      	beq.n	8001278 <HAL_ADC_IRQHandler+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001272:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001274:	0551      	lsls	r1, r2, #21
 8001276:	d417      	bmi.n	80012a8 <HAL_ADC_IRQHandler+0x8c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001278:	685a      	ldr	r2, [r3, #4]
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800127a:	0552      	lsls	r2, r2, #21
 800127c:	d414      	bmi.n	80012a8 <HAL_ADC_IRQHandler+0x8c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800127e:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001280:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001284:	d110      	bne.n	80012a8 <HAL_ADC_IRQHandler+0x8c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001286:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001288:	b972      	cbnz	r2, 80012a8 <HAL_ADC_IRQHandler+0x8c>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001290:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001292:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001298:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800129a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800129c:	05db      	lsls	r3, r3, #23
 800129e:	d403      	bmi.n	80012a8 <HAL_ADC_IRQHandler+0x8c>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012a8:	4620      	mov	r0, r4
 80012aa:	f000 f9a1 	bl	80015f0 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012ae:	f06f 020c 	mvn.w	r2, #12
 80012b2:	6823      	ldr	r3, [r4, #0]
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	e7c0      	b.n	800123a <HAL_ADC_IRQHandler+0x1e>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012b8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80012ba:	06d5      	lsls	r5, r2, #27
 80012bc:	d403      	bmi.n	80012c6 <HAL_ADC_IRQHandler+0xaa>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012be:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80012c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012c4:	64c2      	str	r2, [r0, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80012cc:	d114      	bne.n	80012f8 <HAL_ADC_IRQHandler+0xdc>
 80012ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012d0:	b992      	cbnz	r2, 80012f8 <HAL_ADC_IRQHandler+0xdc>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012d4:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 80012d8:	d12f      	bne.n	800133a <HAL_ADC_IRQHandler+0x11e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	f022 0220 	bic.w	r2, r2, #32
 80012e0:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80012e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012e8:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80012ec:	04d9      	lsls	r1, r3, #19
 80012ee:	d403      	bmi.n	80012f8 <HAL_ADC_IRQHandler+0xdc>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_ConvCpltCallback(hadc);
 80012f8:	4620      	mov	r0, r4
 80012fa:	f001 fd27 	bl	8002d4c <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012fe:	f06f 0212 	mvn.w	r2, #18
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e792      	b.n	800122e <HAL_ADC_IRQHandler+0x12>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001308:	f06f 0520 	mvn.w	r5, #32
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800130c:	6d22      	ldr	r2, [r4, #80]	; 0x50
      HAL_ADC_ErrorCallback(hadc);
 800130e:	4620      	mov	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001310:	f042 0202 	orr.w	r2, r2, #2
 8001314:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001316:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8001318:	f7ff ff70 	bl	80011fc <HAL_ADC_ErrorCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	601d      	str	r5, [r3, #0]
 8001320:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001322:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001324:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132a:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800132c:	f7ff ff64 	bl	80011f8 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001330:	f06f 0201 	mvn.w	r2, #1
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e785      	b.n	8001246 <HAL_ADC_IRQHandler+0x2a>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800133a:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800133c:	0550      	lsls	r0, r2, #21
 800133e:	d4db      	bmi.n	80012f8 <HAL_ADC_IRQHandler+0xdc>
 8001340:	e7cb      	b.n	80012da <HAL_ADC_IRQHandler+0xbe>
 8001342:	bf00      	nop

08001344 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 8001344:	2200      	movs	r2, #0
{
 8001346:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 8001348:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 800134c:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 800134e:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8001350:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001352:	d03c      	beq.n	80013ce <HAL_ADC_ConfigChannel+0x8a>
 8001354:	2201      	movs	r2, #1
  if (sConfig->Rank < 7)
 8001356:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR5,
 8001358:	261f      	movs	r6, #31
  if (sConfig->Rank < 7)
 800135a:	2b06      	cmp	r3, #6
  __HAL_LOCK(hadc);
 800135c:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
    MODIFY_REG(hadc->Instance->SQR5,
 8001360:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7)
 8001362:	d823      	bhi.n	80013ac <HAL_ADC_ConfigChannel+0x68>
    MODIFY_REG(hadc->Instance->SQR5,
 8001364:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001368:	3b05      	subs	r3, #5
 800136a:	6c15      	ldr	r5, [r2, #64]	; 0x40
 800136c:	680c      	ldr	r4, [r1, #0]
 800136e:	409e      	lsls	r6, r3
 8001370:	ea25 0506 	bic.w	r5, r5, r6
 8001374:	fa04 f303 	lsl.w	r3, r4, r3
 8001378:	432b      	orrs	r3, r5
 800137a:	6413      	str	r3, [r2, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 800137c:	2c09      	cmp	r4, #9
 800137e:	d82a      	bhi.n	80013d6 <HAL_ADC_ConfigChannel+0x92>
    MODIFY_REG(hadc->Instance->SMPR3,
 8001380:	2507      	movs	r5, #7
 8001382:	6889      	ldr	r1, [r1, #8]
 8001384:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8001388:	6953      	ldr	r3, [r2, #20]
 800138a:	40b5      	lsls	r5, r6
 800138c:	40b1      	lsls	r1, r6
 800138e:	ea23 0305 	bic.w	r3, r3, r5
 8001392:	430b      	orrs	r3, r1
 8001394:	6153      	str	r3, [r2, #20]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001396:	f1a4 0310 	sub.w	r3, r4, #16
 800139a:	2b01      	cmp	r3, #1
 800139c:	d93c      	bls.n	8001418 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 800139e:	2300      	movs	r3, #0
 80013a0:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  return tmp_hal_status;
 80013a4:	4618      	mov	r0, r3
}
 80013a6:	b003      	add	sp, #12
 80013a8:	bc70      	pop	{r4, r5, r6}
 80013aa:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 80013ac:	2b0c      	cmp	r3, #12
 80013ae:	d951      	bls.n	8001454 <HAL_ADC_ConfigChannel+0x110>
  else if (sConfig->Rank < 19)
 80013b0:	2b12      	cmp	r3, #18
 80013b2:	d85c      	bhi.n	800146e <HAL_ADC_ConfigChannel+0x12a>
    MODIFY_REG(hadc->Instance->SQR3,
 80013b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013b8:	3b41      	subs	r3, #65	; 0x41
 80013ba:	6b95      	ldr	r5, [r2, #56]	; 0x38
 80013bc:	680c      	ldr	r4, [r1, #0]
 80013be:	409e      	lsls	r6, r3
 80013c0:	ea25 0506 	bic.w	r5, r5, r6
 80013c4:	fa04 f303 	lsl.w	r3, r4, r3
 80013c8:	432b      	orrs	r3, r5
 80013ca:	6393      	str	r3, [r2, #56]	; 0x38
 80013cc:	e7d6      	b.n	800137c <HAL_ADC_ConfigChannel+0x38>
  __HAL_LOCK(hadc);
 80013ce:	2002      	movs	r0, #2
}
 80013d0:	b003      	add	sp, #12
 80013d2:	bc70      	pop	{r4, r5, r6}
 80013d4:	4770      	bx	lr
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80013d6:	2c13      	cmp	r4, #19
 80013d8:	d90e      	bls.n	80013f8 <HAL_ADC_ConfigChannel+0xb4>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80013da:	2c1a      	cmp	r4, #26
 80013dc:	d856      	bhi.n	800148c <HAL_ADC_ConfigChannel+0x148>
    MODIFY_REG(hadc->Instance->SMPR1,
 80013de:	2607      	movs	r6, #7
 80013e0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80013e4:	688d      	ldr	r5, [r1, #8]
 80013e6:	3b3c      	subs	r3, #60	; 0x3c
 80013e8:	68d1      	ldr	r1, [r2, #12]
 80013ea:	409e      	lsls	r6, r3
 80013ec:	409d      	lsls	r5, r3
 80013ee:	ea21 0306 	bic.w	r3, r1, r6
 80013f2:	432b      	orrs	r3, r5
 80013f4:	60d3      	str	r3, [r2, #12]
 80013f6:	e7ce      	b.n	8001396 <HAL_ADC_ConfigChannel+0x52>
    MODIFY_REG(hadc->Instance->SMPR2,
 80013f8:	2607      	movs	r6, #7
 80013fa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80013fe:	688d      	ldr	r5, [r1, #8]
 8001400:	3b1e      	subs	r3, #30
 8001402:	6911      	ldr	r1, [r2, #16]
 8001404:	409e      	lsls	r6, r3
 8001406:	409d      	lsls	r5, r3
 8001408:	ea21 0306 	bic.w	r3, r1, r6
 800140c:	432b      	orrs	r3, r5
 800140e:	6113      	str	r3, [r2, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001410:	f1a4 0310 	sub.w	r3, r4, #16
 8001414:	2b01      	cmp	r3, #1
 8001416:	d8c2      	bhi.n	800139e <HAL_ADC_ConfigChannel+0x5a>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <HAL_ADC_ConfigChannel+0x164>)
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	0212      	lsls	r2, r2, #8
 800141e:	d4be      	bmi.n	800139e <HAL_ADC_ConfigChannel+0x5a>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001420:	685a      	ldr	r2, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001422:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001424:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001428:	605a      	str	r2, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800142a:	d1b8      	bne.n	800139e <HAL_ADC_ConfigChannel+0x5a>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_ADC_ConfigChannel+0x168>)
 800142e:	4a20      	ldr	r2, [pc, #128]	; (80014b0 <HAL_ADC_ConfigChannel+0x16c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	fba2 2303 	umull	r2, r3, r2, r3
 8001436:	0c9b      	lsrs	r3, r3, #18
 8001438:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8001440:	9b01      	ldr	r3, [sp, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0ab      	beq.n	800139e <HAL_ADC_ConfigChannel+0x5a>
            wait_loop_index--;
 8001446:	9b01      	ldr	r3, [sp, #4]
 8001448:	3b01      	subs	r3, #1
 800144a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800144c:	9b01      	ldr	r3, [sp, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f9      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x102>
 8001452:	e7a4      	b.n	800139e <HAL_ADC_ConfigChannel+0x5a>
    MODIFY_REG(hadc->Instance->SQR4,
 8001454:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001458:	3b23      	subs	r3, #35	; 0x23
 800145a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800145c:	680c      	ldr	r4, [r1, #0]
 800145e:	409e      	lsls	r6, r3
 8001460:	ea25 0506 	bic.w	r5, r5, r6
 8001464:	fa04 f303 	lsl.w	r3, r4, r3
 8001468:	432b      	orrs	r3, r5
 800146a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800146c:	e786      	b.n	800137c <HAL_ADC_ConfigChannel+0x38>
  else if (sConfig->Rank < 25)
 800146e:	2b18      	cmp	r3, #24
    MODIFY_REG(hadc->Instance->SQR2,
 8001470:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 25)
 8001474:	d80c      	bhi.n	8001490 <HAL_ADC_ConfigChannel+0x14c>
    MODIFY_REG(hadc->Instance->SQR2,
 8001476:	3b5f      	subs	r3, #95	; 0x5f
 8001478:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800147a:	680c      	ldr	r4, [r1, #0]
 800147c:	409e      	lsls	r6, r3
 800147e:	ea25 0506 	bic.w	r5, r5, r6
 8001482:	fa04 f303 	lsl.w	r3, r4, r3
 8001486:	432b      	orrs	r3, r5
 8001488:	6353      	str	r3, [r2, #52]	; 0x34
 800148a:	e777      	b.n	800137c <HAL_ADC_ConfigChannel+0x38>
  __ASM volatile ("nop");
 800148c:	bf00      	nop
 800148e:	e782      	b.n	8001396 <HAL_ADC_ConfigChannel+0x52>
    MODIFY_REG(hadc->Instance->SQR1,
 8001490:	3b7d      	subs	r3, #125	; 0x7d
 8001492:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8001494:	680c      	ldr	r4, [r1, #0]
 8001496:	409e      	lsls	r6, r3
 8001498:	ea25 0506 	bic.w	r5, r5, r6
 800149c:	fa04 f303 	lsl.w	r3, r4, r3
 80014a0:	432b      	orrs	r3, r5
 80014a2:	6313      	str	r3, [r2, #48]	; 0x30
 80014a4:	e76a      	b.n	800137c <HAL_ADC_ConfigChannel+0x38>
 80014a6:	bf00      	nop
 80014a8:	40012700 	.word	0x40012700
 80014ac:	20000008 	.word	0x20000008
 80014b0:	431bde83 	.word	0x431bde83

080014b4 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 80014b4:	2300      	movs	r3, #0
{
 80014b6:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014b8:	6802      	ldr	r2, [r0, #0]
{
 80014ba:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80014bc:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014be:	6813      	ldr	r3, [r2, #0]
 80014c0:	065b      	lsls	r3, r3, #25
 80014c2:	d423      	bmi.n	800150c <ADC_Enable+0x58>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <ADC_Enable+0x78>)
 80014c6:	4c1a      	ldr	r4, [pc, #104]	; (8001530 <ADC_Enable+0x7c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 80014ca:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80014cc:	fba4 4303 	umull	r4, r3, r4, r3
 80014d0:	0c9b      	lsrs	r3, r3, #18
 80014d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 80014d6:	f041 0101 	orr.w	r1, r1, #1
 80014da:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80014dc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80014de:	9b01      	ldr	r3, [sp, #4]
 80014e0:	b12b      	cbz	r3, 80014ee <ADC_Enable+0x3a>
      wait_loop_index--;
 80014e2:	9b01      	ldr	r3, [sp, #4]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80014e8:	9b01      	ldr	r3, [sp, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f9      	bne.n	80014e2 <ADC_Enable+0x2e>
 80014ee:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();    
 80014f0:	f7ff fd74 	bl	8000fdc <HAL_GetTick>
 80014f4:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014f6:	e004      	b.n	8001502 <ADC_Enable+0x4e>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80014f8:	f7ff fd70 	bl	8000fdc <HAL_GetTick>
 80014fc:	1b80      	subs	r0, r0, r6
 80014fe:	2802      	cmp	r0, #2
 8001500:	d807      	bhi.n	8001512 <ADC_Enable+0x5e>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	681c      	ldr	r4, [r3, #0]
 8001506:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 800150a:	d0f5      	beq.n	80014f8 <ADC_Enable+0x44>
  return HAL_OK;
 800150c:	2000      	movs	r0, #0
}
 800150e:	b002      	add	sp, #8
 8001510:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_UNLOCK(hadc);
 8001512:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001514:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
        __HAL_UNLOCK(hadc);
 8001516:	f885 4048 	strb.w	r4, [r5, #72]	; 0x48
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800151a:	f043 0310 	orr.w	r3, r3, #16
 800151e:	64eb      	str	r3, [r5, #76]	; 0x4c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001520:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001522:	4303      	orrs	r3, r0
 8001524:	652b      	str	r3, [r5, #80]	; 0x50
}
 8001526:	b002      	add	sp, #8
 8001528:	bd70      	pop	{r4, r5, r6, pc}
 800152a:	bf00      	nop
 800152c:	20000008 	.word	0x20000008
 8001530:	431bde83 	.word	0x431bde83

08001534 <HAL_ADC_Start_DMA>:
{
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001536:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
 800153a:	2d01      	cmp	r5, #1
 800153c:	d102      	bne.n	8001544 <HAL_ADC_Start_DMA+0x10>
 800153e:	2502      	movs	r5, #2
}
 8001540:	4628      	mov	r0, r5
 8001542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8001544:	2301      	movs	r3, #1
 8001546:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
 800154a:	4604      	mov	r4, r0
 800154c:	4617      	mov	r7, r2
 800154e:	460e      	mov	r6, r1
  tmp_hal_status = ADC_Enable(hadc);
 8001550:	f7ff ffb0 	bl	80014b4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001554:	4605      	mov	r5, r0
 8001556:	2800      	cmp	r0, #0
 8001558:	d1f2      	bne.n	8001540 <HAL_ADC_Start_DMA+0xc>
    ADC_STATE_CLR_SET(hadc->State,
 800155a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800155c:	6821      	ldr	r1, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800155e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156a:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800156c:	684b      	ldr	r3, [r1, #4]
 800156e:	055b      	lsls	r3, r3, #21
 8001570:	d505      	bpl.n	800157e <HAL_ADC_Start_DMA+0x4a>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001572:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001574:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001578:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800157c:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800157e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001580:	f06f 0222 	mvn.w	r2, #34	; 0x22
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001584:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001588:	bf18      	it	ne
 800158a:	6d23      	ldrne	r3, [r4, #80]	; 0x50
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800158c:	6c60      	ldr	r0, [r4, #68]	; 0x44
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800158e:	bf18      	it	ne
 8001590:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001594:	6523      	str	r3, [r4, #80]	; 0x50
    __HAL_UNLOCK(hadc);
 8001596:	2300      	movs	r3, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001598:	f8df e04c 	ldr.w	lr, [pc, #76]	; 80015e8 <HAL_ADC_Start_DMA+0xb4>
    __HAL_UNLOCK(hadc);
 800159c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015a0:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_ADC_Start_DMA+0xb0>)
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015a6:	f8df e044 	ldr.w	lr, [pc, #68]	; 80015ec <HAL_ADC_Start_DMA+0xb8>
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015aa:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015ac:	f8c0 e030 	str.w	lr, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015b0:	600a      	str	r2, [r1, #0]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015b2:	463b      	mov	r3, r7
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015b4:	684f      	ldr	r7, [r1, #4]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015b6:	4632      	mov	r2, r6
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015b8:	f047 6780 	orr.w	r7, r7, #67108864	; 0x4000000
 80015bc:	604f      	str	r7, [r1, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80015be:	688e      	ldr	r6, [r1, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015c0:	3158      	adds	r1, #88	; 0x58
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80015c2:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 80015c6:	f841 6c50 	str.w	r6, [r1, #-80]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015ca:	f000 f94d 	bl	8001868 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80015d6:	d1b3      	bne.n	8001540 <HAL_ADC_Start_DMA+0xc>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80015d8:	689a      	ldr	r2, [r3, #8]
}
 80015da:	4628      	mov	r0, r5
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80015dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015e0:	609a      	str	r2, [r3, #8]
}
 80015e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015e4:	080011ed 	.word	0x080011ed
 80015e8:	08001189 	.word	0x08001189
 80015ec:	08001201 	.word	0x08001201

080015f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f4:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80015fa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015fc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80015fe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001602:	400b      	ands	r3, r1
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800160c:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800160e:	60d3      	str	r3, [r2, #12]
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161a:	b470      	push	{r4, r5, r6}
 800161c:	68dc      	ldr	r4, [r3, #12]
 800161e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001622:	f1c4 0607 	rsb	r6, r4, #7
 8001626:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001628:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162c:	bf28      	it	cs
 800162e:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001630:	2b06      	cmp	r3, #6
 8001632:	d917      	bls.n	8001664 <HAL_NVIC_SetPriority+0x4c>
 8001634:	2501      	movs	r5, #1
 8001636:	3c03      	subs	r4, #3
 8001638:	40a5      	lsls	r5, r4
 800163a:	3d01      	subs	r5, #1
 800163c:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163e:	2301      	movs	r3, #1
 8001640:	40b3      	lsls	r3, r6
 8001642:	3b01      	subs	r3, #1
 8001644:	4019      	ands	r1, r3
 8001646:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8001648:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 800164e:	db0c      	blt.n	800166a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	0109      	lsls	r1, r1, #4
 8001652:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001656:	b2c9      	uxtb	r1, r1
 8001658:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800165c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001660:	bc70      	pop	{r4, r5, r6}
 8001662:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001664:	2200      	movs	r2, #0
 8001666:	4614      	mov	r4, r2
 8001668:	e7e9      	b.n	800163e <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_NVIC_SetPriority+0x68>)
 800166c:	f000 000f 	and.w	r0, r0, #15
 8001670:	0109      	lsls	r1, r1, #4
 8001672:	b2c9      	uxtb	r1, r1
 8001674:	4403      	add	r3, r0
 8001676:	7619      	strb	r1, [r3, #24]
 8001678:	bc70      	pop	{r4, r5, r6}
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00
 8001680:	e000ecfc 	.word	0xe000ecfc

08001684 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001684:	2301      	movs	r3, #1
 8001686:	f000 011f 	and.w	r1, r0, #31
 800168a:	4a03      	ldr	r2, [pc, #12]	; (8001698 <HAL_NVIC_EnableIRQ+0x14>)
 800168c:	0940      	lsrs	r0, r0, #5
 800168e:	408b      	lsls	r3, r1
 8001690:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100

0800169c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	3801      	subs	r0, #1
 800169e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80016a2:	d20d      	bcs.n	80016c0 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a4:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	4c06      	ldr	r4, [pc, #24]	; (80016c8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b6:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 80016b8:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ba:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016bc:	6019      	str	r1, [r3, #0]
 80016be:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80016c0:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80016c2:	4770      	bx	lr
 80016c4:	e000e010 	.word	0xe000e010
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80016ce:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80016d0:	6813      	ldr	r3, [r2, #0]
 80016d2:	bf0c      	ite	eq
 80016d4:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80016d8:	f023 0304 	bicne.w	r3, r3, #4
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4770      	bx	lr
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop

080016e8 <HAL_SYSTICK_IRQHandler>:
{
 80016e8:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80016ea:	f7ff fffb 	bl	80016e4 <HAL_SYSTICK_Callback>
 80016ee:	bd08      	pop	{r3, pc}

080016f0 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 80016f0:	b188      	cbz	r0, 8001716 <HAL_DAC_Init+0x26>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80016f2:	7903      	ldrb	r3, [r0, #4]
{ 
 80016f4:	b510      	push	{r4, lr}
  if(hdac->State == HAL_DAC_STATE_RESET)
 80016f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016fa:	4604      	mov	r4, r0
 80016fc:	b13b      	cbz	r3, 800170e <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80016fe:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8001700:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001702:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8001704:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8001706:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001708:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800170a:	7122      	strb	r2, [r4, #4]
  return HAL_OK;
 800170c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800170e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8001710:	f001 faae 	bl	8002c70 <HAL_DAC_MspInit>
 8001714:	e7f3      	b.n	80016fe <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 8001716:	2001      	movs	r0, #1
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop

0800171c <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800171c:	7943      	ldrb	r3, [r0, #5]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d020      	beq.n	8001764 <HAL_DAC_Start+0x48>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001722:	2202      	movs	r2, #2
{
 8001724:	b430      	push	{r4, r5}
  __HAL_LOCK(hdac);
 8001726:	2401      	movs	r4, #1
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001728:	6803      	ldr	r3, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800172a:	7102      	strb	r2, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 800172c:	681d      	ldr	r5, [r3, #0]
 800172e:	fa04 f201 	lsl.w	r2, r4, r1
 8001732:	432a      	orrs	r2, r5
  __HAL_LOCK(hdac);
 8001734:	7144      	strb	r4, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8001736:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001738:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 800173a:	b159      	cbz	r1, 8001754 <HAL_DAC_Start+0x38>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 800173c:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8001740:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 8001744:	d010      	beq.n	8001768 <HAL_DAC_Start+0x4c>
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
  
  /* Return function status */
  return HAL_OK;
}
 8001746:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(hdac);
 8001748:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_READY;
 800174a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hdac);
 800174c:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_READY;
 800174e:	7102      	strb	r2, [r0, #4]
  return HAL_OK;
 8001750:	4618      	mov	r0, r3
}
 8001752:	4770      	bx	lr
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001754:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8001758:	2a3c      	cmp	r2, #60	; 0x3c
 800175a:	d1f4      	bne.n	8001746 <HAL_DAC_Start+0x2a>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4322      	orrs	r2, r4
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	e7f0      	b.n	8001746 <HAL_DAC_Start+0x2a>
  __HAL_LOCK(hdac);
 8001764:	2002      	movs	r0, #2
 8001766:	4770      	bx	lr
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	f042 0202 	orr.w	r2, r2, #2
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	e7e9      	b.n	8001746 <HAL_DAC_Start+0x2a>
 8001772:	bf00      	nop

08001774 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001774:	7943      	ldrb	r3, [r0, #5]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d020      	beq.n	80017bc <HAL_DAC_ConfigChannel+0x48>
{
 800177a:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800177c:	2602      	movs	r6, #2
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  SET_BIT(tmpreg1, (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer));
  
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */  
  /* Calculate CR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->CR,
 800177e:	f640 73fe 	movw	r3, #4094	; 0xffe
             ((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel,
             tmpreg1 << Channel);

  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001782:	25c0      	movs	r5, #192	; 0xc0
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001784:	2700      	movs	r7, #0
  hdac->State = HAL_DAC_STATE_READY;
 8001786:	f04f 0e01 	mov.w	lr, #1
  MODIFY_REG(hdac->Instance->CR,
 800178a:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800178c:	7106      	strb	r6, [r0, #4]
  MODIFY_REG(hdac->Instance->CR,
 800178e:	6826      	ldr	r6, [r4, #0]
 8001790:	4093      	lsls	r3, r2
 8001792:	ea26 0603 	bic.w	r6, r6, r3
  SET_BIT(tmpreg1, (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer));
 8001796:	e891 1008 	ldmia.w	r1, {r3, ip}
 800179a:	ea43 030c 	orr.w	r3, r3, ip
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800179e:	fa05 f102 	lsl.w	r1, r5, r2
  MODIFY_REG(hdac->Instance->CR,
 80017a2:	fa03 f202 	lsl.w	r2, r3, r2
 80017a6:	4332      	orrs	r2, r6
 80017a8:	6022      	str	r2, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	ea23 0301 	bic.w	r3, r3, r1
 80017b0:	6023      	str	r3, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80017b2:	f880 e004 	strb.w	lr, [r0, #4]
  __HAL_UNLOCK(hdac);
 80017b6:	7147      	strb	r7, [r0, #5]
  
  /* Return function status */
  return HAL_OK;
}
 80017b8:	4638      	mov	r0, r7
 80017ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 80017bc:	2202      	movs	r2, #2
}
 80017be:	4610      	mov	r0, r2
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop

080017c4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80017c4:	b410      	push	{r4}
  __IO uint32_t tmp = 0;
 80017c6:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80017c8:	6800      	ldr	r0, [r0, #0]
{  
 80017ca:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0;
 80017cc:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance; 
 80017ce:	9001      	str	r0, [sp, #4]
  if(Channel == DAC_CHANNEL_1)
 80017d0:	b149      	cbz	r1, 80017e6 <HAL_DAC_SetValue+0x22>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80017d2:	9901      	ldr	r1, [sp, #4]
 80017d4:	3114      	adds	r1, #20
 80017d6:	440a      	add	r2, r1
 80017d8:	9201      	str	r2, [sp, #4]
  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
  
  /* Return function status */
  return HAL_OK;
}
 80017da:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80017dc:	9a01      	ldr	r2, [sp, #4]
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	b003      	add	sp, #12
 80017e2:	bc10      	pop	{r4}
 80017e4:	4770      	bx	lr
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80017e6:	9901      	ldr	r1, [sp, #4]
 80017e8:	3108      	adds	r1, #8
 80017ea:	440a      	add	r2, r1
 80017ec:	9201      	str	r2, [sp, #4]
 80017ee:	e7f4      	b.n	80017da <HAL_DAC_SetValue+0x16>

080017f0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d031      	beq.n	8001858 <HAL_DMA_Init+0x68>
 80017f4:	4603      	mov	r3, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017f6:	2002      	movs	r0, #2
{ 
 80017f8:	b4f0      	push	{r4, r5, r6, r7}

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80017fa:	2400      	movs	r4, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017fc:	2601      	movs	r6, #1
  tmp |=  hdma->Init.Direction        |
 80017fe:	689f      	ldr	r7, [r3, #8]
 8001800:	685a      	ldr	r2, [r3, #4]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001802:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Direction        |
 8001804:	433a      	orrs	r2, r7
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001806:	68df      	ldr	r7, [r3, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001808:	4914      	ldr	r1, [pc, #80]	; (800185c <HAL_DMA_Init+0x6c>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180a:	433a      	orrs	r2, r7
 800180c:	691f      	ldr	r7, [r3, #16]
  hdma->State = HAL_DMA_STATE_BUSY;
 800180e:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001812:	433a      	orrs	r2, r7
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001814:	4812      	ldr	r0, [pc, #72]	; (8001860 <HAL_DMA_Init+0x70>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001816:	695f      	ldr	r7, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001818:	4429      	add	r1, r5
 800181a:	fba0 0101 	umull	r0, r1, r0, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181e:	433a      	orrs	r2, r7
 8001820:	699f      	ldr	r7, [r3, #24]
  tmp = hdma->Instance->CCR;
 8001822:	6828      	ldr	r0, [r5, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001824:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8001826:	69df      	ldr	r7, [r3, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001828:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 800182c:	433a      	orrs	r2, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800182e:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  hdma->DmaBaseAddress = DMA1;
 8001832:	4f0c      	ldr	r7, [pc, #48]	; (8001864 <HAL_DMA_Init+0x74>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001834:	0909      	lsrs	r1, r1, #4
  tmp |=  hdma->Init.Direction        |
 8001836:	4302      	orrs	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001838:	0089      	lsls	r1, r1, #2
  hdma->DmaBaseAddress = DMA1;
 800183a:	63df      	str	r7, [r3, #60]	; 0x3c
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
  
  return HAL_OK;
 800183c:	4620      	mov	r0, r4
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800183e:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->Instance->CCR = tmp;  
 8001840:	602a      	str	r2, [r5, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001842:	639c      	str	r4, [r3, #56]	; 0x38
  hdma->XferCpltCallback = NULL;
 8001844:	629c      	str	r4, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001846:	62dc      	str	r4, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001848:	631c      	str	r4, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800184a:	635c      	str	r4, [r3, #52]	; 0x34
  hdma->Lock = HAL_UNLOCKED;
 800184c:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8001850:	f883 6021 	strb.w	r6, [r3, #33]	; 0x21
}
 8001854:	bcf0      	pop	{r4, r5, r6, r7}
 8001856:	4770      	bx	lr
    return HAL_ERROR;
 8001858:	2001      	movs	r0, #1
 800185a:	4770      	bx	lr
 800185c:	bffd9ff8 	.word	0xbffd9ff8
 8001860:	cccccccd 	.word	0xcccccccd
 8001864:	40026000 	.word	0x40026000

08001868 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001868:	b4f0      	push	{r4, r5, r6, r7}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800186a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800186e:	2c01      	cmp	r4, #1
 8001870:	d00e      	beq.n	8001890 <HAL_DMA_Start_IT+0x28>
 8001872:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8001874:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001878:	f880 5020 	strb.w	r5, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800187c:	b2e4      	uxtb	r4, r4
 800187e:	42ac      	cmp	r4, r5
 8001880:	d00a      	beq.n	8001898 <HAL_DMA_Start_IT+0x30>
  __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001882:	2200      	movs	r2, #0
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001884:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma); 
 8001886:	f880 2020 	strb.w	r2, [r0, #32]
  }    
  return status;
} 
 800188a:	4618      	mov	r0, r3
 800188c:	bcf0      	pop	{r4, r5, r6, r7}
 800188e:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001890:	2302      	movs	r3, #2
} 
 8001892:	bcf0      	pop	{r4, r5, r6, r7}
 8001894:	4618      	mov	r0, r3
 8001896:	4770      	bx	lr
  hdma->State = HAL_DMA_STATE_BUSY;
 8001898:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800189a:	2600      	movs	r6, #0
  __HAL_DMA_DISABLE(hdma);
 800189c:	6805      	ldr	r5, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800189e:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a2:	6386      	str	r6, [r0, #56]	; 0x38
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018a4:	6c07      	ldr	r7, [r0, #64]	; 0x40
  __HAL_DMA_DISABLE(hdma);
 80018a6:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018a8:	40bc      	lsls	r4, r7
  __HAL_DMA_DISABLE(hdma);
 80018aa:	f026 0601 	bic.w	r6, r6, #1
  hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018ae:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  __HAL_DMA_DISABLE(hdma);
 80018b0:	602e      	str	r6, [r5, #0]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018b2:	6846      	ldr	r6, [r0, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018b4:	607c      	str	r4, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 80018b6:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 80018b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ba:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018bc:	bf0b      	itete	eq
 80018be:	60aa      	streq	r2, [r5, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80018c0:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 80018c2:	60e9      	streq	r1, [r5, #12]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80018c4:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80018c6:	b14b      	cbz	r3, 80018dc <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c8:	682b      	ldr	r3, [r5, #0]
 80018ca:	f043 030e 	orr.w	r3, r3, #14
 80018ce:	602b      	str	r3, [r5, #0]
  __HAL_DMA_ENABLE(hdma);
 80018d0:	682a      	ldr	r2, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018d2:	2300      	movs	r3, #0
  __HAL_DMA_ENABLE(hdma);
 80018d4:	f042 0201 	orr.w	r2, r2, #1
 80018d8:	602a      	str	r2, [r5, #0]
 80018da:	e7d6      	b.n	800188a <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018dc:	682b      	ldr	r3, [r5, #0]
 80018de:	f023 0304 	bic.w	r3, r3, #4
 80018e2:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018e4:	682b      	ldr	r3, [r5, #0]
 80018e6:	f043 030a 	orr.w	r3, r3, #10
 80018ea:	602b      	str	r3, [r5, #0]
 80018ec:	e7f0      	b.n	80018d0 <HAL_DMA_Start_IT+0x68>
 80018ee:	bf00      	nop

080018f0 <HAL_DMA_IRQHandler>:
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80018f0:	2304      	movs	r3, #4
{
 80018f2:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018f4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80018f6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018f8:	6829      	ldr	r1, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80018fa:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80018fc:	4093      	lsls	r3, r2
 80018fe:	4219      	tst	r1, r3
  uint32_t source_it = hdma->Instance->CCR;
 8001900:	6826      	ldr	r6, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001902:	d00d      	beq.n	8001920 <HAL_DMA_IRQHandler+0x30>
 8001904:	0777      	lsls	r7, r6, #29
 8001906:	d50b      	bpl.n	8001920 <HAL_DMA_IRQHandler+0x30>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8001908:	6822      	ldr	r2, [r4, #0]
 800190a:	0692      	lsls	r2, r2, #26
 800190c:	d403      	bmi.n	8001916 <HAL_DMA_IRQHandler+0x26>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800190e:	6822      	ldr	r2, [r4, #0]
 8001910:	f022 0204 	bic.w	r2, r2, #4
 8001914:	6022      	str	r2, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001916:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
      hdma->DmaBaseAddress->IFCR  = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8001918:	606b      	str	r3, [r5, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 800191a:	b1c2      	cbz	r2, 800194e <HAL_DMA_IRQHandler+0x5e>
}
 800191c:	bcf0      	pop	{r4, r5, r6, r7}
      hdma->XferCpltCallback(hdma);
 800191e:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001920:	2302      	movs	r3, #2
 8001922:	4093      	lsls	r3, r2
 8001924:	4219      	tst	r1, r3
 8001926:	d014      	beq.n	8001952 <HAL_DMA_IRQHandler+0x62>
 8001928:	07b7      	lsls	r7, r6, #30
 800192a:	d512      	bpl.n	8001952 <HAL_DMA_IRQHandler+0x62>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800192c:	6822      	ldr	r2, [r4, #0]
 800192e:	0692      	lsls	r2, r2, #26
 8001930:	d406      	bmi.n	8001940 <HAL_DMA_IRQHandler+0x50>
    hdma->State = HAL_DMA_STATE_READY;
 8001932:	2101      	movs	r1, #1
    __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001934:	6822      	ldr	r2, [r4, #0]
 8001936:	f022 020a 	bic.w	r2, r2, #10
 800193a:	6022      	str	r2, [r4, #0]
    hdma->State = HAL_DMA_STATE_READY;
 800193c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001940:	2100      	movs	r1, #0
    if(hdma->XferCpltCallback != NULL)
 8001942:	6a82      	ldr	r2, [r0, #40]	; 0x28
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8001944:	606b      	str	r3, [r5, #4]
    __HAL_UNLOCK(hdma);
 8001946:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800194a:	2a00      	cmp	r2, #0
 800194c:	d1e6      	bne.n	800191c <HAL_DMA_IRQHandler+0x2c>
}
 800194e:	bcf0      	pop	{r4, r5, r6, r7}
 8001950:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001952:	2308      	movs	r3, #8
 8001954:	4093      	lsls	r3, r2
 8001956:	420b      	tst	r3, r1
 8001958:	d0f9      	beq.n	800194e <HAL_DMA_IRQHandler+0x5e>
 800195a:	0733      	lsls	r3, r6, #28
 800195c:	d5f7      	bpl.n	800194e <HAL_DMA_IRQHandler+0x5e>
    hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800195e:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8001960:	2700      	movs	r7, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001962:	6821      	ldr	r1, [r4, #0]
    if (hdma->XferErrorCallback != NULL)
 8001964:	6b06      	ldr	r6, [r0, #48]	; 0x30
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001966:	f021 010e 	bic.w	r1, r1, #14
    hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800196a:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800196e:	6021      	str	r1, [r4, #0]
    hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001970:	606a      	str	r2, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001972:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hdma);
 8001974:	f880 7020 	strb.w	r7, [r0, #32]
      hdma->State = HAL_DMA_STATE_READY;
 8001978:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if (hdma->XferErrorCallback != NULL)
 800197c:	2e00      	cmp	r6, #0
 800197e:	d0e6      	beq.n	800194e <HAL_DMA_IRQHandler+0x5e>
      hdma->XferErrorCallback(hdma);
 8001980:	4633      	mov	r3, r6
}
 8001982:	bcf0      	pop	{r4, r5, r6, r7}
      hdma->XferErrorCallback(hdma);
 8001984:	4718      	bx	r3
 8001986:	bf00      	nop

08001988 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001988:	f8d1 c000 	ldr.w	ip, [r1]
 800198c:	f1bc 0f00 	cmp.w	ip, #0
 8001990:	f000 80d2 	beq.w	8001b38 <HAL_GPIO_Init+0x1b0>
{ 
 8001994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001998:	4688      	mov	r8, r1
 800199a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0)
 800199c:	2500      	movs	r5, #0
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800199e:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8001b50 <HAL_GPIO_Init+0x1c8>
 80019a2:	e070      	b.n	8001a86 <HAL_GPIO_Init+0xfe>
      temp = GPIOx->MODER;
 80019a4:	f8d0 a000 	ldr.w	sl, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019a8:	f001 0403 	and.w	r4, r1, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80019ac:	ea0a 0a03 	and.w	sl, sl, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019b0:	40bc      	lsls	r4, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b2:	f10e 3eff 	add.w	lr, lr, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019b6:	ea44 040a 	orr.w	r4, r4, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ba:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 80019be:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c0:	f240 8096 	bls.w	8001af0 <HAL_GPIO_Init+0x168>
      temp = GPIOx->PUPDR;
 80019c4:	68c4      	ldr	r4, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80019c6:	f8d8 2008 	ldr.w	r2, [r8, #8]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80019ca:	4023      	ands	r3, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80019cc:	40ba      	lsls	r2, r7
 80019ce:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80019d0:	00cf      	lsls	r7, r1, #3
      GPIOx->PUPDR = temp;
 80019d2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80019d4:	d553      	bpl.n	8001a7e <HAL_GPIO_Init+0xf6>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80019d6:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d8:	4b58      	ldr	r3, [pc, #352]	; (8001b3c <HAL_GPIO_Init+0x1b4>)
 80019da:	4c58      	ldr	r4, [pc, #352]	; (8001b3c <HAL_GPIO_Init+0x1b4>)
 80019dc:	6a1a      	ldr	r2, [r3, #32]
 80019de:	f025 0303 	bic.w	r3, r5, #3
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	6222      	str	r2, [r4, #32]
 80019e8:	6a22      	ldr	r2, [r4, #32]
 80019ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019ee:	f002 0201 	and.w	r2, r2, #1
 80019f2:	9201      	str	r2, [sp, #4]
 80019f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80019f8:	f005 0203 	and.w	r2, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fc:	9c01      	ldr	r4, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80019fe:	0092      	lsls	r2, r2, #2
        temp = SYSCFG->EXTICR[position >> 2];
 8001a00:	689c      	ldr	r4, [r3, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001a02:	4097      	lsls	r7, r2
 8001a04:	ea24 0407 	bic.w	r4, r4, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a08:	4f4d      	ldr	r7, [pc, #308]	; (8001b40 <HAL_GPIO_Init+0x1b8>)
 8001a0a:	42b8      	cmp	r0, r7
 8001a0c:	f000 8086 	beq.w	8001b1c <HAL_GPIO_Init+0x194>
 8001a10:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001a14:	42b8      	cmp	r0, r7
 8001a16:	f000 8083 	beq.w	8001b20 <HAL_GPIO_Init+0x198>
 8001a1a:	4f4a      	ldr	r7, [pc, #296]	; (8001b44 <HAL_GPIO_Init+0x1bc>)
 8001a1c:	42b8      	cmp	r0, r7
 8001a1e:	f000 8083 	beq.w	8001b28 <HAL_GPIO_Init+0x1a0>
 8001a22:	4f49      	ldr	r7, [pc, #292]	; (8001b48 <HAL_GPIO_Init+0x1c0>)
 8001a24:	42b8      	cmp	r0, r7
 8001a26:	f000 8083 	beq.w	8001b30 <HAL_GPIO_Init+0x1a8>
 8001a2a:	4f48      	ldr	r7, [pc, #288]	; (8001b4c <HAL_GPIO_Init+0x1c4>)
 8001a2c:	42b8      	cmp	r0, r7
 8001a2e:	bf0c      	ite	eq
 8001a30:	2704      	moveq	r7, #4
 8001a32:	2705      	movne	r7, #5
 8001a34:	fa07 f202 	lsl.w	r2, r7, r2
 8001a38:	4322      	orrs	r2, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a3a:	609a      	str	r2, [r3, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a3c:	43f2      	mvns	r2, r6
        temp = EXTI->IMR;
 8001a3e:	f8d9 3000 	ldr.w	r3, [r9]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a42:	03cc      	lsls	r4, r1, #15
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a44:	bf54      	ite	pl
 8001a46:	4013      	andpl	r3, r2
        {
          SET_BIT(temp, iocurrent); 
 8001a48:	4333      	orrmi	r3, r6
        }
        EXTI->IMR = temp;
 8001a4a:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->EMR;
 8001a4e:	f8d9 3004 	ldr.w	r3, [r9, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a52:	038f      	lsls	r7, r1, #14
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001a54:	bf54      	ite	pl
 8001a56:	4013      	andpl	r3, r2
        {
          SET_BIT(temp, iocurrent); 
 8001a58:	4333      	orrmi	r3, r6
        }
        EXTI->EMR = temp;
 8001a5a:	f8c9 3004 	str.w	r3, [r9, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5e:	f8d9 3008 	ldr.w	r3, [r9, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a62:	02cc      	lsls	r4, r1, #11
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001a64:	bf54      	ite	pl
 8001a66:	4013      	andpl	r3, r2
        {
          SET_BIT(temp, iocurrent); 
 8001a68:	4333      	orrmi	r3, r6
        }
        EXTI->RTSR = temp;
 8001a6a:	f8c9 3008 	str.w	r3, [r9, #8]

        temp = EXTI->FTSR;
 8001a6e:	f8d9 300c 	ldr.w	r3, [r9, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a72:	0289      	lsls	r1, r1, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001a74:	bf54      	ite	pl
 8001a76:	4013      	andpl	r3, r2
        {
          SET_BIT(temp, iocurrent); 
 8001a78:	4333      	orrmi	r3, r6
        }
        EXTI->FTSR = temp;
 8001a7a:	f8c9 300c 	str.w	r3, [r9, #12]
      }
    }
    
    position++;
 8001a7e:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a80:	fa3c f305 	lsrs.w	r3, ip, r5
 8001a84:	d047      	beq.n	8001b16 <HAL_GPIO_Init+0x18e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a86:	2301      	movs	r3, #1
 8001a88:	fa03 f205 	lsl.w	r2, r3, r5
    if(iocurrent)
 8001a8c:	ea12 060c 	ands.w	r6, r2, ip
 8001a90:	d0f5      	beq.n	8001a7e <HAL_GPIO_Init+0xf6>
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001a92:	2303      	movs	r3, #3
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001a94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8001a98:	006f      	lsls	r7, r5, #1
 8001a9a:	f021 0e10 	bic.w	lr, r1, #16
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001a9e:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001aa0:	f1be 0f02 	cmp.w	lr, #2
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001aa4:	ea6f 0303 	mvn.w	r3, r3
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001aa8:	f47f af7c 	bne.w	80019a4 <HAL_GPIO_Init+0x1c>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001aac:	f04f 0a0f 	mov.w	sl, #15
        temp = GPIOx->AFR[position >> 3];
 8001ab0:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 8001ab4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001ab8:	f005 0b07 	and.w	fp, r5, #7
        temp = GPIOx->AFR[position >> 3];
 8001abc:	f8de 4020 	ldr.w	r4, [lr, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001ac0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001ac4:	fa0a fa0b 	lsl.w	sl, sl, fp
 8001ac8:	ea24 0a0a 	bic.w	sl, r4, sl
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001acc:	f8d8 4010 	ldr.w	r4, [r8, #16]
 8001ad0:	fa04 f40b 	lsl.w	r4, r4, fp
 8001ad4:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3] = temp;
 8001ad8:	f8ce 4020 	str.w	r4, [lr, #32]
      temp = GPIOx->MODER;
 8001adc:	f8d0 e000 	ldr.w	lr, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ae0:	f001 0403 	and.w	r4, r1, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001ae4:	ea0e 0e03 	and.w	lr, lr, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ae8:	40bc      	lsls	r4, r7
 8001aea:	ea44 040e 	orr.w	r4, r4, lr
      GPIOx->MODER = temp;
 8001aee:	6004      	str	r4, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8001af0:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001af2:	ea04 0e03 	and.w	lr, r4, r3
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001af6:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8001afa:	40bc      	lsls	r4, r7
 8001afc:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->OSPEEDR = temp;
 8001b00:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001b02:	f8d0 e004 	ldr.w	lr, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b06:	f3c1 1400 	ubfx	r4, r1, #4, #1
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001b0a:	ea2e 0202 	bic.w	r2, lr, r2
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b0e:	40ac      	lsls	r4, r5
 8001b10:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8001b12:	6044      	str	r4, [r0, #4]
 8001b14:	e756      	b.n	80019c4 <HAL_GPIO_Init+0x3c>
  } 
}
 8001b16:	b003      	add	sp, #12
 8001b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	e78b      	b.n	8001a38 <HAL_GPIO_Init+0xb0>
 8001b20:	2701      	movs	r7, #1
 8001b22:	fa07 f202 	lsl.w	r2, r7, r2
 8001b26:	e787      	b.n	8001a38 <HAL_GPIO_Init+0xb0>
 8001b28:	2702      	movs	r7, #2
 8001b2a:	fa07 f202 	lsl.w	r2, r7, r2
 8001b2e:	e783      	b.n	8001a38 <HAL_GPIO_Init+0xb0>
 8001b30:	2703      	movs	r7, #3
 8001b32:	fa07 f202 	lsl.w	r2, r7, r2
 8001b36:	e77f      	b.n	8001a38 <HAL_GPIO_Init+0xb0>
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40020800 	.word	0x40020800
 8001b48:	40020c00 	.word	0x40020c00
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010400 	.word	0x40010400

08001b54 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b54:	b902      	cbnz	r2, 8001b58 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001b56:	0409      	lsls	r1, r1, #16
 8001b58:	6181      	str	r1, [r0, #24]
 8001b5a:	4770      	bx	lr

08001b5c <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0x78>)
{
 8001b5e:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8001b66:	d116      	bne.n	8001b96 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b6a:	00d2      	lsls	r2, r2, #3
 8001b6c:	d420      	bmi.n	8001bb0 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b70:	4919      	ldr	r1, [pc, #100]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
 8001b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b7a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001b7e:	9201      	str	r2, [sp, #4]
 8001b80:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b82:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b84:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b86:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8a:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    }
    
    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001b8e:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b92:	6259      	str	r1, [r3, #36]	; 0x24
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001b94:	d013      	beq.n	8001bbe <RCC_SetFlashLatencyFromMSIRange+0x62>
{
 8001b96:	2100      	movs	r1, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8001b98:	4a10      	ldr	r2, [pc, #64]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001b9a:	6813      	ldr	r3, [r2, #0]
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	6013      	str	r3, [r2, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001ba4:	6810      	ldr	r0, [r2, #0]
 8001ba6:	f000 0001 	and.w	r0, r0, #1
 8001baa:	4048      	eors	r0, r1
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8001bac:	b002      	add	sp, #8
 8001bae:	4770      	bx	lr
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001bb8:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8001bbc:	d1eb      	bne.n	8001b96 <RCC_SetFlashLatencyFromMSIRange+0x3a>
 8001bbe:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8001bc2:	d1e8      	bne.n	8001b96 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  __HAL_FLASH_SET_LATENCY(latency);
 8001bc4:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0x80>)
      latency = FLASH_LATENCY_1; /* 1WS */
 8001bc6:	2101      	movs	r1, #1
  __HAL_FLASH_SET_LATENCY(latency);
 8001bc8:	6813      	ldr	r3, [r2, #0]
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e7e2      	b.n	8001b98 <RCC_SetFlashLatencyFromMSIRange+0x3c>
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40007000 	.word	0x40007000
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <HAL_RCC_OscConfig>:
{
 8001be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be4:	6803      	ldr	r3, [r0, #0]
{
 8001be6:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be8:	07d8      	lsls	r0, r3, #31
{
 8001bea:	b083      	sub	sp, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bec:	d53b      	bpl.n	8001c66 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bee:	49bb      	ldr	r1, [pc, #748]	; (8001edc <HAL_RCC_OscConfig+0x2fc>)
 8001bf0:	688a      	ldr	r2, [r1, #8]
 8001bf2:	f002 020c 	and.w	r2, r2, #12
 8001bf6:	2a08      	cmp	r2, #8
 8001bf8:	f000 81cc 	beq.w	8001f94 <HAL_RCC_OscConfig+0x3b4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bfc:	688a      	ldr	r2, [r1, #8]
 8001bfe:	f002 020c 	and.w	r2, r2, #12
 8001c02:	2a0c      	cmp	r2, #12
 8001c04:	f000 81c2 	beq.w	8001f8c <HAL_RCC_OscConfig+0x3ac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c08:	6863      	ldr	r3, [r4, #4]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	f000 828a 	beq.w	8002124 <HAL_RCC_OscConfig+0x544>
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 8221 	beq.w	8002058 <HAL_RCC_OscConfig+0x478>
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	4bb0      	ldr	r3, [pc, #704]	; (8001edc <HAL_RCC_OscConfig+0x2fc>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	f000 8363 	beq.w	80022e6 <HAL_RCC_OscConfig+0x706>
 8001c20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c2e:	f7ff f9d5 	bl	8000fdc <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8001c36:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c38:	4ea8      	ldr	r6, [pc, #672]	; (8001edc <HAL_RCC_OscConfig+0x2fc>)
 8001c3a:	2501      	movs	r5, #1
 8001c3c:	e005      	b.n	8001c4a <HAL_RCC_OscConfig+0x6a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3e:	f7ff f9cd 	bl	8000fdc <HAL_GetTick>
 8001c42:	1bc0      	subs	r0, r0, r7
 8001c44:	2864      	cmp	r0, #100	; 0x64
 8001c46:	f200 823c 	bhi.w	80020c2 <HAL_RCC_OscConfig+0x4e2>
 8001c4a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	6832      	ldr	r2, [r6, #0]
 8001c50:	fa98 f3a8 	rbit	r3, r8
 8001c54:	fab3 f383 	clz	r3, r3
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	fa05 f303 	lsl.w	r3, r5, r3
 8001c60:	4213      	tst	r3, r2
 8001c62:	d0ec      	beq.n	8001c3e <HAL_RCC_OscConfig+0x5e>
 8001c64:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	079a      	lsls	r2, r3, #30
 8001c68:	d543      	bpl.n	8001cf2 <HAL_RCC_OscConfig+0x112>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c6a:	499c      	ldr	r1, [pc, #624]	; (8001edc <HAL_RCC_OscConfig+0x2fc>)
 8001c6c:	688a      	ldr	r2, [r1, #8]
 8001c6e:	f002 020c 	and.w	r2, r2, #12
 8001c72:	2a04      	cmp	r2, #4
 8001c74:	f000 822d 	beq.w	80020d2 <HAL_RCC_OscConfig+0x4f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c78:	688a      	ldr	r2, [r1, #8]
 8001c7a:	f002 020c 	and.w	r2, r2, #12
 8001c7e:	2a0c      	cmp	r2, #12
 8001c80:	f000 8223 	beq.w	80020ca <HAL_RCC_OscConfig+0x4ea>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c84:	68e2      	ldr	r2, [r4, #12]
 8001c86:	2501      	movs	r5, #1
 8001c88:	2a00      	cmp	r2, #0
 8001c8a:	f000 819d 	beq.w	8001fc8 <HAL_RCC_OscConfig+0x3e8>
 8001c8e:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c9a:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001ca2:	f7ff f99b 	bl	8000fdc <HAL_GetTick>
 8001ca6:	f04f 0802 	mov.w	r8, #2
 8001caa:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cac:	4e8b      	ldr	r6, [pc, #556]	; (8001edc <HAL_RCC_OscConfig+0x2fc>)
 8001cae:	e005      	b.n	8001cbc <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb0:	f7ff f994 	bl	8000fdc <HAL_GetTick>
 8001cb4:	1bc0      	subs	r0, r0, r7
 8001cb6:	2802      	cmp	r0, #2
 8001cb8:	f200 8203 	bhi.w	80020c2 <HAL_RCC_OscConfig+0x4e2>
 8001cbc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	6832      	ldr	r2, [r6, #0]
 8001cc2:	fa98 f3a8 	rbit	r3, r8
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	fa05 f303 	lsl.w	r3, r5, r3
 8001cd2:	4213      	tst	r3, r2
 8001cd4:	d0ec      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xd0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd6:	6871      	ldr	r1, [r6, #4]
 8001cd8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	fab3 f283 	clz	r2, r3
 8001ce4:	6923      	ldr	r3, [r4, #16]
 8001ce6:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
 8001cea:	4093      	lsls	r3, r2
 8001cec:	430b      	orrs	r3, r1
 8001cee:	6073      	str	r3, [r6, #4]
 8001cf0:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cf2:	06de      	lsls	r6, r3, #27
 8001cf4:	f100 80ad 	bmi.w	8001e52 <HAL_RCC_OscConfig+0x272>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf8:	071d      	lsls	r5, r3, #28
 8001cfa:	d528      	bpl.n	8001d4e <HAL_RCC_OscConfig+0x16e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfc:	6962      	ldr	r2, [r4, #20]
 8001cfe:	2a00      	cmp	r2, #0
 8001d00:	f000 8187 	beq.w	8002012 <HAL_RCC_OscConfig+0x432>
 8001d04:	2201      	movs	r2, #1
 8001d06:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8001d0a:	fab1 f181 	clz	r1, r1
 8001d0e:	4b74      	ldr	r3, [pc, #464]	; (8001ee0 <HAL_RCC_OscConfig+0x300>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d10:	4616      	mov	r6, r2
      __HAL_RCC_LSI_ENABLE();
 8001d12:	440b      	add	r3, r1
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d18:	f7ff f960 	bl	8000fdc <HAL_GetTick>
 8001d1c:	f04f 0802 	mov.w	r8, #2
 8001d20:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	4d6e      	ldr	r5, [pc, #440]	; (8001edc <HAL_RCC_OscConfig+0x2fc>)
 8001d24:	e005      	b.n	8001d32 <HAL_RCC_OscConfig+0x152>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d26:	f7ff f959 	bl	8000fdc <HAL_GetTick>
 8001d2a:	1bc0      	subs	r0, r0, r7
 8001d2c:	2802      	cmp	r0, #2
 8001d2e:	f200 81c8 	bhi.w	80020c2 <HAL_RCC_OscConfig+0x4e2>
 8001d32:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d36:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001d38:	fa98 f3a8 	rbit	r3, r8
 8001d3c:	fab3 f383 	clz	r3, r3
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	fa06 f303 	lsl.w	r3, r6, r3
 8001d48:	4213      	tst	r3, r2
 8001d4a:	d0ec      	beq.n	8001d26 <HAL_RCC_OscConfig+0x146>
 8001d4c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4e:	0758      	lsls	r0, r3, #29
 8001d50:	d548      	bpl.n	8001de4 <HAL_RCC_OscConfig+0x204>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d52:	4b62      	ldr	r3, [pc, #392]	; (8001edc <HAL_RCC_OscConfig+0x2fc>)
 8001d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d56:	00d1      	lsls	r1, r2, #3
 8001d58:	f100 81e1 	bmi.w	800211e <HAL_RCC_OscConfig+0x53e>
      pwrclkchanged = SET;
 8001d5c:	f04f 0801 	mov.w	r8, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d72:	4b5c      	ldr	r3, [pc, #368]	; (8001ee4 <HAL_RCC_OscConfig+0x304>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	05d2      	lsls	r2, r2, #23
 8001d78:	f140 8192 	bpl.w	80020a0 <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7c:	68a3      	ldr	r3, [r4, #8]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	f000 8254 	beq.w	800222c <HAL_RCC_OscConfig+0x64c>
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 81f8 	beq.w	800217a <HAL_RCC_OscConfig+0x59a>
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	4b53      	ldr	r3, [pc, #332]	; (8001edc <HAL_RCC_OscConfig+0x2fc>)
 8001d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d90:	f000 823c 	beq.w	800220c <HAL_RCC_OscConfig+0x62c>
 8001d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d98:	635a      	str	r2, [r3, #52]	; 0x34
 8001d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da0:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001da2:	f7ff f91b 	bl	8000fdc <HAL_GetTick>
 8001da6:	f44f 7900 	mov.w	r9, #512	; 0x200
 8001daa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dac:	4e4b      	ldr	r6, [pc, #300]	; (8001edc <HAL_RCC_OscConfig+0x2fc>)
 8001dae:	2501      	movs	r5, #1
 8001db0:	e007      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db2:	f7ff f913 	bl	8000fdc <HAL_GetTick>
 8001db6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dba:	1bc0      	subs	r0, r0, r7
 8001dbc:	4298      	cmp	r0, r3
 8001dbe:	f200 8180 	bhi.w	80020c2 <HAL_RCC_OscConfig+0x4e2>
 8001dc2:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc6:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8001dc8:	fa99 f3a9 	rbit	r3, r9
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	fa05 f303 	lsl.w	r3, r5, r3
 8001dd8:	4213      	tst	r3, r2
 8001dda:	d0ea      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1d2>
    if(pwrclkchanged == SET)
 8001ddc:	f1b8 0f00 	cmp.w	r8, #0
 8001de0:	f040 820e 	bne.w	8002200 <HAL_RCC_OscConfig+0x620>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001de6:	b383      	cbz	r3, 8001e4a <HAL_RCC_OscConfig+0x26a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de8:	4d3c      	ldr	r5, [pc, #240]	; (8001edc <HAL_RCC_OscConfig+0x2fc>)
 8001dea:	68aa      	ldr	r2, [r5, #8]
 8001dec:	f002 020c 	and.w	r2, r2, #12
 8001df0:	2a0c      	cmp	r2, #12
 8001df2:	f000 80e5 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x3e0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dfc:	f000 821c 	beq.w	8002238 <HAL_RCC_OscConfig+0x658>
 8001e00:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e0e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e16:	f7ff f8e1 	bl	8000fdc <HAL_GetTick>
 8001e1a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001e1e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e20:	2601      	movs	r6, #1
 8001e22:	e005      	b.n	8001e30 <HAL_RCC_OscConfig+0x250>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e24:	f7ff f8da 	bl	8000fdc <HAL_GetTick>
 8001e28:	1bc0      	subs	r0, r0, r7
 8001e2a:	2802      	cmp	r0, #2
 8001e2c:	f200 8149 	bhi.w	80020c2 <HAL_RCC_OscConfig+0x4e2>
 8001e30:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e34:	682a      	ldr	r2, [r5, #0]
 8001e36:	fa94 f3a4 	rbit	r3, r4
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	fa06 f303 	lsl.w	r3, r6, r3
 8001e46:	4213      	tst	r3, r2
 8001e48:	d1ec      	bne.n	8001e24 <HAL_RCC_OscConfig+0x244>
  return HAL_OK;
 8001e4a:	2000      	movs	r0, #0
}
 8001e4c:	b003      	add	sp, #12
 8001e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001e52:	4d22      	ldr	r5, [pc, #136]	; (8001edc <HAL_RCC_OscConfig+0x2fc>)
 8001e54:	68ab      	ldr	r3, [r5, #8]
 8001e56:	f013 0f0c 	tst.w	r3, #12
 8001e5a:	d045      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x308>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e5c:	69a2      	ldr	r2, [r4, #24]
 8001e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e62:	2a00      	cmp	r2, #0
 8001e64:	f000 8164 	beq.w	8002130 <HAL_RCC_OscConfig+0x550>
 8001e68:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	2601      	movs	r6, #1
 8001e72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e76:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001e7e:	f7ff f8ad 	bl	8000fdc <HAL_GetTick>
 8001e82:	f44f 7800 	mov.w	r8, #512	; 0x200
 8001e86:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001e88:	e005      	b.n	8001e96 <HAL_RCC_OscConfig+0x2b6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e8a:	f7ff f8a7 	bl	8000fdc <HAL_GetTick>
 8001e8e:	1bc0      	subs	r0, r0, r7
 8001e90:	2802      	cmp	r0, #2
 8001e92:	f200 8116 	bhi.w	80020c2 <HAL_RCC_OscConfig+0x4e2>
 8001e96:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001e9a:	682a      	ldr	r2, [r5, #0]
 8001e9c:	fa98 f3a8 	rbit	r3, r8
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	fa06 f303 	lsl.w	r3, r6, r3
 8001eac:	4213      	tst	r3, r2
 8001eae:	d0ec      	beq.n	8001e8a <HAL_RCC_OscConfig+0x2aa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb0:	686b      	ldr	r3, [r5, #4]
 8001eb2:	6a22      	ldr	r2, [r4, #32]
 8001eb4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ebc:	6869      	ldr	r1, [r5, #4]
 8001ebe:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	fab3 f283 	clz	r2, r3
 8001eca:	69e3      	ldr	r3, [r4, #28]
 8001ecc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001ed0:	4093      	lsls	r3, r2
 8001ed2:	430b      	orrs	r3, r1
 8001ed4:	606b      	str	r3, [r5, #4]
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	e70e      	b.n	8001cf8 <HAL_RCC_OscConfig+0x118>
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	1091c1a0 	.word	0x1091c1a0
 8001ee4:	40007000 	.word	0x40007000
 8001ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eec:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ef0:	6829      	ldr	r1, [r5, #0]
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	2201      	movs	r2, #1
 8001efc:	f003 031f 	and.w	r3, r3, #31
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	420b      	tst	r3, r1
 8001f06:	d002      	beq.n	8001f0e <HAL_RCC_OscConfig+0x32e>
 8001f08:	69a3      	ldr	r3, [r4, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d058      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x3e0>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f0e:	4dc3      	ldr	r5, [pc, #780]	; (800221c <HAL_RCC_OscConfig+0x63c>)
 8001f10:	6a20      	ldr	r0, [r4, #32]
 8001f12:	686b      	ldr	r3, [r5, #4]
 8001f14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001f18:	4298      	cmp	r0, r3
 8001f1a:	f240 8158 	bls.w	80021ce <HAL_RCC_OscConfig+0x5ee>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f1e:	f7ff fe1d 	bl	8001b5c <RCC_SetFlashLatencyFromMSIRange>
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d14c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x3e0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f26:	686a      	ldr	r2, [r5, #4]
 8001f28:	6a23      	ldr	r3, [r4, #32]
 8001f2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	606a      	str	r2, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f32:	6868      	ldr	r0, [r5, #4]
 8001f34:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001f38:	fa92 f2a2 	rbit	r2, r2
 8001f3c:	fab2 f182 	clz	r1, r2
 8001f40:	69e2      	ldr	r2, [r4, #28]
 8001f42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001f46:	408a      	lsls	r2, r1
 8001f48:	4302      	orrs	r2, r0
 8001f4a:	606a      	str	r2, [r5, #4]
 8001f4c:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8001f50:	fa90 f0a0 	rbit	r0, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001f54:	4ab1      	ldr	r2, [pc, #708]	; (800221c <HAL_RCC_OscConfig+0x63c>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001f56:	fab0 f080 	clz	r0, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001f5a:	6891      	ldr	r1, [r2, #8]
 8001f5c:	25f0      	movs	r5, #240	; 0xf0
 8001f5e:	fa95 f5a5 	rbit	r5, r5
 8001f62:	fab5 f585 	clz	r5, r5
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001f66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001f6a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8001f6e:	4eac      	ldr	r6, [pc, #688]	; (8002220 <HAL_RCC_OscConfig+0x640>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001f70:	40c3      	lsrs	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001f72:	40e9      	lsrs	r1, r5
 8001f74:	5c71      	ldrb	r1, [r6, r1]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001f76:	3301      	adds	r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	4aa9      	ldr	r2, [pc, #676]	; (8002224 <HAL_RCC_OscConfig+0x644>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001f7e:	40cb      	lsrs	r3, r1
        HAL_InitTick (TICK_INT_PRIORITY);
 8001f80:	2000      	movs	r0, #0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001f82:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001f84:	f7ff f800 	bl	8000f88 <HAL_InitTick>
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	e6b5      	b.n	8001cf8 <HAL_RCC_OscConfig+0x118>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f8c:	688a      	ldr	r2, [r1, #8]
 8001f8e:	03d1      	lsls	r1, r2, #15
 8001f90:	f57f ae3a 	bpl.w	8001c08 <HAL_RCC_OscConfig+0x28>
 8001f94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f98:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9c:	499f      	ldr	r1, [pc, #636]	; (800221c <HAL_RCC_OscConfig+0x63c>)
 8001f9e:	6808      	ldr	r0, [r1, #0]
 8001fa0:	fa92 f2a2 	rbit	r2, r2
 8001fa4:	fab2 f282 	clz	r2, r2
 8001fa8:	2101      	movs	r1, #1
 8001faa:	f002 021f 	and.w	r2, r2, #31
 8001fae:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb2:	4202      	tst	r2, r0
 8001fb4:	f43f ae57 	beq.w	8001c66 <HAL_RCC_OscConfig+0x86>
 8001fb8:	6862      	ldr	r2, [r4, #4]
 8001fba:	2a00      	cmp	r2, #0
 8001fbc:	f47f ae53 	bne.w	8001c66 <HAL_RCC_OscConfig+0x86>
        return HAL_ERROR;
 8001fc0:	2001      	movs	r0, #1
}
 8001fc2:	b003      	add	sp, #12
 8001fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fc8:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fd4:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fffe 	bl	8000fdc <HAL_GetTick>
 8001fe0:	f04f 0802 	mov.w	r8, #2
 8001fe4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	4e8d      	ldr	r6, [pc, #564]	; (800221c <HAL_RCC_OscConfig+0x63c>)
 8001fe8:	e004      	b.n	8001ff4 <HAL_RCC_OscConfig+0x414>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fea:	f7fe fff7 	bl	8000fdc <HAL_GetTick>
 8001fee:	1bc0      	subs	r0, r0, r7
 8001ff0:	2802      	cmp	r0, #2
 8001ff2:	d866      	bhi.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
 8001ff4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff8:	6832      	ldr	r2, [r6, #0]
 8001ffa:	fa98 f3a8 	rbit	r3, r8
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	fa05 f303 	lsl.w	r3, r5, r3
 800200a:	4213      	tst	r3, r2
 800200c:	d1ed      	bne.n	8001fea <HAL_RCC_OscConfig+0x40a>
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	e66f      	b.n	8001cf2 <HAL_RCC_OscConfig+0x112>
 8002012:	2501      	movs	r5, #1
 8002014:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8002018:	fab1 f181 	clz	r1, r1
 800201c:	4b82      	ldr	r3, [pc, #520]	; (8002228 <HAL_RCC_OscConfig+0x648>)
 800201e:	f04f 0802 	mov.w	r8, #2
 8002022:	440b      	add	r3, r1
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002028:	f7fe ffd8 	bl	8000fdc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202c:	4e7b      	ldr	r6, [pc, #492]	; (800221c <HAL_RCC_OscConfig+0x63c>)
      tickstart = HAL_GetTick();
 800202e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	e004      	b.n	800203c <HAL_RCC_OscConfig+0x45c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002032:	f7fe ffd3 	bl	8000fdc <HAL_GetTick>
 8002036:	1bc0      	subs	r0, r0, r7
 8002038:	2802      	cmp	r0, #2
 800203a:	d842      	bhi.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
 800203c:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002040:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8002042:	fa98 f3a8 	rbit	r3, r8
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	fa05 f303 	lsl.w	r3, r5, r3
 8002052:	4213      	tst	r3, r2
 8002054:	d1ed      	bne.n	8002032 <HAL_RCC_OscConfig+0x452>
 8002056:	e679      	b.n	8001d4c <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002058:	4b70      	ldr	r3, [pc, #448]	; (800221c <HAL_RCC_OscConfig+0x63c>)
 800205a:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 800205e:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002060:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002062:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206a:	2501      	movs	r5, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002070:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002072:	f7fe ffb3 	bl	8000fdc <HAL_GetTick>
 8002076:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002078:	e004      	b.n	8002084 <HAL_RCC_OscConfig+0x4a4>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800207a:	f7fe ffaf 	bl	8000fdc <HAL_GetTick>
 800207e:	1bc0      	subs	r0, r0, r7
 8002080:	2864      	cmp	r0, #100	; 0x64
 8002082:	d81e      	bhi.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
 8002084:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002088:	6832      	ldr	r2, [r6, #0]
 800208a:	fa98 f3a8 	rbit	r3, r8
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	fa05 f303 	lsl.w	r3, r5, r3
 800209a:	4213      	tst	r3, r2
 800209c:	d1ed      	bne.n	800207a <HAL_RCC_OscConfig+0x49a>
 800209e:	e5e1      	b.n	8001c64 <HAL_RCC_OscConfig+0x84>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a0:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a2:	461d      	mov	r5, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020a8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80020aa:	f7fe ff97 	bl	8000fdc <HAL_GetTick>
 80020ae:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	682b      	ldr	r3, [r5, #0]
 80020b2:	05db      	lsls	r3, r3, #23
 80020b4:	f53f ae62 	bmi.w	8001d7c <HAL_RCC_OscConfig+0x19c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b8:	f7fe ff90 	bl	8000fdc <HAL_GetTick>
 80020bc:	1b80      	subs	r0, r0, r6
 80020be:	2864      	cmp	r0, #100	; 0x64
 80020c0:	d9f6      	bls.n	80020b0 <HAL_RCC_OscConfig+0x4d0>
            return HAL_TIMEOUT;
 80020c2:	2003      	movs	r0, #3
}
 80020c4:	b003      	add	sp, #12
 80020c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020ca:	688a      	ldr	r2, [r1, #8]
 80020cc:	03d7      	lsls	r7, r2, #15
 80020ce:	f53f add9 	bmi.w	8001c84 <HAL_RCC_OscConfig+0xa4>
 80020d2:	2202      	movs	r2, #2
 80020d4:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d8:	4950      	ldr	r1, [pc, #320]	; (800221c <HAL_RCC_OscConfig+0x63c>)
 80020da:	6808      	ldr	r0, [r1, #0]
 80020dc:	fa92 f2a2 	rbit	r2, r2
 80020e0:	fab2 f282 	clz	r2, r2
 80020e4:	2101      	movs	r1, #1
 80020e6:	f002 021f 	and.w	r2, r2, #31
 80020ea:	fa01 f202 	lsl.w	r2, r1, r2
 80020ee:	4202      	tst	r2, r0
 80020f0:	d003      	beq.n	80020fa <HAL_RCC_OscConfig+0x51a>
 80020f2:	68e2      	ldr	r2, [r4, #12]
 80020f4:	428a      	cmp	r2, r1
 80020f6:	f47f af63 	bne.w	8001fc0 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fa:	4d48      	ldr	r5, [pc, #288]	; (800221c <HAL_RCC_OscConfig+0x63c>)
 80020fc:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8002100:	6868      	ldr	r0, [r5, #4]
 8002102:	fa92 f2a2 	rbit	r2, r2
 8002106:	fab2 f182 	clz	r1, r2
 800210a:	6922      	ldr	r2, [r4, #16]
 800210c:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
 8002110:	408a      	lsls	r2, r1
 8002112:	4302      	orrs	r2, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002114:	06de      	lsls	r6, r3, #27
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002116:	606a      	str	r2, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002118:	f57f adee 	bpl.w	8001cf8 <HAL_RCC_OscConfig+0x118>
 800211c:	e699      	b.n	8001e52 <HAL_RCC_OscConfig+0x272>
    FlagStatus       pwrclkchanged = RESET;
 800211e:	f04f 0800 	mov.w	r8, #0
 8002122:	e626      	b.n	8001d72 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002124:	4a3d      	ldr	r2, [pc, #244]	; (800221c <HAL_RCC_OscConfig+0x63c>)
 8002126:	6813      	ldr	r3, [r2, #0]
 8002128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e57e      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e>
 8002130:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800213c:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002144:	f7fe ff4a 	bl	8000fdc <HAL_GetTick>
 8002148:	f44f 7800 	mov.w	r8, #512	; 0x200
 800214c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 800214e:	2601      	movs	r6, #1
 8002150:	e004      	b.n	800215c <HAL_RCC_OscConfig+0x57c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002152:	f7fe ff43 	bl	8000fdc <HAL_GetTick>
 8002156:	1bc0      	subs	r0, r0, r7
 8002158:	2802      	cmp	r0, #2
 800215a:	d8b2      	bhi.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
 800215c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8002160:	682a      	ldr	r2, [r5, #0]
 8002162:	fa98 f3a8 	rbit	r3, r8
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	fa06 f303 	lsl.w	r3, r6, r3
 8002172:	4213      	tst	r3, r2
 8002174:	d1ed      	bne.n	8002152 <HAL_RCC_OscConfig+0x572>
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	e5be      	b.n	8001cf8 <HAL_RCC_OscConfig+0x118>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217a:	4b28      	ldr	r3, [pc, #160]	; (800221c <HAL_RCC_OscConfig+0x63c>)
 800217c:	f44f 7900 	mov.w	r9, #512	; 0x200
 8002180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002182:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002188:	635a      	str	r2, [r3, #52]	; 0x34
 800218a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218c:	2501      	movs	r5, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002192:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002194:	f7fe ff22 	bl	8000fdc <HAL_GetTick>
 8002198:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219a:	e006      	b.n	80021aa <HAL_RCC_OscConfig+0x5ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7fe ff1e 	bl	8000fdc <HAL_GetTick>
 80021a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80021a4:	1bc0      	subs	r0, r0, r7
 80021a6:	4298      	cmp	r0, r3
 80021a8:	d88b      	bhi.n	80020c2 <HAL_RCC_OscConfig+0x4e2>
 80021aa:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ae:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80021b0:	fa99 f3a9 	rbit	r3, r9
 80021b4:	fab3 f383 	clz	r3, r3
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	fa05 f303 	lsl.w	r3, r5, r3
 80021c0:	4213      	tst	r3, r2
 80021c2:	d1eb      	bne.n	800219c <HAL_RCC_OscConfig+0x5bc>
    if(pwrclkchanged == SET)
 80021c4:	f1b8 0f00 	cmp.w	r8, #0
 80021c8:	f43f ae0c 	beq.w	8001de4 <HAL_RCC_OscConfig+0x204>
 80021cc:	e018      	b.n	8002200 <HAL_RCC_OscConfig+0x620>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ce:	686a      	ldr	r2, [r5, #4]
 80021d0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80021d4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021d8:	4302      	orrs	r2, r0
 80021da:	606a      	str	r2, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021dc:	6869      	ldr	r1, [r5, #4]
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	fab3 f283 	clz	r2, r3
 80021e6:	69e3      	ldr	r3, [r4, #28]
 80021e8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80021ec:	4093      	lsls	r3, r2
 80021ee:	430b      	orrs	r3, r1
 80021f0:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021f2:	f7ff fcb3 	bl	8001b5c <RCC_SetFlashLatencyFromMSIRange>
 80021f6:	2800      	cmp	r0, #0
 80021f8:	f47f aee2 	bne.w	8001fc0 <HAL_RCC_OscConfig+0x3e0>
 80021fc:	6a23      	ldr	r3, [r4, #32]
 80021fe:	e6a5      	b.n	8001f4c <HAL_RCC_OscConfig+0x36c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002200:	4a06      	ldr	r2, [pc, #24]	; (800221c <HAL_RCC_OscConfig+0x63c>)
 8002202:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002208:	6253      	str	r3, [r2, #36]	; 0x24
 800220a:	e5eb      	b.n	8001de4 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800220c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002210:	635a      	str	r2, [r3, #52]	; 0x34
 8002212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002218:	635a      	str	r2, [r3, #52]	; 0x34
 800221a:	e5c2      	b.n	8001da2 <HAL_RCC_OscConfig+0x1c2>
 800221c:	40023800 	.word	0x40023800
 8002220:	08003478 	.word	0x08003478
 8002224:	20000008 	.word	0x20000008
 8002228:	1091c1a0 	.word	0x1091c1a0
 800222c:	4a32      	ldr	r2, [pc, #200]	; (80022f8 <HAL_RCC_OscConfig+0x718>)
 800222e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002234:	6353      	str	r3, [r2, #52]	; 0x34
 8002236:	e5b4      	b.n	8001da2 <HAL_RCC_OscConfig+0x1c2>
 8002238:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	2200      	movs	r2, #0
 8002242:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002246:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800224e:	f7fe fec5 	bl	8000fdc <HAL_GetTick>
 8002252:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8002256:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002258:	2601      	movs	r6, #1
 800225a:	e005      	b.n	8002268 <HAL_RCC_OscConfig+0x688>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225c:	f7fe febe 	bl	8000fdc <HAL_GetTick>
 8002260:	1bc0      	subs	r0, r0, r7
 8002262:	2802      	cmp	r0, #2
 8002264:	f63f af2d 	bhi.w	80020c2 <HAL_RCC_OscConfig+0x4e2>
 8002268:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226c:	682a      	ldr	r2, [r5, #0]
 800226e:	fa98 f3a8 	rbit	r3, r8
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	fa06 f303 	lsl.w	r3, r6, r3
 800227e:	4213      	tst	r3, r2
 8002280:	d1ec      	bne.n	800225c <HAL_RCC_OscConfig+0x67c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002282:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002284:	68aa      	ldr	r2, [r5, #8]
 8002286:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002288:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800228c:	430b      	orrs	r3, r1
 800228e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002290:	4313      	orrs	r3, r2
 8002292:	430b      	orrs	r3, r1
 8002294:	60ab      	str	r3, [r5, #8]
 8002296:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800229a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022a6:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80022ae:	f7fe fe95 	bl	8000fdc <HAL_GetTick>
 80022b2:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80022b6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b8:	4e0f      	ldr	r6, [pc, #60]	; (80022f8 <HAL_RCC_OscConfig+0x718>)
 80022ba:	2501      	movs	r5, #1
 80022bc:	e005      	b.n	80022ca <HAL_RCC_OscConfig+0x6ea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022be:	f7fe fe8d 	bl	8000fdc <HAL_GetTick>
 80022c2:	1bc0      	subs	r0, r0, r7
 80022c4:	2802      	cmp	r0, #2
 80022c6:	f63f aefc 	bhi.w	80020c2 <HAL_RCC_OscConfig+0x4e2>
 80022ca:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ce:	6832      	ldr	r2, [r6, #0]
 80022d0:	fa94 f3a4 	rbit	r3, r4
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	fa05 f303 	lsl.w	r3, r5, r3
 80022e0:	4213      	tst	r3, r2
 80022e2:	d0ec      	beq.n	80022be <HAL_RCC_OscConfig+0x6de>
 80022e4:	e5b1      	b.n	8001e4a <HAL_RCC_OscConfig+0x26a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	e49b      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e>
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800

080022fc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80022fc:	491f      	ldr	r1, [pc, #124]	; (800237c <HAL_RCC_GetSysClockFreq+0x80>)
 80022fe:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8002300:	f003 020c 	and.w	r2, r3, #12
 8002304:	2a08      	cmp	r2, #8
 8002306:	d036      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0x7a>
 8002308:	2a0c      	cmp	r2, #12
 800230a:	d012      	beq.n	8002332 <HAL_RCC_GetSysClockFreq+0x36>
 800230c:	2a04      	cmp	r2, #4
 800230e:	d00e      	beq.n	800232e <HAL_RCC_GetSysClockFreq+0x32>
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8002310:	684b      	ldr	r3, [r1, #4]
 8002312:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002316:	fa92 f2a2 	rbit	r2, r2
 800231a:	fab2 f282 	clz	r2, r2
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 800231e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8002322:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002326:	40d3      	lsrs	r3, r2
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8002328:	3301      	adds	r3, #1
 800232a:	4098      	lsls	r0, r3
 800232c:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
 800232e:	4814      	ldr	r0, [pc, #80]	; (8002380 <HAL_RCC_GetSysClockFreq+0x84>)
  return sysclockfreq;
 8002330:	4770      	bx	lr
{
 8002332:	b410      	push	{r4}
 8002334:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002338:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800233c:	fab2 f282 	clz	r2, r2
 8002340:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8002344:	4c0f      	ldr	r4, [pc, #60]	; (8002384 <HAL_RCC_GetSysClockFreq+0x88>)
 8002346:	fa20 f202 	lsr.w	r2, r0, r2
 800234a:	5ca4      	ldrb	r4, [r4, r2]
 800234c:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8002350:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8002354:	fab0 f280 	clz	r2, r0
 8002358:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800235c:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 800235e:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002360:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8002362:	bf4c      	ite	mi
 8002364:	4b08      	ldrmi	r3, [pc, #32]	; (8002388 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8002366:	4b06      	ldrpl	r3, [pc, #24]	; (8002380 <HAL_RCC_GetSysClockFreq+0x84>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8002368:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 800236a:	fb03 f304 	mul.w	r3, r3, r4
}
 800236e:	bc10      	pop	{r4}
        pllvco = (HSI_VALUE * pllm) / plld;
 8002370:	fbb3 f0f0 	udiv	r0, r3, r0
}
 8002374:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002376:	4804      	ldr	r0, [pc, #16]	; (8002388 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	00f42400 	.word	0x00f42400
 8002384:	08003490 	.word	0x08003490
 8002388:	007a1200 	.word	0x007a1200

0800238c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800238c:	4a6d      	ldr	r2, [pc, #436]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 800238e:	6813      	ldr	r3, [r2, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	428b      	cmp	r3, r1
 8002396:	d214      	bcs.n	80023c2 <HAL_RCC_ClockConfig+0x36>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002398:	2901      	cmp	r1, #1
 800239a:	6813      	ldr	r3, [r2, #0]
 800239c:	d006      	beq.n	80023ac <HAL_RCC_ClockConfig+0x20>
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	4319      	orrs	r1, r3
 80023a4:	6011      	str	r1, [r2, #0]
      return HAL_ERROR;
 80023a6:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023a8:	6813      	ldr	r3, [r2, #0]
 80023aa:	4770      	bx	lr
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ac:	f043 0304 	orr.w	r3, r3, #4
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	6813      	ldr	r3, [r2, #0]
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023ba:	6813      	ldr	r3, [r2, #0]
 80023bc:	07db      	lsls	r3, r3, #31
 80023be:	f140 80a7 	bpl.w	8002510 <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c2:	6803      	ldr	r3, [r0, #0]
{
 80023c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c8:	079a      	lsls	r2, r3, #30
 80023ca:	d506      	bpl.n	80023da <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4c5e      	ldr	r4, [pc, #376]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	6885      	ldr	r5, [r0, #8]
 80023d0:	68a2      	ldr	r2, [r4, #8]
 80023d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80023d6:	432a      	orrs	r2, r5
 80023d8:	60a2      	str	r2, [r4, #8]
 80023da:	4606      	mov	r6, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023dc:	07d8      	lsls	r0, r3, #31
 80023de:	460c      	mov	r4, r1
 80023e0:	d536      	bpl.n	8002450 <HAL_RCC_ClockConfig+0xc4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e2:	6873      	ldr	r3, [r6, #4]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	f000 8098 	beq.w	800251a <HAL_RCC_ClockConfig+0x18e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	f000 808d 	beq.w	800250a <HAL_RCC_ClockConfig+0x17e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	f000 8095 	beq.w	8002520 <HAL_RCC_ClockConfig+0x194>
 80023f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fa:	fa92 f1a2 	rbit	r1, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80023fe:	4952      	ldr	r1, [pc, #328]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	6808      	ldr	r0, [r1, #0]
 8002402:	fa92 f2a2 	rbit	r2, r2
 8002406:	fab2 f282 	clz	r2, r2
 800240a:	2101      	movs	r1, #1
 800240c:	f002 021f 	and.w	r2, r2, #31
 8002410:	fa01 f202 	lsl.w	r2, r1, r2
 8002414:	4202      	tst	r2, r0
 8002416:	d054      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x136>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002418:	4d4b      	ldr	r5, [pc, #300]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241e:	68aa      	ldr	r2, [r5, #8]
 8002420:	f022 0203 	bic.w	r2, r2, #3
 8002424:	4313      	orrs	r3, r2
 8002426:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8002428:	f7fe fdd8 	bl	8000fdc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242c:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800242e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002430:	2b02      	cmp	r3, #2
 8002432:	d04e      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x146>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002434:	2b03      	cmp	r3, #3
 8002436:	d057      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x15c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCC_ClockConfig+0xbc>
 800243c:	e05f      	b.n	80024fe <HAL_RCC_ClockConfig+0x172>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243e:	f7fe fdcd 	bl	8000fdc <HAL_GetTick>
 8002442:	1bc0      	subs	r0, r0, r7
 8002444:	4540      	cmp	r0, r8
 8002446:	d865      	bhi.n	8002514 <HAL_RCC_ClockConfig+0x188>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002448:	68ab      	ldr	r3, [r5, #8]
 800244a:	f013 0f0c 	tst.w	r3, #12
 800244e:	d1f6      	bne.n	800243e <HAL_RCC_ClockConfig+0xb2>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002450:	4a3c      	ldr	r2, [pc, #240]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 8002452:	6813      	ldr	r3, [r2, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	429c      	cmp	r4, r3
 800245a:	d32b      	bcc.n	80024b4 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	6833      	ldr	r3, [r6, #0]
 800245e:	075a      	lsls	r2, r3, #29
 8002460:	d506      	bpl.n	8002470 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002462:	4939      	ldr	r1, [pc, #228]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	68f0      	ldr	r0, [r6, #12]
 8002466:	688a      	ldr	r2, [r1, #8]
 8002468:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800246c:	4302      	orrs	r2, r0
 800246e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002470:	071b      	lsls	r3, r3, #28
 8002472:	d507      	bpl.n	8002484 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002474:	4a34      	ldr	r2, [pc, #208]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	6931      	ldr	r1, [r6, #16]
 8002478:	6893      	ldr	r3, [r2, #8]
 800247a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800247e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002482:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002484:	f7ff ff3a 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 8002488:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	22f0      	movs	r2, #240	; 0xf0
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	fa92 f2a2 	rbit	r2, r2
 8002492:	fab2 f282 	clz	r2, r2
 8002496:	492d      	ldr	r1, [pc, #180]	; (800254c <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800249c:	40d3      	lsrs	r3, r2
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	4a2b      	ldr	r2, [pc, #172]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 80024a6:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024a8:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80024aa:	f7fe fd6d 	bl	8000f88 <HAL_InitTick>
  return HAL_OK;
 80024ae:	2000      	movs	r0, #0
 80024b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b4:	6813      	ldr	r3, [r2, #0]
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024bc:	6813      	ldr	r3, [r2, #0]
 80024be:	07d9      	lsls	r1, r3, #31
 80024c0:	d5cc      	bpl.n	800245c <HAL_RCC_ClockConfig+0xd0>
      return HAL_ERROR;
 80024c2:	2001      	movs	r0, #1
 80024c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7fe fd88 	bl	8000fdc <HAL_GetTick>
 80024cc:	1bc0      	subs	r0, r0, r7
 80024ce:	4540      	cmp	r0, r8
 80024d0:	d820      	bhi.n	8002514 <HAL_RCC_ClockConfig+0x188>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024d2:	68ab      	ldr	r3, [r5, #8]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d1f5      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x13c>
 80024dc:	e7b8      	b.n	8002450 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024de:	f7fe fd7d 	bl	8000fdc <HAL_GetTick>
 80024e2:	1bc0      	subs	r0, r0, r7
 80024e4:	4540      	cmp	r0, r8
 80024e6:	d815      	bhi.n	8002514 <HAL_RCC_ClockConfig+0x188>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e8:	68ab      	ldr	r3, [r5, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b0c      	cmp	r3, #12
 80024f0:	d1f5      	bne.n	80024de <HAL_RCC_ClockConfig+0x152>
 80024f2:	e7ad      	b.n	8002450 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f4:	f7fe fd72 	bl	8000fdc <HAL_GetTick>
 80024f8:	1bc0      	subs	r0, r0, r7
 80024fa:	4540      	cmp	r0, r8
 80024fc:	d80a      	bhi.n	8002514 <HAL_RCC_ClockConfig+0x188>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024fe:	68ab      	ldr	r3, [r5, #8]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b04      	cmp	r3, #4
 8002506:	d1f5      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x168>
 8002508:	e7a2      	b.n	8002450 <HAL_RCC_ClockConfig+0xc4>
 800250a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800250e:	e774      	b.n	80023fa <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
 8002510:	2001      	movs	r0, #1
}
 8002512:	4770      	bx	lr
          return HAL_TIMEOUT;
 8002514:	2003      	movs	r0, #3
 8002516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800251a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800251e:	e76c      	b.n	80023fa <HAL_RCC_ClockConfig+0x6e>
 8002520:	2202      	movs	r2, #2
 8002522:	fa92 f1a2 	rbit	r1, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	6809      	ldr	r1, [r1, #0]
 800252a:	fa92 f2a2 	rbit	r2, r2
 800252e:	fab2 f282 	clz	r2, r2
 8002532:	f002 021f 	and.w	r2, r2, #31
 8002536:	fa03 f202 	lsl.w	r2, r3, r2
 800253a:	420a      	tst	r2, r1
 800253c:	f47f af6c 	bne.w	8002418 <HAL_RCC_ClockConfig+0x8c>
 8002540:	e7bf      	b.n	80024c2 <HAL_RCC_ClockConfig+0x136>
 8002542:	bf00      	nop
 8002544:	40023c00 	.word	0x40023c00
 8002548:	40023800 	.word	0x40023800
 800254c:	08003478 	.word	0x08003478
 8002550:	20000008 	.word	0x20000008

08002554 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8002554:	4b01      	ldr	r3, [pc, #4]	; (800255c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000008 	.word	0x20000008

08002560 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002562:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	fa92 f2a2 	rbit	r2, r2
 800256c:	fab2 f282 	clz	r2, r2
 8002570:	4805      	ldr	r0, [pc, #20]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8002572:	4906      	ldr	r1, [pc, #24]	; (800258c <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002574:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002578:	40d3      	lsrs	r3, r2
 800257a:	5cc3      	ldrb	r3, [r0, r3]
 800257c:	6808      	ldr	r0, [r1, #0]
}    
 800257e:	40d8      	lsrs	r0, r3
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	08003488 	.word	0x08003488
 800258c:	20000008 	.word	0x20000008

08002590 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002592:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	fa92 f2a2 	rbit	r2, r2
 800259c:	fab2 f282 	clz	r2, r2
 80025a0:	4805      	ldr	r0, [pc, #20]	; (80025b8 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 80025a2:	4906      	ldr	r1, [pc, #24]	; (80025bc <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80025a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80025a8:	40d3      	lsrs	r3, r2
 80025aa:	5cc3      	ldrb	r3, [r0, r3]
 80025ac:	6808      	ldr	r0, [r1, #0]
} 
 80025ae:	40d8      	lsrs	r0, r3
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	08003488 	.word	0x08003488
 80025bc:	20000008 	.word	0x20000008

080025c0 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025c4:	4682      	mov	sl, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025c6:	6804      	ldr	r4, [r0, #0]
 80025c8:	68c1      	ldr	r1, [r0, #12]
 80025ca:	6922      	ldr	r2, [r4, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025cc:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80025d2:	430a      	orrs	r2, r1
 80025d4:	6122      	str	r2, [r4, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025d6:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 80025d8:	68e2      	ldr	r2, [r4, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025da:	6940      	ldr	r0, [r0, #20]
 80025dc:	430b      	orrs	r3, r1
 80025de:	f8da 101c 	ldr.w	r1, [sl, #28]
  MODIFY_REG(huart->Instance->CR1, 
 80025e2:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025e6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 80025e8:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025ec:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60e3      	str	r3, [r4, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025f2:	6963      	ldr	r3, [r4, #20]
 80025f4:	f8da 2018 	ldr.w	r2, [sl, #24]
 80025f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025fc:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025fe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002602:	6163      	str	r3, [r4, #20]
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8002604:	4b9f      	ldr	r3, [pc, #636]	; (8002884 <UART_SetConfig+0x2c4>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002606:	d05c      	beq.n	80026c2 <UART_SetConfig+0x102>
    }
  }
  else
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8002608:	429c      	cmp	r4, r3
 800260a:	f000 80b7 	beq.w	800277c <UART_SetConfig+0x1bc>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800260e:	f7ff ffa7 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8002612:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002616:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800261a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	fbb0 f3f3 	udiv	r3, r0, r3
 8002624:	4f98      	ldr	r7, [pc, #608]	; (8002888 <UART_SetConfig+0x2c8>)
 8002626:	f04f 0864 	mov.w	r8, #100	; 0x64
 800262a:	fba7 2303 	umull	r2, r3, r7, r3
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	011d      	lsls	r5, r3, #4
 8002632:	f7ff ff95 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8002636:	f8da 2004 	ldr.w	r2, [sl, #4]
 800263a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800263e:	0093      	lsls	r3, r2, #2
 8002640:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002644:	fbb0 f6f3 	udiv	r6, r0, r3
 8002648:	f7ff ff8a 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 800264c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8002650:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002654:	0093      	lsls	r3, r2, #2
 8002656:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800265a:	fbb0 f3f3 	udiv	r3, r0, r3
 800265e:	fba7 2303 	umull	r2, r3, r7, r3
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	fb08 6313 	mls	r3, r8, r3, r6
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	3332      	adds	r3, #50	; 0x32
 800266c:	fba7 2303 	umull	r2, r3, r7, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8002676:	f7ff ff73 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 800267a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800267e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002682:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002686:	0093      	lsls	r3, r2, #2
 8002688:	fbb0 f9f3 	udiv	r9, r0, r3
 800268c:	f7ff ff68 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8002690:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002694:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002698:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a2:	fba7 2303 	umull	r2, r3, r7, r3
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	fb08 9313 	mls	r3, r8, r3, r9
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	3332      	adds	r3, #50	; 0x32
 80026b0:	fba7 2303 	umull	r2, r3, r7, r3
 80026b4:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80026b8:	4333      	orrs	r3, r6
 80026ba:	442b      	add	r3, r5
 80026bc:	60a3      	str	r3, [r4, #8]
 80026be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1))
 80026c2:	429c      	cmp	r4, r3
 80026c4:	f000 809c 	beq.w	8002800 <UART_SetConfig+0x240>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026c8:	f7ff ff4a 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 80026cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 80026d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	fbb0 f3f3 	udiv	r3, r0, r3
 80026de:	4f6a      	ldr	r7, [pc, #424]	; (8002888 <UART_SetConfig+0x2c8>)
 80026e0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80026e4:	fba7 2303 	umull	r2, r3, r7, r3
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	011e      	lsls	r6, r3, #4
 80026ec:	f7ff ff38 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 80026f0:	f8da 2004 	ldr.w	r2, [sl, #4]
 80026f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026f8:	0053      	lsls	r3, r2, #1
 80026fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026fe:	fbb0 f5f3 	udiv	r5, r0, r3
 8002702:	f7ff ff2d 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8002706:	f8da 2004 	ldr.w	r2, [sl, #4]
 800270a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800270e:	0053      	lsls	r3, r2, #1
 8002710:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002714:	fbb0 f3f3 	udiv	r3, r0, r3
 8002718:	fba7 2303 	umull	r2, r3, r7, r3
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	fb08 5313 	mls	r3, r8, r3, r5
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	3332      	adds	r3, #50	; 0x32
 8002726:	fba7 2303 	umull	r2, r3, r7, r3
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8002730:	f7ff ff16 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8002734:	f8da 2004 	ldr.w	r2, [sl, #4]
 8002738:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800273c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002740:	0053      	lsls	r3, r2, #1
 8002742:	fbb0 f9f3 	udiv	r9, r0, r3
 8002746:	f7ff ff0b 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 800274a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800274e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002752:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fbb0 f3f3 	udiv	r3, r0, r3
 800275c:	fba7 2303 	umull	r2, r3, r7, r3
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	fb08 9313 	mls	r3, r8, r3, r9
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	3332      	adds	r3, #50	; 0x32
 800276a:	fba7 2303 	umull	r2, r3, r7, r3
 800276e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002772:	4433      	add	r3, r6
 8002774:	442b      	add	r3, r5
 8002776:	60a3      	str	r3, [r4, #8]
 8002778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800277c:	f7ff ff08 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8002780:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002784:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002788:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002792:	4f3d      	ldr	r7, [pc, #244]	; (8002888 <UART_SetConfig+0x2c8>)
 8002794:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002798:	fba7 2303 	umull	r2, r3, r7, r3
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	011d      	lsls	r5, r3, #4
 80027a0:	f7ff fef6 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 80027a4:	f8da 2004 	ldr.w	r2, [sl, #4]
 80027a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027ac:	0093      	lsls	r3, r2, #2
 80027ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027b2:	fbb0 f6f3 	udiv	r6, r0, r3
 80027b6:	f7ff feeb 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 80027ba:	f8da 2004 	ldr.w	r2, [sl, #4]
 80027be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027c2:	0093      	lsls	r3, r2, #2
 80027c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027cc:	fba7 2303 	umull	r2, r3, r7, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	fb08 6313 	mls	r3, r8, r3, r6
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	3332      	adds	r3, #50	; 0x32
 80027da:	fba7 2303 	umull	r2, r3, r7, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 80027e4:	f7ff fed4 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 80027e8:	f8da 2004 	ldr.w	r2, [sl, #4]
 80027ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027f0:	0093      	lsls	r3, r2, #2
 80027f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027f6:	fbb0 f9f3 	udiv	r9, r0, r3
 80027fa:	f7ff fec9 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 80027fe:	e747      	b.n	8002690 <UART_SetConfig+0xd0>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002800:	f7ff fec6 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8002804:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002808:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800280c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	fbb0 f3f3 	udiv	r3, r0, r3
 8002816:	4f1c      	ldr	r7, [pc, #112]	; (8002888 <UART_SetConfig+0x2c8>)
 8002818:	f04f 0864 	mov.w	r8, #100	; 0x64
 800281c:	fba7 2303 	umull	r2, r3, r7, r3
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	011e      	lsls	r6, r3, #4
 8002824:	f7ff feb4 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8002828:	f8da 2004 	ldr.w	r2, [sl, #4]
 800282c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002830:	0053      	lsls	r3, r2, #1
 8002832:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002836:	fbb0 f5f3 	udiv	r5, r0, r3
 800283a:	f7ff fea9 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 800283e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8002842:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002846:	0053      	lsls	r3, r2, #1
 8002848:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800284c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002850:	fba7 2303 	umull	r2, r3, r7, r3
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	fb08 5313 	mls	r3, r8, r3, r5
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	3332      	adds	r3, #50	; 0x32
 800285e:	fba7 2303 	umull	r2, r3, r7, r3
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8002868:	f7ff fe92 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 800286c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8002870:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002874:	0053      	lsls	r3, r2, #1
 8002876:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800287a:	fbb0 f9f3 	udiv	r9, r0, r3
 800287e:	f7ff fe87 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8002882:	e762      	b.n	800274a <UART_SetConfig+0x18a>
 8002884:	40013800 	.word	0x40013800
 8002888:	51eb851f 	.word	0x51eb851f

0800288c <HAL_UART_Init>:
  if(huart == NULL)
 800288c:	b350      	cbz	r0, 80028e4 <HAL_UART_Init+0x58>
{
 800288e:	b538      	push	{r3, r4, r5, lr}
  if(huart->State == HAL_UART_STATE_RESET)
 8002890:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002894:	4604      	mov	r4, r0
 8002896:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800289a:	b1f3      	cbz	r3, 80028da <HAL_UART_Init+0x4e>
  huart->State = HAL_UART_STATE_BUSY;
 800289c:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 800289e:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 80028a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80028a4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80028a6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80028a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028ac:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80028ae:	f7ff fe87 	bl	80025c0 <UART_SetConfig>
  huart->State= HAL_UART_STATE_READY;
 80028b2:	2501      	movs	r5, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b4:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028b6:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 80028b8:	4608      	mov	r0, r1
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028c8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028d0:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d2:	63e1      	str	r1, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80028d4:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  return HAL_OK;
 80028d8:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80028da:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80028de:	f000 fc2d 	bl	800313c <HAL_UART_MspInit>
 80028e2:	e7db      	b.n	800289c <HAL_UART_Init+0x10>
    return HAL_ERROR;
 80028e4:	2001      	movs	r0, #1
 80028e6:	4770      	bx	lr

080028e8 <HAL_UART_TxCpltCallback>:
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop

080028ec <HAL_UART_RxCpltCallback>:
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop

080028f0 <HAL_UART_ErrorCallback>:
{
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop

080028f4 <HAL_UART_IRQHandler>:
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80028f4:	6803      	ldr	r3, [r0, #0]
{
 80028f6:	b510      	push	{r4, lr}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80028f8:	681a      	ldr	r2, [r3, #0]
{
 80028fa:	4604      	mov	r4, r0
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80028fc:	07d0      	lsls	r0, r2, #31
{
 80028fe:	b082      	sub	sp, #8
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8002900:	68d9      	ldr	r1, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002902:	d501      	bpl.n	8002908 <HAL_UART_IRQHandler+0x14>
 8002904:	05ca      	lsls	r2, r1, #23
 8002906:	d45a      	bmi.n	80029be <HAL_UART_IRQHandler+0xca>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8002908:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800290a:	695a      	ldr	r2, [r3, #20]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800290c:	0788      	lsls	r0, r1, #30
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800290e:	f002 0201 	and.w	r2, r2, #1
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002912:	d540      	bpl.n	8002996 <HAL_UART_IRQHandler+0xa2>
 8002914:	2a00      	cmp	r2, #0
 8002916:	d045      	beq.n	80029a4 <HAL_UART_IRQHandler+0xb0>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002918:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800291a:	f042 0204 	orr.w	r2, r2, #4
 800291e:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8002920:	681a      	ldr	r2, [r3, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002922:	0751      	lsls	r1, r2, #29
 8002924:	d550      	bpl.n	80029c8 <HAL_UART_IRQHandler+0xd4>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002926:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002928:	f042 0202 	orr.w	r2, r2, #2
 800292c:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 800292e:	681a      	ldr	r2, [r3, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002930:	0712      	lsls	r2, r2, #28
 8002932:	d43f      	bmi.n	80029b4 <HAL_UART_IRQHandler+0xc0>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8002934:	681a      	ldr	r2, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8002936:	68d9      	ldr	r1, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002938:	0690      	lsls	r0, r2, #26
 800293a:	d501      	bpl.n	8002940 <HAL_UART_IRQHandler+0x4c>
 800293c:	068a      	lsls	r2, r1, #26
 800293e:	d465      	bmi.n	8002a0c <HAL_UART_IRQHandler+0x118>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8002940:	681a      	ldr	r2, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8002942:	68d9      	ldr	r1, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002944:	0610      	lsls	r0, r2, #24
 8002946:	d501      	bpl.n	800294c <HAL_UART_IRQHandler+0x58>
 8002948:	0609      	lsls	r1, r1, #24
 800294a:	d441      	bmi.n	80029d0 <HAL_UART_IRQHandler+0xdc>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 800294c:	681a      	ldr	r2, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 800294e:	68d9      	ldr	r1, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002950:	0652      	lsls	r2, r2, #25
 8002952:	d510      	bpl.n	8002976 <HAL_UART_IRQHandler+0x82>
 8002954:	0648      	lsls	r0, r1, #25
 8002956:	d50e      	bpl.n	8002976 <HAL_UART_IRQHandler+0x82>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002958:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800295a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800295c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002960:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002962:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002966:	2b32      	cmp	r3, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 8002968:	bf0c      	ite	eq
 800296a:	2322      	moveq	r3, #34	; 0x22
    huart->State = HAL_UART_STATE_READY;
 800296c:	2301      	movne	r3, #1
 800296e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002972:	f7ff ffb9 	bl	80028e8 <HAL_UART_TxCpltCallback>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002976:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002978:	b15b      	cbz	r3, 8002992 <HAL_UART_IRQHandler+0x9e>
    huart->State = HAL_UART_STATE_READY;
 800297a:	2201      	movs	r2, #1
    __HAL_UART_CLEAR_PEFLAG(huart);
 800297c:	6823      	ldr	r3, [r4, #0]
    HAL_UART_ErrorCallback(huart);
 800297e:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002980:	6819      	ldr	r1, [r3, #0]
 8002982:	9101      	str	r1, [sp, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	9b01      	ldr	r3, [sp, #4]
    huart->State = HAL_UART_STATE_READY;
 800298a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 800298e:	f7ff ffaf 	bl	80028f0 <HAL_UART_ErrorCallback>
}
 8002992:	b002      	add	sp, #8
 8002994:	bd10      	pop	{r4, pc}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8002996:	6819      	ldr	r1, [r3, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002998:	0748      	lsls	r0, r1, #29
 800299a:	d506      	bpl.n	80029aa <HAL_UART_IRQHandler+0xb6>
 800299c:	2a00      	cmp	r2, #0
 800299e:	d1c2      	bne.n	8002926 <HAL_UART_IRQHandler+0x32>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	e7c7      	b.n	8002934 <HAL_UART_IRQHandler+0x40>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 80029a4:	6819      	ldr	r1, [r3, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80029a6:	0749      	lsls	r1, r1, #29
 80029a8:	d4fa      	bmi.n	80029a0 <HAL_UART_IRQHandler+0xac>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80029aa:	6819      	ldr	r1, [r3, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80029ac:	0709      	lsls	r1, r1, #28
 80029ae:	d5c1      	bpl.n	8002934 <HAL_UART_IRQHandler+0x40>
 80029b0:	2a00      	cmp	r2, #0
 80029b2:	d0bf      	beq.n	8002934 <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80029b6:	f042 0208 	orr.w	r2, r2, #8
 80029ba:	63e2      	str	r2, [r4, #60]	; 0x3c
 80029bc:	e7ba      	b.n	8002934 <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80029c0:	f042 0201 	orr.w	r2, r2, #1
 80029c4:	63e2      	str	r2, [r4, #60]	; 0x3c
 80029c6:	e79f      	b.n	8002908 <HAL_UART_IRQHandler+0x14>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80029c8:	681a      	ldr	r2, [r3, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80029ca:	0712      	lsls	r2, r2, #28
 80029cc:	d4f2      	bmi.n	80029b4 <HAL_UART_IRQHandler+0xc0>
 80029ce:	e7b1      	b.n	8002934 <HAL_UART_IRQHandler+0x40>
  tmp_state = huart->State;
 80029d0:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80029d4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80029d8:	2a12      	cmp	r2, #18
 80029da:	d1b7      	bne.n	800294c <HAL_UART_IRQHandler+0x58>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029dc:	68a2      	ldr	r2, [r4, #8]
 80029de:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80029e2:	6a22      	ldr	r2, [r4, #32]
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029e4:	d04d      	beq.n	8002a82 <HAL_UART_IRQHandler+0x18e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029e6:	1c51      	adds	r1, r2, #1
 80029e8:	6221      	str	r1, [r4, #32]
 80029ea:	7812      	ldrb	r2, [r2, #0]
 80029ec:	605a      	str	r2, [r3, #4]
    if(--huart->TxXferCount == 0)
 80029ee:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80029f0:	3a01      	subs	r2, #1
 80029f2:	b292      	uxth	r2, r2
 80029f4:	84e2      	strh	r2, [r4, #38]	; 0x26
 80029f6:	2a00      	cmp	r2, #0
 80029f8:	d1a8      	bne.n	800294c <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a00:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	e79f      	b.n	800294c <HAL_UART_IRQHandler+0x58>
  tmp_state = huart->State; 
 8002a0c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8002a10:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 8002a14:	2a22      	cmp	r2, #34	; 0x22
 8002a16:	d193      	bne.n	8002940 <HAL_UART_IRQHandler+0x4c>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a18:	68a2      	ldr	r2, [r4, #8]
 8002a1a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002a1e:	d026      	beq.n	8002a6e <HAL_UART_IRQHandler+0x17a>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002a20:	6922      	ldr	r2, [r4, #16]
 8002a22:	2a00      	cmp	r2, #0
 8002a24:	d136      	bne.n	8002a94 <HAL_UART_IRQHandler+0x1a0>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a26:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	1c51      	adds	r1, r2, #1
 8002a2c:	62a1      	str	r1, [r4, #40]	; 0x28
 8002a2e:	7013      	strb	r3, [r2, #0]
 8002a30:	6823      	ldr	r3, [r4, #0]
    if(--huart->RxXferCount == 0)
 8002a32:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8002a34:	3a01      	subs	r2, #1
 8002a36:	b292      	uxth	r2, r2
 8002a38:	85e2      	strh	r2, [r4, #46]	; 0x2e
 8002a3a:	2a00      	cmp	r2, #0
 8002a3c:	d180      	bne.n	8002940 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	f022 0220 	bic.w	r2, r2, #32
 8002a44:	60da      	str	r2, [r3, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002a46:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002a4a:	2a32      	cmp	r2, #50	; 0x32
 8002a4c:	d02b      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x1b2>
        huart->State = HAL_UART_STATE_READY;
 8002a4e:	2101      	movs	r1, #1
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a56:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	615a      	str	r2, [r3, #20]
        huart->State = HAL_UART_STATE_READY;
 8002a60:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7ff ff41 	bl	80028ec <HAL_UART_RxCpltCallback>
 8002a6a:	6823      	ldr	r3, [r4, #0]
 8002a6c:	e768      	b.n	8002940 <HAL_UART_IRQHandler+0x4c>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002a6e:	6921      	ldr	r1, [r4, #16]
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002a70:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002a72:	b9e1      	cbnz	r1, 8002aae <HAL_UART_IRQHandler+0x1ba>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002a7a:	f822 1b02 	strh.w	r1, [r2], #2
        huart->pRxBuffPtr += 2;
 8002a7e:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a80:	e7d7      	b.n	8002a32 <HAL_UART_IRQHandler+0x13e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a82:	8811      	ldrh	r1, [r2, #0]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002a84:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a86:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002a8a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002a8c:	b9a8      	cbnz	r0, 8002aba <HAL_UART_IRQHandler+0x1c6>
        huart->pTxBuffPtr += 2;
 8002a8e:	3202      	adds	r2, #2
 8002a90:	6222      	str	r2, [r4, #32]
 8002a92:	e7ac      	b.n	80029ee <HAL_UART_IRQHandler+0xfa>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a9c:	1c51      	adds	r1, r2, #1
 8002a9e:	62a1      	str	r1, [r4, #40]	; 0x28
 8002aa0:	7013      	strb	r3, [r2, #0]
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	e7c5      	b.n	8002a32 <HAL_UART_IRQHandler+0x13e>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8002aa6:	2312      	movs	r3, #18
 8002aa8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8002aac:	e7da      	b.n	8002a64 <HAL_UART_IRQHandler+0x170>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	b2c9      	uxtb	r1, r1
 8002ab2:	f822 1b01 	strh.w	r1, [r2], #1
        huart->pRxBuffPtr += 1;
 8002ab6:	62a2      	str	r2, [r4, #40]	; 0x28
 8002ab8:	e7bb      	b.n	8002a32 <HAL_UART_IRQHandler+0x13e>
        huart->pTxBuffPtr += 1;
 8002aba:	3201      	adds	r2, #1
 8002abc:	6222      	str	r2, [r4, #32]
 8002abe:	e796      	b.n	80029ee <HAL_UART_IRQHandler+0xfa>

08002ac0 <MX_ADC_Init>:
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002ac0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
{
 8002ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002ac6:	2200      	movs	r2, #0
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
  hadc.Init.ContinuousConvMode = ENABLE;
 8002ac8:	2101      	movs	r1, #1
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002aca:	f44f 7680 	mov.w	r6, #256	; 0x100
  hadc.Init.NbrOfConversion = 3;
 8002ace:	2503      	movs	r5, #3
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ad0:	2410      	movs	r4, #16
  hadc.Instance = ADC1;
 8002ad2:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <MX_ADC_Init+0xa4>)
 8002ad4:	4f24      	ldr	r7, [pc, #144]	; (8002b68 <MX_ADC_Init+0xa8>)
{
 8002ad6:	b085      	sub	sp, #20
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002ad8:	6058      	str	r0, [r3, #4]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002ada:	4618      	mov	r0, r3
  hadc.Instance = ADC1;
 8002adc:	601f      	str	r7, [r3, #0]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002ade:	611e      	str	r6, [r3, #16]
  hadc.Init.NbrOfConversion = 3;
 8002ae0:	629d      	str	r5, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ae2:	635c      	str	r4, [r3, #52]	; 0x34
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002ae4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ae6:	60da      	str	r2, [r3, #12]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002ae8:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8002aea:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8002aec:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8002aee:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002af0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002af2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ContinuousConvMode = ENABLE;
 8002af4:	6259      	str	r1, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002af6:	63d9      	str	r1, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002af8:	f7fe fa76 	bl	8000fe8 <HAL_ADC_Init>
 8002afc:	bb68      	cbnz	r0, 8002b5a <MX_ADC_Init+0x9a>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_48CYCLES;
 8002afe:	2304      	movs	r3, #4
  sConfig.Channel = ADC_CHANNEL_6;
 8002b00:	2406      	movs	r4, #6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b02:	2201      	movs	r2, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b04:	eb0d 0103 	add.w	r1, sp, r3
 8002b08:	4816      	ldr	r0, [pc, #88]	; (8002b64 <MX_ADC_Init+0xa4>)
  sConfig.Channel = ADC_CHANNEL_6;
 8002b0a:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b0c:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_48CYCLES;
 8002b0e:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b10:	f7fe fc18 	bl	8001344 <HAL_ADC_ConfigChannel>
 8002b14:	b9e0      	cbnz	r0, 8002b50 <MX_ADC_Init+0x90>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_7;
 8002b16:	2207      	movs	r2, #7
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002b18:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b1a:	a901      	add	r1, sp, #4
 8002b1c:	4811      	ldr	r0, [pc, #68]	; (8002b64 <MX_ADC_Init+0xa4>)
  sConfig.Channel = ADC_CHANNEL_7;
 8002b1e:	9201      	str	r2, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002b20:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b22:	f7fe fc0f 	bl	8001344 <HAL_ADC_ConfigChannel>
 8002b26:	b970      	cbnz	r0, 8002b46 <MX_ADC_Init+0x86>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 8002b28:	2202      	movs	r2, #2
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002b2a:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b2c:	a901      	add	r1, sp, #4
 8002b2e:	480d      	ldr	r0, [pc, #52]	; (8002b64 <MX_ADC_Init+0xa4>)
  sConfig.Channel = ADC_CHANNEL_2;
 8002b30:	9201      	str	r2, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002b32:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b34:	f7fe fc06 	bl	8001344 <HAL_ADC_ConfigChannel>
 8002b38:	b118      	cbz	r0, 8002b42 <MX_ADC_Init+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b3a:	2169      	movs	r1, #105	; 0x69
 8002b3c:	480b      	ldr	r0, [pc, #44]	; (8002b6c <MX_ADC_Init+0xac>)
 8002b3e:	f000 fa3b 	bl	8002fb8 <_Error_Handler>
  }

}
 8002b42:	b005      	add	sp, #20
 8002b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002b46:	2160      	movs	r1, #96	; 0x60
 8002b48:	4808      	ldr	r0, [pc, #32]	; (8002b6c <MX_ADC_Init+0xac>)
 8002b4a:	f000 fa35 	bl	8002fb8 <_Error_Handler>
 8002b4e:	e7eb      	b.n	8002b28 <MX_ADC_Init+0x68>
    _Error_Handler(__FILE__, __LINE__);
 8002b50:	2157      	movs	r1, #87	; 0x57
 8002b52:	4806      	ldr	r0, [pc, #24]	; (8002b6c <MX_ADC_Init+0xac>)
 8002b54:	f000 fa30 	bl	8002fb8 <_Error_Handler>
 8002b58:	e7dd      	b.n	8002b16 <MX_ADC_Init+0x56>
    _Error_Handler(__FILE__, __LINE__);
 8002b5a:	214d      	movs	r1, #77	; 0x4d
 8002b5c:	4803      	ldr	r0, [pc, #12]	; (8002b6c <MX_ADC_Init+0xac>)
 8002b5e:	f000 fa2b 	bl	8002fb8 <_Error_Handler>
 8002b62:	e7cc      	b.n	8002afe <MX_ADC_Init+0x3e>
 8002b64:	200000e4 	.word	0x200000e4
 8002b68:	40012400 	.word	0x40012400
 8002b6c:	08003458 	.word	0x08003458

08002b70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8002b70:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <HAL_ADC_MspInit+0x8c>)
 8002b72:	6802      	ldr	r2, [r0, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d000      	beq.n	8002b7a <HAL_ADC_MspInit+0xa>
 8002b78:	4770      	bx	lr
{
 8002b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
 8002b7e:	27c4      	movs	r7, #196	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b80:	2503      	movs	r5, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b82:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8002b86:	6a1a      	ldr	r2, [r3, #32]
{
 8002b88:	b087      	sub	sp, #28
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8e:	621a      	str	r2, [r3, #32]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b92:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	4604      	mov	r4, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9c:	4818      	ldr	r0, [pc, #96]	; (8002c00 <HAL_ADC_MspInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
 8002b9e:	9701      	str	r7, [sp, #4]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ba0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ba2:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	9603      	str	r6, [sp, #12]
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ba6:	f44f 7780 	mov.w	r7, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002baa:	f7fe feed 	bl	8001988 <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002bae:	f04f 0e80 	mov.w	lr, #128	; 0x80
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002bb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002bb6:	2220      	movs	r2, #32
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc.Instance = DMA1_Channel1;
 8002bbc:	4d11      	ldr	r5, [pc, #68]	; (8002c04 <HAL_ADC_MspInit+0x94>)
 8002bbe:	4812      	ldr	r0, [pc, #72]	; (8002c08 <HAL_ADC_MspInit+0x98>)
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bc0:	606e      	str	r6, [r5, #4]
    hdma_adc.Instance = DMA1_Channel1;
 8002bc2:	6028      	str	r0, [r5, #0]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002bc4:	4628      	mov	r0, r5
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bc6:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002bc8:	f8c5 e00c 	str.w	lr, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002bcc:	612f      	str	r7, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002bce:	6169      	str	r1, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002bd0:	61aa      	str	r2, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002bd2:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002bd4:	f7fe fe0c 	bl	80017f0 <HAL_DMA_Init>
 8002bd8:	b958      	cbnz	r0, 8002bf2 <HAL_ADC_MspInit+0x82>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002bda:	2200      	movs	r2, #0
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8002bdc:	6465      	str	r5, [r4, #68]	; 0x44
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002bde:	4611      	mov	r1, r2
 8002be0:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8002be2:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002be4:	f7fe fd18 	bl	8001618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002be8:	2012      	movs	r0, #18
 8002bea:	f7fe fd4b 	bl	8001684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002bee:	b007      	add	sp, #28
 8002bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      _Error_Handler(__FILE__, __LINE__);
 8002bf2:	2190      	movs	r1, #144	; 0x90
 8002bf4:	4805      	ldr	r0, [pc, #20]	; (8002c0c <HAL_ADC_MspInit+0x9c>)
 8002bf6:	f000 f9df 	bl	8002fb8 <_Error_Handler>
 8002bfa:	e7ee      	b.n	8002bda <HAL_ADC_MspInit+0x6a>
 8002bfc:	40012400 	.word	0x40012400
 8002c00:	40020000 	.word	0x40020000
 8002c04:	200000a0 	.word	0x200000a0
 8002c08:	40026008 	.word	0x40026008
 8002c0c:	08003458 	.word	0x08003458

08002c10 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8002c10:	b500      	push	{lr}
  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 8002c12:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <MX_DAC_Init+0x54>)
 8002c14:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <MX_DAC_Init+0x58>)
{
 8002c16:	b083      	sub	sp, #12
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002c18:	4618      	mov	r0, r3
  hdac.Instance = DAC;
 8002c1a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002c1c:	f7fe fd68 	bl	80016f0 <HAL_DAC_Init>
 8002c20:	b9d0      	cbnz	r0, 8002c58 <MX_DAC_Init+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002c22:	2300      	movs	r3, #0
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002c24:	4669      	mov	r1, sp
 8002c26:	461a      	mov	r2, r3
 8002c28:	480e      	ldr	r0, [pc, #56]	; (8002c64 <MX_DAC_Init+0x54>)
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002c2a:	9300      	str	r3, [sp, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002c2c:	9301      	str	r3, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002c2e:	f7fe fda1 	bl	8001774 <HAL_DAC_ConfigChannel>
 8002c32:	b960      	cbnz	r0, 8002c4e <MX_DAC_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**DAC channel OUT2 config 
    */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002c34:	4669      	mov	r1, sp
 8002c36:	2210      	movs	r2, #16
 8002c38:	480a      	ldr	r0, [pc, #40]	; (8002c64 <MX_DAC_Init+0x54>)
 8002c3a:	f7fe fd9b 	bl	8001774 <HAL_DAC_ConfigChannel>
 8002c3e:	b118      	cbz	r0, 8002c48 <MX_DAC_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c40:	214d      	movs	r1, #77	; 0x4d
 8002c42:	480a      	ldr	r0, [pc, #40]	; (8002c6c <MX_DAC_Init+0x5c>)
 8002c44:	f000 f9b8 	bl	8002fb8 <_Error_Handler>
  }

}
 8002c48:	b003      	add	sp, #12
 8002c4a:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002c4e:	2146      	movs	r1, #70	; 0x46
 8002c50:	4806      	ldr	r0, [pc, #24]	; (8002c6c <MX_DAC_Init+0x5c>)
 8002c52:	f000 f9b1 	bl	8002fb8 <_Error_Handler>
 8002c56:	e7ed      	b.n	8002c34 <MX_DAC_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 8002c58:	213d      	movs	r1, #61	; 0x3d
 8002c5a:	4804      	ldr	r0, [pc, #16]	; (8002c6c <MX_DAC_Init+0x5c>)
 8002c5c:	f000 f9ac 	bl	8002fb8 <_Error_Handler>
 8002c60:	e7df      	b.n	8002c22 <MX_DAC_Init+0x12>
 8002c62:	bf00      	nop
 8002c64:	20000138 	.word	0x20000138
 8002c68:	40007400 	.word	0x40007400
 8002c6c:	08003468 	.word	0x08003468

08002c70 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(dacHandle->Instance==DAC)
 8002c70:	6802      	ldr	r2, [r0, #0]
 8002c72:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <HAL_DAC_MspInit+0x3c>)
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d000      	beq.n	8002c7a <HAL_DAC_MspInit+0xa>
 8002c78:	4770      	bx	lr
{
 8002c7a:	b570      	push	{r4, r5, r6, lr}
  
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002c7c:	2630      	movs	r6, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c7e:	2503      	movs	r5, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2400      	movs	r4, #0
    __HAL_RCC_DAC_CLK_ENABLE();
 8002c82:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
{
 8002c88:	b086      	sub	sp, #24
    __HAL_RCC_DAC_CLK_ENABLE();
 8002c8a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c92:	a901      	add	r1, sp, #4
    __HAL_RCC_DAC_CLK_ENABLE();
 8002c94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c98:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9a:	4805      	ldr	r0, [pc, #20]	; (8002cb0 <HAL_DAC_MspInit+0x40>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002c9c:	9601      	str	r6, [sp, #4]
    __HAL_RCC_DAC_CLK_ENABLE();
 8002c9e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ca0:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca4:	f7fe fe70 	bl	8001988 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8002ca8:	b006      	add	sp, #24
 8002caa:	bd70      	pop	{r4, r5, r6, pc}
 8002cac:	40007400 	.word	0x40007400
 8002cb0:	40020000 	.word	0x40020000

08002cb4 <MX_DMA_Init>:
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002cb4:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <MX_DMA_Init+0x2c>)
{
 8002cb8:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cba:	69dc      	ldr	r4, [r3, #28]
{
 8002cbc:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cbe:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8002cc2:	61dc      	str	r4, [r3, #28]
 8002cc4:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002cc6:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ccc:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002cce:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cd0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002cd2:	f7fe fca1 	bl	8001618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002cd6:	200b      	movs	r0, #11
 8002cd8:	f7fe fcd4 	bl	8001684 <HAL_NVIC_EnableIRQ>

}
 8002cdc:	b002      	add	sp, #8
 8002cde:	bd10      	pop	{r4, pc}
 8002ce0:	40023800 	.word	0x40023800

08002ce4 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ce4:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <MX_GPIO_Init+0x60>)
{
 8002ce6:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ce8:	69da      	ldr	r2, [r3, #28]
{
 8002cea:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cec:	f042 0220 	orr.w	r2, r2, #32
 8002cf0:	61da      	str	r2, [r3, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8002cf2:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cf4:	69d9      	ldr	r1, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8002cf6:	4d14      	ldr	r5, [pc, #80]	; (8002d48 <MX_GPIO_Init+0x64>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cf8:	f001 0120 	and.w	r1, r1, #32
 8002cfc:	9100      	str	r1, [sp, #0]
 8002cfe:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d00:	69dc      	ldr	r4, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8002d02:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d04:	f044 0404 	orr.w	r4, r4, #4
 8002d08:	61dc      	str	r4, [r3, #28]
 8002d0a:	69dc      	ldr	r4, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8002d0c:	2106      	movs	r1, #6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d0e:	f004 0404 	and.w	r4, r4, #4
 8002d12:	9401      	str	r4, [sp, #4]
 8002d14:	9c01      	ldr	r4, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d16:	69dc      	ldr	r4, [r3, #28]
 8002d18:	4314      	orrs	r4, r2
 8002d1a:	61dc      	str	r4, [r3, #28]
 8002d1c:	69db      	ldr	r3, [r3, #28]

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002d1e:	2406      	movs	r4, #6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d20:	4013      	ands	r3, r2
 8002d22:	9302      	str	r3, [sp, #8]
 8002d24:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8002d26:	f7fe ff15 	bl	8001b54 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002d2c:	2211      	movs	r2, #17
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2e:	4628      	mov	r0, r5
 8002d30:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002d32:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002d34:	9204      	str	r2, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d38:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d3a:	f7fe fe25 	bl	8001988 <HAL_GPIO_Init>

}
 8002d3e:	b009      	add	sp, #36	; 0x24
 8002d40:	bd30      	pop	{r4, r5, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020800 	.word	0x40020800

08002d4c <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Set1 = ADC_BUF[0];
 8002d50:	4f58      	ldr	r7, [pc, #352]	; (8002eb4 <HAL_ADC_ConvCpltCallback+0x168>)
 8002d52:	4d59      	ldr	r5, [pc, #356]	; (8002eb8 <HAL_ADC_ConvCpltCallback+0x16c>)
 8002d54:	883b      	ldrh	r3, [r7, #0]
	Set2 = ADC_BUF[1];
 8002d56:	4c59      	ldr	r4, [pc, #356]	; (8002ebc <HAL_ADC_ConvCpltCallback+0x170>)
	Set1 = ADC_BUF[0];
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	802b      	strh	r3, [r5, #0]
	Set2 = ADC_BUF[1];
 8002d5c:	887b      	ldrh	r3, [r7, #2]
	gain = 4096.0/((float)(4096 - ADC_BUF[2]));
 8002d5e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8002ed8 <HAL_ADC_ConvCpltCallback+0x18c>
	Set2 = ADC_BUF[1];
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	8023      	strh	r3, [r4, #0]
	gain = 4096.0/((float)(4096 - ADC_BUF[2]));
 8002d66:	88b8      	ldrh	r0, [r7, #4]
	Set1 = 2048 + ((Set1 - 2048)*gain);
	Set2 = 2048 + ((Set2 - 2048)*gain);

	if (Set1 > 2048 + level) {
 8002d68:	4e55      	ldr	r6, [pc, #340]	; (8002ec0 <HAL_ADC_ConvCpltCallback+0x174>)
	gain = 4096.0/((float)(4096 - ADC_BUF[2]));
 8002d6a:	b280      	uxth	r0, r0
 8002d6c:	f5c0 5080 	rsb	r0, r0, #4096	; 0x1000
 8002d70:	f7fd ff46 	bl	8000c00 <__aeabi_i2f>
 8002d74:	4601      	mov	r1, r0
 8002d76:	f04f 408b 	mov.w	r0, #1166016512	; 0x45800000
 8002d7a:	f7fe f849 	bl	8000e10 <__aeabi_fdiv>
 8002d7e:	f8c8 0000 	str.w	r0, [r8]
	Set1 = 2048 + ((Set1 - 2048)*gain);
 8002d82:	8828      	ldrh	r0, [r5, #0]
 8002d84:	f8d8 9000 	ldr.w	r9, [r8]
 8002d88:	b280      	uxth	r0, r0
 8002d8a:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 8002d8e:	f7fd ff37 	bl	8000c00 <__aeabi_i2f>
 8002d92:	4649      	mov	r1, r9
 8002d94:	f7fd ff88 	bl	8000ca8 <__aeabi_fmul>
 8002d98:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8002d9c:	f7fd fe7c 	bl	8000a98 <__addsf3>
 8002da0:	f7fe f8d2 	bl	8000f48 <__aeabi_f2uiz>
 8002da4:	b280      	uxth	r0, r0
 8002da6:	8028      	strh	r0, [r5, #0]
	Set2 = 2048 + ((Set2 - 2048)*gain);
 8002da8:	8820      	ldrh	r0, [r4, #0]
 8002daa:	f8d8 8000 	ldr.w	r8, [r8]
 8002dae:	b280      	uxth	r0, r0
 8002db0:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 8002db4:	f7fd ff24 	bl	8000c00 <__aeabi_i2f>
 8002db8:	4641      	mov	r1, r8
 8002dba:	f7fd ff75 	bl	8000ca8 <__aeabi_fmul>
 8002dbe:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8002dc2:	f7fd fe69 	bl	8000a98 <__addsf3>
 8002dc6:	f7fe f8bf 	bl	8000f48 <__aeabi_f2uiz>
 8002dca:	b280      	uxth	r0, r0
 8002dcc:	8020      	strh	r0, [r4, #0]
	if (Set1 > 2048 + level) {
 8002dce:	882a      	ldrh	r2, [r5, #0]
 8002dd0:	8833      	ldrh	r3, [r6, #0]
 8002dd2:	b292      	uxth	r2, r2
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	dd04      	ble.n	8002de8 <HAL_ADC_ConvCpltCallback+0x9c>
		Set1 = 2048 + level;
 8002dde:	8833      	ldrh	r3, [r6, #0]
 8002de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	802b      	strh	r3, [r5, #0]
	}
	if (Set1 < 2048 - level) {
 8002de8:	882a      	ldrh	r2, [r5, #0]
 8002dea:	8833      	ldrh	r3, [r6, #0]
 8002dec:	b292      	uxth	r2, r2
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002df4:	429a      	cmp	r2, r3
 8002df6:	da04      	bge.n	8002e02 <HAL_ADC_ConvCpltCallback+0xb6>
		Set1 = 2048 - level;
 8002df8:	8833      	ldrh	r3, [r6, #0]
 8002dfa:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	802b      	strh	r3, [r5, #0]
	}
	if (Set2 > 2048 + level) {
 8002e02:	8822      	ldrh	r2, [r4, #0]
 8002e04:	8833      	ldrh	r3, [r6, #0]
 8002e06:	b292      	uxth	r2, r2
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	dd04      	ble.n	8002e1c <HAL_ADC_ConvCpltCallback+0xd0>
		Set2 = 2048 + level;
 8002e12:	8833      	ldrh	r3, [r6, #0]
 8002e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	8023      	strh	r3, [r4, #0]
	}
	if (Set2 < 2048 - level) {
 8002e1c:	8822      	ldrh	r2, [r4, #0]
 8002e1e:	8833      	ldrh	r3, [r6, #0]
 8002e20:	b292      	uxth	r2, r2
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	da04      	bge.n	8002e36 <HAL_ADC_ConvCpltCallback+0xea>
		Set2 = 2048 - level;
 8002e2c:	8833      	ldrh	r3, [r6, #0]
 8002e2e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	8023      	strh	r3, [r4, #0]
	}

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, Set1);
 8002e36:	2200      	movs	r2, #0
 8002e38:	882b      	ldrh	r3, [r5, #0]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	4821      	ldr	r0, [pc, #132]	; (8002ec4 <HAL_ADC_ConvCpltCallback+0x178>)
 8002e40:	f7fe fcc0 	bl	80017c4 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, Set2);
 8002e44:	8823      	ldrh	r3, [r4, #0]

	if (levelCounter<maxlevelCounter)
 8002e46:	4c20      	ldr	r4, [pc, #128]	; (8002ec8 <HAL_ADC_ConvCpltCallback+0x17c>)
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, Set2);
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2110      	movs	r1, #16
 8002e4e:	481d      	ldr	r0, [pc, #116]	; (8002ec4 <HAL_ADC_ConvCpltCallback+0x178>)
 8002e50:	f7fe fcb8 	bl	80017c4 <HAL_DAC_SetValue>
	if (levelCounter<maxlevelCounter)
 8002e54:	8823      	ldrh	r3, [r4, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e5c:	d216      	bcs.n	8002e8c <HAL_ADC_ConvCpltCallback+0x140>
	{
		currentLevel = currentLevel + (float)((ADC_BUF[0]-2048)*(ADC_BUF[0]-2048))/maxlevelCounter;
 8002e5e:	883b      	ldrh	r3, [r7, #0]
 8002e60:	8838      	ldrh	r0, [r7, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	b280      	uxth	r0, r0
 8002e66:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002e6a:	4c18      	ldr	r4, [pc, #96]	; (8002ecc <HAL_ADC_ConvCpltCallback+0x180>)
 8002e6c:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 8002e70:	fb00 f003 	mul.w	r0, r0, r3
 8002e74:	f7fd fec4 	bl	8000c00 <__aeabi_i2f>
 8002e78:	6825      	ldr	r5, [r4, #0]
 8002e7a:	4915      	ldr	r1, [pc, #84]	; (8002ed0 <HAL_ADC_ConvCpltCallback+0x184>)
 8002e7c:	f7fd ffc8 	bl	8000e10 <__aeabi_fdiv>
 8002e80:	4629      	mov	r1, r5
 8002e82:	f7fd fe09 	bl	8000a98 <__addsf3>
 8002e86:	6020      	str	r0, [r4, #0]
 8002e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}
	else
	{
		level = (uint16_t)(2048*sqrt(currentLevel));
 8002e8c:	4d0f      	ldr	r5, [pc, #60]	; (8002ecc <HAL_ADC_ConvCpltCallback+0x180>)
 8002e8e:	6828      	ldr	r0, [r5, #0]
 8002e90:	f7fd fad8 	bl	8000444 <__aeabi_f2d>
 8002e94:	f000 f9cc 	bl	8003230 <sqrt>
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <HAL_ADC_ConvCpltCallback+0x188>)
 8002e9c:	f7fd fb26 	bl	80004ec <__aeabi_dmul>
 8002ea0:	f7fd fdd4 	bl	8000a4c <__aeabi_d2uiz>
		currentLevel = 0.0;
		levelCounter = 0;
 8002ea4:	2300      	movs	r3, #0
		currentLevel = 0.0;
 8002ea6:	2200      	movs	r2, #0
		level = (uint16_t)(2048*sqrt(currentLevel));
 8002ea8:	b280      	uxth	r0, r0
 8002eaa:	8030      	strh	r0, [r6, #0]
		currentLevel = 0.0;
 8002eac:	602a      	str	r2, [r5, #0]
		levelCounter = 0;
 8002eae:	8023      	strh	r3, [r4, #0]
 8002eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eb4:	2000014c 	.word	0x2000014c
 8002eb8:	20000090 	.word	0x20000090
 8002ebc:	20000092 	.word	0x20000092
 8002ec0:	20000004 	.word	0x20000004
 8002ec4:	20000138 	.word	0x20000138
 8002ec8:	20000098 	.word	0x20000098
 8002ecc:	20000094 	.word	0x20000094
 8002ed0:	447a0000 	.word	0x447a0000
 8002ed4:	40a00000 	.word	0x40a00000
 8002ed8:	20000000 	.word	0x20000000

08002edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002ede:	f04f 0c10 	mov.w	ip, #16
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ee2:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002ee4:	2503      	movs	r5, #3
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ee6:	f04f 0e02 	mov.w	lr, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002eea:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002eee:	f44f 2640 	mov.w	r6, #786432	; 0xc0000
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8002ef2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ef6:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <SystemClock_Config+0x8c>)
{
 8002ef8:	b093      	sub	sp, #76	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002efa:	6813      	ldr	r3, [r2, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002efc:	a805      	add	r0, sp, #20
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002efe:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002f02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f06:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002f08:	9505      	str	r5, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f0a:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f0c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002f0e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f12:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f16:	970f      	str	r7, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002f18:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8002f1a:	9111      	str	r1, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f1c:	f7fe fe60 	bl	8001be0 <HAL_RCC_OscConfig>
 8002f20:	b100      	cbz	r0, 8002f24 <SystemClock_Config+0x48>
 8002f22:	e7fe      	b.n	8002f22 <SystemClock_Config+0x46>
 8002f24:	4603      	mov	r3, r0
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f26:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f28:	4621      	mov	r1, r4
 8002f2a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f2c:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f2e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f30:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f32:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f34:	9200      	str	r2, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f36:	f7ff fa29 	bl	800238c <HAL_RCC_ClockConfig>
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	b100      	cbz	r0, 8002f40 <SystemClock_Config+0x64>
 8002f3e:	e7fe      	b.n	8002f3e <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002f40:	f7ff fb08 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <SystemClock_Config+0x90>)
 8002f46:	fba3 3000 	umull	r3, r0, r3, r0
 8002f4a:	0980      	lsrs	r0, r0, #6
 8002f4c:	f7fe fba6 	bl	800169c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002f50:	2004      	movs	r0, #4
 8002f52:	f7fe fbbb 	bl	80016cc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002f56:	4622      	mov	r2, r4
 8002f58:	4621      	mov	r1, r4
 8002f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5e:	f7fe fb5b 	bl	8001618 <HAL_NVIC_SetPriority>
}
 8002f62:	b013      	add	sp, #76	; 0x4c
 8002f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	10624dd3 	.word	0x10624dd3

08002f70 <main>:
{
 8002f70:	b508      	push	{r3, lr}
  HAL_Init();
 8002f72:	f7fe f81f 	bl	8000fb4 <HAL_Init>
  SystemClock_Config();
 8002f76:	f7ff ffb1 	bl	8002edc <SystemClock_Config>
  MX_GPIO_Init();
 8002f7a:	f7ff feb3 	bl	8002ce4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f7e:	f7ff fe99 	bl	8002cb4 <MX_DMA_Init>
  MX_DAC_Init();
 8002f82:	f7ff fe45 	bl	8002c10 <MX_DAC_Init>
  MX_ADC_Init();
 8002f86:	f7ff fd9b 	bl	8002ac0 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8002f8a:	f000 f8b7 	bl	80030fc <MX_USART1_UART_Init>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4806      	ldr	r0, [pc, #24]	; (8002fac <main+0x3c>)
 8002f92:	f7fe fbc3 	bl	800171c <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8002f96:	2110      	movs	r1, #16
 8002f98:	4804      	ldr	r0, [pc, #16]	; (8002fac <main+0x3c>)
 8002f9a:	f7fe fbbf 	bl	800171c <HAL_DAC_Start>
  HAL_ADC_Start_DMA(&hadc,(uint32_t *)&ADC_BUF,3);
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	4903      	ldr	r1, [pc, #12]	; (8002fb0 <main+0x40>)
 8002fa2:	4804      	ldr	r0, [pc, #16]	; (8002fb4 <main+0x44>)
 8002fa4:	f7fe fac6 	bl	8001534 <HAL_ADC_Start_DMA>
 8002fa8:	e7fe      	b.n	8002fa8 <main+0x38>
 8002faa:	bf00      	nop
 8002fac:	20000138 	.word	0x20000138
 8002fb0:	2000014c 	.word	0x2000014c
 8002fb4:	200000e4 	.word	0x200000e4

08002fb8 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002fb8:	e7fe      	b.n	8002fb8 <_Error_Handler>
 8002fba:	bf00      	nop

08002fbc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002fbc:	4b26      	ldr	r3, [pc, #152]	; (8003058 <HAL_MspInit+0x9c>)
{
 8002fbe:	b500      	push	{lr}
  __HAL_RCC_COMP_CLK_ENABLE();
 8002fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
{
 8002fc2:	b085      	sub	sp, #20
  __HAL_RCC_COMP_CLK_ENABLE();
 8002fc4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24
 8002fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fcc:	2003      	movs	r0, #3
  __HAL_RCC_COMP_CLK_ENABLE();
 8002fce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002fd2:	9201      	str	r2, [sp, #4]
 8002fd4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd6:	6a1a      	ldr	r2, [r3, #32]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	621a      	str	r2, [r3, #32]
 8002fde:	6a1a      	ldr	r2, [r3, #32]
 8002fe0:	f002 0201 	and.w	r2, r2, #1
 8002fe4:	9202      	str	r2, [sp, #8]
 8002fe6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fee:	625a      	str	r2, [r3, #36]	; 0x24
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	9303      	str	r3, [sp, #12]
 8002ff8:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ffa:	f7fe fafb 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	f06f 000b 	mvn.w	r0, #11
 8003004:	4611      	mov	r1, r2
 8003006:	f7fe fb07 	bl	8001618 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800300a:	2200      	movs	r2, #0
 800300c:	f06f 000a 	mvn.w	r0, #10
 8003010:	4611      	mov	r1, r2
 8003012:	f7fe fb01 	bl	8001618 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003016:	2200      	movs	r2, #0
 8003018:	f06f 0009 	mvn.w	r0, #9
 800301c:	4611      	mov	r1, r2
 800301e:	f7fe fafb 	bl	8001618 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003022:	2200      	movs	r2, #0
 8003024:	f06f 0004 	mvn.w	r0, #4
 8003028:	4611      	mov	r1, r2
 800302a:	f7fe faf5 	bl	8001618 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	f06f 0003 	mvn.w	r0, #3
 8003034:	4611      	mov	r1, r2
 8003036:	f7fe faef 	bl	8001618 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800303a:	2200      	movs	r2, #0
 800303c:	f06f 0001 	mvn.w	r0, #1
 8003040:	4611      	mov	r1, r2
 8003042:	f7fe fae9 	bl	8001618 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	f04f 30ff 	mov.w	r0, #4294967295
 800304c:	4611      	mov	r1, r2
 800304e:	f7fe fae3 	bl	8001618 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003052:	b005      	add	sp, #20
 8003054:	f85d fb04 	ldr.w	pc, [sp], #4
 8003058:	40023800 	.word	0x40023800

0800305c <NMI_Handler>:
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop

08003060 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003060:	e7fe      	b.n	8003060 <HardFault_Handler>
 8003062:	bf00      	nop

08003064 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003064:	e7fe      	b.n	8003064 <MemManage_Handler>
 8003066:	bf00      	nop

08003068 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003068:	e7fe      	b.n	8003068 <BusFault_Handler>
 800306a:	bf00      	nop

0800306c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800306c:	e7fe      	b.n	800306c <UsageFault_Handler>
 800306e:	bf00      	nop

08003070 <SVC_Handler>:
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop

08003074 <DebugMon_Handler>:
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop

08003078 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop

0800307c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800307c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800307e:	f7fd ffa5 	bl	8000fcc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003082:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003086:	f7fe bb2f 	b.w	80016e8 <HAL_SYSTICK_IRQHandler>
 800308a:	bf00      	nop

0800308c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800308c:	4801      	ldr	r0, [pc, #4]	; (8003094 <DMA1_Channel1_IRQHandler+0x8>)
 800308e:	f7fe bc2f 	b.w	80018f0 <HAL_DMA_IRQHandler>
 8003092:	bf00      	nop
 8003094:	200000a0 	.word	0x200000a0

08003098 <ADC1_IRQHandler>:
void ADC1_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8003098:	4801      	ldr	r0, [pc, #4]	; (80030a0 <ADC1_IRQHandler+0x8>)
 800309a:	f7fe b8bf 	b.w	800121c <HAL_ADC_IRQHandler>
 800309e:	bf00      	nop
 80030a0:	200000e4 	.word	0x200000e4

080030a4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030a4:	4801      	ldr	r0, [pc, #4]	; (80030ac <USART1_IRQHandler+0x8>)
 80030a6:	f7ff bc25 	b.w	80028f4 <HAL_UART_IRQHandler>
 80030aa:	bf00      	nop
 80030ac:	20000154 	.word	0x20000154

080030b0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030b0:	b430      	push	{r4, r5}

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80030b2:	2500      	movs	r5, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80030b4:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= (uint32_t)0x00000100;
 80030b8:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <SystemInit+0x40>)
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80030ba:	4a0e      	ldr	r2, [pc, #56]	; (80030f4 <SystemInit+0x44>)
  RCC->CR |= (uint32_t)0x00000100;
 80030bc:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80030be:	480e      	ldr	r0, [pc, #56]	; (80030f8 <SystemInit+0x48>)
  RCC->CR |= (uint32_t)0x00000100;
 80030c0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80030c4:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80030c6:	6899      	ldr	r1, [r3, #8]
 80030c8:	400a      	ands	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 80030d2:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 80030d6:	601a      	str	r2, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030de:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80030e6:	609a      	str	r2, [r3, #8]
  RCC->CIR = 0x00000000;
 80030e8:	60dd      	str	r5, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80030ea:	6084      	str	r4, [r0, #8]
#endif
}
 80030ec:	bc30      	pop	{r4, r5}
 80030ee:	4770      	bx	lr
 80030f0:	40023800 	.word	0x40023800
 80030f4:	88ffc00c 	.word	0x88ffc00c
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80030fc:	b538      	push	{r3, r4, r5, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030fe:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 115200;
 8003100:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003104:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <MX_USART1_UART_Init+0x34>)
 8003108:	4c0a      	ldr	r4, [pc, #40]	; (8003134 <MX_USART1_UART_Init+0x38>)
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800310a:	4618      	mov	r0, r3
  huart1.Instance = USART1;
 800310c:	e883 0030 	stmia.w	r3, {r4, r5}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003110:	6159      	str	r1, [r3, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003112:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003114:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003116:	611a      	str	r2, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003118:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800311a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800311c:	f7ff fbb6 	bl	800288c <HAL_UART_Init>
 8003120:	b900      	cbnz	r0, 8003124 <MX_USART1_UART_Init+0x28>
 8003122:	bd38      	pop	{r3, r4, r5, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8003124:	2142      	movs	r1, #66	; 0x42
  }

}
 8003126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _Error_Handler(__FILE__, __LINE__);
 800312a:	4803      	ldr	r0, [pc, #12]	; (8003138 <MX_USART1_UART_Init+0x3c>)
 800312c:	f7ff bf44 	b.w	8002fb8 <_Error_Handler>
 8003130:	20000154 	.word	0x20000154
 8003134:	40013800 	.word	0x40013800
 8003138:	0800349c 	.word	0x0800349c

0800313c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 800313c:	6802      	ldr	r2, [r0, #0]
 800313e:	4b15      	ldr	r3, [pc, #84]	; (8003194 <HAL_UART_MspInit+0x58>)
 8003140:	429a      	cmp	r2, r3
 8003142:	d000      	beq.n	8003146 <HAL_UART_MspInit+0xa>
 8003144:	4770      	bx	lr
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003146:	f44f 60c0 	mov.w	r0, #1536	; 0x600
{
 800314a:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800314e:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003150:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003152:	2407      	movs	r4, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8003154:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003158:	6a1a      	ldr	r2, [r3, #32]
{
 800315a:	b087      	sub	sp, #28
    __HAL_RCC_USART1_CLK_ENABLE();
 800315c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003160:	621a      	str	r2, [r3, #32]
 8003162:	6a1b      	ldr	r3, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003164:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8003166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800316a:	9001      	str	r0, [sp, #4]
    __HAL_RCC_USART1_CLK_ENABLE();
 800316c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316e:	480a      	ldr	r0, [pc, #40]	; (8003198 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003170:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003174:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003176:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003178:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317a:	f7fe fc05 	bl	8001988 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2025      	movs	r0, #37	; 0x25
 8003182:	4611      	mov	r1, r2
 8003184:	f7fe fa48 	bl	8001618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003188:	2025      	movs	r0, #37	; 0x25
 800318a:	f7fe fa7b 	bl	8001684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800318e:	b007      	add	sp, #28
 8003190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003192:	bf00      	nop
 8003194:	40013800 	.word	0x40013800
 8003198:	40020000 	.word	0x40020000

0800319c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800319c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800319e:	e003      	b.n	80031a8 <LoopCopyDataInit>

080031a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80031a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80031a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80031a6:	3104      	adds	r1, #4

080031a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80031a8:	480a      	ldr	r0, [pc, #40]	; (80031d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80031ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80031ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80031b0:	d3f6      	bcc.n	80031a0 <CopyDataInit>
  ldr r2, =_sbss
 80031b2:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80031b4:	e002      	b.n	80031bc <LoopFillZerobss>

080031b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80031b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80031b8:	f842 3b04 	str.w	r3, [r2], #4

080031bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80031be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80031c0:	d3f9      	bcc.n	80031b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031c2:	f7ff ff75 	bl	80030b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031c6:	f000 f80f 	bl	80031e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031ca:	f7ff fed1 	bl	8002f70 <main>
  bx lr
 80031ce:	4770      	bx	lr
  ldr r3, =_sidata
 80031d0:	080034bc 	.word	0x080034bc
  ldr r0, =_sdata
 80031d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80031d8:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80031dc:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80031e0:	20000194 	.word	0x20000194

080031e4 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031e4:	e7fe      	b.n	80031e4 <COMP_IRQHandler>
	...

080031e8 <__libc_init_array>:
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	2500      	movs	r5, #0
 80031ec:	4e0c      	ldr	r6, [pc, #48]	; (8003220 <__libc_init_array+0x38>)
 80031ee:	4c0d      	ldr	r4, [pc, #52]	; (8003224 <__libc_init_array+0x3c>)
 80031f0:	1ba4      	subs	r4, r4, r6
 80031f2:	10a4      	asrs	r4, r4, #2
 80031f4:	42a5      	cmp	r5, r4
 80031f6:	d109      	bne.n	800320c <__libc_init_array+0x24>
 80031f8:	f000 f922 	bl	8003440 <_init>
 80031fc:	2500      	movs	r5, #0
 80031fe:	4e0a      	ldr	r6, [pc, #40]	; (8003228 <__libc_init_array+0x40>)
 8003200:	4c0a      	ldr	r4, [pc, #40]	; (800322c <__libc_init_array+0x44>)
 8003202:	1ba4      	subs	r4, r4, r6
 8003204:	10a4      	asrs	r4, r4, #2
 8003206:	42a5      	cmp	r5, r4
 8003208:	d105      	bne.n	8003216 <__libc_init_array+0x2e>
 800320a:	bd70      	pop	{r4, r5, r6, pc}
 800320c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003210:	4798      	blx	r3
 8003212:	3501      	adds	r5, #1
 8003214:	e7ee      	b.n	80031f4 <__libc_init_array+0xc>
 8003216:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800321a:	4798      	blx	r3
 800321c:	3501      	adds	r5, #1
 800321e:	e7f2      	b.n	8003206 <__libc_init_array+0x1e>
 8003220:	080034b4 	.word	0x080034b4
 8003224:	080034b4 	.word	0x080034b4
 8003228:	080034b4 	.word	0x080034b4
 800322c:	080034b8 	.word	0x080034b8

08003230 <sqrt>:
 8003230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003234:	b08b      	sub	sp, #44	; 0x2c
 8003236:	4604      	mov	r4, r0
 8003238:	460d      	mov	r5, r1
 800323a:	f000 f84d 	bl	80032d8 <__ieee754_sqrt>
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <sqrt+0xa0>)
 8003240:	4680      	mov	r8, r0
 8003242:	f993 a000 	ldrsb.w	sl, [r3]
 8003246:	4689      	mov	r9, r1
 8003248:	f1ba 3fff 	cmp.w	sl, #4294967295
 800324c:	d02b      	beq.n	80032a6 <sqrt+0x76>
 800324e:	4622      	mov	r2, r4
 8003250:	462b      	mov	r3, r5
 8003252:	4620      	mov	r0, r4
 8003254:	4629      	mov	r1, r5
 8003256:	f7fd fbe3 	bl	8000a20 <__aeabi_dcmpun>
 800325a:	4683      	mov	fp, r0
 800325c:	bb18      	cbnz	r0, 80032a6 <sqrt+0x76>
 800325e:	2600      	movs	r6, #0
 8003260:	2700      	movs	r7, #0
 8003262:	4632      	mov	r2, r6
 8003264:	463b      	mov	r3, r7
 8003266:	4620      	mov	r0, r4
 8003268:	4629      	mov	r1, r5
 800326a:	f7fd fbb1 	bl	80009d0 <__aeabi_dcmplt>
 800326e:	b1d0      	cbz	r0, 80032a6 <sqrt+0x76>
 8003270:	2301      	movs	r3, #1
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	4b17      	ldr	r3, [pc, #92]	; (80032d4 <sqrt+0xa4>)
 8003276:	f8cd b020 	str.w	fp, [sp, #32]
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003280:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003284:	f1ba 0f00 	cmp.w	sl, #0
 8003288:	d112      	bne.n	80032b0 <sqrt+0x80>
 800328a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800328e:	4668      	mov	r0, sp
 8003290:	f000 f8ce 	bl	8003430 <matherr>
 8003294:	b1b8      	cbz	r0, 80032c6 <sqrt+0x96>
 8003296:	9b08      	ldr	r3, [sp, #32]
 8003298:	b11b      	cbz	r3, 80032a2 <sqrt+0x72>
 800329a:	f000 f8cb 	bl	8003434 <__errno>
 800329e:	9b08      	ldr	r3, [sp, #32]
 80032a0:	6003      	str	r3, [r0, #0]
 80032a2:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80032a6:	4640      	mov	r0, r8
 80032a8:	4649      	mov	r1, r9
 80032aa:	b00b      	add	sp, #44	; 0x2c
 80032ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032b0:	4632      	mov	r2, r6
 80032b2:	463b      	mov	r3, r7
 80032b4:	4630      	mov	r0, r6
 80032b6:	4639      	mov	r1, r7
 80032b8:	f7fd fa42 	bl	8000740 <__aeabi_ddiv>
 80032bc:	f1ba 0f02 	cmp.w	sl, #2
 80032c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80032c4:	d1e3      	bne.n	800328e <sqrt+0x5e>
 80032c6:	f000 f8b5 	bl	8003434 <__errno>
 80032ca:	2321      	movs	r3, #33	; 0x21
 80032cc:	6003      	str	r3, [r0, #0]
 80032ce:	e7e2      	b.n	8003296 <sqrt+0x66>
 80032d0:	2000000c 	.word	0x2000000c
 80032d4:	080034ac 	.word	0x080034ac

080032d8 <__ieee754_sqrt>:
 80032d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032dc:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800342c <__ieee754_sqrt+0x154>
 80032e0:	4606      	mov	r6, r0
 80032e2:	ea3e 0e01 	bics.w	lr, lr, r1
 80032e6:	460d      	mov	r5, r1
 80032e8:	4607      	mov	r7, r0
 80032ea:	460a      	mov	r2, r1
 80032ec:	460c      	mov	r4, r1
 80032ee:	4603      	mov	r3, r0
 80032f0:	d10f      	bne.n	8003312 <__ieee754_sqrt+0x3a>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	f7fd f8f9 	bl	80004ec <__aeabi_dmul>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4630      	mov	r0, r6
 8003300:	4629      	mov	r1, r5
 8003302:	f7fc ff41 	bl	8000188 <__adddf3>
 8003306:	4606      	mov	r6, r0
 8003308:	460d      	mov	r5, r1
 800330a:	4630      	mov	r0, r6
 800330c:	4629      	mov	r1, r5
 800330e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003312:	2900      	cmp	r1, #0
 8003314:	dc0e      	bgt.n	8003334 <__ieee754_sqrt+0x5c>
 8003316:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800331a:	ea5e 0707 	orrs.w	r7, lr, r7
 800331e:	d0f4      	beq.n	800330a <__ieee754_sqrt+0x32>
 8003320:	b141      	cbz	r1, 8003334 <__ieee754_sqrt+0x5c>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	f7fc ff2d 	bl	8000184 <__aeabi_dsub>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	f7fd fa07 	bl	8000740 <__aeabi_ddiv>
 8003332:	e7e8      	b.n	8003306 <__ieee754_sqrt+0x2e>
 8003334:	1512      	asrs	r2, r2, #20
 8003336:	d10c      	bne.n	8003352 <__ieee754_sqrt+0x7a>
 8003338:	2c00      	cmp	r4, #0
 800333a:	d06e      	beq.n	800341a <__ieee754_sqrt+0x142>
 800333c:	2100      	movs	r1, #0
 800333e:	02e6      	lsls	r6, r4, #11
 8003340:	d56f      	bpl.n	8003422 <__ieee754_sqrt+0x14a>
 8003342:	1e48      	subs	r0, r1, #1
 8003344:	1a12      	subs	r2, r2, r0
 8003346:	f1c1 0020 	rsb	r0, r1, #32
 800334a:	fa23 f000 	lsr.w	r0, r3, r0
 800334e:	4304      	orrs	r4, r0
 8003350:	408b      	lsls	r3, r1
 8003352:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003356:	07d5      	lsls	r5, r2, #31
 8003358:	f04f 0500 	mov.w	r5, #0
 800335c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003360:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8003364:	bf42      	ittt	mi
 8003366:	0064      	lslmi	r4, r4, #1
 8003368:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 800336c:	005b      	lslmi	r3, r3, #1
 800336e:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8003372:	1050      	asrs	r0, r2, #1
 8003374:	4421      	add	r1, r4
 8003376:	2216      	movs	r2, #22
 8003378:	462c      	mov	r4, r5
 800337a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	19a7      	adds	r7, r4, r6
 8003382:	428f      	cmp	r7, r1
 8003384:	bfde      	ittt	le
 8003386:	1bc9      	suble	r1, r1, r7
 8003388:	19bc      	addle	r4, r7, r6
 800338a:	19ad      	addle	r5, r5, r6
 800338c:	0049      	lsls	r1, r1, #1
 800338e:	3a01      	subs	r2, #1
 8003390:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8003394:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003398:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800339c:	d1f0      	bne.n	8003380 <__ieee754_sqrt+0xa8>
 800339e:	f04f 0e20 	mov.w	lr, #32
 80033a2:	4694      	mov	ip, r2
 80033a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80033a8:	42a1      	cmp	r1, r4
 80033aa:	eb06 070c 	add.w	r7, r6, ip
 80033ae:	dc02      	bgt.n	80033b6 <__ieee754_sqrt+0xde>
 80033b0:	d112      	bne.n	80033d8 <__ieee754_sqrt+0x100>
 80033b2:	429f      	cmp	r7, r3
 80033b4:	d810      	bhi.n	80033d8 <__ieee754_sqrt+0x100>
 80033b6:	2f00      	cmp	r7, #0
 80033b8:	eb07 0c06 	add.w	ip, r7, r6
 80033bc:	da34      	bge.n	8003428 <__ieee754_sqrt+0x150>
 80033be:	f1bc 0f00 	cmp.w	ip, #0
 80033c2:	db31      	blt.n	8003428 <__ieee754_sqrt+0x150>
 80033c4:	f104 0801 	add.w	r8, r4, #1
 80033c8:	1b09      	subs	r1, r1, r4
 80033ca:	4644      	mov	r4, r8
 80033cc:	429f      	cmp	r7, r3
 80033ce:	bf88      	it	hi
 80033d0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80033d4:	1bdb      	subs	r3, r3, r7
 80033d6:	4432      	add	r2, r6
 80033d8:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 80033dc:	f1be 0e01 	subs.w	lr, lr, #1
 80033e0:	4439      	add	r1, r7
 80033e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80033e6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80033ea:	d1dd      	bne.n	80033a8 <__ieee754_sqrt+0xd0>
 80033ec:	430b      	orrs	r3, r1
 80033ee:	d006      	beq.n	80033fe <__ieee754_sqrt+0x126>
 80033f0:	1c54      	adds	r4, r2, #1
 80033f2:	bf0b      	itete	eq
 80033f4:	4672      	moveq	r2, lr
 80033f6:	3201      	addne	r2, #1
 80033f8:	3501      	addeq	r5, #1
 80033fa:	f022 0201 	bicne.w	r2, r2, #1
 80033fe:	106b      	asrs	r3, r5, #1
 8003400:	0852      	lsrs	r2, r2, #1
 8003402:	07e9      	lsls	r1, r5, #31
 8003404:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003408:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800340c:	bf48      	it	mi
 800340e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003412:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 8003416:	4616      	mov	r6, r2
 8003418:	e777      	b.n	800330a <__ieee754_sqrt+0x32>
 800341a:	0adc      	lsrs	r4, r3, #11
 800341c:	3a15      	subs	r2, #21
 800341e:	055b      	lsls	r3, r3, #21
 8003420:	e78a      	b.n	8003338 <__ieee754_sqrt+0x60>
 8003422:	0064      	lsls	r4, r4, #1
 8003424:	3101      	adds	r1, #1
 8003426:	e78a      	b.n	800333e <__ieee754_sqrt+0x66>
 8003428:	46a0      	mov	r8, r4
 800342a:	e7cd      	b.n	80033c8 <__ieee754_sqrt+0xf0>
 800342c:	7ff00000 	.word	0x7ff00000

08003430 <matherr>:
 8003430:	2000      	movs	r0, #0
 8003432:	4770      	bx	lr

08003434 <__errno>:
 8003434:	4b01      	ldr	r3, [pc, #4]	; (800343c <__errno+0x8>)
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000010 	.word	0x20000010

08003440 <_init>:
 8003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003442:	bf00      	nop
 8003444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003446:	bc08      	pop	{r3}
 8003448:	469e      	mov	lr, r3
 800344a:	4770      	bx	lr

0800344c <_fini>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	bf00      	nop
 8003450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003452:	bc08      	pop	{r3}
 8003454:	469e      	mov	lr, r3
 8003456:	4770      	bx	lr
