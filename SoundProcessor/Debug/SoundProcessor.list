
SoundProcessor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f18  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002054  08002054  00012054  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080020a0  080020a0  000120a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080020a4  080020a4  000120a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080020a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000110  20000004  080020ac  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000114  080020ac  00020114  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000148be  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e3d  00000000  00000000  000348eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b4f  00000000  00000000  00037728  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000748  00000000  00000000  0003b278  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ab8  00000000  00000000  0003b9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005573  00000000  00000000  0003c478  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000029e4  00000000  00000000  000419eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000443cf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001204  00000000  00000000  0004444c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	0800203c 	.word	0x0800203c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	0800203c 	.word	0x0800203c

0800017c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800017c:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <HAL_InitTick+0x24>)
{
 800017e:	b510      	push	{r4, lr}
 8000180:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000182:	6818      	ldr	r0, [r3, #0]
 8000184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000188:	fbb0 f0f3 	udiv	r0, r0, r3
 800018c:	f000 fb52 	bl	8000834 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000190:	2200      	movs	r2, #0
 8000192:	4621      	mov	r1, r4
 8000194:	f04f 30ff 	mov.w	r0, #4294967295
 8000198:	f000 fb0c 	bl	80007b4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800019c:	2000      	movs	r0, #0
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000

080001a4 <HAL_Init>:
{
 80001a4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a6:	2003      	movs	r0, #3
 80001a8:	f000 faf2 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ac:	2000      	movs	r0, #0
 80001ae:	f7ff ffe5 	bl	800017c <HAL_InitTick>
  HAL_MspInit();
 80001b2:	f001 fe15 	bl	8001de0 <HAL_MspInit>
}
 80001b6:	2000      	movs	r0, #0
 80001b8:	bd08      	pop	{r3, pc}
	...

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001bc:	4a02      	ldr	r2, [pc, #8]	; (80001c8 <HAL_IncTick+0xc>)
 80001be:	6813      	ldr	r3, [r2, #0]
 80001c0:	3301      	adds	r3, #1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000020 	.word	0x20000020

080001cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001cc:	4b01      	ldr	r3, [pc, #4]	; (80001d4 <HAL_GetTick+0x8>)
 80001ce:	6818      	ldr	r0, [r3, #0]
}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000020 	.word	0x20000020

080001d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80001d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80001da:	4604      	mov	r4, r0
 80001dc:	b908      	cbnz	r0, 80001e2 <HAL_ADC_Init+0xa>
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 80001de:	2001      	movs	r0, #1
 80001e0:	e092      	b.n	8000308 <HAL_ADC_Init+0x130>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80001e2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80001e4:	b973      	cbnz	r3, 8000204 <HAL_ADC_Init+0x2c>
    ADC_CLEAR_ERRORCODE(hadc);
 80001e6:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 80001e8:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80001ec:	4b54      	ldr	r3, [pc, #336]	; (8000340 <HAL_ADC_Init+0x168>)
 80001ee:	6a1a      	ldr	r2, [r3, #32]
 80001f0:	f042 0201 	orr.w	r2, r2, #1
 80001f4:	621a      	str	r2, [r3, #32]
 80001f6:	6a1b      	ldr	r3, [r3, #32]
 80001f8:	f003 0301 	and.w	r3, r3, #1
 80001fc:	9301      	str	r3, [sp, #4]
 80001fe:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8000200:	f001 fc88 	bl	8001b14 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000204:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000206:	06db      	lsls	r3, r3, #27
 8000208:	d4e9      	bmi.n	80001de <HAL_ADC_Init+0x6>
    ADC_STATE_CLR_SET(hadc->State,
 800020a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 800020c:	4a4d      	ldr	r2, [pc, #308]	; (8000344 <HAL_ADC_Init+0x16c>)
    ADC_STATE_CLR_SET(hadc->State,
 800020e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000212:	f023 0302 	bic.w	r3, r3, #2
 8000216:	f043 0302 	orr.w	r3, r3, #2
 800021a:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 800021c:	6853      	ldr	r3, [r2, #4]
 800021e:	6861      	ldr	r1, [r4, #4]
 8000220:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000224:	430b      	orrs	r3, r1
 8000226:	6053      	str	r3, [r2, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000228:	f44f 7000 	mov.w	r0, #512	; 0x200
 800022c:	fa90 f0a0 	rbit	r0, r0
 8000230:	2302      	movs	r3, #2
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000232:	fab0 f080 	clz	r0, r0
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 8000236:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000238:	fa93 f3a3 	rbit	r3, r3
 800023c:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000240:	6965      	ldr	r5, [r4, #20]
 8000242:	68e2      	ldr	r2, [r4, #12]
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 8000244:	fa01 f303 	lsl.w	r3, r1, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000248:	432a      	orrs	r2, r5
 800024a:	6a25      	ldr	r5, [r4, #32]
 800024c:	432a      	orrs	r2, r5
 800024e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000250:	fa05 f000 	lsl.w	r0, r5, r0
 8000254:	4302      	orrs	r2, r0
                hadc->Init.ChannelsBank                              |
 8000256:	4313      	orrs	r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000258:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800025a:	6925      	ldr	r5, [r4, #16]
 800025c:	2a10      	cmp	r2, #16
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800025e:	bf1c      	itt	ne
 8000260:	6ba0      	ldrne	r0, [r4, #56]	; 0x38
 8000262:	4302      	orrne	r2, r0
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000264:	6820      	ldr	r0, [r4, #0]
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000266:	bf18      	it	ne
 8000268:	4313      	orrne	r3, r2
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800026a:	6802      	ldr	r2, [r0, #0]
 800026c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8000270:	d123      	bne.n	80002ba <HAL_ADC_Init+0xe2>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000272:	69a6      	ldr	r6, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000274:	69e7      	ldr	r7, [r4, #28]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000276:	4333      	orrs	r3, r6
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000278:	68a6      	ldr	r6, [r4, #8]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800027a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800027e:	ea46 0607 	orr.w	r6, r6, r7
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000282:	d043      	beq.n	800030c <HAL_ADC_Init+0x134>
 8000284:	2d01      	cmp	r5, #1
 8000286:	bf08      	it	eq
 8000288:	f44f 7280 	moveq.w	r2, #256	; 0x100
                  hadc->Init.LowPowerAutoPowerOff           |
 800028c:	4332      	orrs	r2, r6
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800028e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000290:	2e01      	cmp	r6, #1
 8000292:	d10d      	bne.n	80002b0 <HAL_ADC_Init+0xd8>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000294:	2900      	cmp	r1, #0
 8000296:	d13b      	bne.n	8000310 <HAL_ADC_Init+0x138>
 8000298:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800029c:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002a0:	fab1 f681 	clz	r6, r1
 80002a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80002a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80002aa:	3901      	subs	r1, #1
 80002ac:	40b1      	lsls	r1, r6
 80002ae:	430a      	orrs	r2, r1
        MODIFY_REG(hadc->Instance->CR1,
 80002b0:	6846      	ldr	r6, [r0, #4]
 80002b2:	4925      	ldr	r1, [pc, #148]	; (8000348 <HAL_ADC_Init+0x170>)
 80002b4:	4031      	ands	r1, r6
 80002b6:	430a      	orrs	r2, r1
 80002b8:	6042      	str	r2, [r0, #4]
    MODIFY_REG(hadc->Instance->CR2    ,
 80002ba:	6881      	ldr	r1, [r0, #8]
 80002bc:	4a23      	ldr	r2, [pc, #140]	; (800034c <HAL_ADC_Init+0x174>)
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80002be:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 80002c2:	ea02 0201 	and.w	r2, r2, r1
 80002c6:	ea42 0203 	orr.w	r2, r2, r3
 80002ca:	6082      	str	r2, [r0, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80002cc:	d001      	beq.n	80002d2 <HAL_ADC_Init+0xfa>
 80002ce:	2d01      	cmp	r5, #1
 80002d0:	d127      	bne.n	8000322 <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80002d2:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80002d4:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80002d8:	fa92 f2a2 	rbit	r2, r2
 80002dc:	fab2 f182 	clz	r1, r2
 80002e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002e2:	3a01      	subs	r2, #1
 80002e4:	408a      	lsls	r2, r1
 80002e6:	f025 71f8 	bic.w	r1, r5, #32505856	; 0x1f00000
 80002ea:	430a      	orrs	r2, r1
      MODIFY_REG(hadc->Instance->SQR1,
 80002ec:	6302      	str	r2, [r0, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80002ee:	6881      	ldr	r1, [r0, #8]
 80002f0:	4a17      	ldr	r2, [pc, #92]	; (8000350 <HAL_ADC_Init+0x178>)
 80002f2:	400a      	ands	r2, r1
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d118      	bne.n	800032a <HAL_ADC_Init+0x152>
      ADC_CLEAR_ERRORCODE(hadc);
 80002f8:	2000      	movs	r0, #0
 80002fa:	6520      	str	r0, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 80002fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80002fe:	f023 0303 	bic.w	r3, r3, #3
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000308:	b003      	add	sp, #12
 800030a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800030c:	462a      	mov	r2, r5
 800030e:	e7bd      	b.n	800028c <HAL_ADC_Init+0xb4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000310:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000312:	f041 0120 	orr.w	r1, r1, #32
 8000316:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000318:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800031a:	f041 0101 	orr.w	r1, r1, #1
 800031e:	6521      	str	r1, [r4, #80]	; 0x50
 8000320:	e7c6      	b.n	80002b0 <HAL_ADC_Init+0xd8>
      MODIFY_REG(hadc->Instance->SQR1,
 8000322:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000324:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000328:	e7e0      	b.n	80002ec <HAL_ADC_Init+0x114>
      ADC_STATE_CLR_SET(hadc->State,
 800032a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800032c:	f023 0312 	bic.w	r3, r3, #18
 8000330:	f043 0310 	orr.w	r3, r3, #16
 8000334:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000336:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6523      	str	r3, [r4, #80]	; 0x50
 800033e:	e74e      	b.n	80001de <HAL_ADC_Init+0x6>
 8000340:	40023800 	.word	0x40023800
 8000344:	40012700 	.word	0x40012700
 8000348:	fcfc16ff 	.word	0xfcfc16ff
 800034c:	c0fff18d 	.word	0xc0fff18d
 8000350:	bf80fffe 	.word	0xbf80fffe

08000354 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000354:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000356:	b510      	push	{r4, lr}
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000358:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800035a:	f012 0f50 	tst.w	r2, #80	; 0x50
 800035e:	d124      	bne.n	80003aa <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000360:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000366:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	6891      	ldr	r1, [r2, #8]
 800036c:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8000370:	d117      	bne.n	80003a2 <ADC_DMAConvCplt+0x4e>
 8000372:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000374:	b9a9      	cbnz	r1, 80003a2 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000376:	6b11      	ldr	r1, [r2, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000378:	f011 7ff8 	tst.w	r1, #32505856	; 0x1f00000
 800037c:	d002      	beq.n	8000384 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800037e:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000380:	0549      	lsls	r1, r1, #21
 8000382:	d40e      	bmi.n	80003a2 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000384:	6851      	ldr	r1, [r2, #4]
 8000386:	f021 0120 	bic.w	r1, r1, #32
 800038a:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800038c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800038e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000392:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000394:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000396:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000398:	bf5e      	ittt	pl
 800039a:	6cda      	ldrpl	r2, [r3, #76]	; 0x4c
 800039c:	f042 0201 	orrpl.w	r2, r2, #1
 80003a0:	64da      	strpl	r2, [r3, #76]	; 0x4c
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 80003a2:	4618      	mov	r0, r3
 80003a4:	f001 fc9c 	bl	8001ce0 <HAL_ADC_ConvCpltCallback>
 80003a8:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80003aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  }
}
 80003ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4718      	bx	r3

080003b4 <HAL_ADC_ConvHalfCpltCallback>:
 80003b4:	4770      	bx	lr

080003b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80003b6:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80003b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80003ba:	f7ff fffb 	bl	80003b4 <HAL_ADC_ConvHalfCpltCallback>
 80003be:	bd08      	pop	{r3, pc}

080003c0 <HAL_ADC_LevelOutOfWindowCallback>:
 80003c0:	4770      	bx	lr

080003c2 <HAL_ADC_ErrorCallback>:
{
 80003c2:	4770      	bx	lr

080003c4 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80003c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80003c6:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80003c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80003ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ce:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80003d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80003d8:	f7ff fff3 	bl	80003c2 <HAL_ADC_ErrorCallback>
 80003dc:	bd08      	pop	{r3, pc}

080003de <HAL_ADC_IRQHandler>:
{
 80003de:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80003e0:	6803      	ldr	r3, [r0, #0]
{
 80003e2:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80003e4:	685a      	ldr	r2, [r3, #4]
 80003e6:	0691      	lsls	r1, r2, #26
 80003e8:	d52c      	bpl.n	8000444 <HAL_ADC_IRQHandler+0x66>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	0792      	lsls	r2, r2, #30
 80003ee:	d529      	bpl.n	8000444 <HAL_ADC_IRQHandler+0x66>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003f0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80003f2:	06d5      	lsls	r5, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80003f4:	bf5e      	ittt	pl
 80003f6:	6cc2      	ldrpl	r2, [r0, #76]	; 0x4c
 80003f8:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80003fc:	64c2      	strpl	r2, [r0, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80003fe:	689a      	ldr	r2, [r3, #8]
 8000400:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000404:	d117      	bne.n	8000436 <HAL_ADC_IRQHandler+0x58>
 8000406:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000408:	b9aa      	cbnz	r2, 8000436 <HAL_ADC_IRQHandler+0x58>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800040a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800040c:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8000410:	d002      	beq.n	8000418 <HAL_ADC_IRQHandler+0x3a>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000412:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000414:	0550      	lsls	r0, r2, #21
 8000416:	d40e      	bmi.n	8000436 <HAL_ADC_IRQHandler+0x58>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000418:	685a      	ldr	r2, [r3, #4]
 800041a:	f022 0220 	bic.w	r2, r2, #32
 800041e:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000420:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000422:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000426:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000428:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800042a:	04d9      	lsls	r1, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800042c:	bf5e      	ittt	pl
 800042e:	6ce3      	ldrpl	r3, [r4, #76]	; 0x4c
 8000430:	f043 0301 	orrpl.w	r3, r3, #1
 8000434:	64e3      	strpl	r3, [r4, #76]	; 0x4c
      HAL_ADC_ConvCpltCallback(hadc);
 8000436:	4620      	mov	r0, r4
 8000438:	f001 fc52 	bl	8001ce0 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800043c:	f06f 0212 	mvn.w	r2, #18
 8000440:	6823      	ldr	r3, [r4, #0]
 8000442:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000444:	6823      	ldr	r3, [r4, #0]
 8000446:	685a      	ldr	r2, [r3, #4]
 8000448:	0612      	lsls	r2, r2, #24
 800044a:	d533      	bpl.n	80004b4 <HAL_ADC_IRQHandler+0xd6>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	0755      	lsls	r5, r2, #29
 8000450:	d530      	bpl.n	80004b4 <HAL_ADC_IRQHandler+0xd6>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000452:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8000454:	06d0      	lsls	r0, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000456:	bf5e      	ittt	pl
 8000458:	6ce2      	ldrpl	r2, [r4, #76]	; 0x4c
 800045a:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800045e:	64e2      	strpl	r2, [r4, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000460:	689a      	ldr	r2, [r3, #8]
 8000462:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000466:	d11e      	bne.n	80004a6 <HAL_ADC_IRQHandler+0xc8>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800046a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800046e:	d002      	beq.n	8000476 <HAL_ADC_IRQHandler+0x98>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000470:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000472:	0551      	lsls	r1, r2, #21
 8000474:	d417      	bmi.n	80004a6 <HAL_ADC_IRQHandler+0xc8>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000476:	685a      	ldr	r2, [r3, #4]
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000478:	0552      	lsls	r2, r2, #21
 800047a:	d414      	bmi.n	80004a6 <HAL_ADC_IRQHandler+0xc8>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800047c:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800047e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000482:	d110      	bne.n	80004a6 <HAL_ADC_IRQHandler+0xc8>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000484:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000486:	b972      	cbnz	r2, 80004a6 <HAL_ADC_IRQHandler+0xc8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000488:	685a      	ldr	r2, [r3, #4]
 800048a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800048e:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000490:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000496:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000498:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800049a:	05db      	lsls	r3, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800049c:	bf5e      	ittt	pl
 800049e:	6ce3      	ldrpl	r3, [r4, #76]	; 0x4c
 80004a0:	f043 0301 	orrpl.w	r3, r3, #1
 80004a4:	64e3      	strpl	r3, [r4, #76]	; 0x4c
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80004a6:	4620      	mov	r0, r4
 80004a8:	f000 f970 	bl	800078c <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80004ac:	f06f 020c 	mvn.w	r2, #12
 80004b0:	6823      	ldr	r3, [r4, #0]
 80004b2:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80004b4:	6823      	ldr	r3, [r4, #0]
 80004b6:	685a      	ldr	r2, [r3, #4]
 80004b8:	0655      	lsls	r5, r2, #25
 80004ba:	d50d      	bpl.n	80004d8 <HAL_ADC_IRQHandler+0xfa>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	07d8      	lsls	r0, r3, #31
 80004c0:	d50a      	bpl.n	80004d8 <HAL_ADC_IRQHandler+0xfa>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80004c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80004c4:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80004c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004ca:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80004cc:	f7ff ff78 	bl	80003c0 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80004d0:	f06f 0201 	mvn.w	r2, #1
 80004d4:	6823      	ldr	r3, [r4, #0]
 80004d6:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80004d8:	6823      	ldr	r3, [r4, #0]
 80004da:	685a      	ldr	r2, [r3, #4]
 80004dc:	0151      	lsls	r1, r2, #5
 80004de:	d50e      	bpl.n	80004fe <HAL_ADC_IRQHandler+0x120>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	0692      	lsls	r2, r2, #26
 80004e4:	d50b      	bpl.n	80004fe <HAL_ADC_IRQHandler+0x120>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80004e6:	f06f 0520 	mvn.w	r5, #32
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80004ea:	6d22      	ldr	r2, [r4, #80]	; 0x50
      HAL_ADC_ErrorCallback(hadc);
 80004ec:	4620      	mov	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80004ee:	f042 0202 	orr.w	r2, r2, #2
 80004f2:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80004f4:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80004f6:	f7ff ff64 	bl	80003c2 <HAL_ADC_ErrorCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80004fa:	6823      	ldr	r3, [r4, #0]
 80004fc:	601d      	str	r5, [r3, #0]
 80004fe:	bd38      	pop	{r3, r4, r5, pc}

08000500 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 8000500:	2300      	movs	r3, #0
{
 8000502:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8000504:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000506:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800050a:	2b01      	cmp	r3, #1
 800050c:	f000 809c 	beq.w	8000648 <HAL_ADC_ConfigChannel+0x148>
 8000510:	2301      	movs	r3, #1
  if (sConfig->Rank < 7)
 8000512:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000514:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 8000518:	2d06      	cmp	r5, #6
 800051a:	6804      	ldr	r4, [r0, #0]
 800051c:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000520:	680a      	ldr	r2, [r1, #0]
 8000522:	d821      	bhi.n	8000568 <HAL_ADC_ConfigChannel+0x68>
    MODIFY_REG(hadc->Instance->SQR5,
 8000524:	442b      	add	r3, r5
 8000526:	251f      	movs	r5, #31
 8000528:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800052a:	3b05      	subs	r3, #5
 800052c:	409d      	lsls	r5, r3
 800052e:	ea26 0505 	bic.w	r5, r6, r5
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	432b      	orrs	r3, r5
 8000538:	6423      	str	r3, [r4, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 800053a:	2a09      	cmp	r2, #9
 800053c:	d84a      	bhi.n	80005d4 <HAL_ADC_ConfigChannel+0xd4>
    MODIFY_REG(hadc->Instance->SMPR3,
 800053e:	2507      	movs	r5, #7
 8000540:	6963      	ldr	r3, [r4, #20]
 8000542:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 8000546:	6889      	ldr	r1, [r1, #8]
 8000548:	40b5      	lsls	r5, r6
 800054a:	ea23 0305 	bic.w	r3, r3, r5
 800054e:	40b1      	lsls	r1, r6
 8000550:	430b      	orrs	r3, r1
 8000552:	6163      	str	r3, [r4, #20]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000554:	f1a2 0310 	sub.w	r3, r2, #16
 8000558:	2b01      	cmp	r3, #1
 800055a:	d95d      	bls.n	8000618 <HAL_ADC_ConfigChannel+0x118>
  __HAL_UNLOCK(hadc);
 800055c:	2300      	movs	r3, #0
 800055e:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  return tmp_hal_status;
 8000562:	4618      	mov	r0, r3
}
 8000564:	b002      	add	sp, #8
 8000566:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13)
 8000568:	2d0c      	cmp	r5, #12
 800056a:	d80b      	bhi.n	8000584 <HAL_ADC_ConfigChannel+0x84>
    MODIFY_REG(hadc->Instance->SQR4,
 800056c:	442b      	add	r3, r5
 800056e:	251f      	movs	r5, #31
 8000570:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8000572:	3b23      	subs	r3, #35	; 0x23
 8000574:	409d      	lsls	r5, r3
 8000576:	ea26 0505 	bic.w	r5, r6, r5
 800057a:	fa02 f303 	lsl.w	r3, r2, r3
 800057e:	432b      	orrs	r3, r5
 8000580:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000582:	e7da      	b.n	800053a <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 19)
 8000584:	2d12      	cmp	r5, #18
 8000586:	d80b      	bhi.n	80005a0 <HAL_ADC_ConfigChannel+0xa0>
    MODIFY_REG(hadc->Instance->SQR3,
 8000588:	442b      	add	r3, r5
 800058a:	251f      	movs	r5, #31
 800058c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800058e:	3b41      	subs	r3, #65	; 0x41
 8000590:	409d      	lsls	r5, r3
 8000592:	ea26 0505 	bic.w	r5, r6, r5
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	432b      	orrs	r3, r5
 800059c:	63a3      	str	r3, [r4, #56]	; 0x38
 800059e:	e7cc      	b.n	800053a <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 25)
 80005a0:	2d18      	cmp	r5, #24
 80005a2:	d80b      	bhi.n	80005bc <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SQR2,
 80005a4:	442b      	add	r3, r5
 80005a6:	251f      	movs	r5, #31
 80005a8:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80005aa:	3b5f      	subs	r3, #95	; 0x5f
 80005ac:	409d      	lsls	r5, r3
 80005ae:	ea26 0505 	bic.w	r5, r6, r5
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	432b      	orrs	r3, r5
 80005b8:	6363      	str	r3, [r4, #52]	; 0x34
 80005ba:	e7be      	b.n	800053a <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SQR1,
 80005bc:	442b      	add	r3, r5
 80005be:	251f      	movs	r5, #31
 80005c0:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80005c2:	3b7d      	subs	r3, #125	; 0x7d
 80005c4:	409d      	lsls	r5, r3
 80005c6:	ea26 0505 	bic.w	r5, r6, r5
 80005ca:	fa02 f303 	lsl.w	r3, r2, r3
 80005ce:	432b      	orrs	r3, r5
 80005d0:	6323      	str	r3, [r4, #48]	; 0x30
 80005d2:	e7b2      	b.n	800053a <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80005d4:	2a13      	cmp	r2, #19
 80005d6:	d80d      	bhi.n	80005f4 <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SMPR2,
 80005d8:	2607      	movs	r6, #7
 80005da:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80005de:	6923      	ldr	r3, [r4, #16]
 80005e0:	3d1e      	subs	r5, #30
 80005e2:	6889      	ldr	r1, [r1, #8]
 80005e4:	40ae      	lsls	r6, r5
 80005e6:	ea23 0306 	bic.w	r3, r3, r6
 80005ea:	fa01 f505 	lsl.w	r5, r1, r5
 80005ee:	432b      	orrs	r3, r5
 80005f0:	6123      	str	r3, [r4, #16]
 80005f2:	e7af      	b.n	8000554 <HAL_ADC_ConfigChannel+0x54>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80005f4:	2a1a      	cmp	r2, #26
 80005f6:	d80d      	bhi.n	8000614 <HAL_ADC_ConfigChannel+0x114>
    MODIFY_REG(hadc->Instance->SMPR1,
 80005f8:	2607      	movs	r6, #7
 80005fa:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80005fe:	68e3      	ldr	r3, [r4, #12]
 8000600:	3d3c      	subs	r5, #60	; 0x3c
 8000602:	6889      	ldr	r1, [r1, #8]
 8000604:	40ae      	lsls	r6, r5
 8000606:	ea23 0306 	bic.w	r3, r3, r6
 800060a:	fa01 f505 	lsl.w	r5, r1, r5
 800060e:	432b      	orrs	r3, r5
 8000610:	60e3      	str	r3, [r4, #12]
 8000612:	e79f      	b.n	8000554 <HAL_ADC_ConfigChannel+0x54>
  __ASM volatile ("nop");
 8000614:	bf00      	nop
 8000616:	e79d      	b.n	8000554 <HAL_ADC_ConfigChannel+0x54>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_ADC_ConfigChannel+0x14c>)
 800061a:	6859      	ldr	r1, [r3, #4]
 800061c:	0209      	lsls	r1, r1, #8
 800061e:	d49d      	bmi.n	800055c <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8000620:	6859      	ldr	r1, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000622:	2a10      	cmp	r2, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8000624:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000628:	6059      	str	r1, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800062a:	d197      	bne.n	800055c <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <HAL_ADC_ConfigChannel+0x150>)
 800062e:	4a09      	ldr	r2, [pc, #36]	; (8000654 <HAL_ADC_ConfigChannel+0x154>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	fbb3 f2f2 	udiv	r2, r3, r2
 8000636:	230a      	movs	r3, #10
 8000638:	4353      	muls	r3, r2
            wait_loop_index--;
 800063a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800063c:	9b01      	ldr	r3, [sp, #4]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d08c      	beq.n	800055c <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 8000642:	9b01      	ldr	r3, [sp, #4]
 8000644:	3b01      	subs	r3, #1
 8000646:	e7f8      	b.n	800063a <HAL_ADC_ConfigChannel+0x13a>
  __HAL_LOCK(hadc);
 8000648:	2002      	movs	r0, #2
 800064a:	e78b      	b.n	8000564 <HAL_ADC_ConfigChannel+0x64>
 800064c:	40012700 	.word	0x40012700
 8000650:	20000000 	.word	0x20000000
 8000654:	000f4240 	.word	0x000f4240

08000658 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 8000658:	2300      	movs	r3, #0
{
 800065a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 800065c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800065e:	6803      	ldr	r3, [r0, #0]
{
 8000660:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	0652      	lsls	r2, r2, #25
 8000666:	d502      	bpl.n	800066e <ADC_Enable+0x16>
  return HAL_OK;
 8000668:	2000      	movs	r0, #0
}
 800066a:	b002      	add	sp, #8
 800066c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800066e:	689a      	ldr	r2, [r3, #8]
 8000670:	f042 0201 	orr.w	r2, r2, #1
 8000674:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <ADC_Enable+0x6c>)
 8000678:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <ADC_Enable+0x70>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000680:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      wait_loop_index--;
 8000684:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8000686:	9b01      	ldr	r3, [sp, #4]
 8000688:	b9c3      	cbnz	r3, 80006bc <ADC_Enable+0x64>
    tickstart = HAL_GetTick();    
 800068a:	f7ff fd9f 	bl	80001cc <HAL_GetTick>
 800068e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000690:	6823      	ldr	r3, [r4, #0]
 8000692:	681d      	ldr	r5, [r3, #0]
 8000694:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000698:	d1e6      	bne.n	8000668 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800069a:	f7ff fd97 	bl	80001cc <HAL_GetTick>
 800069e:	1b80      	subs	r0, r0, r6
 80006a0:	2802      	cmp	r0, #2
 80006a2:	d9f5      	bls.n	8000690 <ADC_Enable+0x38>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        __HAL_UNLOCK(hadc);
 80006a6:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	64e3      	str	r3, [r4, #76]	; 0x4c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
        __HAL_UNLOCK(hadc);
 80006b2:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6523      	str	r3, [r4, #80]	; 0x50
 80006ba:	e7d6      	b.n	800066a <ADC_Enable+0x12>
      wait_loop_index--;
 80006bc:	9b01      	ldr	r3, [sp, #4]
 80006be:	3b01      	subs	r3, #1
 80006c0:	e7e0      	b.n	8000684 <ADC_Enable+0x2c>
 80006c2:	bf00      	nop
 80006c4:	20000000 	.word	0x20000000
 80006c8:	000f4240 	.word	0x000f4240

080006cc <HAL_ADC_Start_DMA>:
{
 80006cc:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 80006d0:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 80006d4:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80006d6:	2b01      	cmp	r3, #1
{
 80006d8:	460f      	mov	r7, r1
 80006da:	4690      	mov	r8, r2
  __HAL_LOCK(hadc);
 80006dc:	d04e      	beq.n	800077c <HAL_ADC_Start_DMA+0xb0>
 80006de:	2301      	movs	r3, #1
 80006e0:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 80006e4:	f7ff ffb8 	bl	8000658 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80006e8:	4606      	mov	r6, r0
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d143      	bne.n	8000776 <HAL_ADC_Start_DMA+0xaa>
    ADC_STATE_CLR_SET(hadc->State,
 80006ee:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80006f0:	6821      	ldr	r1, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80006f2:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80006f6:	f020 0001 	bic.w	r0, r0, #1
 80006fa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80006fe:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000700:	684b      	ldr	r3, [r1, #4]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000702:	463a      	mov	r2, r7
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000704:	055b      	lsls	r3, r3, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000706:	bf48      	it	mi
 8000708:	6ce0      	ldrmi	r0, [r4, #76]	; 0x4c
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800070a:	f101 0158 	add.w	r1, r1, #88	; 0x58
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800070e:	bf42      	ittt	mi
 8000710:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000714:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000718:	64e0      	strmi	r0, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800071a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800071c:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800071e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000722:	bf1c      	itt	ne
 8000724:	6d23      	ldrne	r3, [r4, #80]	; 0x50
 8000726:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800072a:	6523      	str	r3, [r4, #80]	; 0x50
    __HAL_UNLOCK(hadc);
 800072c:	2300      	movs	r3, #0
 800072e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <HAL_ADC_Start_DMA+0xb4>)
 8000734:	6283      	str	r3, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <HAL_ADC_Start_DMA+0xb8>)
 8000738:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <HAL_ADC_Start_DMA+0xbc>)
 800073c:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800073e:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8000742:	f841 3c58 	str.w	r3, [r1, #-88]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000746:	f851 3c54 	ldr.w	r3, [r1, #-84]
 800074a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800074e:	f841 3c54 	str.w	r3, [r1, #-84]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000752:	f851 3c50 	ldr.w	r3, [r1, #-80]
 8000756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800075a:	f841 3c50 	str.w	r3, [r1, #-80]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800075e:	4643      	mov	r3, r8
 8000760:	f000 f934 	bl	80009cc <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000764:	6823      	ldr	r3, [r4, #0]
 8000766:	689a      	ldr	r2, [r3, #8]
 8000768:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800076c:	d103      	bne.n	8000776 <HAL_ADC_Start_DMA+0xaa>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800076e:	689a      	ldr	r2, [r3, #8]
 8000770:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000774:	609a      	str	r2, [r3, #8]
}
 8000776:	4630      	mov	r0, r6
 8000778:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 800077c:	2602      	movs	r6, #2
 800077e:	e7fa      	b.n	8000776 <HAL_ADC_Start_DMA+0xaa>
 8000780:	08000355 	.word	0x08000355
 8000784:	080003b7 	.word	0x080003b7
 8000788:	080003c5 	.word	0x080003c5

0800078c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800078c:	4770      	bx	lr
	...

08000790 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000792:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000794:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000796:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800079a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800079e:	041b      	lsls	r3, r3, #16
 80007a0:	0c1b      	lsrs	r3, r3, #16
 80007a2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80007aa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80007ac:	60d3      	str	r3, [r2, #12]
 80007ae:	4770      	bx	lr
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b6:	b530      	push	{r4, r5, lr}
 80007b8:	68dc      	ldr	r4, [r3, #12]
 80007ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007be:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	bf28      	it	cs
 80007c8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ca:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007cc:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d0:	bf98      	it	ls
 80007d2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	fa05 f303 	lsl.w	r3, r5, r3
 80007d8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007dc:	bf88      	it	hi
 80007de:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	4019      	ands	r1, r3
 80007e2:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	fa05 f404 	lsl.w	r4, r5, r4
 80007e8:	3c01      	subs	r4, #1
 80007ea:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80007ec:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ee:	ea42 0201 	orr.w	r2, r2, r1
 80007f2:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f6:	bfaf      	iteee	ge
 80007f8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fc:	4b06      	ldrlt	r3, [pc, #24]	; (8000818 <HAL_NVIC_SetPriority+0x64>)
 80007fe:	f000 000f 	andlt.w	r0, r0, #15
 8000802:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	bfa5      	ittet	ge
 8000806:	b2d2      	uxtbge	r2, r2
 8000808:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000812:	bd30      	pop	{r4, r5, pc}
 8000814:	e000ed00 	.word	0xe000ed00
 8000818:	e000ed14 	.word	0xe000ed14

0800081c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800081c:	2301      	movs	r3, #1
 800081e:	0942      	lsrs	r2, r0, #5
 8000820:	f000 001f 	and.w	r0, r0, #31
 8000824:	fa03 f000 	lsl.w	r0, r3, r0
 8000828:	4b01      	ldr	r3, [pc, #4]	; (8000830 <HAL_NVIC_EnableIRQ+0x14>)
 800082a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800082e:	4770      	bx	lr
 8000830:	e000e100 	.word	0xe000e100

08000834 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000834:	3801      	subs	r0, #1
 8000836:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800083a:	d20a      	bcs.n	8000852 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000840:	4a06      	ldr	r2, [pc, #24]	; (800085c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000842:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000844:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000848:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800084c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000852:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000e010 	.word	0xe000e010
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000862:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	bf0c      	ite	eq
 8000868:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800086c:	f022 0204 	bicne.w	r2, r2, #4
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	4770      	bx	lr
 8000874:	e000e010 	.word	0xe000e010

08000878 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000878:	4770      	bx	lr

0800087a <HAL_SYSTICK_IRQHandler>:
{
 800087a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800087c:	f7ff fffc 	bl	8000878 <HAL_SYSTICK_Callback>
 8000880:	bd08      	pop	{r3, pc}

08000882 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000882:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 8000884:	4604      	mov	r4, r0
 8000886:	b168      	cbz	r0, 80008a4 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000888:	7903      	ldrb	r3, [r0, #4]
 800088a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800088e:	b913      	cbnz	r3, 8000896 <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000890:	7142      	strb	r2, [r0, #5]
    
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000892:	f001 f9b5 	bl	8001c00 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000896:	2302      	movs	r3, #2
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000898:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800089a:	7123      	strb	r3, [r4, #4]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800089c:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800089e:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80008a0:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 80008a2:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80008a4:	2001      	movs	r0, #1
}
 80008a6:	bd10      	pop	{r4, pc}

080008a8 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80008a8:	7943      	ldrb	r3, [r0, #5]
{
 80008aa:	b510      	push	{r4, lr}
  __HAL_LOCK(hdac);
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	f04f 0302 	mov.w	r3, #2
 80008b2:	d015      	beq.n	80008e0 <HAL_DAC_Start+0x38>
 80008b4:	2201      	movs	r2, #1
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80008b6:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 80008b8:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 80008ba:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 80008bc:	681c      	ldr	r4, [r3, #0]
 80008be:	408a      	lsls	r2, r1
 80008c0:	4322      	orrs	r2, r4
 80008c2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80008c4:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 80008c6:	b969      	cbnz	r1, 80008e4 <HAL_DAC_Start+0x3c>
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80008c8:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 80008cc:	2a3c      	cmp	r2, #60	; 0x3c
 80008ce:	d103      	bne.n	80008d8 <HAL_DAC_Start+0x30>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80008d0:	685a      	ldr	r2, [r3, #4]
 80008d2:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80008d6:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80008d8:	2301      	movs	r3, #1
 80008da:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80008dc:	2300      	movs	r3, #0
 80008de:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 80008e0:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 80008e2:	bd10      	pop	{r4, pc}
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 80008e4:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 80008e8:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 80008ec:	d1f4      	bne.n	80008d8 <HAL_DAC_Start+0x30>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	f042 0202 	orr.w	r2, r2, #2
 80008f4:	e7ef      	b.n	80008d6 <HAL_DAC_Start+0x2e>

080008f6 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80008f6:	7943      	ldrb	r3, [r0, #5]
{
 80008f8:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdac);
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	f04f 0302 	mov.w	r3, #2
 8000900:	d017      	beq.n	8000932 <HAL_DAC_ConfigChannel+0x3c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000902:	7103      	strb	r3, [r0, #4]
  
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  SET_BIT(tmpreg1, (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer));
 8000904:	c90a      	ldmia	r1, {r1, r3}
 8000906:	430b      	orrs	r3, r1
  
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */  
  /* Calculate CR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->CR,
 8000908:	f640 71fe 	movw	r1, #4094	; 0xffe
 800090c:	6804      	ldr	r4, [r0, #0]
 800090e:	4091      	lsls	r1, r2
 8000910:	6825      	ldr	r5, [r4, #0]
 8000912:	4093      	lsls	r3, r2
 8000914:	ea25 0101 	bic.w	r1, r5, r1
 8000918:	430b      	orrs	r3, r1
             ((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel,
             tmpreg1 << Channel);

  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800091a:	21c0      	movs	r1, #192	; 0xc0
  MODIFY_REG(hdac->Instance->CR,
 800091c:	6023      	str	r3, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800091e:	6823      	ldr	r3, [r4, #0]
 8000920:	fa01 f202 	lsl.w	r2, r1, r2
 8000924:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000928:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800092a:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800092c:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800092e:	2300      	movs	r3, #0
 8000930:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8000932:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 8000934:	bd30      	pop	{r4, r5, pc}

08000936 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8000936:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0;
 8000938:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 800093a:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0;
 800093c:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance; 
 800093e:	9001      	str	r0, [sp, #4]
  if(Channel == DAC_CHANNEL_1)
 8000940:	b941      	cbnz	r1, 8000954 <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000942:	9901      	ldr	r1, [sp, #4]
 8000944:	3108      	adds	r1, #8
  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
  
  /* Return function status */
  return HAL_OK;
}
 8000946:	2000      	movs	r0, #0
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000948:	440a      	add	r2, r1
 800094a:	9201      	str	r2, [sp, #4]
  *(__IO uint32_t *) tmp = Data;
 800094c:	9a01      	ldr	r2, [sp, #4]
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	b002      	add	sp, #8
 8000952:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000954:	9901      	ldr	r1, [sp, #4]
 8000956:	3114      	adds	r1, #20
 8000958:	e7f5      	b.n	8000946 <HAL_DAC_SetValue+0x10>
	...

0800095c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800095c:	b510      	push	{r4, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800095e:	2800      	cmp	r0, #0
 8000960:	d02d      	beq.n	80009be <HAL_DMA_Init+0x62>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000962:	2214      	movs	r2, #20
 8000964:	6801      	ldr	r1, [r0, #0]
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_DMA_Init+0x68>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000968:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800096a:	440b      	add	r3, r1
 800096c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <HAL_DMA_Init+0x6c>)
 8000976:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8000978:	2302      	movs	r3, #2
 800097a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp |=  hdma->Init.Direction        |
 800097e:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8000980:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000982:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000984:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000986:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800098a:	4323      	orrs	r3, r4
 800098c:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800098e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000992:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000994:	6944      	ldr	r4, [r0, #20]
 8000996:	4323      	orrs	r3, r4
 8000998:	6984      	ldr	r4, [r0, #24]
 800099a:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800099c:	69c4      	ldr	r4, [r0, #28]
 800099e:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80009a0:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80009a2:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009a4:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 80009a6:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009a8:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->XferCpltCallback = NULL;
 80009aa:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80009ac:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80009ae:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80009b0:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_READY;
 80009b2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80009b6:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80009be:	2001      	movs	r0, #1
}
 80009c0:	bd10      	pop	{r4, pc}
 80009c2:	bf00      	nop
 80009c4:	bffd9ff8 	.word	0xbffd9ff8
 80009c8:	40026000 	.word	0x40026000

080009cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009cc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80009ce:	f890 4020 	ldrb.w	r4, [r0, #32]
 80009d2:	2c01      	cmp	r4, #1
 80009d4:	d036      	beq.n	8000a44 <HAL_DMA_Start_IT+0x78>
 80009d6:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 80009d8:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80009dc:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80009e0:	b2ed      	uxtb	r5, r5
 80009e2:	42a5      	cmp	r5, r4
 80009e4:	f04f 0600 	mov.w	r6, #0
 80009e8:	f04f 0402 	mov.w	r4, #2
 80009ec:	d128      	bne.n	8000a40 <HAL_DMA_Start_IT+0x74>
  {
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009ee:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80009f2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f4:	6386      	str	r6, [r0, #56]	; 0x38
  __HAL_DMA_DISABLE(hdma);
 80009f6:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009f8:	6c07      	ldr	r7, [r0, #64]	; 0x40
  __HAL_DMA_DISABLE(hdma);
 80009fa:	f026 0601 	bic.w	r6, r6, #1
 80009fe:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a00:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000a02:	40bd      	lsls	r5, r7
 8000a04:	6075      	str	r5, [r6, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000a06:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a08:	6843      	ldr	r3, [r0, #4]
 8000a0a:	6805      	ldr	r5, [r0, #0]
 8000a0c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8000a0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000a10:	bf0b      	itete	eq
 8000a12:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000a14:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000a16:	60e1      	streq	r1, [r4, #12]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000a18:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000a1a:	b14b      	cbz	r3, 8000a30 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a1c:	6823      	ldr	r3, [r4, #0]
 8000a1e:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000a22:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);
 8000a24:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a26:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE(hdma);
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	602b      	str	r3, [r5, #0]
 8000a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a30:	6823      	ldr	r3, [r4, #0]
 8000a32:	f023 0304 	bic.w	r3, r3, #4
 8000a36:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000a38:	6823      	ldr	r3, [r4, #0]
 8000a3a:	f043 030a 	orr.w	r3, r3, #10
 8000a3e:	e7f0      	b.n	8000a22 <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 8000a40:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000a44:	2002      	movs	r0, #2
} 
 8000a46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a48 <HAL_DMA_IRQHandler>:
{
 8000a48:	b470      	push	{r4, r5, r6}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a4a:	2404      	movs	r4, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a4c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a4e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a50:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000a52:	6803      	ldr	r3, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a54:	4094      	lsls	r4, r2
 8000a56:	4226      	tst	r6, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000a58:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a5a:	d00e      	beq.n	8000a7a <HAL_DMA_IRQHandler+0x32>
 8000a5c:	f015 0f04 	tst.w	r5, #4
 8000a60:	d00b      	beq.n	8000a7a <HAL_DMA_IRQHandler+0x32>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a66:	bf5e      	ittt	pl
 8000a68:	681a      	ldrpl	r2, [r3, #0]
 8000a6a:	f022 0204 	bicpl.w	r2, r2, #4
 8000a6e:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8000a70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      hdma->DmaBaseAddress->IFCR  = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8000a72:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8000a74:	b373      	cbz	r3, 8000ad4 <HAL_DMA_IRQHandler+0x8c>
}
 8000a76:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000a78:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000a7a:	2402      	movs	r4, #2
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	4226      	tst	r6, r4
 8000a80:	d012      	beq.n	8000aa8 <HAL_DMA_IRQHandler+0x60>
 8000a82:	f015 0f02 	tst.w	r5, #2
 8000a86:	d00f      	beq.n	8000aa8 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	0695      	lsls	r5, r2, #26
 8000a8c:	d406      	bmi.n	8000a9c <HAL_DMA_IRQHandler+0x54>
    __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	f022 020a 	bic.w	r2, r2, #10
 8000a94:	601a      	str	r2, [r3, #0]
    hdma->State = HAL_DMA_STATE_READY;
 8000a96:	2301      	movs	r3, #1
 8000a98:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000a9c:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8000a9e:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000aa0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000aa4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000aa6:	e7e5      	b.n	8000a74 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000aa8:	2408      	movs	r4, #8
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	4234      	tst	r4, r6
 8000aae:	d011      	beq.n	8000ad4 <HAL_DMA_IRQHandler+0x8c>
 8000ab0:	072c      	lsls	r4, r5, #28
 8000ab2:	d50f      	bpl.n	8000ad4 <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ab4:	681c      	ldr	r4, [r3, #0]
 8000ab6:	f024 040e 	bic.w	r4, r4, #14
 8000aba:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000abc:	2301      	movs	r3, #1
 8000abe:	fa03 f202 	lsl.w	r2, r3, r2
 8000ac2:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ac4:	6383      	str	r3, [r0, #56]	; 0x38
      hdma->State = HAL_DMA_STATE_READY;
 8000ac6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_UNLOCK(hdma);
 8000aca:	2300      	movs	r3, #0
 8000acc:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000ad0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000ad2:	e7cf      	b.n	8000a74 <HAL_DMA_IRQHandler+0x2c>
}
 8000ad4:	bc70      	pop	{r4, r5, r6}
 8000ad6:	4770      	bx	lr

08000ad8 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 8000ad8:	2300      	movs	r3, #0
{ 
 8000ada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ade:	4a62      	ldr	r2, [pc, #392]	; (8000c68 <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ae0:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae4:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8000c70 <HAL_GPIO_Init+0x198>
{ 
 8000ae8:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8000aea:	fa38 f403 	lsrs.w	r4, r8, r3
 8000aee:	d102      	bne.n	8000af6 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 8000af0:	b005      	add	sp, #20
 8000af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000af6:	2401      	movs	r4, #1
 8000af8:	409c      	lsls	r4, r3
    if(iocurrent)
 8000afa:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000afe:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 8000b00:	f000 80a7 	beq.w	8000c52 <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000b04:	684c      	ldr	r4, [r1, #4]
 8000b06:	f024 0a10 	bic.w	sl, r4, #16
 8000b0a:	f1ba 0f02 	cmp.w	sl, #2
 8000b0e:	d116      	bne.n	8000b3e <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000b10:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 8000b14:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000b18:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000b1c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000b20:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000b24:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000b28:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000b2c:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000b30:	690d      	ldr	r5, [r1, #16]
 8000b32:	fa05 f50b 	lsl.w	r5, r5, fp
 8000b36:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 8000b3a:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000b3e:	2503      	movs	r5, #3
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b48:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 8000b4a:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b4e:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000b52:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b56:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b5a:	f10a 3aff 	add.w	sl, sl, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b5e:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b62:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8000b66:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b6a:	d816      	bhi.n	8000b9a <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 8000b6c:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000b70:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b72:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000b76:	fa07 fa0c 	lsl.w	sl, r7, ip
 8000b7a:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000b7e:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b82:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000b86:	9f01      	ldr	r7, [sp, #4]
 8000b88:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b8c:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000b90:	fa0e fe03 	lsl.w	lr, lr, r3
 8000b94:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000b98:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b9a:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b9c:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000b9e:	688f      	ldr	r7, [r1, #8]
 8000ba0:	fa07 f70c 	lsl.w	r7, r7, ip
 8000ba4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ba6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000ba8:	00e5      	lsls	r5, r4, #3
 8000baa:	d552      	bpl.n	8000c52 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000bac:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb0:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000bb4:	f023 0703 	bic.w	r7, r3, #3
 8000bb8:	f045 0501 	orr.w	r5, r5, #1
 8000bbc:	f8c9 5020 	str.w	r5, [r9, #32]
 8000bc0:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000bc4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000bc8:	f005 0501 	and.w	r5, r5, #1
 8000bcc:	9503      	str	r5, [sp, #12]
 8000bce:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000bd2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000bd8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8000bdc:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000bde:	fa0e fe0c 	lsl.w	lr, lr, ip
 8000be2:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000be6:	4d21      	ldr	r5, [pc, #132]	; (8000c6c <HAL_GPIO_Init+0x194>)
 8000be8:	42a8      	cmp	r0, r5
 8000bea:	d034      	beq.n	8000c56 <HAL_GPIO_Init+0x17e>
 8000bec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bf0:	42a8      	cmp	r0, r5
 8000bf2:	d032      	beq.n	8000c5a <HAL_GPIO_Init+0x182>
 8000bf4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bf8:	42a8      	cmp	r0, r5
 8000bfa:	d030      	beq.n	8000c5e <HAL_GPIO_Init+0x186>
 8000bfc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c00:	42a8      	cmp	r0, r5
 8000c02:	d02e      	beq.n	8000c62 <HAL_GPIO_Init+0x18a>
 8000c04:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c08:	42a8      	cmp	r0, r5
 8000c0a:	bf14      	ite	ne
 8000c0c:	2505      	movne	r5, #5
 8000c0e:	2504      	moveq	r5, #4
 8000c10:	fa05 f50c 	lsl.w	r5, r5, ip
 8000c14:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c18:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000c1a:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8000c1c:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c1e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000c22:	bf0c      	ite	eq
 8000c24:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000c26:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000c28:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000c2a:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c2c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000c30:	bf0c      	ite	eq
 8000c32:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000c34:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000c36:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000c38:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c3a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000c3e:	bf0c      	ite	eq
 8000c40:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000c42:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000c44:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000c46:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c48:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000c4a:	bf54      	ite	pl
 8000c4c:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 8000c4e:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000c50:	60d5      	str	r5, [r2, #12]
    position++;
 8000c52:	3301      	adds	r3, #1
 8000c54:	e749      	b.n	8000aea <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c56:	2500      	movs	r5, #0
 8000c58:	e7da      	b.n	8000c10 <HAL_GPIO_Init+0x138>
 8000c5a:	2501      	movs	r5, #1
 8000c5c:	e7d8      	b.n	8000c10 <HAL_GPIO_Init+0x138>
 8000c5e:	2502      	movs	r5, #2
 8000c60:	e7d6      	b.n	8000c10 <HAL_GPIO_Init+0x138>
 8000c62:	2503      	movs	r5, #3
 8000c64:	e7d4      	b.n	8000c10 <HAL_GPIO_Init+0x138>
 8000c66:	bf00      	nop
 8000c68:	40010400 	.word	0x40010400
 8000c6c:	40020000 	.word	0x40020000
 8000c70:	40023800 	.word	0x40023800

08000c74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c74:	b10a      	cbz	r2, 8000c7a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000c76:	6181      	str	r1, [r0, #24]
 8000c78:	4770      	bx	lr
 8000c7a:	0409      	lsls	r1, r1, #16
 8000c7c:	e7fb      	b.n	8000c76 <HAL_GPIO_WritePin+0x2>
	...

08000c80 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000c80:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8000c82:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8000c8a:	d00c      	beq.n	8000ca6 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8000c8c:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8000c8e:	491a      	ldr	r1, [pc, #104]	; (8000cf8 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000c90:	680b      	ldr	r3, [r1, #0]
 8000c92:	f023 0301 	bic.w	r3, r3, #1
 8000c96:	4313      	orrs	r3, r2
 8000c98:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000c9a:	6808      	ldr	r0, [r1, #0]
 8000c9c:	f000 0001 	and.w	r0, r0, #1
 8000ca0:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8000ca2:	b002      	add	sp, #8
 8000ca4:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ca8:	4914      	ldr	r1, [pc, #80]	; (8000cfc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000caa:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000cae:	d00f      	beq.n	8000cd0 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000cb0:	680a      	ldr	r2, [r1, #0]
 8000cb2:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8000cb6:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8000cba:	d1e7      	bne.n	8000c8c <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000cbc:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8000cc0:	d1e4      	bne.n	8000c8c <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8000cc2:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000cc4:	6813      	ldr	r3, [r2, #0]
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8000ccc:	2201      	movs	r2, #1
 8000cce:	e7de      	b.n	8000c8e <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cd6:	625a      	str	r2, [r3, #36]	; 0x24
 8000cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cda:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000cde:	9201      	str	r2, [sp, #4]
 8000ce0:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000ce2:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ce4:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000ce6:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cea:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8000cee:	6259      	str	r1, [r3, #36]	; 0x24
 8000cf0:	e7e1      	b.n	8000cb6 <RCC_SetFlashLatencyFromMSIRange+0x36>
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40023c00 	.word	0x40023c00
 8000cfc:	40007000 	.word	0x40007000

08000d00 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d00:	6803      	ldr	r3, [r0, #0]
{
 8000d02:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d06:	07d9      	lsls	r1, r3, #31
{
 8000d08:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d0a:	d46a      	bmi.n	8000de2 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d0c:	6823      	ldr	r3, [r4, #0]
 8000d0e:	079a      	lsls	r2, r3, #30
 8000d10:	f100 80e6 	bmi.w	8000ee0 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	06de      	lsls	r6, r3, #27
 8000d18:	d555      	bpl.n	8000dc6 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000d1a:	4dc1      	ldr	r5, [pc, #772]	; (8001020 <HAL_RCC_OscConfig+0x320>)
 8000d1c:	68ab      	ldr	r3, [r5, #8]
 8000d1e:	f013 0f0c 	tst.w	r3, #12
 8000d22:	f040 8183 	bne.w	800102c <HAL_RCC_OscConfig+0x32c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d2a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d2e:	6829      	ldr	r1, [r5, #0]
 8000d30:	fa93 f3a3 	rbit	r3, r3
 8000d34:	fab3 f383 	clz	r3, r3
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	420b      	tst	r3, r1
 8000d44:	d002      	beq.n	8000d4c <HAL_RCC_OscConfig+0x4c>
 8000d46:	69a3      	ldr	r3, [r4, #24]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d06e      	beq.n	8000e2a <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d4c:	4db4      	ldr	r5, [pc, #720]	; (8001020 <HAL_RCC_OscConfig+0x320>)
 8000d4e:	6a20      	ldr	r0, [r4, #32]
 8000d50:	686b      	ldr	r3, [r5, #4]
 8000d52:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d56:	4298      	cmp	r0, r3
 8000d58:	f240 814a 	bls.w	8000ff0 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d5c:	f7ff ff90 	bl	8000c80 <RCC_SetFlashLatencyFromMSIRange>
 8000d60:	2800      	cmp	r0, #0
 8000d62:	d162      	bne.n	8000e2a <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d64:	686b      	ldr	r3, [r5, #4]
 8000d66:	6a22      	ldr	r2, [r4, #32]
 8000d68:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d70:	6869      	ldr	r1, [r5, #4]
 8000d72:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000d76:	fa93 f3a3 	rbit	r3, r3
 8000d7a:	fab3 f283 	clz	r2, r3
 8000d7e:	69e3      	ldr	r3, [r4, #28]
 8000d80:	4093      	lsls	r3, r2
 8000d82:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000d86:	4313      	orrs	r3, r2
 8000d88:	606b      	str	r3, [r5, #4]
 8000d8a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d8e:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000d92:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000d96:	4ba2      	ldr	r3, [pc, #648]	; (8001020 <HAL_RCC_OscConfig+0x320>)
 8000d98:	21f0      	movs	r1, #240	; 0xf0
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	fa91 f1a1 	rbit	r1, r1
 8000da0:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000da4:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000da6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000daa:	40c3      	lsrs	r3, r0
 8000dac:	1c58      	adds	r0, r3, #1
 8000dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000db2:	40ca      	lsrs	r2, r1
 8000db4:	499b      	ldr	r1, [pc, #620]	; (8001024 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000db6:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000db8:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000dba:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000dbc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000dbe:	4a9a      	ldr	r2, [pc, #616]	; (8001028 <HAL_RCC_OscConfig+0x328>)
 8000dc0:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000dc2:	f7ff f9db 	bl	800017c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	071d      	lsls	r5, r3, #28
 8000dca:	f100 8191 	bmi.w	80010f0 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dce:	6823      	ldr	r3, [r4, #0]
 8000dd0:	0758      	lsls	r0, r3, #29
 8000dd2:	f100 81d3 	bmi.w	800117c <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8257 	bne.w	800128c <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 8000dde:	2000      	movs	r0, #0
 8000de0:	e024      	b.n	8000e2c <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000de2:	4b8f      	ldr	r3, [pc, #572]	; (8001020 <HAL_RCC_OscConfig+0x320>)
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	f002 020c 	and.w	r2, r2, #12
 8000dea:	2a08      	cmp	r2, #8
 8000dec:	d007      	beq.n	8000dfe <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	f002 020c 	and.w	r2, r2, #12
 8000df4:	2a0c      	cmp	r2, #12
 8000df6:	d11c      	bne.n	8000e32 <HAL_RCC_OscConfig+0x132>
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	03db      	lsls	r3, r3, #15
 8000dfc:	d519      	bpl.n	8000e32 <HAL_RCC_OscConfig+0x132>
 8000dfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e02:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e06:	4a86      	ldr	r2, [pc, #536]	; (8001020 <HAL_RCC_OscConfig+0x320>)
 8000e08:	6811      	ldr	r1, [r2, #0]
 8000e0a:	fa93 f3a3 	rbit	r3, r3
 8000e0e:	fab3 f383 	clz	r3, r3
 8000e12:	2201      	movs	r2, #1
 8000e14:	f003 031f 	and.w	r3, r3, #31
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	420b      	tst	r3, r1
 8000e1e:	f43f af75 	beq.w	8000d0c <HAL_RCC_OscConfig+0xc>
 8000e22:	6863      	ldr	r3, [r4, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f47f af71 	bne.w	8000d0c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000e2a:	2001      	movs	r0, #1
}
 8000e2c:	b003      	add	sp, #12
 8000e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e32:	6863      	ldr	r3, [r4, #4]
 8000e34:	4d7a      	ldr	r5, [pc, #488]	; (8001020 <HAL_RCC_OscConfig+0x320>)
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d120      	bne.n	8000e7c <HAL_RCC_OscConfig+0x17c>
 8000e3a:	682b      	ldr	r3, [r5, #0]
 8000e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e40:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e42:	f7ff f9c3 	bl	80001cc <HAL_GetTick>
 8000e46:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000e4a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4c:	2601      	movs	r6, #1
 8000e4e:	4f74      	ldr	r7, [pc, #464]	; (8001020 <HAL_RCC_OscConfig+0x320>)
 8000e50:	fa95 f3a5 	rbit	r3, r5
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	fa95 f3a5 	rbit	r3, r5
 8000e5a:	fab3 f383 	clz	r3, r3
 8000e5e:	f003 031f 	and.w	r3, r3, #31
 8000e62:	fa06 f303 	lsl.w	r3, r6, r3
 8000e66:	4213      	tst	r3, r2
 8000e68:	f47f af50 	bne.w	8000d0c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e6c:	f7ff f9ae 	bl	80001cc <HAL_GetTick>
 8000e70:	eba0 0008 	sub.w	r0, r0, r8
 8000e74:	2864      	cmp	r0, #100	; 0x64
 8000e76:	d9eb      	bls.n	8000e50 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8000e78:	2003      	movs	r0, #3
 8000e7a:	e7d7      	b.n	8000e2c <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e7c:	bb13      	cbnz	r3, 8000ec4 <HAL_RCC_OscConfig+0x1c4>
 8000e7e:	682b      	ldr	r3, [r5, #0]
 8000e80:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e88:	602b      	str	r3, [r5, #0]
 8000e8a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e8c:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e92:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e94:	f7ff f99a 	bl	80001cc <HAL_GetTick>
 8000e98:	4680      	mov	r8, r0
 8000e9a:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9e:	682a      	ldr	r2, [r5, #0]
 8000ea0:	fa96 f3a6 	rbit	r3, r6
 8000ea4:	fab3 f383 	clz	r3, r3
 8000ea8:	f003 031f 	and.w	r3, r3, #31
 8000eac:	fa07 f303 	lsl.w	r3, r7, r3
 8000eb0:	4213      	tst	r3, r2
 8000eb2:	f43f af2b 	beq.w	8000d0c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eb6:	f7ff f989 	bl	80001cc <HAL_GetTick>
 8000eba:	eba0 0008 	sub.w	r0, r0, r8
 8000ebe:	2864      	cmp	r0, #100	; 0x64
 8000ec0:	d9eb      	bls.n	8000e9a <HAL_RCC_OscConfig+0x19a>
 8000ec2:	e7d9      	b.n	8000e78 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	682b      	ldr	r3, [r5, #0]
 8000ec8:	d103      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x1d2>
 8000eca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ece:	602b      	str	r3, [r5, #0]
 8000ed0:	e7b3      	b.n	8000e3a <HAL_RCC_OscConfig+0x13a>
 8000ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed6:	602b      	str	r3, [r5, #0]
 8000ed8:	682b      	ldr	r3, [r5, #0]
 8000eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ede:	e7af      	b.n	8000e40 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ee0:	4b4f      	ldr	r3, [pc, #316]	; (8001020 <HAL_RCC_OscConfig+0x320>)
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	f002 020c 	and.w	r2, r2, #12
 8000ee8:	2a04      	cmp	r2, #4
 8000eea:	d007      	beq.n	8000efc <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	f002 020c 	and.w	r2, r2, #12
 8000ef2:	2a0c      	cmp	r2, #12
 8000ef4:	d124      	bne.n	8000f40 <HAL_RCC_OscConfig+0x240>
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	03df      	lsls	r7, r3, #15
 8000efa:	d421      	bmi.n	8000f40 <HAL_RCC_OscConfig+0x240>
 8000efc:	2302      	movs	r3, #2
 8000efe:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f02:	4a47      	ldr	r2, [pc, #284]	; (8001020 <HAL_RCC_OscConfig+0x320>)
 8000f04:	6810      	ldr	r0, [r2, #0]
 8000f06:	fa93 f3a3 	rbit	r3, r3
 8000f0a:	fab3 f383 	clz	r3, r3
 8000f0e:	2101      	movs	r1, #1
 8000f10:	f003 031f 	and.w	r3, r3, #31
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	4203      	tst	r3, r0
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	d002      	beq.n	8000f24 <HAL_RCC_OscConfig+0x224>
 8000f1e:	68e2      	ldr	r2, [r4, #12]
 8000f20:	428a      	cmp	r2, r1
 8000f22:	d182      	bne.n	8000e2a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f24:	6858      	ldr	r0, [r3, #4]
 8000f26:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8000f2a:	fa92 f2a2 	rbit	r2, r2
 8000f2e:	fab2 f182 	clz	r1, r2
 8000f32:	6922      	ldr	r2, [r4, #16]
 8000f34:	408a      	lsls	r2, r1
 8000f36:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f3e:	e6e9      	b.n	8000d14 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f40:	68e2      	ldr	r2, [r4, #12]
 8000f42:	2501      	movs	r5, #1
 8000f44:	b382      	cbz	r2, 8000fa8 <HAL_RCC_OscConfig+0x2a8>
 8000f46:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8000f4a:	fab3 f383 	clz	r3, r3
 8000f4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f52:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000f5a:	f7ff f937 	bl	80001cc <HAL_GetTick>
 8000f5e:	2702      	movs	r7, #2
 8000f60:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f62:	4e2f      	ldr	r6, [pc, #188]	; (8001020 <HAL_RCC_OscConfig+0x320>)
 8000f64:	fa97 f3a7 	rbit	r3, r7
 8000f68:	6832      	ldr	r2, [r6, #0]
 8000f6a:	fa97 f3a7 	rbit	r3, r7
 8000f6e:	fab3 f383 	clz	r3, r3
 8000f72:	f003 031f 	and.w	r3, r3, #31
 8000f76:	fa05 f303 	lsl.w	r3, r5, r3
 8000f7a:	4213      	tst	r3, r2
 8000f7c:	d00d      	beq.n	8000f9a <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7e:	6871      	ldr	r1, [r6, #4]
 8000f80:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	fab3 f283 	clz	r2, r3
 8000f8c:	6923      	ldr	r3, [r4, #16]
 8000f8e:	4093      	lsls	r3, r2
 8000f90:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 8000f94:	4313      	orrs	r3, r2
 8000f96:	6073      	str	r3, [r6, #4]
 8000f98:	e6bc      	b.n	8000d14 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f9a:	f7ff f917 	bl	80001cc <HAL_GetTick>
 8000f9e:	eba0 0008 	sub.w	r0, r0, r8
 8000fa2:	2802      	cmp	r0, #2
 8000fa4:	d9de      	bls.n	8000f64 <HAL_RCC_OscConfig+0x264>
 8000fa6:	e767      	b.n	8000e78 <HAL_RCC_OscConfig+0x178>
 8000fa8:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000fac:	fab3 f383 	clz	r3, r3
 8000fb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fb4:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fbc:	f7ff f906 	bl	80001cc <HAL_GetTick>
 8000fc0:	2602      	movs	r6, #2
 8000fc2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc4:	4f16      	ldr	r7, [pc, #88]	; (8001020 <HAL_RCC_OscConfig+0x320>)
 8000fc6:	fa96 f3a6 	rbit	r3, r6
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	fa96 f3a6 	rbit	r3, r6
 8000fd0:	fab3 f383 	clz	r3, r3
 8000fd4:	f003 031f 	and.w	r3, r3, #31
 8000fd8:	fa05 f303 	lsl.w	r3, r5, r3
 8000fdc:	4213      	tst	r3, r2
 8000fde:	f43f ae99 	beq.w	8000d14 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fe2:	f7ff f8f3 	bl	80001cc <HAL_GetTick>
 8000fe6:	eba0 0008 	sub.w	r0, r0, r8
 8000fea:	2802      	cmp	r0, #2
 8000fec:	d9eb      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x2c6>
 8000fee:	e743      	b.n	8000e78 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ff0:	686b      	ldr	r3, [r5, #4]
 8000ff2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ff6:	4303      	orrs	r3, r0
 8000ff8:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ffa:	6869      	ldr	r1, [r5, #4]
 8000ffc:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001000:	fa93 f3a3 	rbit	r3, r3
 8001004:	fab3 f283 	clz	r2, r3
 8001008:	69e3      	ldr	r3, [r4, #28]
 800100a:	4093      	lsls	r3, r2
 800100c:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001010:	4313      	orrs	r3, r2
 8001012:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001014:	f7ff fe34 	bl	8000c80 <RCC_SetFlashLatencyFromMSIRange>
 8001018:	2800      	cmp	r0, #0
 800101a:	f43f aeb6 	beq.w	8000d8a <HAL_RCC_OscConfig+0x8a>
 800101e:	e704      	b.n	8000e2a <HAL_RCC_OscConfig+0x12a>
 8001020:	40023800 	.word	0x40023800
 8001024:	0800206e 	.word	0x0800206e
 8001028:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800102c:	69a2      	ldr	r2, [r4, #24]
 800102e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001032:	2a00      	cmp	r2, #0
 8001034:	d037      	beq.n	80010a6 <HAL_RCC_OscConfig+0x3a6>
 8001036:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 800103a:	fab3 f383 	clz	r3, r3
 800103e:	2601      	movs	r6, #1
 8001040:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001044:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800104c:	f7ff f8be 	bl	80001cc <HAL_GetTick>
 8001050:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001054:	4680      	mov	r8, r0
 8001056:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800105a:	682a      	ldr	r2, [r5, #0]
 800105c:	fa97 f3a7 	rbit	r3, r7
 8001060:	fab3 f383 	clz	r3, r3
 8001064:	f003 031f 	and.w	r3, r3, #31
 8001068:	fa06 f303 	lsl.w	r3, r6, r3
 800106c:	4213      	tst	r3, r2
 800106e:	d013      	beq.n	8001098 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001070:	686b      	ldr	r3, [r5, #4]
 8001072:	6a22      	ldr	r2, [r4, #32]
 8001074:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001078:	4313      	orrs	r3, r2
 800107a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800107c:	6869      	ldr	r1, [r5, #4]
 800107e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	fab3 f283 	clz	r2, r3
 800108a:	69e3      	ldr	r3, [r4, #28]
 800108c:	4093      	lsls	r3, r2
 800108e:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001092:	4313      	orrs	r3, r2
 8001094:	606b      	str	r3, [r5, #4]
 8001096:	e696      	b.n	8000dc6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001098:	f7ff f898 	bl	80001cc <HAL_GetTick>
 800109c:	eba0 0008 	sub.w	r0, r0, r8
 80010a0:	2802      	cmp	r0, #2
 80010a2:	d9d8      	bls.n	8001056 <HAL_RCC_OscConfig+0x356>
 80010a4:	e6e8      	b.n	8000e78 <HAL_RCC_OscConfig+0x178>
 80010a6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 80010aa:	fab3 f383 	clz	r3, r3
 80010ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010b2:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010ba:	f7ff f887 	bl	80001cc <HAL_GetTick>
 80010be:	f44f 7600 	mov.w	r6, #512	; 0x200
 80010c2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80010c4:	2701      	movs	r7, #1
 80010c6:	fa96 f3a6 	rbit	r3, r6
 80010ca:	682a      	ldr	r2, [r5, #0]
 80010cc:	fa96 f3a6 	rbit	r3, r6
 80010d0:	fab3 f383 	clz	r3, r3
 80010d4:	f003 031f 	and.w	r3, r3, #31
 80010d8:	fa07 f303 	lsl.w	r3, r7, r3
 80010dc:	4213      	tst	r3, r2
 80010de:	f43f ae72 	beq.w	8000dc6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010e2:	f7ff f873 	bl	80001cc <HAL_GetTick>
 80010e6:	eba0 0008 	sub.w	r0, r0, r8
 80010ea:	2802      	cmp	r0, #2
 80010ec:	d9eb      	bls.n	80010c6 <HAL_RCC_OscConfig+0x3c6>
 80010ee:	e6c3      	b.n	8000e78 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010f0:	6962      	ldr	r2, [r4, #20]
 80010f2:	2501      	movs	r5, #1
 80010f4:	49a9      	ldr	r1, [pc, #676]	; (800139c <HAL_RCC_OscConfig+0x69c>)
 80010f6:	b302      	cbz	r2, 800113a <HAL_RCC_OscConfig+0x43a>
 80010f8:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 80010fc:	fab3 f383 	clz	r3, r3
 8001100:	440b      	add	r3, r1
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8001106:	f7ff f861 	bl	80001cc <HAL_GetTick>
 800110a:	2602      	movs	r6, #2
 800110c:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110e:	4fa4      	ldr	r7, [pc, #656]	; (80013a0 <HAL_RCC_OscConfig+0x6a0>)
 8001110:	fa96 f3a6 	rbit	r3, r6
 8001114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001116:	fa96 f3a6 	rbit	r3, r6
 800111a:	fab3 f383 	clz	r3, r3
 800111e:	f003 031f 	and.w	r3, r3, #31
 8001122:	fa05 f303 	lsl.w	r3, r5, r3
 8001126:	4213      	tst	r3, r2
 8001128:	f47f ae51 	bne.w	8000dce <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800112c:	f7ff f84e 	bl	80001cc <HAL_GetTick>
 8001130:	eba0 0008 	sub.w	r0, r0, r8
 8001134:	2802      	cmp	r0, #2
 8001136:	d9eb      	bls.n	8001110 <HAL_RCC_OscConfig+0x410>
 8001138:	e69e      	b.n	8000e78 <HAL_RCC_OscConfig+0x178>
 800113a:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 800113e:	fab3 f383 	clz	r3, r3
 8001142:	440b      	add	r3, r1
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001148:	f7ff f840 	bl	80001cc <HAL_GetTick>
 800114c:	2602      	movs	r6, #2
 800114e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001150:	4f93      	ldr	r7, [pc, #588]	; (80013a0 <HAL_RCC_OscConfig+0x6a0>)
 8001152:	fa96 f3a6 	rbit	r3, r6
 8001156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001158:	fa96 f3a6 	rbit	r3, r6
 800115c:	fab3 f383 	clz	r3, r3
 8001160:	f003 031f 	and.w	r3, r3, #31
 8001164:	fa05 f303 	lsl.w	r3, r5, r3
 8001168:	4213      	tst	r3, r2
 800116a:	f43f ae30 	beq.w	8000dce <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800116e:	f7ff f82d 	bl	80001cc <HAL_GetTick>
 8001172:	eba0 0008 	sub.w	r0, r0, r8
 8001176:	2802      	cmp	r0, #2
 8001178:	d9eb      	bls.n	8001152 <HAL_RCC_OscConfig+0x452>
 800117a:	e67d      	b.n	8000e78 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800117c:	4b88      	ldr	r3, [pc, #544]	; (80013a0 <HAL_RCC_OscConfig+0x6a0>)
 800117e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001180:	00d1      	lsls	r1, r2, #3
 8001182:	d434      	bmi.n	80011ee <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8001184:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001188:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	4d82      	ldr	r5, [pc, #520]	; (80013a4 <HAL_RCC_OscConfig+0x6a4>)
 800119a:	682b      	ldr	r3, [r5, #0]
 800119c:	05da      	lsls	r2, r3, #23
 800119e:	d528      	bpl.n	80011f2 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a0:	68a3      	ldr	r3, [r4, #8]
 80011a2:	4d7f      	ldr	r5, [pc, #508]	; (80013a0 <HAL_RCC_OscConfig+0x6a0>)
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d134      	bne.n	8001212 <HAL_RCC_OscConfig+0x512>
 80011a8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80011aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ae:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80011b0:	f7ff f80c 	bl	80001cc <HAL_GetTick>
 80011b4:	f44f 7500 	mov.w	r5, #512	; 0x200
 80011b8:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ba:	2701      	movs	r7, #1
 80011bc:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 80013a0 <HAL_RCC_OscConfig+0x6a0>
 80011c0:	fa95 f3a5 	rbit	r3, r5
 80011c4:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80011c8:	fa95 f3a5 	rbit	r3, r5
 80011cc:	fab3 f383 	clz	r3, r3
 80011d0:	f003 031f 	and.w	r3, r3, #31
 80011d4:	fa07 f303 	lsl.w	r3, r7, r3
 80011d8:	4213      	tst	r3, r2
 80011da:	d04e      	beq.n	800127a <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 80011dc:	2e00      	cmp	r6, #0
 80011de:	f43f adfa 	beq.w	8000dd6 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e2:	4a6f      	ldr	r2, [pc, #444]	; (80013a0 <HAL_RCC_OscConfig+0x6a0>)
 80011e4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80011e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ea:	6253      	str	r3, [r2, #36]	; 0x24
 80011ec:	e5f3      	b.n	8000dd6 <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 80011ee:	2600      	movs	r6, #0
 80011f0:	e7d2      	b.n	8001198 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f2:	682b      	ldr	r3, [r5, #0]
 80011f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80011fa:	f7fe ffe7 	bl	80001cc <HAL_GetTick>
 80011fe:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	05db      	lsls	r3, r3, #23
 8001204:	d4cc      	bmi.n	80011a0 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001206:	f7fe ffe1 	bl	80001cc <HAL_GetTick>
 800120a:	1bc0      	subs	r0, r0, r7
 800120c:	2864      	cmp	r0, #100	; 0x64
 800120e:	d9f7      	bls.n	8001200 <HAL_RCC_OscConfig+0x500>
 8001210:	e632      	b.n	8000e78 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001212:	bb23      	cbnz	r3, 800125e <HAL_RCC_OscConfig+0x55e>
 8001214:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001216:	f44f 7700 	mov.w	r7, #512	; 0x200
 800121a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800121e:	636b      	str	r3, [r5, #52]	; 0x34
 8001220:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001222:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800122a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800122c:	f7fe ffce 	bl	80001cc <HAL_GetTick>
 8001230:	4681      	mov	r9, r0
 8001232:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001236:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001238:	fa97 f3a7 	rbit	r3, r7
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	f003 031f 	and.w	r3, r3, #31
 8001244:	fa08 f303 	lsl.w	r3, r8, r3
 8001248:	4213      	tst	r3, r2
 800124a:	d0c7      	beq.n	80011dc <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800124c:	f7fe ffbe 	bl	80001cc <HAL_GetTick>
 8001250:	f241 3388 	movw	r3, #5000	; 0x1388
 8001254:	eba0 0009 	sub.w	r0, r0, r9
 8001258:	4298      	cmp	r0, r3
 800125a:	d9ea      	bls.n	8001232 <HAL_RCC_OscConfig+0x532>
 800125c:	e60c      	b.n	8000e78 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800125e:	2b05      	cmp	r3, #5
 8001260:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001262:	d103      	bne.n	800126c <HAL_RCC_OscConfig+0x56c>
 8001264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001268:	636b      	str	r3, [r5, #52]	; 0x34
 800126a:	e79d      	b.n	80011a8 <HAL_RCC_OscConfig+0x4a8>
 800126c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001270:	636b      	str	r3, [r5, #52]	; 0x34
 8001272:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001278:	e799      	b.n	80011ae <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800127a:	f7fe ffa7 	bl	80001cc <HAL_GetTick>
 800127e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001282:	eba0 0009 	sub.w	r0, r0, r9
 8001286:	4298      	cmp	r0, r3
 8001288:	d99a      	bls.n	80011c0 <HAL_RCC_OscConfig+0x4c0>
 800128a:	e5f5      	b.n	8000e78 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800128c:	4d44      	ldr	r5, [pc, #272]	; (80013a0 <HAL_RCC_OscConfig+0x6a0>)
 800128e:	68ab      	ldr	r3, [r5, #8]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b0c      	cmp	r3, #12
 8001296:	f43f adc8 	beq.w	8000e2a <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800129a:	2a02      	cmp	r2, #2
 800129c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012a0:	d156      	bne.n	8001350 <HAL_RCC_OscConfig+0x650>
 80012a2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	2200      	movs	r2, #0
 80012ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012b0:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012b8:	f7fe ff88 	bl	80001cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012bc:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 80012be:	4680      	mov	r8, r0
 80012c0:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c4:	2501      	movs	r5, #1
 80012c6:	fa97 f3a7 	rbit	r3, r7
 80012ca:	6832      	ldr	r2, [r6, #0]
 80012cc:	fa97 f3a7 	rbit	r3, r7
 80012d0:	fab3 f383 	clz	r3, r3
 80012d4:	f003 031f 	and.w	r3, r3, #31
 80012d8:	fa05 f303 	lsl.w	r3, r5, r3
 80012dc:	4213      	tst	r3, r2
 80012de:	d130      	bne.n	8001342 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012e0:	68b2      	ldr	r2, [r6, #8]
 80012e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80012e6:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80012ea:	430b      	orrs	r3, r1
 80012ec:	4313      	orrs	r3, r2
 80012ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80012f0:	4313      	orrs	r3, r2
 80012f2:	60b3      	str	r3, [r6, #8]
 80012f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012f8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80012fc:	fab3 f383 	clz	r3, r3
 8001300:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001304:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800130c:	f7fe ff5e 	bl	80001cc <HAL_GetTick>
 8001310:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001314:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001316:	2501      	movs	r5, #1
 8001318:	4e21      	ldr	r6, [pc, #132]	; (80013a0 <HAL_RCC_OscConfig+0x6a0>)
 800131a:	fa94 f3a4 	rbit	r3, r4
 800131e:	6832      	ldr	r2, [r6, #0]
 8001320:	fa94 f3a4 	rbit	r3, r4
 8001324:	fab3 f383 	clz	r3, r3
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	fa05 f303 	lsl.w	r3, r5, r3
 8001330:	4213      	tst	r3, r2
 8001332:	f47f ad54 	bne.w	8000dde <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001336:	f7fe ff49 	bl	80001cc <HAL_GetTick>
 800133a:	1bc0      	subs	r0, r0, r7
 800133c:	2802      	cmp	r0, #2
 800133e:	d9ec      	bls.n	800131a <HAL_RCC_OscConfig+0x61a>
 8001340:	e59a      	b.n	8000e78 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001342:	f7fe ff43 	bl	80001cc <HAL_GetTick>
 8001346:	eba0 0008 	sub.w	r0, r0, r8
 800134a:	2802      	cmp	r0, #2
 800134c:	d9bb      	bls.n	80012c6 <HAL_RCC_OscConfig+0x5c6>
 800134e:	e593      	b.n	8000e78 <HAL_RCC_OscConfig+0x178>
 8001350:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001354:	fab3 f383 	clz	r3, r3
 8001358:	2200      	movs	r2, #0
 800135a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800135e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001366:	f7fe ff31 	bl	80001cc <HAL_GetTick>
 800136a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800136e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001370:	2601      	movs	r6, #1
 8001372:	fa94 f3a4 	rbit	r3, r4
 8001376:	682a      	ldr	r2, [r5, #0]
 8001378:	fa94 f3a4 	rbit	r3, r4
 800137c:	fab3 f383 	clz	r3, r3
 8001380:	f003 031f 	and.w	r3, r3, #31
 8001384:	fa06 f303 	lsl.w	r3, r6, r3
 8001388:	4213      	tst	r3, r2
 800138a:	f43f ad28 	beq.w	8000dde <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800138e:	f7fe ff1d 	bl	80001cc <HAL_GetTick>
 8001392:	1bc0      	subs	r0, r0, r7
 8001394:	2802      	cmp	r0, #2
 8001396:	d9ec      	bls.n	8001372 <HAL_RCC_OscConfig+0x672>
 8001398:	e56e      	b.n	8000e78 <HAL_RCC_OscConfig+0x178>
 800139a:	bf00      	nop
 800139c:	1091c1a0 	.word	0x1091c1a0
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40007000 	.word	0x40007000

080013a8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80013a8:	491e      	ldr	r1, [pc, #120]	; (8001424 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 80013aa:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80013ac:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 80013ae:	f003 020c 	and.w	r2, r3, #12
 80013b2:	2a08      	cmp	r2, #8
 80013b4:	d005      	beq.n	80013c2 <HAL_RCC_GetSysClockFreq+0x1a>
 80013b6:	2a0c      	cmp	r2, #12
 80013b8:	d005      	beq.n	80013c6 <HAL_RCC_GetSysClockFreq+0x1e>
 80013ba:	2a04      	cmp	r2, #4
 80013bc:	d122      	bne.n	8001404 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 80013be:	481a      	ldr	r0, [pc, #104]	; (8001428 <HAL_RCC_GetSysClockFreq+0x80>)
}
 80013c0:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80013c2:	481a      	ldr	r0, [pc, #104]	; (800142c <HAL_RCC_GetSysClockFreq+0x84>)
 80013c4:	bd10      	pop	{r4, pc}
 80013c6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80013ca:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013ce:	fab2 f282 	clz	r2, r2
 80013d2:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80013d6:	fa20 f202 	lsr.w	r2, r0, r2
 80013da:	4815      	ldr	r0, [pc, #84]	; (8001430 <HAL_RCC_GetSysClockFreq+0x88>)
 80013dc:	5c84      	ldrb	r4, [r0, r2]
 80013de:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80013e2:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80013e6:	fab0 f280 	clz	r2, r0
 80013ea:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013ee:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80013f0:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013f2:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 80013f4:	bf4c      	ite	mi
 80013f6:	4b0d      	ldrmi	r3, [pc, #52]	; (800142c <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 80013f8:	4b0b      	ldrpl	r3, [pc, #44]	; (8001428 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80013fa:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 80013fc:	4363      	muls	r3, r4
 80013fe:	fbb3 f0f0 	udiv	r0, r3, r0
 8001402:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8001404:	6848      	ldr	r0, [r1, #4]
 8001406:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	fab3 f383 	clz	r3, r3
 8001412:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8001416:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8001418:	1c43      	adds	r3, r0, #1
 800141a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800141e:	4098      	lsls	r0, r3
 8001420:	bd10      	pop	{r4, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	00f42400 	.word	0x00f42400
 800142c:	007a1200 	.word	0x007a1200
 8001430:	08002086 	.word	0x08002086

08001434 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001434:	4b6a      	ldr	r3, [pc, #424]	; (80015e0 <HAL_RCC_ClockConfig+0x1ac>)
{
 8001436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800143a:	681a      	ldr	r2, [r3, #0]
{
 800143c:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800143e:	f002 0201 	and.w	r2, r2, #1
 8001442:	428a      	cmp	r2, r1
{
 8001444:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001446:	d330      	bcc.n	80014aa <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001448:	6832      	ldr	r2, [r6, #0]
 800144a:	0794      	lsls	r4, r2, #30
 800144c:	d440      	bmi.n	80014d0 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800144e:	07d0      	lsls	r0, r2, #31
 8001450:	d446      	bmi.n	80014e0 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001452:	4b63      	ldr	r3, [pc, #396]	; (80015e0 <HAL_RCC_ClockConfig+0x1ac>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	f002 0201 	and.w	r2, r2, #1
 800145a:	4295      	cmp	r5, r2
 800145c:	f0c0 80ae 	bcc.w	80015bc <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001460:	6832      	ldr	r2, [r6, #0]
 8001462:	0751      	lsls	r1, r2, #29
 8001464:	f100 80b3 	bmi.w	80015ce <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001468:	0713      	lsls	r3, r2, #28
 800146a:	d507      	bpl.n	800147c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800146c:	4a5d      	ldr	r2, [pc, #372]	; (80015e4 <HAL_RCC_ClockConfig+0x1b0>)
 800146e:	6931      	ldr	r1, [r6, #16]
 8001470:	6893      	ldr	r3, [r2, #8]
 8001472:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001476:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800147a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800147c:	f7ff ff94 	bl	80013a8 <HAL_RCC_GetSysClockFreq>
 8001480:	4b58      	ldr	r3, [pc, #352]	; (80015e4 <HAL_RCC_ClockConfig+0x1b0>)
 8001482:	22f0      	movs	r2, #240	; 0xf0
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	fa92 f2a2 	rbit	r2, r2
 800148a:	fab2 f282 	clz	r2, r2
 800148e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001492:	40d3      	lsrs	r3, r2
 8001494:	4a54      	ldr	r2, [pc, #336]	; (80015e8 <HAL_RCC_ClockConfig+0x1b4>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	40d8      	lsrs	r0, r3
 800149a:	4b54      	ldr	r3, [pc, #336]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 800149c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800149e:	2000      	movs	r0, #0
 80014a0:	f7fe fe6c 	bl	800017c <HAL_InitTick>
  return HAL_OK;
 80014a4:	2000      	movs	r0, #0
}
 80014a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	2901      	cmp	r1, #1
 80014ac:	bf02      	ittt	eq
 80014ae:	681a      	ldreq	r2, [r3, #0]
 80014b0:	f042 0204 	orreq.w	r2, r2, #4
 80014b4:	601a      	streq	r2, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	f022 0201 	bic.w	r2, r2, #1
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	4299      	cmp	r1, r3
 80014c8:	d0be      	beq.n	8001448 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80014ca:	2001      	movs	r0, #1
 80014cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d0:	4944      	ldr	r1, [pc, #272]	; (80015e4 <HAL_RCC_ClockConfig+0x1b0>)
 80014d2:	68b0      	ldr	r0, [r6, #8]
 80014d4:	688b      	ldr	r3, [r1, #8]
 80014d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014da:	4303      	orrs	r3, r0
 80014dc:	608b      	str	r3, [r1, #8]
 80014de:	e7b6      	b.n	800144e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e0:	6872      	ldr	r2, [r6, #4]
 80014e2:	4940      	ldr	r1, [pc, #256]	; (80015e4 <HAL_RCC_ClockConfig+0x1b0>)
 80014e4:	2a02      	cmp	r2, #2
 80014e6:	d10f      	bne.n	8001508 <HAL_RCC_ClockConfig+0xd4>
 80014e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ec:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80014f0:	6808      	ldr	r0, [r1, #0]
 80014f2:	fa93 f3a3 	rbit	r3, r3
 80014f6:	fab3 f383 	clz	r3, r3
 80014fa:	2101      	movs	r1, #1
 80014fc:	f003 031f 	and.w	r3, r3, #31
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	4203      	tst	r3, r0
 8001506:	e013      	b.n	8001530 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001508:	2a03      	cmp	r2, #3
 800150a:	d102      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
 800150c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001510:	e7ec      	b.n	80014ec <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001512:	2a01      	cmp	r2, #1
 8001514:	d129      	bne.n	800156a <HAL_RCC_ClockConfig+0x136>
 8001516:	2302      	movs	r3, #2
 8001518:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151c:	6809      	ldr	r1, [r1, #0]
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	f003 031f 	and.w	r3, r3, #31
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001530:	d0cb      	beq.n	80014ca <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001532:	4c2c      	ldr	r4, [pc, #176]	; (80015e4 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001534:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001538:	68a3      	ldr	r3, [r4, #8]
 800153a:	f023 0303 	bic.w	r3, r3, #3
 800153e:	431a      	orrs	r2, r3
 8001540:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001542:	f7fe fe43 	bl	80001cc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001546:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001548:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800154a:	2b02      	cmp	r3, #2
 800154c:	d110      	bne.n	8001570 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800154e:	68a3      	ldr	r3, [r4, #8]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b08      	cmp	r3, #8
 8001556:	f43f af7c 	beq.w	8001452 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155a:	f7fe fe37 	bl	80001cc <HAL_GetTick>
 800155e:	1bc0      	subs	r0, r0, r7
 8001560:	4540      	cmp	r0, r8
 8001562:	d9f4      	bls.n	800154e <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8001564:	2003      	movs	r0, #3
 8001566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800156a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800156e:	e7bd      	b.n	80014ec <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001570:	2b03      	cmp	r3, #3
 8001572:	d10b      	bne.n	800158c <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001574:	68a3      	ldr	r3, [r4, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b0c      	cmp	r3, #12
 800157c:	f43f af69 	beq.w	8001452 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001580:	f7fe fe24 	bl	80001cc <HAL_GetTick>
 8001584:	1bc0      	subs	r0, r0, r7
 8001586:	4540      	cmp	r0, r8
 8001588:	d9f4      	bls.n	8001574 <HAL_RCC_ClockConfig+0x140>
 800158a:	e7eb      	b.n	8001564 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800158c:	2b01      	cmp	r3, #1
 800158e:	d110      	bne.n	80015b2 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001590:	68a3      	ldr	r3, [r4, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b04      	cmp	r3, #4
 8001598:	f43f af5b 	beq.w	8001452 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159c:	f7fe fe16 	bl	80001cc <HAL_GetTick>
 80015a0:	1bc0      	subs	r0, r0, r7
 80015a2:	4540      	cmp	r0, r8
 80015a4:	d9f4      	bls.n	8001590 <HAL_RCC_ClockConfig+0x15c>
 80015a6:	e7dd      	b.n	8001564 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a8:	f7fe fe10 	bl	80001cc <HAL_GetTick>
 80015ac:	1bc0      	subs	r0, r0, r7
 80015ae:	4540      	cmp	r0, r8
 80015b0:	d8d8      	bhi.n	8001564 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80015b2:	68a3      	ldr	r3, [r4, #8]
 80015b4:	f013 0f0c 	tst.w	r3, #12
 80015b8:	d1f6      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x174>
 80015ba:	e74a      	b.n	8001452 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f022 0201 	bic.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	07da      	lsls	r2, r3, #31
 80015c8:	f53f af7f 	bmi.w	80014ca <HAL_RCC_ClockConfig+0x96>
 80015cc:	e748      	b.n	8001460 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ce:	4905      	ldr	r1, [pc, #20]	; (80015e4 <HAL_RCC_ClockConfig+0x1b0>)
 80015d0:	68f0      	ldr	r0, [r6, #12]
 80015d2:	688b      	ldr	r3, [r1, #8]
 80015d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015d8:	4303      	orrs	r3, r0
 80015da:	608b      	str	r3, [r1, #8]
 80015dc:	e744      	b.n	8001468 <HAL_RCC_ClockConfig+0x34>
 80015de:	bf00      	nop
 80015e0:	40023c00 	.word	0x40023c00
 80015e4:	40023800 	.word	0x40023800
 80015e8:	0800206e 	.word	0x0800206e
 80015ec:	20000000 	.word	0x20000000

080015f0 <HAL_RCC_GetHCLKFreq>:
}
 80015f0:	4b01      	ldr	r3, [pc, #4]	; (80015f8 <HAL_RCC_GetHCLKFreq+0x8>)
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000000 	.word	0x20000000

080015fc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	fa92 f2a2 	rbit	r2, r2
 8001608:	fab2 f282 	clz	r2, r2
 800160c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001610:	40d3      	lsrs	r3, r2
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001614:	5cd3      	ldrb	r3, [r2, r3]
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001618:	6810      	ldr	r0, [r2, #0]
}    
 800161a:	40d8      	lsrs	r0, r3
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	0800207e 	.word	0x0800207e
 8001628:	20000000 	.word	0x20000000

0800162c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_RCC_GetPCLK2Freq+0x24>)
 800162e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	fa92 f2a2 	rbit	r2, r2
 8001638:	fab2 f282 	clz	r2, r2
 800163c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001640:	40d3      	lsrs	r3, r2
 8001642:	4a04      	ldr	r2, [pc, #16]	; (8001654 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001644:	5cd3      	ldrb	r3, [r2, r3]
 8001646:	4a04      	ldr	r2, [pc, #16]	; (8001658 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001648:	6810      	ldr	r0, [r2, #0]
} 
 800164a:	40d8      	lsrs	r0, r3
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	0800207e 	.word	0x0800207e
 8001658:	20000000 	.word	0x20000000

0800165c <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800165c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001660:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001662:	6805      	ldr	r5, [r0, #0]
 8001664:	68c2      	ldr	r2, [r0, #12]
 8001666:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001668:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800166a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800166e:	4313      	orrs	r3, r2
 8001670:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001672:	6883      	ldr	r3, [r0, #8]
 8001674:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8001676:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001678:	4303      	orrs	r3, r0
 800167a:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800167e:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001682:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8001684:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001688:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800168a:	4313      	orrs	r3, r2
 800168c:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800168e:	696b      	ldr	r3, [r5, #20]
 8001690:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8001694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001698:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800169a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800169e:	616b      	str	r3, [r5, #20]
 80016a0:	4b7e      	ldr	r3, [pc, #504]	; (800189c <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016a2:	d17f      	bne.n	80017a4 <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 80016a4:	429d      	cmp	r5, r3
 80016a6:	f04f 0419 	mov.w	r4, #25
 80016aa:	d147      	bne.n	800173c <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80016ac:	f7ff ffbe 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 80016b0:	fb04 f300 	mul.w	r3, r4, r0
 80016b4:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80016b8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80016bc:	007f      	lsls	r7, r7, #1
 80016be:	fbb3 f3f7 	udiv	r3, r3, r7
 80016c2:	fbb3 f3f8 	udiv	r3, r3, r8
 80016c6:	011f      	lsls	r7, r3, #4
 80016c8:	f7ff ffb0 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 80016cc:	4360      	muls	r0, r4
 80016ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fbb0 f6f3 	udiv	r6, r0, r3
 80016d8:	f7ff ffa8 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 80016dc:	4360      	muls	r0, r4
 80016de:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e8:	fbb3 f3f8 	udiv	r3, r3, r8
 80016ec:	fb08 6313 	mls	r3, r8, r3, r6
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	3332      	adds	r3, #50	; 0x32
 80016f4:	fbb3 f3f8 	udiv	r3, r3, r8
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 80016fe:	f7ff ff95 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 8001702:	4360      	muls	r0, r4
 8001704:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001708:	0052      	lsls	r2, r2, #1
 800170a:	fbb0 faf2 	udiv	sl, r0, r2
 800170e:	f7ff ff8d 	bl	800162c <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001712:	4360      	muls	r0, r4
 8001714:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fbb0 f3f3 	udiv	r3, r0, r3
 800171e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001722:	fb08 a313 	mls	r3, r8, r3, sl
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	3332      	adds	r3, #50	; 0x32
 800172a:	fbb3 f3f8 	udiv	r3, r3, r8
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001734:	4433      	add	r3, r6
 8001736:	60ab      	str	r3, [r5, #8]
 8001738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800173c:	f7ff ff5e 	bl	80015fc <HAL_RCC_GetPCLK1Freq>
 8001740:	fb04 f300 	mul.w	r3, r4, r0
 8001744:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001748:	f04f 0864 	mov.w	r8, #100	; 0x64
 800174c:	007f      	lsls	r7, r7, #1
 800174e:	fbb3 f3f7 	udiv	r3, r3, r7
 8001752:	fbb3 f3f8 	udiv	r3, r3, r8
 8001756:	011f      	lsls	r7, r3, #4
 8001758:	f7ff ff50 	bl	80015fc <HAL_RCC_GetPCLK1Freq>
 800175c:	4360      	muls	r0, r4
 800175e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fbb0 f6f3 	udiv	r6, r0, r3
 8001768:	f7ff ff48 	bl	80015fc <HAL_RCC_GetPCLK1Freq>
 800176c:	4360      	muls	r0, r4
 800176e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fbb0 f3f3 	udiv	r3, r0, r3
 8001778:	fbb3 f3f8 	udiv	r3, r3, r8
 800177c:	fb08 6313 	mls	r3, r8, r3, r6
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	3332      	adds	r3, #50	; 0x32
 8001784:	fbb3 f3f8 	udiv	r3, r3, r8
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 800178e:	f7ff ff35 	bl	80015fc <HAL_RCC_GetPCLK1Freq>
 8001792:	4360      	muls	r0, r4
 8001794:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001798:	0052      	lsls	r2, r2, #1
 800179a:	fbb0 faf2 	udiv	sl, r0, r2
 800179e:	f7ff ff2d 	bl	80015fc <HAL_RCC_GetPCLK1Freq>
 80017a2:	e7b6      	b.n	8001712 <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 80017a4:	429d      	cmp	r5, r3
 80017a6:	f04f 0419 	mov.w	r4, #25
 80017aa:	d143      	bne.n	8001834 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80017ac:	f7ff ff3e 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 80017b0:	fb04 f300 	mul.w	r3, r4, r0
 80017b4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80017b8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80017bc:	00b6      	lsls	r6, r6, #2
 80017be:	fbb3 f3f6 	udiv	r3, r3, r6
 80017c2:	fbb3 f3f8 	udiv	r3, r3, r8
 80017c6:	011e      	lsls	r6, r3, #4
 80017c8:	f7ff ff30 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 80017cc:	4360      	muls	r0, r4
 80017ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	fbb0 f7f3 	udiv	r7, r0, r3
 80017d8:	f7ff ff28 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 80017dc:	4360      	muls	r0, r4
 80017de:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e8:	fbb3 f3f8 	udiv	r3, r3, r8
 80017ec:	fb08 7313 	mls	r3, r8, r3, r7
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	3332      	adds	r3, #50	; 0x32
 80017f4:	fbb3 f3f8 	udiv	r3, r3, r8
 80017f8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80017fc:	f7ff ff16 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 8001800:	4360      	muls	r0, r4
 8001802:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	fbb0 faf2 	udiv	sl, r0, r2
 800180c:	f7ff ff0e 	bl	800162c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001810:	4360      	muls	r0, r4
 8001812:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	fbb0 f3f3 	udiv	r3, r0, r3
 800181c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001820:	fb08 a313 	mls	r3, r8, r3, sl
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	3332      	adds	r3, #50	; 0x32
 8001828:	fbb3 f3f8 	udiv	r3, r3, r8
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	433b      	orrs	r3, r7
 8001832:	e77f      	b.n	8001734 <UART_SetConfig+0xd8>
 8001834:	f7ff fee2 	bl	80015fc <HAL_RCC_GetPCLK1Freq>
 8001838:	fb04 f300 	mul.w	r3, r4, r0
 800183c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001840:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001844:	00b6      	lsls	r6, r6, #2
 8001846:	fbb3 f3f6 	udiv	r3, r3, r6
 800184a:	fbb3 f3f8 	udiv	r3, r3, r8
 800184e:	011e      	lsls	r6, r3, #4
 8001850:	f7ff fed4 	bl	80015fc <HAL_RCC_GetPCLK1Freq>
 8001854:	4360      	muls	r0, r4
 8001856:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001860:	f7ff fecc 	bl	80015fc <HAL_RCC_GetPCLK1Freq>
 8001864:	4360      	muls	r0, r4
 8001866:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001870:	fbb3 f3f8 	udiv	r3, r3, r8
 8001874:	fb08 7313 	mls	r3, r8, r3, r7
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	3332      	adds	r3, #50	; 0x32
 800187c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001880:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001884:	f7ff feba 	bl	80015fc <HAL_RCC_GetPCLK1Freq>
 8001888:	4360      	muls	r0, r4
 800188a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800188e:	0092      	lsls	r2, r2, #2
 8001890:	fbb0 faf2 	udiv	sl, r0, r2
 8001894:	f7ff feb2 	bl	80015fc <HAL_RCC_GetPCLK1Freq>
 8001898:	e7ba      	b.n	8001810 <UART_SetConfig+0x1b4>
 800189a:	bf00      	nop
 800189c:	40013800 	.word	0x40013800

080018a0 <HAL_UART_Init>:
{
 80018a0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80018a2:	4604      	mov	r4, r0
 80018a4:	b330      	cbz	r0, 80018f4 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 80018a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80018aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018ae:	b91b      	cbnz	r3, 80018b8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80018b0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80018b4:	f000 fb4a 	bl	8001f4c <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 80018b8:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 80018ba:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 80018bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80018c0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80018c2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80018c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018c8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80018ca:	f7ff fec7 	bl	800165c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018ce:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018d0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018da:	695a      	ldr	r2, [r3, #20]
 80018dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018e0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018e8:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 80018ea:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018ec:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80018ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80018f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018f4:	2001      	movs	r0, #1
}
 80018f6:	bd10      	pop	{r4, pc}

080018f8 <HAL_UART_TxCpltCallback>:
 80018f8:	4770      	bx	lr

080018fa <HAL_UART_RxCpltCallback>:
 80018fa:	4770      	bx	lr

080018fc <HAL_UART_ErrorCallback>:
{
 80018fc:	4770      	bx	lr

080018fe <HAL_UART_IRQHandler>:
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80018fe:	6802      	ldr	r2, [r0, #0]
{
 8001900:	b513      	push	{r0, r1, r4, lr}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8001902:	6811      	ldr	r1, [r2, #0]
{
 8001904:	4604      	mov	r4, r0
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001906:	07c9      	lsls	r1, r1, #31
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8001908:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800190a:	d505      	bpl.n	8001918 <HAL_UART_IRQHandler+0x1a>
 800190c:	05db      	lsls	r3, r3, #23
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 800190e:	bf42      	ittt	mi
 8001910:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 8001912:	f043 0301 	orrmi.w	r3, r3, #1
 8001916:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8001918:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800191a:	6953      	ldr	r3, [r2, #20]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800191c:	0788      	lsls	r0, r1, #30
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800191e:	f003 0301 	and.w	r3, r3, #1
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001922:	d504      	bpl.n	800192e <HAL_UART_IRQHandler+0x30>
 8001924:	b11b      	cbz	r3, 800192e <HAL_UART_IRQHandler+0x30>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001926:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001928:	f041 0104 	orr.w	r1, r1, #4
 800192c:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 800192e:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001930:	0749      	lsls	r1, r1, #29
 8001932:	d504      	bpl.n	800193e <HAL_UART_IRQHandler+0x40>
 8001934:	b11b      	cbz	r3, 800193e <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001936:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001938:	f041 0102 	orr.w	r1, r1, #2
 800193c:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 800193e:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001940:	0708      	lsls	r0, r1, #28
 8001942:	d504      	bpl.n	800194e <HAL_UART_IRQHandler+0x50>
 8001944:	b11b      	cbz	r3, 800194e <HAL_UART_IRQHandler+0x50>
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001946:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 800194e:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8001950:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001952:	0689      	lsls	r1, r1, #26
 8001954:	d533      	bpl.n	80019be <HAL_UART_IRQHandler+0xc0>
 8001956:	0698      	lsls	r0, r3, #26
 8001958:	d531      	bpl.n	80019be <HAL_UART_IRQHandler+0xc0>
  tmp_state = huart->State; 
 800195a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 800195e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8001962:	2b22      	cmp	r3, #34	; 0x22
 8001964:	d12b      	bne.n	80019be <HAL_UART_IRQHandler+0xc0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001966:	68a3      	ldr	r3, [r4, #8]
 8001968:	6921      	ldr	r1, [r4, #16]
 800196a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800196e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001970:	d176      	bne.n	8001a60 <HAL_UART_IRQHandler+0x162>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001972:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001974:	2900      	cmp	r1, #0
 8001976:	d16f      	bne.n	8001a58 <HAL_UART_IRQHandler+0x15a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800197c:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1;
 8001980:	62a3      	str	r3, [r4, #40]	; 0x28
    if(--huart->RxXferCount == 0)
 8001982:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001984:	3b01      	subs	r3, #1
 8001986:	b29b      	uxth	r3, r3
 8001988:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800198a:	b9c3      	cbnz	r3, 80019be <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800198c:	6823      	ldr	r3, [r4, #0]
      HAL_UART_RxCpltCallback(huart);
 800198e:	4620      	mov	r0, r4
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	f022 0220 	bic.w	r2, r2, #32
 8001996:	60da      	str	r2, [r3, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001998:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800199c:	2a32      	cmp	r2, #50	; 0x32
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800199e:	bf17      	itett	ne
 80019a0:	68da      	ldrne	r2, [r3, #12]
        huart->State = HAL_UART_STATE_BUSY_TX;
 80019a2:	2312      	moveq	r3, #18
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80019a4:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 80019a8:	60da      	strne	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80019aa:	bf1f      	itttt	ne
 80019ac:	695a      	ldrne	r2, [r3, #20]
 80019ae:	f022 0201 	bicne.w	r2, r2, #1
 80019b2:	615a      	strne	r2, [r3, #20]
        huart->State = HAL_UART_STATE_READY;
 80019b4:	2301      	movne	r3, #1
 80019b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 80019ba:	f7ff ff9e 	bl	80018fa <HAL_UART_RxCpltCallback>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 80019c2:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80019c4:	0609      	lsls	r1, r1, #24
 80019c6:	d522      	bpl.n	8001a0e <HAL_UART_IRQHandler+0x110>
 80019c8:	0610      	lsls	r0, r2, #24
 80019ca:	d520      	bpl.n	8001a0e <HAL_UART_IRQHandler+0x110>
  tmp_state = huart->State;
 80019cc:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80019d0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80019d4:	2a12      	cmp	r2, #18
 80019d6:	d11a      	bne.n	8001a0e <HAL_UART_IRQHandler+0x110>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80019d8:	68a2      	ldr	r2, [r4, #8]
 80019da:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80019de:	6a22      	ldr	r2, [r4, #32]
 80019e0:	d14c      	bne.n	8001a7c <HAL_UART_IRQHandler+0x17e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80019e2:	8811      	ldrh	r1, [r2, #0]
 80019e4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80019e8:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80019ea:	6921      	ldr	r1, [r4, #16]
 80019ec:	2900      	cmp	r1, #0
 80019ee:	d143      	bne.n	8001a78 <HAL_UART_IRQHandler+0x17a>
        huart->pTxBuffPtr += 2;
 80019f0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1;
 80019f2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0)
 80019f4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80019f6:	3a01      	subs	r2, #1
 80019f8:	b292      	uxth	r2, r2
 80019fa:	84e2      	strh	r2, [r4, #38]	; 0x26
 80019fc:	b93a      	cbnz	r2, 8001a0e <HAL_UART_IRQHandler+0x110>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a04:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a0c:	60da      	str	r2, [r3, #12]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8001a0e:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8001a10:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001a12:	0649      	lsls	r1, r1, #25
 8001a14:	d510      	bpl.n	8001a38 <HAL_UART_IRQHandler+0x13a>
 8001a16:	0652      	lsls	r2, r2, #25
 8001a18:	d50e      	bpl.n	8001a38 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001a1a:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001a1c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a22:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001a24:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001a28:	2b32      	cmp	r3, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2322      	moveq	r3, #34	; 0x22
    huart->State = HAL_UART_STATE_READY;
 8001a2e:	2301      	movne	r3, #1
 8001a30:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001a34:	f7ff ff60 	bl	80018f8 <HAL_UART_TxCpltCallback>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a3a:	b15b      	cbz	r3, 8001a54 <HAL_UART_IRQHandler+0x156>
    __HAL_UART_CLEAR_PEFLAG(huart);
 8001a3c:	6823      	ldr	r3, [r4, #0]
    HAL_UART_ErrorCallback(huart);
 8001a3e:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_PEFLAG(huart);
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	9201      	str	r2, [sp, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	9b01      	ldr	r3, [sp, #4]
    huart->State = HAL_UART_STATE_READY;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 8001a50:	f7ff ff54 	bl	80018fc <HAL_UART_ErrorCallback>
}
 8001a54:	b002      	add	sp, #8
 8001a56:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	f823 2b01 	strh.w	r2, [r3], #1
 8001a5e:	e78f      	b.n	8001980 <HAL_UART_IRQHandler+0x82>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001a60:	b921      	cbnz	r1, 8001a6c <HAL_UART_IRQHandler+0x16e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a62:	1c59      	adds	r1, r3, #1
 8001a64:	6852      	ldr	r2, [r2, #4]
 8001a66:	62a1      	str	r1, [r4, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a68:	701a      	strb	r2, [r3, #0]
 8001a6a:	e78a      	b.n	8001982 <HAL_UART_IRQHandler+0x84>
 8001a6c:	6852      	ldr	r2, [r2, #4]
 8001a6e:	1c59      	adds	r1, r3, #1
 8001a70:	62a1      	str	r1, [r4, #40]	; 0x28
 8001a72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a76:	e7f7      	b.n	8001a68 <HAL_UART_IRQHandler+0x16a>
        huart->pTxBuffPtr += 1;
 8001a78:	3201      	adds	r2, #1
 8001a7a:	e7ba      	b.n	80019f2 <HAL_UART_IRQHandler+0xf4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001a7c:	1c51      	adds	r1, r2, #1
 8001a7e:	6221      	str	r1, [r4, #32]
 8001a80:	7812      	ldrb	r2, [r2, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	e7b6      	b.n	80019f4 <HAL_UART_IRQHandler+0xf6>
	...

08001a88 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    */
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.NbrOfConversion = 2;
 8001a8e:	2102      	movs	r1, #2
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001a90:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
  hadc.Instance = ADC1;
 8001a94:	481c      	ldr	r0, [pc, #112]	; (8001b08 <MX_ADC_Init+0x80>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <MX_ADC_Init+0x84>)
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a98:	6102      	str	r2, [r0, #16]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001a9a:	e880 4008 	stmia.w	r0, {r3, lr}
  hadc.Init.ContinuousConvMode = ENABLE;
 8001a9e:	2201      	movs	r2, #1
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001aa0:	2300      	movs	r3, #0
  hadc.Init.NbrOfConversion = 2;
 8001aa2:	6281      	str	r1, [r0, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aa4:	2110      	movs	r1, #16
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001aa6:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aa8:	60c3      	str	r3, [r0, #12]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001aaa:	6143      	str	r3, [r0, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001aac:	6183      	str	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001aae:	61c3      	str	r3, [r0, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001ab0:	6203      	str	r3, [r0, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001ab2:	6242      	str	r2, [r0, #36]	; 0x24
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001ab4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ab6:	6341      	str	r1, [r0, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ab8:	6383      	str	r3, [r0, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001aba:	63c2      	str	r2, [r0, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001abc:	f7fe fb8c 	bl	80001d8 <HAL_ADC_Init>
 8001ac0:	b118      	cbz	r0, 8001aca <MX_ADC_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ac2:	214d      	movs	r1, #77	; 0x4d
 8001ac4:	4812      	ldr	r0, [pc, #72]	; (8001b10 <MX_ADC_Init+0x88>)
 8001ac6:	f000 f989 	bl	8001ddc <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_6;
 8001aca:	2306      	movs	r3, #6
 8001acc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = 1;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES;
 8001ad2:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001ad4:	a901      	add	r1, sp, #4
 8001ad6:	480c      	ldr	r0, [pc, #48]	; (8001b08 <MX_ADC_Init+0x80>)
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES;
 8001ad8:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001ada:	f7fe fd11 	bl	8000500 <HAL_ADC_ConfigChannel>
 8001ade:	b118      	cbz	r0, 8001ae8 <MX_ADC_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ae0:	2157      	movs	r1, #87	; 0x57
 8001ae2:	480b      	ldr	r0, [pc, #44]	; (8001b10 <MX_ADC_Init+0x88>)
 8001ae4:	f000 f97a 	bl	8001ddc <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ae8:	2307      	movs	r3, #7
 8001aea:	9301      	str	r3, [sp, #4]
  sConfig.Rank = 2;
 8001aec:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001aee:	a901      	add	r1, sp, #4
 8001af0:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_ADC_Init+0x80>)
  sConfig.Rank = 2;
 8001af2:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001af4:	f7fe fd04 	bl	8000500 <HAL_ADC_ConfigChannel>
 8001af8:	b118      	cbz	r0, 8001b02 <MX_ADC_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001afa:	2160      	movs	r1, #96	; 0x60
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <MX_ADC_Init+0x88>)
 8001afe:	f000 f96d 	bl	8001ddc <_Error_Handler>
  }

}
 8001b02:	b005      	add	sp, #20
 8001b04:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b08:	20000068 	.word	0x20000068
 8001b0c:	40012400 	.word	0x40012400
 8001b10:	08002054 	.word	0x08002054

08001b14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b14:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8001b16:	6802      	ldr	r2, [r0, #0]
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <HAL_ADC_MspInit+0x84>)
{
 8001b1a:	b086      	sub	sp, #24
  if(adcHandle->Instance==ADC1)
 8001b1c:	429a      	cmp	r2, r3
{
 8001b1e:	4605      	mov	r5, r0
  if(adcHandle->Instance==ADC1)
 8001b20:	d138      	bne.n	8001b94 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b22:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8001b26:	6a1a      	ldr	r2, [r3, #32]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2600      	movs	r6, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b2e:	621a      	str	r2, [r3, #32]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	481a      	ldr	r0, [pc, #104]	; (8001b9c <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b3c:	23c0      	movs	r3, #192	; 0xc0
 8001b3e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b40:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	a901      	add	r1, sp, #4

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001b44:	4c16      	ldr	r4, [pc, #88]	; (8001ba0 <HAL_ADC_MspInit+0x8c>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b46:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f7fe ffc5 	bl	8000ad8 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_ADC_MspInit+0x90>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001b50:	4620      	mov	r0, r4
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b52:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b5e:	6123      	str	r3, [r4, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b64:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001b66:	2320      	movs	r3, #32
 8001b68:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b6e:	60a6      	str	r6, [r4, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001b70:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001b72:	f7fe fef3 	bl	800095c <HAL_DMA_Init>
 8001b76:	b118      	cbz	r0, 8001b80 <HAL_ADC_MspInit+0x6c>
    {
      _Error_Handler(__FILE__, __LINE__);
 8001b78:	2186      	movs	r1, #134	; 0x86
 8001b7a:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <HAL_ADC_MspInit+0x94>)
 8001b7c:	f000 f92e 	bl	8001ddc <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8001b84:	646c      	str	r4, [r5, #68]	; 0x44
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001b86:	4611      	mov	r1, r2
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8001b88:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001b8a:	f7fe fe13 	bl	80007b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001b8e:	2012      	movs	r0, #18
 8001b90:	f7fe fe44 	bl	800081c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001b94:	b006      	add	sp, #24
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
 8001b98:	40012400 	.word	0x40012400
 8001b9c:	40020000 	.word	0x40020000
 8001ba0:	20000024 	.word	0x20000024
 8001ba4:	40026008 	.word	0x40026008
 8001ba8:	08002054 	.word	0x08002054

08001bac <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001bac:	b507      	push	{r0, r1, r2, lr}
  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_DAC_Init+0x48>)
 8001bb0:	4811      	ldr	r0, [pc, #68]	; (8001bf8 <MX_DAC_Init+0x4c>)
 8001bb2:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001bb4:	f7fe fe65 	bl	8000882 <HAL_DAC_Init>
 8001bb8:	b118      	cbz	r0, 8001bc2 <MX_DAC_Init+0x16>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001bba:	213d      	movs	r1, #61	; 0x3d
 8001bbc:	480f      	ldr	r0, [pc, #60]	; (8001bfc <MX_DAC_Init+0x50>)
 8001bbe:	f000 f90d 	bl	8001ddc <_Error_Handler>
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001bc2:	2200      	movs	r2, #0
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001bc4:	4669      	mov	r1, sp
 8001bc6:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <MX_DAC_Init+0x4c>)
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001bc8:	9200      	str	r2, [sp, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001bca:	9201      	str	r2, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001bcc:	f7fe fe93 	bl	80008f6 <HAL_DAC_ConfigChannel>
 8001bd0:	b118      	cbz	r0, 8001bda <MX_DAC_Init+0x2e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001bd2:	2146      	movs	r1, #70	; 0x46
 8001bd4:	4809      	ldr	r0, [pc, #36]	; (8001bfc <MX_DAC_Init+0x50>)
 8001bd6:	f000 f901 	bl	8001ddc <_Error_Handler>
  }

    /**DAC channel OUT2 config 
    */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001bda:	2210      	movs	r2, #16
 8001bdc:	4669      	mov	r1, sp
 8001bde:	4806      	ldr	r0, [pc, #24]	; (8001bf8 <MX_DAC_Init+0x4c>)
 8001be0:	f7fe fe89 	bl	80008f6 <HAL_DAC_ConfigChannel>
 8001be4:	b118      	cbz	r0, 8001bee <MX_DAC_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001be6:	214d      	movs	r1, #77	; 0x4d
 8001be8:	4804      	ldr	r0, [pc, #16]	; (8001bfc <MX_DAC_Init+0x50>)
 8001bea:	f000 f8f7 	bl	8001ddc <_Error_Handler>
  }

}
 8001bee:	b003      	add	sp, #12
 8001bf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bf4:	40007400 	.word	0x40007400
 8001bf8:	200000bc 	.word	0x200000bc
 8001bfc:	08002061 	.word	0x08002061

08001c00 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001c00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(dacHandle->Instance==DAC)
 8001c02:	6802      	ldr	r2, [r0, #0]
 8001c04:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_DAC_MspInit+0x3c>)
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d114      	bne.n	8001c34 <HAL_DAC_MspInit+0x34>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001c0a:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001c0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	a901      	add	r1, sp, #4
    __HAL_RCC_DAC_CLK_ENABLE();
 8001c12:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001c16:	625a      	str	r2, [r3, #36]	; 0x24
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	4809      	ldr	r0, [pc, #36]	; (8001c40 <HAL_DAC_MspInit+0x40>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8001c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c24:	2330      	movs	r3, #48	; 0x30
 8001c26:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	f7fe ff52 	bl	8000ad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001c34:	b007      	add	sp, #28
 8001c36:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c3a:	bf00      	nop
 8001c3c:	40007400 	.word	0x40007400
 8001c40:	40020000 	.word	0x40020000

08001c44 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <MX_DMA_Init+0x2c>)
{
 8001c46:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c48:	69da      	ldr	r2, [r3, #28]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c4a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c4c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001c50:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c54:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c56:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c60:	f7fe fda8 	bl	80007b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c64:	200b      	movs	r0, #11
 8001c66:	f7fe fdd9 	bl	800081c <HAL_NVIC_EnableIRQ>

}
 8001c6a:	b003      	add	sp, #12
 8001c6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c70:	40023800 	.word	0x40023800

08001c74 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <MX_GPIO_Init+0x64>)
{
 8001c76:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c78:	69da      	ldr	r2, [r3, #28]
{
 8001c7a:	b088      	sub	sp, #32
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c7c:	f042 0220 	orr.w	r2, r2, #32
 8001c80:	61da      	str	r2, [r3, #28]
 8001c82:	69da      	ldr	r2, [r3, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8001c84:	4c15      	ldr	r4, [pc, #84]	; (8001cdc <MX_GPIO_Init+0x68>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c86:	f002 0220 	and.w	r2, r2, #32
 8001c8a:	9200      	str	r2, [sp, #0]
 8001c8c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8e:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8001c90:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c92:	f042 0204 	orr.w	r2, r2, #4
 8001c96:	61da      	str	r2, [r3, #28]
 8001c98:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8001c9a:	2106      	movs	r1, #6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9c:	f002 0204 	and.w	r2, r2, #4
 8001ca0:	9201      	str	r2, [sp, #4]
 8001ca2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	61da      	str	r2, [r3, #28]
 8001cac:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8001cae:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	9302      	str	r3, [sp, #8]
 8001cb6:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8001cb8:	f7fe ffdc 	bl	8000c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001cbc:	2306      	movs	r3, #6
 8001cbe:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001cc0:	2311      	movs	r3, #17
 8001cc2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc6:	a903      	add	r1, sp, #12
 8001cc8:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cce:	f7fe ff03 	bl	8000ad8 <HAL_GPIO_Init>

}
 8001cd2:	b008      	add	sp, #32
 8001cd4:	bd10      	pop	{r4, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020800 	.word	0x40020800

08001ce0 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, ADC_BUF[0]);
 8001ce0:	2200      	movs	r2, #0
{
 8001ce2:	b570      	push	{r4, r5, r6, lr}
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, ADC_BUF[0]);
 8001ce4:	4d08      	ldr	r5, [pc, #32]	; (8001d08 <HAL_ADC_ConvCpltCallback+0x28>)
 8001ce6:	4c09      	ldr	r4, [pc, #36]	; (8001d0c <HAL_ADC_ConvCpltCallback+0x2c>)
 8001ce8:	882b      	ldrh	r3, [r5, #0]
 8001cea:	4611      	mov	r1, r2
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f7fe fe21 	bl	8000936 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, ADC_BUF[1]);
 8001cf4:	886b      	ldrh	r3, [r5, #2]
 8001cf6:	4620      	mov	r0, r4
}
 8001cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, ADC_BUF[1]);
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2110      	movs	r1, #16
 8001d02:	f7fe be18 	b.w	8000936 <HAL_DAC_SetValue>
 8001d06:	bf00      	nop
 8001d08:	200000d0 	.word	0x200000d0
 8001d0c:	200000bc 	.word	0x200000bc

08001d10 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d10:	4a1f      	ldr	r2, [pc, #124]	; (8001d90 <SystemClock_Config+0x80>)
{
 8001d12:	b530      	push	{r4, r5, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d14:	6813      	ldr	r3, [r2, #0]
{
 8001d16:	b093      	sub	sp, #76	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d18:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d20:	6013      	str	r3, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001d22:	2310      	movs	r3, #16
 8001d24:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d26:	2302      	movs	r3, #2
 8001d28:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d2e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001d30:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d34:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001d36:	2503      	movs	r5, #3
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001d38:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001d3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d3e:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001d40:	9505      	str	r5, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d42:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d44:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001d46:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d48:	f7fe ffda 	bl	8000d00 <HAL_RCC_OscConfig>
 8001d4c:	b100      	cbz	r0, 8001d50 <SystemClock_Config+0x40>
 8001d4e:	e7fe      	b.n	8001d4e <SystemClock_Config+0x3e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d50:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d52:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d54:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d56:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d58:	4621      	mov	r1, r4
 8001d5a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5c:	e88d 0028 	stmia.w	sp, {r3, r5}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d60:	f7ff fb68 	bl	8001434 <HAL_RCC_ClockConfig>
 8001d64:	4604      	mov	r4, r0
 8001d66:	b100      	cbz	r0, 8001d6a <SystemClock_Config+0x5a>
 8001d68:	e7fe      	b.n	8001d68 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001d6a:	f7ff fc41 	bl	80015f0 <HAL_RCC_GetHCLKFreq>
 8001d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d72:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d76:	f7fe fd5d 	bl	8000834 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d7a:	2004      	movs	r0, #4
 8001d7c:	f7fe fd70 	bl	8000860 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d80:	4622      	mov	r2, r4
 8001d82:	4621      	mov	r1, r4
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f7fe fd14 	bl	80007b4 <HAL_NVIC_SetPriority>
}
 8001d8c:	b013      	add	sp, #76	; 0x4c
 8001d8e:	bd30      	pop	{r4, r5, pc}
 8001d90:	40007000 	.word	0x40007000

08001d94 <main>:
{
 8001d94:	b508      	push	{r3, lr}
  HAL_Init();
 8001d96:	f7fe fa05 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8001d9a:	f7ff ffb9 	bl	8001d10 <SystemClock_Config>
  MX_GPIO_Init();
 8001d9e:	f7ff ff69 	bl	8001c74 <MX_GPIO_Init>
  MX_DMA_Init();
 8001da2:	f7ff ff4f 	bl	8001c44 <MX_DMA_Init>
  MX_DAC_Init();
 8001da6:	f7ff ff01 	bl	8001bac <MX_DAC_Init>
  MX_ADC_Init();
 8001daa:	f7ff fe6d 	bl	8001a88 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8001dae:	f000 f8ad 	bl	8001f0c <MX_USART1_UART_Init>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001db2:	2100      	movs	r1, #0
 8001db4:	4806      	ldr	r0, [pc, #24]	; (8001dd0 <main+0x3c>)
 8001db6:	f7fe fd77 	bl	80008a8 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001dba:	2110      	movs	r1, #16
 8001dbc:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <main+0x3c>)
 8001dbe:	f7fe fd73 	bl	80008a8 <HAL_DAC_Start>
  HAL_ADC_Start_DMA(&hadc,(uint32_t *)&ADC_BUF,2);
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	4903      	ldr	r1, [pc, #12]	; (8001dd4 <main+0x40>)
 8001dc6:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <main+0x44>)
 8001dc8:	f7fe fc80 	bl	80006cc <HAL_ADC_Start_DMA>
 8001dcc:	e7fe      	b.n	8001dcc <main+0x38>
 8001dce:	bf00      	nop
 8001dd0:	200000bc 	.word	0x200000bc
 8001dd4:	200000d0 	.word	0x200000d0
 8001dd8:	20000068 	.word	0x20000068

08001ddc <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001ddc:	e7fe      	b.n	8001ddc <_Error_Handler>
	...

08001de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001de2:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <HAL_MspInit+0x9c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de4:	2003      	movs	r0, #3
  __HAL_RCC_COMP_CLK_ENABLE();
 8001de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001de8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
 8001dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001df4:	9201      	str	r2, [sp, #4]
 8001df6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df8:	6a1a      	ldr	r2, [r3, #32]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	621a      	str	r2, [r3, #32]
 8001e00:	6a1a      	ldr	r2, [r3, #32]
 8001e02:	f002 0201 	and.w	r2, r2, #1
 8001e06:	9202      	str	r2, [sp, #8]
 8001e08:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e18:	9303      	str	r3, [sp, #12]
 8001e1a:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e1c:	f7fe fcb8 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f06f 000b 	mvn.w	r0, #11
 8001e26:	4611      	mov	r1, r2
 8001e28:	f7fe fcc4 	bl	80007b4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f06f 000a 	mvn.w	r0, #10
 8001e32:	4611      	mov	r1, r2
 8001e34:	f7fe fcbe 	bl	80007b4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f06f 0009 	mvn.w	r0, #9
 8001e3e:	4611      	mov	r1, r2
 8001e40:	f7fe fcb8 	bl	80007b4 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	f06f 0004 	mvn.w	r0, #4
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	f7fe fcb2 	bl	80007b4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	f06f 0003 	mvn.w	r0, #3
 8001e56:	4611      	mov	r1, r2
 8001e58:	f7fe fcac 	bl	80007b4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f06f 0001 	mvn.w	r0, #1
 8001e62:	4611      	mov	r1, r2
 8001e64:	f7fe fca6 	bl	80007b4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6e:	4611      	mov	r1, r2
 8001e70:	f7fe fca0 	bl	80007b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e74:	b005      	add	sp, #20
 8001e76:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800

08001e80 <NMI_Handler>:
 8001e80:	4770      	bx	lr

08001e82 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001e82:	e7fe      	b.n	8001e82 <HardFault_Handler>

08001e84 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001e84:	e7fe      	b.n	8001e84 <MemManage_Handler>

08001e86 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001e86:	e7fe      	b.n	8001e86 <BusFault_Handler>

08001e88 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001e88:	e7fe      	b.n	8001e88 <UsageFault_Handler>

08001e8a <SVC_Handler>:
 8001e8a:	4770      	bx	lr

08001e8c <DebugMon_Handler>:
 8001e8c:	4770      	bx	lr

08001e8e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001e8e:	4770      	bx	lr

08001e90 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001e90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e92:	f7fe f993 	bl	80001bc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001e9a:	f7fe bcee 	b.w	800087a <HAL_SYSTICK_IRQHandler>
	...

08001ea0 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001ea0:	4801      	ldr	r0, [pc, #4]	; (8001ea8 <DMA1_Channel1_IRQHandler+0x8>)
 8001ea2:	f7fe bdd1 	b.w	8000a48 <HAL_DMA_IRQHandler>
 8001ea6:	bf00      	nop
 8001ea8:	20000024 	.word	0x20000024

08001eac <ADC1_IRQHandler>:
void ADC1_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001eac:	4801      	ldr	r0, [pc, #4]	; (8001eb4 <ADC1_IRQHandler+0x8>)
 8001eae:	f7fe ba96 	b.w	80003de <HAL_ADC_IRQHandler>
 8001eb2:	bf00      	nop
 8001eb4:	20000068 	.word	0x20000068

08001eb8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001eb8:	4801      	ldr	r0, [pc, #4]	; (8001ec0 <USART1_IRQHandler+0x8>)
 8001eba:	f7ff bd20 	b.w	80018fe <HAL_UART_IRQHandler>
 8001ebe:	bf00      	nop
 8001ec0:	200000d4 	.word	0x200000d4

08001ec4 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <SystemInit+0x3c>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ecc:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001ece:	6899      	ldr	r1, [r3, #8]
 8001ed0:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <SystemInit+0x40>)
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8001edc:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8001ee0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ee8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8001ef0:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001ef6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001efa:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <SystemInit+0x44>)
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	4770      	bx	lr
 8001f00:	40023800 	.word	0x40023800
 8001f04:	88ffc00c 	.word	0x88ffc00c
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f0c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8001f0e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001f12:	480b      	ldr	r0, [pc, #44]	; (8001f40 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f16:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8001f18:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f1e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f20:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f22:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f24:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f26:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f28:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f2a:	f7ff fcb9 	bl	80018a0 <HAL_UART_Init>
 8001f2e:	b128      	cbz	r0, 8001f3c <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8001f30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001f34:	2142      	movs	r1, #66	; 0x42
 8001f36:	4804      	ldr	r0, [pc, #16]	; (8001f48 <MX_USART1_UART_Init+0x3c>)
 8001f38:	f7ff bf50 	b.w	8001ddc <_Error_Handler>
 8001f3c:	bd08      	pop	{r3, pc}
 8001f3e:	bf00      	nop
 8001f40:	200000d4 	.word	0x200000d4
 8001f44:	40013800 	.word	0x40013800
 8001f48:	0800208f 	.word	0x0800208f

08001f4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8001f4e:	6802      	ldr	r2, [r0, #0]
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <HAL_UART_MspInit+0x54>)
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d121      	bne.n	8001f9a <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f56:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001f5a:	6a1a      	ldr	r2, [r3, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f62:	621a      	str	r2, [r3, #32]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f66:	480f      	ldr	r0, [pc, #60]	; (8001fa4 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f70:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f74:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f82:	2307      	movs	r3, #7
 8001f84:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f86:	f7fe fda7 	bl	8000ad8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2025      	movs	r0, #37	; 0x25
 8001f8e:	4611      	mov	r1, r2
 8001f90:	f7fe fc10 	bl	80007b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f94:	2025      	movs	r0, #37	; 0x25
 8001f96:	f7fe fc41 	bl	800081c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f9a:	b007      	add	sp, #28
 8001f9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fa0:	40013800 	.word	0x40013800
 8001fa4:	40020000 	.word	0x40020000

08001fa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001fa8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001faa:	e003      	b.n	8001fb4 <LoopCopyDataInit>

08001fac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001fae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001fb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001fb2:	3104      	adds	r1, #4

08001fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001fb4:	480a      	ldr	r0, [pc, #40]	; (8001fe0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001fb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001fba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001fbc:	d3f6      	bcc.n	8001fac <CopyDataInit>
  ldr r2, =_sbss
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001fc0:	e002      	b.n	8001fc8 <LoopFillZerobss>

08001fc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001fc4:	f842 3b04 	str.w	r3, [r2], #4

08001fc8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001fca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001fcc:	d3f9      	bcc.n	8001fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fce:	f7ff ff79 	bl	8001ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fd2:	f000 f80f 	bl	8001ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fd6:	f7ff fedd 	bl	8001d94 <main>
  bx lr
 8001fda:	4770      	bx	lr
  ldr r3, =_sidata
 8001fdc:	080020a8 	.word	0x080020a8
  ldr r0, =_sdata
 8001fe0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001fe4:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001fe8:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001fec:	20000114 	.word	0x20000114

08001ff0 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <COMP_IRQHandler>
	...

08001ff4 <__libc_init_array>:
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	2500      	movs	r5, #0
 8001ff8:	4e0c      	ldr	r6, [pc, #48]	; (800202c <__libc_init_array+0x38>)
 8001ffa:	4c0d      	ldr	r4, [pc, #52]	; (8002030 <__libc_init_array+0x3c>)
 8001ffc:	1ba4      	subs	r4, r4, r6
 8001ffe:	10a4      	asrs	r4, r4, #2
 8002000:	42a5      	cmp	r5, r4
 8002002:	d109      	bne.n	8002018 <__libc_init_array+0x24>
 8002004:	f000 f81a 	bl	800203c <_init>
 8002008:	2500      	movs	r5, #0
 800200a:	4e0a      	ldr	r6, [pc, #40]	; (8002034 <__libc_init_array+0x40>)
 800200c:	4c0a      	ldr	r4, [pc, #40]	; (8002038 <__libc_init_array+0x44>)
 800200e:	1ba4      	subs	r4, r4, r6
 8002010:	10a4      	asrs	r4, r4, #2
 8002012:	42a5      	cmp	r5, r4
 8002014:	d105      	bne.n	8002022 <__libc_init_array+0x2e>
 8002016:	bd70      	pop	{r4, r5, r6, pc}
 8002018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800201c:	4798      	blx	r3
 800201e:	3501      	adds	r5, #1
 8002020:	e7ee      	b.n	8002000 <__libc_init_array+0xc>
 8002022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002026:	4798      	blx	r3
 8002028:	3501      	adds	r5, #1
 800202a:	e7f2      	b.n	8002012 <__libc_init_array+0x1e>
 800202c:	080020a0 	.word	0x080020a0
 8002030:	080020a0 	.word	0x080020a0
 8002034:	080020a0 	.word	0x080020a0
 8002038:	080020a4 	.word	0x080020a4

0800203c <_init>:
 800203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203e:	bf00      	nop
 8002040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002042:	bc08      	pop	{r3}
 8002044:	469e      	mov	lr, r3
 8002046:	4770      	bx	lr

08002048 <_fini>:
 8002048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204a:	bf00      	nop
 800204c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800204e:	bc08      	pop	{r3}
 8002050:	469e      	mov	lr, r3
 8002052:	4770      	bx	lr
