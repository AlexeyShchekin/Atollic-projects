
SpectrumGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a24  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08003b60  08003b60  00013b60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003d14  08003d14  00013d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002c8  20000000  08003d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000784  200002c8  08003fe4  000202c8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000a4c  08003fe4  00020a4c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001e102  00000000  00000000  000202f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003bcf  00000000  00000000  0003e3f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008617  00000000  00000000  00041fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b20  00000000  00000000  0004a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001198  00000000  00000000  0004b100  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000076af  00000000  00000000  0004c298  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003f66  00000000  00000000  00053947  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000578ad  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000212c  00000000  00000000  0005792c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200002c8 	.word	0x200002c8
 8000158:	00000000 	.word	0x00000000
 800015c:	08003b48 	.word	0x08003b48

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200002cc 	.word	0x200002cc
 8000178:	08003b48 	.word	0x08003b48

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <HAL_InitTick+0x24>)
{
 800018e:	b510      	push	{r4, lr}
 8000190:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000192:	6818      	ldr	r0, [r3, #0]
 8000194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000198:	fbb0 f0f3 	udiv	r0, r0, r3
 800019c:	f000 f876 	bl	800028c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80001a0:	2200      	movs	r2, #0
 80001a2:	4621      	mov	r1, r4
 80001a4:	f04f 30ff 	mov.w	r0, #4294967295
 80001a8:	f000 f830 	bl	800020c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001ac:	2000      	movs	r0, #0
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000c0 	.word	0x200000c0

080001b4 <HAL_Init>:
{
 80001b4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b6:	2003      	movs	r0, #3
 80001b8:	f000 f816 	bl	80001e8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001bc:	2000      	movs	r0, #0
 80001be:	f7ff ffe5 	bl	800018c <HAL_InitTick>
  HAL_MspInit();
 80001c2:	f002 ff23 	bl	800300c <HAL_MspInit>
}
 80001c6:	2000      	movs	r0, #0
 80001c8:	bd08      	pop	{r3, pc}
	...

080001cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001cc:	4a02      	ldr	r2, [pc, #8]	; (80001d8 <HAL_IncTick+0xc>)
 80001ce:	6813      	ldr	r3, [r2, #0]
 80001d0:	3301      	adds	r3, #1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000308 	.word	0x20000308

080001dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001dc:	4b01      	ldr	r3, [pc, #4]	; (80001e4 <HAL_GetTick+0x8>)
 80001de:	6818      	ldr	r0, [r3, #0]
}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000308 	.word	0x20000308

080001e8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e8:	4a07      	ldr	r2, [pc, #28]	; (8000208 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ea:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001ec:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001f6:	041b      	lsls	r3, r3, #16
 80001f8:	0c1b      	lsrs	r3, r3, #16
 80001fa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000202:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000204:	60d3      	str	r3, [r2, #12]
 8000206:	4770      	bx	lr
 8000208:	e000ed00 	.word	0xe000ed00

0800020c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800020c:	4b17      	ldr	r3, [pc, #92]	; (800026c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800020e:	b530      	push	{r4, r5, lr}
 8000210:	68dc      	ldr	r4, [r3, #12]
 8000212:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000216:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800021c:	2b04      	cmp	r3, #4
 800021e:	bf28      	it	cs
 8000220:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000222:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000224:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000228:	bf98      	it	ls
 800022a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022c:	fa05 f303 	lsl.w	r3, r5, r3
 8000230:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000234:	bf88      	it	hi
 8000236:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000238:	4019      	ands	r1, r3
 800023a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800023c:	fa05 f404 	lsl.w	r4, r5, r4
 8000240:	3c01      	subs	r4, #1
 8000242:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000244:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000246:	ea42 0201 	orr.w	r2, r2, r1
 800024a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024e:	bfaf      	iteee	ge
 8000250:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000254:	4b06      	ldrlt	r3, [pc, #24]	; (8000270 <HAL_NVIC_SetPriority+0x64>)
 8000256:	f000 000f 	andlt.w	r0, r0, #15
 800025a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025c:	bfa5      	ittet	ge
 800025e:	b2d2      	uxtbge	r2, r2
 8000260:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000264:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800026a:	bd30      	pop	{r4, r5, pc}
 800026c:	e000ed00 	.word	0xe000ed00
 8000270:	e000ed14 	.word	0xe000ed14

08000274 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000274:	2301      	movs	r3, #1
 8000276:	0942      	lsrs	r2, r0, #5
 8000278:	f000 001f 	and.w	r0, r0, #31
 800027c:	fa03 f000 	lsl.w	r0, r3, r0
 8000280:	4b01      	ldr	r3, [pc, #4]	; (8000288 <HAL_NVIC_EnableIRQ+0x14>)
 8000282:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000286:	4770      	bx	lr
 8000288:	e000e100 	.word	0xe000e100

0800028c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800028c:	3801      	subs	r0, #1
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d20a      	bcs.n	80002aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ba:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	bf0c      	ite	eq
 80002c0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002c4:	f022 0204 	bicne.w	r2, r2, #4
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	4770      	bx	lr
 80002cc:	e000e010 	.word	0xe000e010

080002d0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002d0:	4770      	bx	lr

080002d2 <HAL_SYSTICK_IRQHandler>:
{
 80002d2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002d4:	f7ff fffc 	bl	80002d0 <HAL_SYSTICK_Callback>
 80002d8:	bd08      	pop	{r3, pc}
	...

080002dc <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 80002dc:	2300      	movs	r3, #0
{ 
 80002de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80002e2:	4a62      	ldr	r2, [pc, #392]	; (800046c <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80002e4:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002e8:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8000474 <HAL_GPIO_Init+0x198>
{ 
 80002ec:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80002ee:	fa38 f403 	lsrs.w	r4, r8, r3
 80002f2:	d102      	bne.n	80002fa <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 80002f4:	b005      	add	sp, #20
 80002f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80002fa:	2401      	movs	r4, #1
 80002fc:	409c      	lsls	r4, r3
    if(iocurrent)
 80002fe:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000302:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 8000304:	f000 80a7 	beq.w	8000456 <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000308:	684c      	ldr	r4, [r1, #4]
 800030a:	f024 0a10 	bic.w	sl, r4, #16
 800030e:	f1ba 0f02 	cmp.w	sl, #2
 8000312:	d116      	bne.n	8000342 <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000314:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 8000318:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800031c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000320:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000324:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000328:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800032c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000330:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000334:	690d      	ldr	r5, [r1, #16]
 8000336:	fa05 f50b 	lsl.w	r5, r5, fp
 800033a:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 800033e:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000342:	2503      	movs	r5, #3
 8000344:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000348:	fa05 f50c 	lsl.w	r5, r5, ip
 800034c:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 800034e:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000352:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000356:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800035a:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800035e:	f10a 3aff 	add.w	sl, sl, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000362:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000366:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 800036a:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800036e:	d816      	bhi.n	800039e <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 8000370:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000374:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000376:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800037a:	fa07 fa0c 	lsl.w	sl, r7, ip
 800037e:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000382:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000386:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800038a:	9f01      	ldr	r7, [sp, #4]
 800038c:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000390:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000394:	fa0e fe03 	lsl.w	lr, lr, r3
 8000398:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 800039c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800039e:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80003a0:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80003a2:	688f      	ldr	r7, [r1, #8]
 80003a4:	fa07 f70c 	lsl.w	r7, r7, ip
 80003a8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80003aa:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003ac:	00e5      	lsls	r5, r4, #3
 80003ae:	d552      	bpl.n	8000456 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003b0:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b4:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80003b8:	f023 0703 	bic.w	r7, r3, #3
 80003bc:	f045 0501 	orr.w	r5, r5, #1
 80003c0:	f8c9 5020 	str.w	r5, [r9, #32]
 80003c4:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80003c8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80003cc:	f005 0501 	and.w	r5, r5, #1
 80003d0:	9503      	str	r5, [sp, #12]
 80003d2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003d6:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003da:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003dc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80003e0:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003e2:	fa0e fe0c 	lsl.w	lr, lr, ip
 80003e6:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003ea:	4d21      	ldr	r5, [pc, #132]	; (8000470 <HAL_GPIO_Init+0x194>)
 80003ec:	42a8      	cmp	r0, r5
 80003ee:	d034      	beq.n	800045a <HAL_GPIO_Init+0x17e>
 80003f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003f4:	42a8      	cmp	r0, r5
 80003f6:	d032      	beq.n	800045e <HAL_GPIO_Init+0x182>
 80003f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	d030      	beq.n	8000462 <HAL_GPIO_Init+0x186>
 8000400:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000404:	42a8      	cmp	r0, r5
 8000406:	d02e      	beq.n	8000466 <HAL_GPIO_Init+0x18a>
 8000408:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800040c:	42a8      	cmp	r0, r5
 800040e:	bf14      	ite	ne
 8000410:	2505      	movne	r5, #5
 8000412:	2504      	moveq	r5, #4
 8000414:	fa05 f50c 	lsl.w	r5, r5, ip
 8000418:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800041c:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800041e:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8000420:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000422:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000426:	bf0c      	ite	eq
 8000428:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800042a:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 800042c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800042e:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000430:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000434:	bf0c      	ite	eq
 8000436:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000438:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 800043a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800043c:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800043e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000442:	bf0c      	ite	eq
 8000444:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000446:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000448:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800044a:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800044c:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800044e:	bf54      	ite	pl
 8000450:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 8000452:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000454:	60d5      	str	r5, [r2, #12]
    position++;
 8000456:	3301      	adds	r3, #1
 8000458:	e749      	b.n	80002ee <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800045a:	2500      	movs	r5, #0
 800045c:	e7da      	b.n	8000414 <HAL_GPIO_Init+0x138>
 800045e:	2501      	movs	r5, #1
 8000460:	e7d8      	b.n	8000414 <HAL_GPIO_Init+0x138>
 8000462:	2502      	movs	r5, #2
 8000464:	e7d6      	b.n	8000414 <HAL_GPIO_Init+0x138>
 8000466:	2503      	movs	r5, #3
 8000468:	e7d4      	b.n	8000414 <HAL_GPIO_Init+0x138>
 800046a:	bf00      	nop
 800046c:	40010400 	.word	0x40010400
 8000470:	40020000 	.word	0x40020000
 8000474:	40023800 	.word	0x40023800

08000478 <PCD_WritePMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
static void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8000478:	b530      	push	{r4, r5, lr}
  
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
  
  for (i = n; i != 0; i--)
 800047a:	460c      	mov	r4, r1
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 800047c:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 800047e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8000482:	f023 0301 	bic.w	r3, r3, #1
 8000486:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800048a:	440b      	add	r3, r1
  for (i = n; i != 0; i--)
 800048c:	429c      	cmp	r4, r3
 800048e:	d100      	bne.n	8000492 <PCD_WritePMA+0x1a>
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	8825      	ldrh	r5, [r4, #0]
    *pdwVal++ = temp2;
 8000494:	1a60      	subs	r0, r4, r1
 8000496:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
 800049a:	3402      	adds	r4, #2
 800049c:	e7f6      	b.n	800048c <PCD_WritePMA+0x14>

0800049e <PCD_ReadPMA>:
{
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
  uint32_t i;
  uint32_t *pdwVal;

  pdwVal = (uint32_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 800049e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
{
 80004a2:	b510      	push	{r4, lr}
  pdwVal = (uint32_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 80004a4:	eb00 0442 	add.w	r4, r0, r2, lsl #1
  uint32_t tmp = *pdwVal++;
 80004a8:	f850 2012 	ldr.w	r2, [r0, r2, lsl #1]
  *pbUsrBuf++ = (uint16_t)((tmp >> 0) & 0xFF);
 80004ac:	4608      	mov	r0, r1
 80004ae:	f800 2b02 	strb.w	r2, [r0], #2
  *pbUsrBuf++ = (uint16_t)((tmp >> 8) & 0xFF);
 80004b2:	0a12      	lsrs	r2, r2, #8
 80004b4:	704a      	strb	r2, [r1, #1]
  
  
  for (i = n; i != 0; i--)
 80004b6:	4622      	mov	r2, r4
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80004b8:	3301      	adds	r3, #1
 80004ba:	085b      	lsrs	r3, r3, #1
 80004bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  for (i = n; i != 0; i--)
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d100      	bne.n	80004c6 <PCD_ReadPMA+0x28>
  {
    *(uint16_t*)((uint32_t)pbUsrBuf++) = *pdwVal++;
    pbUsrBuf++;
  }
}
 80004c4:	bd10      	pop	{r4, pc}
    *(uint16_t*)((uint32_t)pbUsrBuf++) = *pdwVal++;
 80004c6:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80004ca:	f820 1b02 	strh.w	r1, [r0], #2
 80004ce:	e7f7      	b.n	80004c0 <PCD_ReadPMA+0x22>

080004d0 <HAL_PCD_Init>:
{ 
 80004d0:	b538      	push	{r3, r4, r5, lr}
  if(hpcd == NULL)
 80004d2:	4604      	mov	r4, r0
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d04d      	beq.n	8000574 <HAL_PCD_Init+0xa4>
  if(hpcd->State == HAL_PCD_STATE_RESET)
 80004d8:	f890 31e9 	ldrb.w	r3, [r0, #489]	; 0x1e9
 80004dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80004e0:	b91b      	cbnz	r3, 80004ea <HAL_PCD_Init+0x1a>
    hpcd->Lock = HAL_UNLOCKED;
 80004e2:	f880 21e8 	strb.w	r2, [r0, #488]	; 0x1e8
    HAL_PCD_MspInit(hpcd);
 80004e6:	f002 ffb7 	bl	8003458 <HAL_PCD_MspInit>
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80004ea:	2100      	movs	r1, #0
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004ec:	2303      	movs	r3, #3
 80004ee:	460a      	mov	r2, r1
   hpcd->IN_ep[i].is_in = 1;
 80004f0:	2501      	movs	r5, #1
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80004f2:	6860      	ldr	r0, [r4, #4]
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004f4:	f884 31e9 	strb.w	r3, [r4, #489]	; 0x1e9
 80004f8:	f104 0328 	add.w	r3, r4, #40	; 0x28
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80004fc:	4281      	cmp	r1, r0
 80004fe:	f103 031c 	add.w	r3, r3, #28
 8000502:	d11b      	bne.n	800053c <HAL_PCD_Init+0x6c>
 8000504:	2000      	movs	r0, #0
 8000506:	4603      	mov	r3, r0
 8000508:	f504 7284 	add.w	r2, r4, #264	; 0x108
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800050c:	4281      	cmp	r1, r0
 800050e:	f102 021c 	add.w	r2, r2, #28
 8000512:	d121      	bne.n	8000558 <HAL_PCD_Init+0x88>
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8000514:	2101      	movs	r1, #1
 hpcd->Instance->CNTR = wInterrupt_Mask;
 8000516:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 800051a:	6822      	ldr	r2, [r4, #0]
 800051c:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
 hpcd->Instance->CNTR = 0;
 8000520:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 hpcd->Instance->ISTR = 0;
 8000524:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8000528:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
 hpcd->Instance->CNTR = wInterrupt_Mask;
 800052c:	f8a2 0040 	strh.w	r0, [r2, #64]	; 0x40
 hpcd->USB_Address = 0;
 8000530:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 return HAL_OK;
 8000534:	2000      	movs	r0, #0
 hpcd->State= HAL_PCD_STATE_READY;
 8000536:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 return HAL_OK;
 800053a:	bd38      	pop	{r3, r4, r5, pc}
   hpcd->IN_ep[i].num = i;
 800053c:	f803 1c1c 	strb.w	r1, [r3, #-28]
   hpcd->IN_ep[i].is_in = 1;
 8000540:	f803 5c1b 	strb.w	r5, [r3, #-27]
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8000544:	f803 2c19 	strb.w	r2, [r3, #-25]
   hpcd->IN_ep[i].maxpacket =  0;
 8000548:	f843 2c10 	str.w	r2, [r3, #-16]
   hpcd->IN_ep[i].xfer_buff = 0;
 800054c:	f843 2c0c 	str.w	r2, [r3, #-12]
   hpcd->IN_ep[i].xfer_len = 0;
 8000550:	f843 2c08 	str.w	r2, [r3, #-8]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8000554:	3101      	adds	r1, #1
 8000556:	e7d1      	b.n	80004fc <HAL_PCD_Init+0x2c>
   hpcd->OUT_ep[i].num = i;
 8000558:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].is_in = 0;
 800055c:	f802 3c1b 	strb.w	r3, [r2, #-27]
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8000560:	f802 3c19 	strb.w	r3, [r2, #-25]
   hpcd->OUT_ep[i].maxpacket = 0;
 8000564:	f842 3c10 	str.w	r3, [r2, #-16]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8000568:	f842 3c0c 	str.w	r3, [r2, #-12]
   hpcd->OUT_ep[i].xfer_len = 0;
 800056c:	f842 3c08 	str.w	r3, [r2, #-8]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8000570:	3001      	adds	r0, #1
 8000572:	e7cb      	b.n	800050c <HAL_PCD_Init+0x3c>
    return HAL_ERROR;
 8000574:	2001      	movs	r0, #1
}
 8000576:	bd38      	pop	{r3, r4, r5, pc}

08000578 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8000578:	f890 31e8 	ldrb.w	r3, [r0, #488]	; 0x1e8
 800057c:	2b01      	cmp	r3, #1
 800057e:	d00f      	beq.n	80005a0 <HAL_PCD_SetAddress+0x28>
 8000580:	2301      	movs	r3, #1
 8000582:	f880 31e8 	strb.w	r3, [r0, #488]	; 0x1e8

   if(address == 0) 
 8000586:	b941      	cbnz	r1, 800059a <HAL_PCD_SetAddress+0x22>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8000588:	2280      	movs	r2, #128	; 0x80
 800058a:	6803      	ldr	r3, [r0, #0]
 800058c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
 8000590:	2300      	movs	r3, #0
 8000592:	f880 31e8 	strb.w	r3, [r0, #488]	; 0x1e8
 8000596:	4618      	mov	r0, r3
 8000598:	4770      	bx	lr
     hpcd->USB_Address = address;
 800059a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800059e:	e7f7      	b.n	8000590 <HAL_PCD_SetAddress+0x18>
   __HAL_LOCK(hpcd); 
 80005a0:	2002      	movs	r0, #2
  return HAL_OK;
}
 80005a2:	4770      	bx	lr

080005a4 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80005a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a6:	251c      	movs	r5, #28
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80005a8:	b24c      	sxtb	r4, r1
 80005aa:	2c00      	cmp	r4, #0
 80005ac:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80005b0:	bfb5      	itete	lt
 80005b2:	fb05 0106 	mlalt	r1, r5, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80005b6:	fb05 0101 	mlage	r1, r5, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80005ba:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80005bc:	f501 7184 	addge.w	r1, r1, #264	; 0x108
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80005c0:	0fe4      	lsrs	r4, r4, #31
  ep->num   = ep_addr & 0x7F;
 80005c2:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80005c4:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80005c6:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 80005c8:	f890 31e8 	ldrb.w	r3, [r0, #488]	; 0x1e8
  ep->maxpacket = ep_mps;
 80005cc:	60ca      	str	r2, [r1, #12]
  __HAL_LOCK(hpcd); 
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	f000 8159 	beq.w	8000886 <HAL_PCD_EP_Open+0x2e2>
 80005d4:	2301      	movs	r3, #1
 80005d6:	f880 31e8 	strb.w	r3, [r0, #488]	; 0x1e8

/* initialize Endpoint */
  switch (ep->type)
 80005da:	78cd      	ldrb	r5, [r1, #3]
 80005dc:	780c      	ldrb	r4, [r1, #0]
 80005de:	6803      	ldr	r3, [r0, #0]
 80005e0:	2d03      	cmp	r5, #3
 80005e2:	d80d      	bhi.n	8000600 <HAL_PCD_EP_Open+0x5c>
 80005e4:	e8df f005 	tbb	[pc, r5]
 80005e8:	57506002 	.word	0x57506002
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 80005ec:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80005f0:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 80005f4:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 80005f8:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 80005fc:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8000600:	f640 770f 	movw	r7, #3855	; 0xf0f
 8000604:	780d      	ldrb	r5, [r1, #0]
 8000606:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800060a:	f445 4600 	orr.w	r6, r5, #32768	; 0x8000
 800060e:	403c      	ands	r4, r7
 8000610:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8000614:	4334      	orrs	r4, r6
 8000616:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]
  
  if (ep->doublebuffer == 0) 
 800061a:	7a8c      	ldrb	r4, [r1, #10]
 800061c:	f891 e000 	ldrb.w	lr, [r1]
 8000620:	2c00      	cmp	r4, #0
 8000622:	f040 808c 	bne.w	800073e <HAL_PCD_EP_Open+0x19a>
  {
    if (ep->is_in)
 8000626:	784c      	ldrb	r4, [r1, #1]
 8000628:	888d      	ldrh	r5, [r1, #4]
 800062a:	2c00      	cmp	r4, #0
 800062c:	d045      	beq.n	80006ba <HAL_PCD_EP_Open+0x116>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800062e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8000632:	f025 0501 	bic.w	r5, r5, #1
 8000636:	b2a4      	uxth	r4, r4
 8000638:	eb04 04ce 	add.w	r4, r4, lr, lsl #3
 800063c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8000640:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000644:	780c      	ldrb	r4, [r1, #0]
 8000646:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 800064a:	066e      	lsls	r6, r5, #25
 800064c:	bf41      	itttt	mi
 800064e:	ea05 0207 	andmi.w	r2, r5, r7
 8000652:	f442 4200 	orrmi.w	r2, r2, #32768	; 0x8000
 8000656:	f042 02c0 	orrmi.w	r2, r2, #192	; 0xc0
 800065a:	f823 2024 	strhmi.w	r2, [r3, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 800065e:	7809      	ldrb	r1, [r1, #0]
 8000660:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000664:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800066c:	b292      	uxth	r2, r2
 800066e:	f082 0220 	eor.w	r2, r2, #32
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8000672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800067a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800067e:	2300      	movs	r3, #0
 8000680:	f880 31e8 	strb.w	r3, [r0, #488]	; 0x1e8
  return ret;
 8000684:	4618      	mov	r0, r3
 8000686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8000688:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 800068c:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 8000690:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8000694:	e7b2      	b.n	80005fc <HAL_PCD_EP_Open+0x58>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8000696:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 800069a:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 800069e:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 80006a2:	f445 65c0 	orr.w	r5, r5, #1536	; 0x600
 80006a6:	e7a9      	b.n	80005fc <HAL_PCD_EP_Open+0x58>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 80006a8:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80006ac:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 80006b0:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 80006b4:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 80006b8:	e7a0      	b.n	80005fc <HAL_PCD_EP_Open+0x58>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80006ba:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80006be:	f025 0501 	bic.w	r5, r5, #1
 80006c2:	b2a4      	uxth	r4, r4
 80006c4:	eb04 04ce 	add.w	r4, r4, lr, lsl #3
 80006c8:	3404      	adds	r4, #4
 80006ca:	f503 6680 	add.w	r6, r3, #1024	; 0x400
 80006ce:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 80006d2:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80006d6:	780d      	ldrb	r5, [r1, #0]
 80006d8:	b2a4      	uxth	r4, r4
 80006da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80006de:	2a3e      	cmp	r2, #62	; 0x3e
 80006e0:	f104 0406 	add.w	r4, r4, #6
 80006e4:	d925      	bls.n	8000732 <HAL_PCD_EP_Open+0x18e>
 80006e6:	0955      	lsrs	r5, r2, #5
 80006e8:	06d2      	lsls	r2, r2, #27
 80006ea:	bf08      	it	eq
 80006ec:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80006f0:	4a66      	ldr	r2, [pc, #408]	; (800088c <HAL_PCD_EP_Open+0x2e8>)
 80006f2:	bf08      	it	eq
 80006f4:	b2ad      	uxtheq	r5, r5
 80006f6:	ea42 2585 	orr.w	r5, r2, r5, lsl #10
 80006fa:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80006fe:	780c      	ldrb	r4, [r1, #0]
 8000700:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000704:	0455      	lsls	r5, r2, #17
 8000706:	d509      	bpl.n	800071c <HAL_PCD_EP_Open+0x178>
 8000708:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800070c:	0512      	lsls	r2, r2, #20
 800070e:	0d12      	lsrs	r2, r2, #20
 8000710:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000714:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000718:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800071c:	7809      	ldrb	r1, [r1, #0]
 800071e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000722:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000726:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800072a:	b292      	uxth	r2, r2
 800072c:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8000730:	e79f      	b.n	8000672 <HAL_PCD_EP_Open+0xce>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8000732:	0855      	lsrs	r5, r2, #1
 8000734:	07d7      	lsls	r7, r2, #31
 8000736:	bf48      	it	mi
 8000738:	3501      	addmi	r5, #1
 800073a:	02ad      	lsls	r5, r5, #10
 800073c:	e7dd      	b.n	80006fa <HAL_PCD_EP_Open+0x156>
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 800073e:	f833 602e 	ldrh.w	r6, [r3, lr, lsl #2]
 8000742:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 8000746:	f426 76f8 	bic.w	r6, r6, #496	; 0x1f0
 800074a:	0536      	lsls	r6, r6, #20
 800074c:	0d36      	lsrs	r6, r6, #20
 800074e:	f446 4601 	orr.w	r6, r6, #33024	; 0x8100
 8000752:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8000756:	f823 602e 	strh.w	r6, [r3, lr, lsl #2]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 800075a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800075e:	780d      	ldrb	r5, [r1, #0]
 8000760:	b292      	uxth	r2, r2
 8000762:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8000766:	88cd      	ldrh	r5, [r1, #6]
 8000768:	f025 0501 	bic.w	r5, r5, #1
 800076c:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
 8000770:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8000774:	780a      	ldrb	r2, [r1, #0]
 8000776:	b2b6      	uxth	r6, r6
 8000778:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
 800077c:	890a      	ldrh	r2, [r1, #8]
 800077e:	3604      	adds	r6, #4
 8000780:	f022 0201 	bic.w	r2, r2, #1
 8000784:	f824 2016 	strh.w	r2, [r4, r6, lsl #1]
    if (ep->is_in==0)
 8000788:	784a      	ldrb	r2, [r1, #1]
 800078a:	780d      	ldrb	r5, [r1, #0]
 800078c:	2a00      	cmp	r2, #0
 800078e:	d13f      	bne.n	8000810 <HAL_PCD_EP_Open+0x26c>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000790:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8000794:	0462      	lsls	r2, r4, #17
 8000796:	bf41      	itttt	mi
 8000798:	ea04 0207 	andmi.w	r2, r4, r7
 800079c:	f442 4240 	orrmi.w	r2, r2, #49152	; 0xc000
 80007a0:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 80007a4:	f823 2025 	strhmi.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80007a8:	780c      	ldrb	r4, [r1, #0]
 80007aa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80007ae:	0657      	lsls	r7, r2, #25
 80007b0:	d509      	bpl.n	80007c6 <HAL_PCD_EP_Open+0x222>
 80007b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80007b6:	0512      	lsls	r2, r2, #20
 80007b8:	0d12      	lsrs	r2, r2, #20
 80007ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80007be:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80007c2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80007c6:	780c      	ldrb	r4, [r1, #0]
 80007c8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80007cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80007d0:	0512      	lsls	r2, r2, #20
 80007d2:	0d12      	lsrs	r2, r2, #20
 80007d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80007d8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80007dc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80007e0:	f248 0480 	movw	r4, #32896	; 0x8080
 80007e4:	780d      	ldrb	r5, [r1, #0]
 80007e6:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80007ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80007ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80007f2:	b292      	uxth	r2, r2
 80007f4:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80007f8:	4322      	orrs	r2, r4
 80007fa:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80007fe:	7809      	ldrb	r1, [r1, #0]
 8000800:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000804:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800080c:	4322      	orrs	r2, r4
 800080e:	e734      	b.n	800067a <HAL_PCD_EP_Open+0xd6>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000810:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8000814:	0456      	lsls	r6, r2, #17
 8000816:	bf41      	itttt	mi
 8000818:	403a      	andmi	r2, r7
 800081a:	f442 4240 	orrmi.w	r2, r2, #49152	; 0xc000
 800081e:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 8000822:	f823 2025 	strhmi.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000826:	780c      	ldrb	r4, [r1, #0]
 8000828:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800082c:	0655      	lsls	r5, r2, #25
 800082e:	d509      	bpl.n	8000844 <HAL_PCD_EP_Open+0x2a0>
 8000830:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000834:	0512      	lsls	r2, r2, #20
 8000836:	0d12      	lsrs	r2, r2, #20
 8000838:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800083c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000840:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8000844:	780c      	ldrb	r4, [r1, #0]
 8000846:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800084a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800084e:	0512      	lsls	r2, r2, #20
 8000850:	0d12      	lsrs	r2, r2, #20
 8000852:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000856:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800085a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800085e:	f248 0480 	movw	r4, #32896	; 0x8080
 8000862:	780d      	ldrb	r5, [r1, #0]
 8000864:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8000868:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800086c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000870:	4322      	orrs	r2, r4
 8000872:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000876:	7809      	ldrb	r1, [r1, #0]
 8000878:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800087c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000880:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000884:	e7c2      	b.n	800080c <HAL_PCD_EP_Open+0x268>
  __HAL_LOCK(hpcd); 
 8000886:	2002      	movs	r0, #2
}
 8000888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088a:	bf00      	nop
 800088c:	ffff8000 	.word	0xffff8000

08000890 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8000890:	221c      	movs	r2, #28
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8000892:	b24b      	sxtb	r3, r1
 8000894:	2b00      	cmp	r3, #0
{  
 8000896:	b530      	push	{r4, r5, lr}
 8000898:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800089c:	bfb5      	itete	lt
 800089e:	fb02 0104 	mlalt	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80008a2:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80008a6:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80008a8:	f501 7184 	addge.w	r1, r1, #264	; 0x108
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80008ac:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80008ae:	700c      	strb	r4, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80008b0:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 80008b2:	f890 31e8 	ldrb.w	r3, [r0, #488]	; 0x1e8
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	f000 80be 	beq.w	8000a38 <HAL_PCD_EP_Close+0x1a8>
 80008bc:	2301      	movs	r3, #1
 80008be:	f880 31e8 	strb.w	r3, [r0, #488]	; 0x1e8

  if (ep->doublebuffer == 0) 
 80008c2:	7a8d      	ldrb	r5, [r1, #10]
 80008c4:	784c      	ldrb	r4, [r1, #1]
 80008c6:	6803      	ldr	r3, [r0, #0]
 80008c8:	780a      	ldrb	r2, [r1, #0]
 80008ca:	bbb5      	cbnz	r5, 800093a <HAL_PCD_EP_Close+0xaa>
  {
    if (ep->is_in)
 80008cc:	b1fc      	cbz	r4, 800090e <HAL_PCD_EP_Close+0x7e>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80008ce:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80008d2:	0665      	lsls	r5, r4, #25
 80008d4:	d509      	bpl.n	80008ea <HAL_PCD_EP_Close+0x5a>
 80008d6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80008da:	0524      	lsls	r4, r4, #20
 80008dc:	0d24      	lsrs	r4, r4, #20
 80008de:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80008e2:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 80008e6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS) 
 80008ea:	7809      	ldrb	r1, [r1, #0]
 80008ec:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80008f0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80008f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80008f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000900:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8000904:	2300      	movs	r3, #0
 8000906:	f880 31e8 	strb.w	r3, [r0, #488]	; 0x1e8
  return HAL_OK;
 800090a:	4618      	mov	r0, r3
 800090c:	bd30      	pop	{r4, r5, pc}
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800090e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000912:	0465      	lsls	r5, r4, #17
 8000914:	d509      	bpl.n	800092a <HAL_PCD_EP_Close+0x9a>
 8000916:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800091a:	0524      	lsls	r4, r4, #20
 800091c:	0d24      	lsrs	r4, r4, #20
 800091e:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8000922:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8000926:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800092a:	7809      	ldrb	r1, [r1, #0]
 800092c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000930:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000934:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000938:	e7de      	b.n	80008f8 <HAL_PCD_EP_Close+0x68>
    if (ep->is_in==0)
 800093a:	2c00      	cmp	r4, #0
 800093c:	d13e      	bne.n	80009bc <HAL_PCD_EP_Close+0x12c>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800093e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000942:	0465      	lsls	r5, r4, #17
 8000944:	d509      	bpl.n	800095a <HAL_PCD_EP_Close+0xca>
 8000946:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800094a:	0524      	lsls	r4, r4, #20
 800094c:	0d24      	lsrs	r4, r4, #20
 800094e:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8000952:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8000956:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800095a:	780c      	ldrb	r4, [r1, #0]
 800095c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000960:	0655      	lsls	r5, r2, #25
 8000962:	d509      	bpl.n	8000978 <HAL_PCD_EP_Close+0xe8>
 8000964:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000968:	0512      	lsls	r2, r2, #20
 800096a:	0d12      	lsrs	r2, r2, #20
 800096c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000970:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000974:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8000978:	780c      	ldrb	r4, [r1, #0]
 800097a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800097e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000982:	0512      	lsls	r2, r2, #20
 8000984:	0d12      	lsrs	r2, r2, #20
 8000986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800098a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800098e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000992:	f248 0480 	movw	r4, #32896	; 0x8080
 8000996:	780d      	ldrb	r5, [r1, #0]
 8000998:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800099c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80009a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80009a4:	4322      	orrs	r2, r4
 80009a6:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80009aa:	7809      	ldrb	r1, [r1, #0]
 80009ac:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80009b0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80009b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80009b8:	4322      	orrs	r2, r4
 80009ba:	e7a1      	b.n	8000900 <HAL_PCD_EP_Close+0x70>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80009bc:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80009c0:	0465      	lsls	r5, r4, #17
 80009c2:	d509      	bpl.n	80009d8 <HAL_PCD_EP_Close+0x148>
 80009c4:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80009c8:	0524      	lsls	r4, r4, #20
 80009ca:	0d24      	lsrs	r4, r4, #20
 80009cc:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80009d0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80009d4:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80009d8:	780c      	ldrb	r4, [r1, #0]
 80009da:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80009de:	0655      	lsls	r5, r2, #25
 80009e0:	d509      	bpl.n	80009f6 <HAL_PCD_EP_Close+0x166>
 80009e2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80009e6:	0512      	lsls	r2, r2, #20
 80009e8:	0d12      	lsrs	r2, r2, #20
 80009ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009ee:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80009f2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80009f6:	780c      	ldrb	r4, [r1, #0]
 80009f8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80009fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000a00:	0512      	lsls	r2, r2, #20
 8000a02:	0d12      	lsrs	r2, r2, #20
 8000a04:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000a08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a0c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8000a10:	f248 0480 	movw	r4, #32896	; 0x8080
 8000a14:	780d      	ldrb	r5, [r1, #0]
 8000a16:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8000a1a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a22:	4322      	orrs	r2, r4
 8000a24:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000a28:	7809      	ldrb	r1, [r1, #0]
 8000a2a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000a2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000a36:	e7bf      	b.n	80009b8 <HAL_PCD_EP_Close+0x128>
  __HAL_LOCK(hpcd); 
 8000a38:	2002      	movs	r0, #2
}
 8000a3a:	bd30      	pop	{r4, r5, pc}

08000a3c <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000a3e:	241c      	movs	r4, #28
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8000a40:	2600      	movs	r6, #0
 8000a42:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 8000a46:	fb04 0501 	mla	r5, r4, r1, r0
 8000a4a:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8000a4e:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
  ep->xfer_len = len;
 8000a52:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
  if (ep->xfer_len > ep->maxpacket)
 8000a56:	4293      	cmp	r3, r2
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8000a58:	bf86      	itte	hi
 8000a5a:	1a9b      	subhi	r3, r3, r2
 8000a5c:	f8c5 311c 	strhi.w	r3, [r5, #284]	; 0x11c
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0;
 8000a60:	461a      	movls	r2, r3
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8000a62:	fb04 0301 	mla	r3, r4, r1, r0
  ep->xfer_count = 0;
 8000a66:	f8c5 6120 	str.w	r6, [r5, #288]	; 0x120
  ep->is_in = 0;
 8000a6a:	f885 6109 	strb.w	r6, [r5, #265]	; 0x109
  ep->num = ep_addr & 0x7F;
 8000a6e:	f885 1108 	strb.w	r1, [r5, #264]	; 0x108
    ep->xfer_len =0;
 8000a72:	bf98      	it	ls
 8000a74:	f8c5 611c 	strls.w	r6, [r5, #284]	; 0x11c
  if (ep->doublebuffer == 0) 
 8000a78:	f893 5112 	ldrb.w	r5, [r3, #274]	; 0x112
 8000a7c:	6804      	ldr	r4, [r0, #0]
 8000a7e:	bb7d      	cbnz	r5, 8000ae0 <HAL_PCD_EP_Receive+0xa4>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8000a80:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 8000a84:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8000a88:	b2ad      	uxth	r5, r5
 8000a8a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000a8e:	2a3e      	cmp	r2, #62	; 0x3e
 8000a90:	f103 0306 	add.w	r3, r3, #6
 8000a94:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 8000a98:	d963      	bls.n	8000b62 <HAL_PCD_EP_Receive+0x126>
 8000a9a:	f3c2 154f 	ubfx	r5, r2, #5, #16
 8000a9e:	06d7      	lsls	r7, r2, #27
 8000aa0:	bf08      	it	eq
 8000aa2:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8000aa6:	4a3a      	ldr	r2, [pc, #232]	; (8000b90 <HAL_PCD_EP_Receive+0x154>)
 8000aa8:	bf08      	it	eq
 8000aaa:	b2ad      	uxtheq	r5, r5
 8000aac:	ea42 2585 	orr.w	r5, r2, r5, lsl #10
 8000ab0:	f826 5013 	strh.w	r5, [r6, r3, lsl #1]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8000ab4:	231c      	movs	r3, #28
 8000ab6:	fb03 0001 	mla	r0, r3, r1, r0
 8000aba:	f890 2108 	ldrb.w	r2, [r0, #264]	; 0x108

  return HAL_OK;
}
 8000abe:	2000      	movs	r0, #0
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8000ac0:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8000ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ada:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8000ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000ae0:	f893 5109 	ldrb.w	r5, [r3, #265]	; 0x109
 8000ae4:	bb7d      	cbnz	r5, 8000b46 <HAL_PCD_EP_Receive+0x10a>
 8000ae6:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 8000aea:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8000aee:	b2ad      	uxth	r5, r5
 8000af0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000af4:	2a3e      	cmp	r2, #62	; 0x3e
 8000af6:	f103 0302 	add.w	r3, r3, #2
 8000afa:	f504 6780 	add.w	r7, r4, #1024	; 0x400
 8000afe:	d91a      	bls.n	8000b36 <HAL_PCD_EP_Receive+0xfa>
 8000b00:	f3c2 154f 	ubfx	r5, r2, #5, #16
 8000b04:	06d6      	lsls	r6, r2, #27
 8000b06:	bf08      	it	eq
 8000b08:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8000b0c:	4e20      	ldr	r6, [pc, #128]	; (8000b90 <HAL_PCD_EP_Receive+0x154>)
 8000b0e:	bf08      	it	eq
 8000b10:	b2ad      	uxtheq	r5, r5
 8000b12:	ea46 2585 	orr.w	r5, r6, r5, lsl #10
 8000b16:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8000b1a:	251c      	movs	r5, #28
 8000b1c:	fb05 0501 	mla	r5, r5, r1, r0
 8000b20:	f895 3109 	ldrb.w	r3, [r5, #265]	; 0x109
 8000b24:	bb2b      	cbnz	r3, 8000b72 <HAL_PCD_EP_Receive+0x136>
 8000b26:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8000b2a:	f895 5108 	ldrb.w	r5, [r5, #264]	; 0x108
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8000b34:	e7ab      	b.n	8000a8e <HAL_PCD_EP_Receive+0x52>
 8000b36:	f3c2 054f 	ubfx	r5, r2, #1, #16
 8000b3a:	07d6      	lsls	r6, r2, #31
 8000b3c:	bf44      	itt	mi
 8000b3e:	3501      	addmi	r5, #1
 8000b40:	b2ad      	uxthmi	r5, r5
 8000b42:	02ad      	lsls	r5, r5, #10
 8000b44:	e7e7      	b.n	8000b16 <HAL_PCD_EP_Receive+0xda>
 8000b46:	2d01      	cmp	r5, #1
 8000b48:	d1e7      	bne.n	8000b1a <HAL_PCD_EP_Receive+0xde>
 8000b4a:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 8000b4e:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8000b52:	b2ad      	uxth	r5, r5
 8000b54:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000b58:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000b5c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8000b60:	e7db      	b.n	8000b1a <HAL_PCD_EP_Receive+0xde>
 8000b62:	f3c2 054f 	ubfx	r5, r2, #1, #16
 8000b66:	07d2      	lsls	r2, r2, #31
 8000b68:	bf44      	itt	mi
 8000b6a:	3501      	addmi	r5, #1
 8000b6c:	b2ad      	uxthmi	r5, r5
 8000b6e:	02ad      	lsls	r5, r5, #10
 8000b70:	e79e      	b.n	8000ab0 <HAL_PCD_EP_Receive+0x74>
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d19e      	bne.n	8000ab4 <HAL_PCD_EP_Receive+0x78>
 8000b76:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8000b7a:	f895 5108 	ldrb.w	r5, [r5, #264]	; 0x108
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8000b84:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000b88:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8000b8c:	e792      	b.n	8000ab4 <HAL_PCD_EP_Receive+0x78>
 8000b8e:	bf00      	nop
 8000b90:	ffff8000 	.word	0xffff8000

08000b94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000b96:	251c      	movs	r5, #28
 8000b98:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8000b9c:	fb05 0106 	mla	r1, r5, r6, r0
 8000ba0:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
 8000ba2:	2201      	movs	r2, #1
{
 8000ba4:	4604      	mov	r4, r0
  ep->is_in = 1;
 8000ba6:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  ep->xfer_count = 0;
 8000baa:	2000      	movs	r0, #0
  ep->num = ep_addr & 0x7F;

  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8000bac:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8000bae:	fb05 4506 	mla	r5, r5, r6, r4
  if (ep->xfer_len > ep->maxpacket)
 8000bb2:	4293      	cmp	r3, r2
    ep->xfer_len =0;
 8000bb4:	bf98      	it	ls
 8000bb6:	461a      	movls	r2, r3
  ep->xfer_len = len;
 8000bb8:	63cb      	str	r3, [r1, #60]	; 0x3c
    ep->xfer_len-=len; 
 8000bba:	bf88      	it	hi
 8000bbc:	1a9b      	subhi	r3, r3, r2
  ep->xfer_count = 0;
 8000bbe:	6408      	str	r0, [r1, #64]	; 0x40
  ep->num = ep_addr & 0x7F;
 8000bc0:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
    ep->xfer_len-=len; 
 8000bc4:	bf8c      	ite	hi
 8000bc6:	63cb      	strhi	r3, [r1, #60]	; 0x3c
    ep->xfer_len =0;
 8000bc8:	63c8      	strls	r0, [r1, #60]	; 0x3c
  if (ep->doublebuffer == 0) 
 8000bca:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 8000bce:	b297      	uxth	r7, r2
 8000bd0:	bb43      	cbnz	r3, 8000c24 <HAL_PCD_EP_Transmit+0x90>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8000bd6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000bd8:	6820      	ldr	r0, [r4, #0]
 8000bda:	f7ff fc4d 	bl	8000478 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8000bde:	6822      	ldr	r2, [r4, #0]
 8000be0:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8000be4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000bee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000bf2:	f8a3 7404 	strh.w	r7, [r3, #1028]	; 0x404

    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8000bf6:	231c      	movs	r3, #28
 8000bf8:	fb03 4606 	mla	r6, r3, r6, r4
 8000bfc:	6822      	ldr	r2, [r4, #0]
 8000bfe:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28

  return HAL_OK;
}
 8000c02:	2000      	movs	r0, #0
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8000c04:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8000c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 8000c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8000c24:	6820      	ldr	r0, [r4, #0]
 8000c26:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8000c2a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8000c2e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000c32:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8000c36:	d04c      	beq.n	8000cd2 <HAL_PCD_EP_Transmit+0x13e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d13e      	bne.n	8000cba <HAL_PCD_EP_Transmit+0x126>
 8000c3c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000c40:	2a3e      	cmp	r2, #62	; 0x3e
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000c48:	f103 0306 	add.w	r3, r3, #6
 8000c4c:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8000c50:	d92b      	bls.n	8000caa <HAL_PCD_EP_Transmit+0x116>
 8000c52:	f3c2 114f 	ubfx	r1, r2, #5, #16
 8000c56:	06d2      	lsls	r2, r2, #27
 8000c58:	bf08      	it	eq
 8000c5a:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8000c5e:	4a3e      	ldr	r2, [pc, #248]	; (8000d58 <HAL_PCD_EP_Transmit+0x1c4>)
 8000c60:	bf08      	it	eq
 8000c62:	b289      	uxtheq	r1, r1
 8000c64:	ea42 2181 	orr.w	r1, r2, r1, lsl #10
 8000c68:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
      pmabuffer = ep->pmaaddr1;
 8000c6c:	231c      	movs	r3, #28
 8000c6e:	fb03 4306 	mla	r3, r3, r6, r4
 8000c72:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8000c74:	251c      	movs	r5, #28
 8000c76:	fb05 4506 	mla	r5, r5, r6, r4
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000c7e:	f7ff fbfb 	bl	8000478 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8000c82:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8000c86:	6822      	ldr	r2, [r4, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d154      	bne.n	8000d36 <HAL_PCD_EP_Transmit+0x1a2>
 8000c8c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8000c90:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000c94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c98:	051b      	lsls	r3, r3, #20
 8000c9a:	0d1b      	lsrs	r3, r3, #20
 8000c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ca0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000ca4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000ca8:	e7a5      	b.n	8000bf6 <HAL_PCD_EP_Transmit+0x62>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000caa:	f3c2 014f 	ubfx	r1, r2, #1, #16
 8000cae:	07d2      	lsls	r2, r2, #31
 8000cb0:	bf44      	itt	mi
 8000cb2:	3101      	addmi	r1, #1
 8000cb4:	b289      	uxthmi	r1, r1
 8000cb6:	0289      	lsls	r1, r1, #10
 8000cb8:	e7d6      	b.n	8000c68 <HAL_PCD_EP_Transmit+0xd4>
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d1d6      	bne.n	8000c6c <HAL_PCD_EP_Transmit+0xd8>
 8000cbe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000cc8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ccc:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8000cd0:	e7cc      	b.n	8000c6c <HAL_PCD_EP_Transmit+0xd8>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000cd2:	bb23      	cbnz	r3, 8000d1e <HAL_PCD_EP_Transmit+0x18a>
 8000cd4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000cd8:	2a3e      	cmp	r2, #62	; 0x3e
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000ce0:	f103 0302 	add.w	r3, r3, #2
 8000ce4:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8000ce8:	d911      	bls.n	8000d0e <HAL_PCD_EP_Transmit+0x17a>
 8000cea:	f3c2 114f 	ubfx	r1, r2, #5, #16
 8000cee:	06d2      	lsls	r2, r2, #27
 8000cf0:	bf08      	it	eq
 8000cf2:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8000cf6:	4a18      	ldr	r2, [pc, #96]	; (8000d58 <HAL_PCD_EP_Transmit+0x1c4>)
 8000cf8:	bf08      	it	eq
 8000cfa:	b289      	uxtheq	r1, r1
 8000cfc:	ea42 2181 	orr.w	r1, r2, r1, lsl #10
 8000d00:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
      pmabuffer = ep->pmaaddr0;
 8000d04:	231c      	movs	r3, #28
 8000d06:	fb03 4306 	mla	r3, r3, r6, r4
 8000d0a:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8000d0c:	e7b2      	b.n	8000c74 <HAL_PCD_EP_Transmit+0xe0>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000d0e:	f3c2 014f 	ubfx	r1, r2, #1, #16
 8000d12:	07d2      	lsls	r2, r2, #31
 8000d14:	bf44      	itt	mi
 8000d16:	3101      	addmi	r1, #1
 8000d18:	b289      	uxthmi	r1, r1
 8000d1a:	0289      	lsls	r1, r1, #10
 8000d1c:	e7f0      	b.n	8000d00 <HAL_PCD_EP_Transmit+0x16c>
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d1f0      	bne.n	8000d04 <HAL_PCD_EP_Transmit+0x170>
 8000d22:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000d2c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d30:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8000d34:	e7e6      	b.n	8000d04 <HAL_PCD_EP_Transmit+0x170>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	f47f af5d 	bne.w	8000bf6 <HAL_PCD_EP_Transmit+0x62>
 8000d3c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8000d40:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000d44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d48:	051b      	lsls	r3, r3, #20
 8000d4a:	0d1b      	lsrs	r3, r3, #20
 8000d4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d54:	e7a6      	b.n	8000ca4 <HAL_PCD_EP_Transmit+0x110>
 8000d56:	bf00      	nop
 8000d58:	ffff8000 	.word	0xffff8000

08000d5c <HAL_PCD_IRQHandler>:
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000d5c:	6803      	ldr	r3, [r0, #0]
{
 8000d5e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000d62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
{
 8000d66:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000d68:	041b      	lsls	r3, r3, #16
 8000d6a:	f100 808b 	bmi.w	8000e84 <HAL_PCD_IRQHandler+0x128>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000d6e:	6822      	ldr	r2, [r4, #0]
 8000d70:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000d74:	055f      	lsls	r7, r3, #21
 8000d76:	d50e      	bpl.n	8000d96 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d78:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000d7c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d82:	041b      	lsls	r3, r3, #16
 8000d84:	0c1b      	lsrs	r3, r3, #16
 8000d86:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000d8a:	f002 fba6 	bl	80034da <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4620      	mov	r0, r4
 8000d92:	f7ff fbf1 	bl	8000578 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000d96:	6823      	ldr	r3, [r4, #0]
 8000d98:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000d9c:	0452      	lsls	r2, r2, #17
 8000d9e:	d507      	bpl.n	8000db0 <HAL_PCD_IRQHandler+0x54>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000da0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000da4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000da8:	0412      	lsls	r2, r2, #16
 8000daa:	0c12      	lsrs	r2, r2, #16
 8000dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000db0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000db4:	0497      	lsls	r7, r2, #18
 8000db6:	d507      	bpl.n	8000dc8 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000db8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000dbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000dc0:	0412      	lsls	r2, r2, #16
 8000dc2:	0c12      	lsrs	r2, r2, #16
 8000dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000dc8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000dcc:	04d6      	lsls	r6, r2, #19
 8000dce:	d517      	bpl.n	8000e00 <HAL_PCD_IRQHandler+0xa4>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LPMODE);
 8000dd0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000dd4:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LPMODE);
 8000dd6:	f022 0204 	bic.w	r2, r2, #4
 8000dda:	0412      	lsls	r2, r2, #16
 8000ddc:	0c12      	lsrs	r2, r2, #16
 8000dde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8000de2:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 8000de6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000dea:	f002 fb93 	bl	8003514 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000dee:	6822      	ldr	r2, [r4, #0]
 8000df0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000df4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000df8:	041b      	lsls	r3, r3, #16
 8000dfa:	0c1b      	lsrs	r3, r3, #16
 8000dfc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000e00:	6823      	ldr	r3, [r4, #0]
 8000e02:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e06:	0515      	lsls	r5, r2, #20
 8000e08:	d51c      	bpl.n	8000e44 <HAL_PCD_IRQHandler+0xe8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000e0a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e12:	0412      	lsls	r2, r2, #16
 8000e14:	0c12      	lsrs	r2, r2, #16
 8000e16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000e1a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e1e:	b292      	uxth	r2, r2
 8000e20:	f042 0208 	orr.w	r2, r2, #8
 8000e24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000e28:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e2c:	b292      	uxth	r2, r2
 8000e2e:	f042 0204 	orr.w	r2, r2, #4
 8000e32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8000e36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e3a:	04d8      	lsls	r0, r3, #19
 8000e3c:	d402      	bmi.n	8000e44 <HAL_PCD_IRQHandler+0xe8>
      HAL_PCD_SuspendCallback(hpcd);
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f002 fb58 	bl	80034f4 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000e44:	6822      	ldr	r2, [r4, #0]
 8000e46:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e4a:	0599      	lsls	r1, r3, #22
 8000e4c:	d50a      	bpl.n	8000e64 <HAL_PCD_IRQHandler+0x108>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000e4e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000e52:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e58:	041b      	lsls	r3, r3, #16
 8000e5a:	0c1b      	lsrs	r3, r3, #16
 8000e5c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000e60:	f002 fb37 	bl	80034d2 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000e64:	6822      	ldr	r2, [r4, #0]
 8000e66:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e6a:	05db      	lsls	r3, r3, #23
 8000e6c:	d507      	bpl.n	8000e7e <HAL_PCD_IRQHandler+0x122>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000e6e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e76:	041b      	lsls	r3, r3, #16
 8000e78:	0c1b      	lsrs	r3, r3, #16
 8000e7a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000e7e:	b003      	add	sp, #12
 8000e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __IO uint16_t wEPVal = 0;
 8000e84:	2300      	movs	r3, #0
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8000e86:	4fc1      	ldr	r7, [pc, #772]	; (800118c <HAL_PCD_IRQHandler+0x430>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8000e88:	f8df 8304 	ldr.w	r8, [pc, #772]	; 8001190 <HAL_PCD_IRQHandler+0x434>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8000e8c:	f8df 9304 	ldr.w	r9, [pc, #772]	; 8001194 <HAL_PCD_IRQHandler+0x438>
  __IO uint16_t wEPVal = 0;
 8000e90:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000e94:	6820      	ldr	r0, [r4, #0]
 8000e96:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	0419      	lsls	r1, r3, #16
 8000e9e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000ea2:	f57f af64 	bpl.w	8000d6e <HAL_PCD_IRQHandler+0x12>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000ea6:	f8bd 6004 	ldrh.w	r6, [sp, #4]
    if (EPindex == 0)
 8000eaa:	f016 060f 	ands.w	r6, r6, #15
 8000eae:	f040 80a9 	bne.w	8001004 <HAL_PCD_IRQHandler+0x2a8>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000eb2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000eb6:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000eb8:	f011 0110 	ands.w	r1, r1, #16
 8000ebc:	d126      	bne.n	8000f0c <HAL_PCD_IRQHandler+0x1b0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ebe:	403b      	ands	r3, r7
 8000ec0:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ec2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ec6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000ed0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000ed4:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000ed8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ede:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8000ee0:	4413      	add	r3, r2
 8000ee2:	63a3      	str	r3, [r4, #56]	; 0x38
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f002 faec 	bl	80034c2 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8000eea:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0d0      	beq.n	8000e94 <HAL_PCD_IRQHandler+0x138>
 8000ef2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000ef4:	2a00      	cmp	r2, #0
 8000ef6:	d1cd      	bne.n	8000e94 <HAL_PCD_IRQHandler+0x138>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000ef8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000efc:	6821      	ldr	r1, [r4, #0]
 8000efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f02:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8000f06:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000f0a:	e7c3      	b.n	8000e94 <HAL_PCD_IRQHandler+0x138>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0)
 8000f12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000f16:	051e      	lsls	r6, r3, #20
 8000f18:	d51f      	bpl.n	8000f5a <HAL_PCD_IRQHandler+0x1fe>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f1a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f1e:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f28:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f2c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000f30:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
 8000f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f38:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000f3c:	f504 71f6 	add.w	r1, r4, #492	; 0x1ec
 8000f40:	f7ff faad 	bl	800049e <PCD_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000f44:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000f46:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000f48:	8813      	ldrh	r3, [r2, #0]
 8000f4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f52:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000f54:	f002 faa6 	bl	80034a4 <HAL_PCD_SetupStageCallback>
 8000f58:	e79c      	b.n	8000e94 <HAL_PCD_IRQHandler+0x138>
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8000f5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000f5e:	041d      	lsls	r5, r3, #16
 8000f60:	d598      	bpl.n	8000e94 <HAL_PCD_IRQHandler+0x138>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f62:	8803      	ldrh	r3, [r0, #0]
 8000f64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f6c:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f6e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f72:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f7c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f80:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f88:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
          if (ep->xfer_count != 0)
 8000f8c:	b163      	cbz	r3, 8000fa8 <HAL_PCD_IRQHandler+0x24c>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000f8e:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
 8000f92:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
 8000f96:	f7ff fa82 	bl	800049e <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000f9a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8000f9e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8000fa2:	4413      	add	r3, r2
 8000fa4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4620      	mov	r0, r4
 8000fac:	f002 fa80 	bl	80034b0 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8000fb0:	6822      	ldr	r2, [r4, #0]
 8000fb2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8000fb6:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000fba:	283e      	cmp	r0, #62	; 0x3e
 8000fbc:	b289      	uxth	r1, r1
 8000fbe:	f101 0106 	add.w	r1, r1, #6
 8000fc2:	f502 6580 	add.w	r5, r2, #1024	; 0x400
 8000fc6:	d915      	bls.n	8000ff4 <HAL_PCD_IRQHandler+0x298>
 8000fc8:	f3c0 134f 	ubfx	r3, r0, #5, #16
 8000fcc:	06c0      	lsls	r0, r0, #27
 8000fce:	bf04      	itt	eq
 8000fd0:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000fd4:	b29b      	uxtheq	r3, r3
 8000fd6:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8000fda:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8000fde:	8813      	ldrh	r3, [r2, #0]
 8000fe0:	ea08 0303 	and.w	r3, r8, r3
 8000fe4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff0:	8013      	strh	r3, [r2, #0]
 8000ff2:	e74f      	b.n	8000e94 <HAL_PCD_IRQHandler+0x138>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8000ff4:	f3c0 034f 	ubfx	r3, r0, #1, #16
 8000ff8:	07c6      	lsls	r6, r0, #31
 8000ffa:	bf44      	itt	mi
 8000ffc:	3301      	addmi	r3, #1
 8000ffe:	b29b      	uxthmi	r3, r3
 8001000:	029b      	lsls	r3, r3, #10
 8001002:	e7ea      	b.n	8000fda <HAL_PCD_IRQHandler+0x27e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8001004:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8001008:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 800100c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8001010:	0415      	lsls	r5, r2, #16
 8001012:	d53d      	bpl.n	8001090 <HAL_PCD_IRQHandler+0x334>
        if (ep->doublebuffer == 0)
 8001014:	211c      	movs	r1, #28
 8001016:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 800101a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800101e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001022:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0)
 8001026:	f891 3112 	ldrb.w	r3, [r1, #274]	; 0x112
 800102a:	2b00      	cmp	r3, #0
 800102c:	d171      	bne.n	8001112 <HAL_PCD_IRQHandler+0x3b6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800102e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001032:	f891 2108 	ldrb.w	r2, [r1, #264]	; 0x108
 8001036:	b29b      	uxth	r3, r3
 8001038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800103c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001040:	f8b3 540c 	ldrh.w	r5, [r3, #1036]	; 0x40c
 8001044:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0)
 8001048:	b135      	cbz	r5, 8001058 <HAL_PCD_IRQHandler+0x2fc>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800104a:	f8b1 210c 	ldrh.w	r2, [r1, #268]	; 0x10c
 800104e:	462b      	mov	r3, r5
 8001050:	f8d1 1118 	ldr.w	r1, [r1, #280]	; 0x118
 8001054:	f7ff fa23 	bl	800049e <PCD_ReadPMA>
        ep->xfer_count+=count;
 8001058:	211c      	movs	r1, #28
 800105a:	fb01 4106 	mla	r1, r1, r6, r4
 800105e:	f8d1 3120 	ldr.w	r3, [r1, #288]	; 0x120
        ep->xfer_buff+=count;
 8001062:	f8d1 2118 	ldr.w	r2, [r1, #280]	; 0x118
        ep->xfer_count+=count;
 8001066:	442b      	add	r3, r5
 8001068:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 800106c:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
        ep->xfer_buff+=count;
 8001070:	442a      	add	r2, r5
 8001072:	f8c1 2118 	str.w	r2, [r1, #280]	; 0x118
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8001076:	b11b      	cbz	r3, 8001080 <HAL_PCD_IRQHandler+0x324>
 8001078:	f8d1 0114 	ldr.w	r0, [r1, #276]	; 0x114
 800107c:	4285      	cmp	r5, r0
 800107e:	d27f      	bcs.n	8001180 <HAL_PCD_IRQHandler+0x424>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001080:	231c      	movs	r3, #28
 8001082:	fb03 4306 	mla	r3, r3, r6, r4
 8001086:	4620      	mov	r0, r4
 8001088:	f893 1108 	ldrb.w	r1, [r3, #264]	; 0x108
 800108c:	f002 fa10 	bl	80034b0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8001090:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001094:	0618      	lsls	r0, r3, #24
 8001096:	f57f aefd 	bpl.w	8000e94 <HAL_PCD_IRQHandler+0x138>
        if (ep->doublebuffer == 0)
 800109a:	211c      	movs	r1, #28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 800109c:	6820      	ldr	r0, [r4, #0]
        if (ep->doublebuffer == 0)
 800109e:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 80010a2:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80010a6:	403b      	ands	r3, r7
 80010a8:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0)
 80010ac:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d171      	bne.n	8001198 <HAL_PCD_IRQHandler+0x43c>
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010b4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80010b8:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 80010bc:	b29b      	uxth	r3, r3
 80010be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80010c2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80010c6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80010ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010ce:	640b      	str	r3, [r1, #64]	; 0x40
          if (ep->xfer_count != 0)
 80010d0:	b11b      	cbz	r3, 80010da <HAL_PCD_IRQHandler+0x37e>
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80010d2:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 80010d4:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80010d6:	f7ff f9cf 	bl	8000478 <PCD_WritePMA>
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010da:	211c      	movs	r1, #28
 80010dc:	fb01 4606 	mla	r6, r1, r6, r4
 80010e0:	6822      	ldr	r2, [r4, #0]
 80010e2:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 80010e6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80010ea:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80010f2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80010f6:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 80010fa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010fc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001100:	6432      	str	r2, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8001102:	441a      	add	r2, r3
        if (ep->xfer_len == 0)
 8001104:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_buff+=ep->xfer_count;
 8001106:	63b2      	str	r2, [r6, #56]	; 0x38
        if (ep->xfer_len == 0)
 8001108:	2b00      	cmp	r3, #0
 800110a:	d179      	bne.n	8001200 <HAL_PCD_IRQHandler+0x4a4>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800110c:	f002 f9d9 	bl	80034c2 <HAL_PCD_DataInStageCallback>
 8001110:	e6c0      	b.n	8000e94 <HAL_PCD_IRQHandler+0x138>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8001112:	f891 3108 	ldrb.w	r3, [r1, #264]	; 0x108
 8001116:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001120:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001124:	b292      	uxth	r2, r2
 8001126:	4413      	add	r3, r2
 8001128:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 800112c:	d01e      	beq.n	800116c <HAL_PCD_IRQHandler+0x410>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800112e:	f8b3 5404 	ldrh.w	r5, [r3, #1028]	; 0x404
 8001132:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0)
 8001136:	b135      	cbz	r5, 8001146 <HAL_PCD_IRQHandler+0x3ea>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001138:	462b      	mov	r3, r5
 800113a:	f8b1 210e 	ldrh.w	r2, [r1, #270]	; 0x10e
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800113e:	f8d1 1118 	ldr.w	r1, [r1, #280]	; 0x118
 8001142:	f7ff f9ac 	bl	800049e <PCD_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8001146:	231c      	movs	r3, #28
 8001148:	fb03 4306 	mla	r3, r3, r6, r4
 800114c:	6822      	ldr	r2, [r4, #0]
 800114e:	f893 1108 	ldrb.w	r1, [r3, #264]	; 0x108
 8001152:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800115a:	051b      	lsls	r3, r3, #20
 800115c:	0d1b      	lsrs	r3, r3, #20
 800115e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001162:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001166:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800116a:	e775      	b.n	8001058 <HAL_PCD_IRQHandler+0x2fc>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800116c:	f8b3 540c 	ldrh.w	r5, [r3, #1036]	; 0x40c
 8001170:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0)
 8001174:	2d00      	cmp	r5, #0
 8001176:	d0e6      	beq.n	8001146 <HAL_PCD_IRQHandler+0x3ea>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001178:	462b      	mov	r3, r5
 800117a:	f8b1 2110 	ldrh.w	r2, [r1, #272]	; 0x110
 800117e:	e7de      	b.n	800113e <HAL_PCD_IRQHandler+0x3e2>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001180:	f891 1108 	ldrb.w	r1, [r1, #264]	; 0x108
 8001184:	4620      	mov	r0, r4
 8001186:	f7ff fc59 	bl	8000a3c <HAL_PCD_EP_Receive>
 800118a:	e781      	b.n	8001090 <HAL_PCD_IRQHandler+0x334>
 800118c:	ffff8f0f 	.word	0xffff8f0f
 8001190:	ffffbf8f 	.word	0xffffbf8f
 8001194:	ffff8000 	.word	0xffff8000
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8001198:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800119c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011a6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80011aa:	b292      	uxth	r2, r2
 80011ac:	4413      	add	r3, r2
 80011ae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 80011b2:	d01c      	beq.n	80011ee <HAL_PCD_IRQHandler+0x492>
 80011b4:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80011b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011bc:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 80011be:	b11b      	cbz	r3, 80011c8 <HAL_PCD_IRQHandler+0x46c>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 80011c0:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80011c2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80011c4:	f7ff f958 	bl	8000478 <PCD_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN)  
 80011c8:	231c      	movs	r3, #28
 80011ca:	fb03 4306 	mla	r3, r3, r6, r4
 80011ce:	6822      	ldr	r2, [r4, #0]
 80011d0:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 80011d4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80011d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011dc:	051b      	lsls	r3, r3, #20
 80011de:	0d1b      	lsrs	r3, r3, #20
 80011e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80011ec:	e775      	b.n	80010da <HAL_PCD_IRQHandler+0x37e>
 80011ee:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80011f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80011f6:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0e5      	beq.n	80011c8 <HAL_PCD_IRQHandler+0x46c>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80011fc:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 80011fe:	e7e0      	b.n	80011c2 <HAL_PCD_IRQHandler+0x466>
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001200:	f7ff fcc8 	bl	8000b94 <HAL_PCD_EP_Transmit>
 8001204:	e646      	b.n	8000e94 <HAL_PCD_IRQHandler+0x138>
 8001206:	bf00      	nop

08001208 <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8001208:	f890 31e8 	ldrb.w	r3, [r0, #488]	; 0x1e8
{
 800120c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hpcd); 
 800120e:	2b01      	cmp	r3, #1
 8001210:	d046      	beq.n	80012a0 <HAL_PCD_EP_SetStall+0x98>
 8001212:	2301      	movs	r3, #1
 8001214:	f880 31e8 	strb.w	r3, [r0, #488]	; 0x1e8
 8001218:	231c      	movs	r3, #28
   
  if ((0x80 & ep_addr) == 0x80)
 800121a:	b24d      	sxtb	r5, r1
 800121c:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8001220:	2d00      	cmp	r5, #0
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001222:	bfb4      	ite	lt
 8001224:	fb03 0104 	mlalt	r1, r3, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001228:	fb03 0101 	mlage	r1, r3, r1, r0
  }
  
  ep->is_stall = 1;
 800122c:	f04f 0301 	mov.w	r3, #1
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001230:	bfb4      	ite	lt
 8001232:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001234:	f501 7184 	addge.w	r1, r1, #264	; 0x108
  ep->is_stall = 1;
 8001238:	708b      	strb	r3, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800123a:	b2e4      	uxtb	r4, r4
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800123c:	0feb      	lsrs	r3, r5, #31
  ep->num   = ep_addr & 0x7F;
 800123e:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001240:	704b      	strb	r3, [r1, #1]
 8001242:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0)
 8001244:	b994      	cbnz	r4, 800126c <HAL_PCD_EP_SetStall+0x64>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL) 
 8001246:	8813      	ldrh	r3, [r2, #0]
 8001248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800124c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001250:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001254:	f083 0310 	eor.w	r3, r3, #16
 8001258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800125c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001260:	8013      	strh	r3, [r2, #0]
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
    }
  }
  __HAL_UNLOCK(hpcd); 
 8001262:	2300      	movs	r3, #0
 8001264:	f880 31e8 	strb.w	r3, [r0, #488]	; 0x1e8
  
  return HAL_OK;
 8001268:	4618      	mov	r0, r3
 800126a:	bd30      	pop	{r4, r5, pc}
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 800126c:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
    if (ep->is_in)
 8001270:	2d00      	cmp	r5, #0
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 8001272:	bfb5      	itete	lt
 8001274:	f423 43e0 	biclt.w	r3, r3, #28672	; 0x7000
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 8001278:	f423 4380 	bicge.w	r3, r3, #16384	; 0x4000
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 800127c:	f023 0340 	biclt.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 8001280:	f023 0370 	bicge.w	r3, r3, #112	; 0x70
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 8001284:	bfb5      	itete	lt
 8001286:	b29b      	uxthlt	r3, r3
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 8001288:	b29b      	uxthge	r3, r3
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 800128a:	f083 0310 	eorlt.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 800128e:	f483 5380 	eorge.w	r3, r3, #4096	; 0x1000
 8001292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800129a:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
 800129e:	e7e0      	b.n	8001262 <HAL_PCD_EP_SetStall+0x5a>
  __HAL_LOCK(hpcd); 
 80012a0:	2002      	movs	r0, #2
}
 80012a2:	bd30      	pop	{r4, r5, pc}

080012a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012a4:	221c      	movs	r2, #28
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 80012a6:	b24b      	sxtb	r3, r1
 80012a8:	2b00      	cmp	r3, #0
{
 80012aa:	b510      	push	{r4, lr}
 80012ac:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80012b0:	bfb4      	ite	lt
 80012b2:	fb02 0104 	mlalt	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012b6:	fb02 0101 	mlage	r1, r2, r1, r0
  }
  
  ep->is_stall = 0;
 80012ba:	f04f 0200 	mov.w	r2, #0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80012be:	bfb4      	ite	lt
 80012c0:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80012c2:	f501 7184 	addge.w	r1, r1, #264	; 0x108
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80012c6:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 80012c8:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80012ca:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80012cc:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 80012ce:	f890 31e8 	ldrb.w	r3, [r0, #488]	; 0x1e8
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d044      	beq.n	8001360 <HAL_PCD_EP_ClrStall+0xbc>
 80012d6:	2301      	movs	r3, #1
 80012d8:	f880 31e8 	strb.w	r3, [r0, #488]	; 0x1e8
  
  if (ep->is_in)
 80012dc:	784b      	ldrb	r3, [r1, #1]
 80012de:	6802      	ldr	r2, [r0, #0]
 80012e0:	780c      	ldrb	r4, [r1, #0]
 80012e2:	b31b      	cbz	r3, 800132c <HAL_PCD_EP_ClrStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80012e4:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 80012e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80012ec:	d009      	beq.n	8001302 <HAL_PCD_EP_ClrStall+0x5e>
 80012ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012f2:	051b      	lsls	r3, r3, #20
 80012f4:	0d1b      	lsrs	r3, r3, #20
 80012f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80012fe:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8001302:	7809      	ldrb	r1, [r1, #0]
 8001304:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800130c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001310:	b29b      	uxth	r3, r3
 8001312:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 8001322:	2300      	movs	r3, #0
 8001324:	f880 31e8 	strb.w	r3, [r0, #488]	; 0x1e8
    
  return HAL_OK;
 8001328:	4618      	mov	r0, r3
 800132a:	bd10      	pop	{r4, pc}
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800132c:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8001330:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001334:	d009      	beq.n	800134a <HAL_PCD_EP_ClrStall+0xa6>
 8001336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800133a:	051b      	lsls	r3, r3, #20
 800133c:	0d1b      	lsrs	r3, r3, #20
 800133e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001346:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800134a:	7809      	ldrb	r1, [r1, #0]
 800134c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001358:	b29b      	uxth	r3, r3
 800135a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800135e:	e7da      	b.n	8001316 <HAL_PCD_EP_ClrStall+0x72>
  __HAL_LOCK(hpcd); 
 8001360:	2002      	movs	r0, #2
}
 8001362:	bd10      	pop	{r4, pc}

08001364 <HAL_PCD_Start>:
{ 
 8001364:	b508      	push	{r3, lr}
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8001366:	2101      	movs	r1, #1
 8001368:	f002 f99c 	bl	80036a4 <HAL_PCDEx_SetConnectionState>
}
 800136c:	2000      	movs	r0, #0
 800136e:	bd08      	pop	{r3, pc}

08001370 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8001370:	b510      	push	{r4, lr}
 8001372:	241c      	movs	r4, #28
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8001374:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001378:	bf1b      	ittet	ne
 800137a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800137e:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001382:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001386:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001388:	bf08      	it	eq
 800138a:	f500 7084 	addeq.w	r0, r0, #264	; 0x108
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800138e:	b91a      	cbnz	r2, 8001398 <HAL_PCDEx_PMAConfig+0x28>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8001390:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8001392:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16;
  }
  
  return HAL_OK; 
}
 8001394:	2000      	movs	r0, #0
 8001396:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1;
 8001398:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 800139a:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16;
 800139c:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1;
 800139e:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16;
 80013a0:	8103      	strh	r3, [r0, #8]
 80013a2:	e7f7      	b.n	8001394 <HAL_PCDEx_PMAConfig+0x24>

080013a4 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80013a4:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 80013a6:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80013ae:	d00c      	beq.n	80013ca <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 80013b0:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 80013b2:	491a      	ldr	r1, [pc, #104]	; (800141c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80013b4:	680b      	ldr	r3, [r1, #0]
 80013b6:	f023 0301 	bic.w	r3, r3, #1
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80013be:	6808      	ldr	r0, [r1, #0]
 80013c0:	f000 0001 	and.w	r0, r0, #1
 80013c4:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 80013c6:	b002      	add	sp, #8
 80013c8:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80013ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013cc:	4914      	ldr	r1, [pc, #80]	; (8001420 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80013ce:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80013d2:	d00f      	beq.n	80013f4 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80013d4:	680a      	ldr	r2, [r1, #0]
 80013d6:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80013da:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80013de:	d1e7      	bne.n	80013b0 <RCC_SetFlashLatencyFromMSIRange+0xc>
 80013e0:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80013e4:	d1e4      	bne.n	80013b0 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 80013e6:	4a0d      	ldr	r2, [pc, #52]	; (800141c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80013e8:	6813      	ldr	r3, [r2, #0]
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 80013f0:	2201      	movs	r2, #1
 80013f2:	e7de      	b.n	80013b2 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
 80013fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013fe:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001402:	9201      	str	r2, [sp, #4]
 8001404:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001406:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001408:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800140a:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800140e:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8001412:	6259      	str	r1, [r3, #36]	; 0x24
 8001414:	e7e1      	b.n	80013da <RCC_SetFlashLatencyFromMSIRange+0x36>
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40023c00 	.word	0x40023c00
 8001420:	40007000 	.word	0x40007000

08001424 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001424:	6803      	ldr	r3, [r0, #0]
{
 8001426:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142a:	07d9      	lsls	r1, r3, #31
{
 800142c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142e:	d46a      	bmi.n	8001506 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001430:	6823      	ldr	r3, [r4, #0]
 8001432:	079a      	lsls	r2, r3, #30
 8001434:	f100 80e6 	bmi.w	8001604 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001438:	6823      	ldr	r3, [r4, #0]
 800143a:	06de      	lsls	r6, r3, #27
 800143c:	d555      	bpl.n	80014ea <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800143e:	4dc1      	ldr	r5, [pc, #772]	; (8001744 <HAL_RCC_OscConfig+0x320>)
 8001440:	68ab      	ldr	r3, [r5, #8]
 8001442:	f013 0f0c 	tst.w	r3, #12
 8001446:	f040 8183 	bne.w	8001750 <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001452:	6829      	ldr	r1, [r5, #0]
 8001454:	fa93 f3a3 	rbit	r3, r3
 8001458:	fab3 f383 	clz	r3, r3
 800145c:	2201      	movs	r2, #1
 800145e:	f003 031f 	and.w	r3, r3, #31
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	420b      	tst	r3, r1
 8001468:	d002      	beq.n	8001470 <HAL_RCC_OscConfig+0x4c>
 800146a:	69a3      	ldr	r3, [r4, #24]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d06e      	beq.n	800154e <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001470:	4db4      	ldr	r5, [pc, #720]	; (8001744 <HAL_RCC_OscConfig+0x320>)
 8001472:	6a20      	ldr	r0, [r4, #32]
 8001474:	686b      	ldr	r3, [r5, #4]
 8001476:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800147a:	4298      	cmp	r0, r3
 800147c:	f240 814a 	bls.w	8001714 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001480:	f7ff ff90 	bl	80013a4 <RCC_SetFlashLatencyFromMSIRange>
 8001484:	2800      	cmp	r0, #0
 8001486:	d162      	bne.n	800154e <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001488:	686b      	ldr	r3, [r5, #4]
 800148a:	6a22      	ldr	r2, [r4, #32]
 800148c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001490:	4313      	orrs	r3, r2
 8001492:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001494:	6869      	ldr	r1, [r5, #4]
 8001496:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800149a:	fa93 f3a3 	rbit	r3, r3
 800149e:	fab3 f283 	clz	r2, r3
 80014a2:	69e3      	ldr	r3, [r4, #28]
 80014a4:	4093      	lsls	r3, r2
 80014a6:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 80014aa:	4313      	orrs	r3, r2
 80014ac:	606b      	str	r3, [r5, #4]
 80014ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80014b2:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80014b6:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80014ba:	4ba2      	ldr	r3, [pc, #648]	; (8001744 <HAL_RCC_OscConfig+0x320>)
 80014bc:	21f0      	movs	r1, #240	; 0xf0
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	fa91 f1a1 	rbit	r1, r1
 80014c4:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80014c8:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80014ca:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80014ce:	40c3      	lsrs	r3, r0
 80014d0:	1c58      	adds	r0, r3, #1
 80014d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80014d6:	40ca      	lsrs	r2, r1
 80014d8:	499b      	ldr	r1, [pc, #620]	; (8001748 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80014da:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80014dc:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 80014de:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80014e0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80014e2:	4a9a      	ldr	r2, [pc, #616]	; (800174c <HAL_RCC_OscConfig+0x328>)
 80014e4:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80014e6:	f7fe fe51 	bl	800018c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	071d      	lsls	r5, r3, #28
 80014ee:	f100 8191 	bmi.w	8001814 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	0758      	lsls	r0, r3, #29
 80014f6:	f100 81d3 	bmi.w	80018a0 <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	f040 8257 	bne.w	80019b0 <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 8001502:	2000      	movs	r0, #0
 8001504:	e024      	b.n	8001550 <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001506:	4b8f      	ldr	r3, [pc, #572]	; (8001744 <HAL_RCC_OscConfig+0x320>)
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	f002 020c 	and.w	r2, r2, #12
 800150e:	2a08      	cmp	r2, #8
 8001510:	d007      	beq.n	8001522 <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	f002 020c 	and.w	r2, r2, #12
 8001518:	2a0c      	cmp	r2, #12
 800151a:	d11c      	bne.n	8001556 <HAL_RCC_OscConfig+0x132>
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	03db      	lsls	r3, r3, #15
 8001520:	d519      	bpl.n	8001556 <HAL_RCC_OscConfig+0x132>
 8001522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001526:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152a:	4a86      	ldr	r2, [pc, #536]	; (8001744 <HAL_RCC_OscConfig+0x320>)
 800152c:	6811      	ldr	r1, [r2, #0]
 800152e:	fa93 f3a3 	rbit	r3, r3
 8001532:	fab3 f383 	clz	r3, r3
 8001536:	2201      	movs	r2, #1
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	420b      	tst	r3, r1
 8001542:	f43f af75 	beq.w	8001430 <HAL_RCC_OscConfig+0xc>
 8001546:	6863      	ldr	r3, [r4, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	f47f af71 	bne.w	8001430 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800154e:	2001      	movs	r0, #1
}
 8001550:	b003      	add	sp, #12
 8001552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001556:	6863      	ldr	r3, [r4, #4]
 8001558:	4d7a      	ldr	r5, [pc, #488]	; (8001744 <HAL_RCC_OscConfig+0x320>)
 800155a:	2b01      	cmp	r3, #1
 800155c:	d120      	bne.n	80015a0 <HAL_RCC_OscConfig+0x17c>
 800155e:	682b      	ldr	r3, [r5, #0]
 8001560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001564:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001566:	f7fe fe39 	bl	80001dc <HAL_GetTick>
 800156a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800156e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001570:	2601      	movs	r6, #1
 8001572:	4f74      	ldr	r7, [pc, #464]	; (8001744 <HAL_RCC_OscConfig+0x320>)
 8001574:	fa95 f3a5 	rbit	r3, r5
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	fa95 f3a5 	rbit	r3, r5
 800157e:	fab3 f383 	clz	r3, r3
 8001582:	f003 031f 	and.w	r3, r3, #31
 8001586:	fa06 f303 	lsl.w	r3, r6, r3
 800158a:	4213      	tst	r3, r2
 800158c:	f47f af50 	bne.w	8001430 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001590:	f7fe fe24 	bl	80001dc <HAL_GetTick>
 8001594:	eba0 0008 	sub.w	r0, r0, r8
 8001598:	2864      	cmp	r0, #100	; 0x64
 800159a:	d9eb      	bls.n	8001574 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 800159c:	2003      	movs	r0, #3
 800159e:	e7d7      	b.n	8001550 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a0:	bb13      	cbnz	r3, 80015e8 <HAL_RCC_OscConfig+0x1c4>
 80015a2:	682b      	ldr	r3, [r5, #0]
 80015a4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80015a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ac:	602b      	str	r3, [r5, #0]
 80015ae:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b0:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015b8:	f7fe fe10 	bl	80001dc <HAL_GetTick>
 80015bc:	4680      	mov	r8, r0
 80015be:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	682a      	ldr	r2, [r5, #0]
 80015c4:	fa96 f3a6 	rbit	r3, r6
 80015c8:	fab3 f383 	clz	r3, r3
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	fa07 f303 	lsl.w	r3, r7, r3
 80015d4:	4213      	tst	r3, r2
 80015d6:	f43f af2b 	beq.w	8001430 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015da:	f7fe fdff 	bl	80001dc <HAL_GetTick>
 80015de:	eba0 0008 	sub.w	r0, r0, r8
 80015e2:	2864      	cmp	r0, #100	; 0x64
 80015e4:	d9eb      	bls.n	80015be <HAL_RCC_OscConfig+0x19a>
 80015e6:	e7d9      	b.n	800159c <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	682b      	ldr	r3, [r5, #0]
 80015ec:	d103      	bne.n	80015f6 <HAL_RCC_OscConfig+0x1d2>
 80015ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f2:	602b      	str	r3, [r5, #0]
 80015f4:	e7b3      	b.n	800155e <HAL_RCC_OscConfig+0x13a>
 80015f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fa:	602b      	str	r3, [r5, #0]
 80015fc:	682b      	ldr	r3, [r5, #0]
 80015fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001602:	e7af      	b.n	8001564 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001604:	4b4f      	ldr	r3, [pc, #316]	; (8001744 <HAL_RCC_OscConfig+0x320>)
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	f002 020c 	and.w	r2, r2, #12
 800160c:	2a04      	cmp	r2, #4
 800160e:	d007      	beq.n	8001620 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	f002 020c 	and.w	r2, r2, #12
 8001616:	2a0c      	cmp	r2, #12
 8001618:	d124      	bne.n	8001664 <HAL_RCC_OscConfig+0x240>
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	03df      	lsls	r7, r3, #15
 800161e:	d421      	bmi.n	8001664 <HAL_RCC_OscConfig+0x240>
 8001620:	2302      	movs	r3, #2
 8001622:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	4a47      	ldr	r2, [pc, #284]	; (8001744 <HAL_RCC_OscConfig+0x320>)
 8001628:	6810      	ldr	r0, [r2, #0]
 800162a:	fa93 f3a3 	rbit	r3, r3
 800162e:	fab3 f383 	clz	r3, r3
 8001632:	2101      	movs	r1, #1
 8001634:	f003 031f 	and.w	r3, r3, #31
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	4203      	tst	r3, r0
 800163e:	4613      	mov	r3, r2
 8001640:	d002      	beq.n	8001648 <HAL_RCC_OscConfig+0x224>
 8001642:	68e2      	ldr	r2, [r4, #12]
 8001644:	428a      	cmp	r2, r1
 8001646:	d182      	bne.n	800154e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001648:	6858      	ldr	r0, [r3, #4]
 800164a:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 800164e:	fa92 f2a2 	rbit	r2, r2
 8001652:	fab2 f182 	clz	r1, r2
 8001656:	6922      	ldr	r2, [r4, #16]
 8001658:	408a      	lsls	r2, r1
 800165a:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	e6e9      	b.n	8001438 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001664:	68e2      	ldr	r2, [r4, #12]
 8001666:	2501      	movs	r5, #1
 8001668:	b382      	cbz	r2, 80016cc <HAL_RCC_OscConfig+0x2a8>
 800166a:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 800166e:	fab3 f383 	clz	r3, r3
 8001672:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001676:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800167e:	f7fe fdad 	bl	80001dc <HAL_GetTick>
 8001682:	2702      	movs	r7, #2
 8001684:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001686:	4e2f      	ldr	r6, [pc, #188]	; (8001744 <HAL_RCC_OscConfig+0x320>)
 8001688:	fa97 f3a7 	rbit	r3, r7
 800168c:	6832      	ldr	r2, [r6, #0]
 800168e:	fa97 f3a7 	rbit	r3, r7
 8001692:	fab3 f383 	clz	r3, r3
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	fa05 f303 	lsl.w	r3, r5, r3
 800169e:	4213      	tst	r3, r2
 80016a0:	d00d      	beq.n	80016be <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a2:	6871      	ldr	r1, [r6, #4]
 80016a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80016a8:	fa93 f3a3 	rbit	r3, r3
 80016ac:	fab3 f283 	clz	r2, r3
 80016b0:	6923      	ldr	r3, [r4, #16]
 80016b2:	4093      	lsls	r3, r2
 80016b4:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 80016b8:	4313      	orrs	r3, r2
 80016ba:	6073      	str	r3, [r6, #4]
 80016bc:	e6bc      	b.n	8001438 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016be:	f7fe fd8d 	bl	80001dc <HAL_GetTick>
 80016c2:	eba0 0008 	sub.w	r0, r0, r8
 80016c6:	2802      	cmp	r0, #2
 80016c8:	d9de      	bls.n	8001688 <HAL_RCC_OscConfig+0x264>
 80016ca:	e767      	b.n	800159c <HAL_RCC_OscConfig+0x178>
 80016cc:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016d8:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016e0:	f7fe fd7c 	bl	80001dc <HAL_GetTick>
 80016e4:	2602      	movs	r6, #2
 80016e6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e8:	4f16      	ldr	r7, [pc, #88]	; (8001744 <HAL_RCC_OscConfig+0x320>)
 80016ea:	fa96 f3a6 	rbit	r3, r6
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	fa96 f3a6 	rbit	r3, r6
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	f003 031f 	and.w	r3, r3, #31
 80016fc:	fa05 f303 	lsl.w	r3, r5, r3
 8001700:	4213      	tst	r3, r2
 8001702:	f43f ae99 	beq.w	8001438 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001706:	f7fe fd69 	bl	80001dc <HAL_GetTick>
 800170a:	eba0 0008 	sub.w	r0, r0, r8
 800170e:	2802      	cmp	r0, #2
 8001710:	d9eb      	bls.n	80016ea <HAL_RCC_OscConfig+0x2c6>
 8001712:	e743      	b.n	800159c <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001714:	686b      	ldr	r3, [r5, #4]
 8001716:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800171a:	4303      	orrs	r3, r0
 800171c:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171e:	6869      	ldr	r1, [r5, #4]
 8001720:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001724:	fa93 f3a3 	rbit	r3, r3
 8001728:	fab3 f283 	clz	r2, r3
 800172c:	69e3      	ldr	r3, [r4, #28]
 800172e:	4093      	lsls	r3, r2
 8001730:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001734:	4313      	orrs	r3, r2
 8001736:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001738:	f7ff fe34 	bl	80013a4 <RCC_SetFlashLatencyFromMSIRange>
 800173c:	2800      	cmp	r0, #0
 800173e:	f43f aeb6 	beq.w	80014ae <HAL_RCC_OscConfig+0x8a>
 8001742:	e704      	b.n	800154e <HAL_RCC_OscConfig+0x12a>
 8001744:	40023800 	.word	0x40023800
 8001748:	08003b65 	.word	0x08003b65
 800174c:	200000c0 	.word	0x200000c0
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001750:	69a2      	ldr	r2, [r4, #24]
 8001752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001756:	2a00      	cmp	r2, #0
 8001758:	d037      	beq.n	80017ca <HAL_RCC_OscConfig+0x3a6>
 800175a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 800175e:	fab3 f383 	clz	r3, r3
 8001762:	2601      	movs	r6, #1
 8001764:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001768:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001770:	f7fe fd34 	bl	80001dc <HAL_GetTick>
 8001774:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001778:	4680      	mov	r8, r0
 800177a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800177e:	682a      	ldr	r2, [r5, #0]
 8001780:	fa97 f3a7 	rbit	r3, r7
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	fa06 f303 	lsl.w	r3, r6, r3
 8001790:	4213      	tst	r3, r2
 8001792:	d013      	beq.n	80017bc <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001794:	686b      	ldr	r3, [r5, #4]
 8001796:	6a22      	ldr	r2, [r4, #32]
 8001798:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800179c:	4313      	orrs	r3, r2
 800179e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017a0:	6869      	ldr	r1, [r5, #4]
 80017a2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80017a6:	fa93 f3a3 	rbit	r3, r3
 80017aa:	fab3 f283 	clz	r2, r3
 80017ae:	69e3      	ldr	r3, [r4, #28]
 80017b0:	4093      	lsls	r3, r2
 80017b2:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 80017b6:	4313      	orrs	r3, r2
 80017b8:	606b      	str	r3, [r5, #4]
 80017ba:	e696      	b.n	80014ea <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017bc:	f7fe fd0e 	bl	80001dc <HAL_GetTick>
 80017c0:	eba0 0008 	sub.w	r0, r0, r8
 80017c4:	2802      	cmp	r0, #2
 80017c6:	d9d8      	bls.n	800177a <HAL_RCC_OscConfig+0x356>
 80017c8:	e6e8      	b.n	800159c <HAL_RCC_OscConfig+0x178>
 80017ca:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017d6:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017de:	f7fe fcfd 	bl	80001dc <HAL_GetTick>
 80017e2:	f44f 7600 	mov.w	r6, #512	; 0x200
 80017e6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80017e8:	2701      	movs	r7, #1
 80017ea:	fa96 f3a6 	rbit	r3, r6
 80017ee:	682a      	ldr	r2, [r5, #0]
 80017f0:	fa96 f3a6 	rbit	r3, r6
 80017f4:	fab3 f383 	clz	r3, r3
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	fa07 f303 	lsl.w	r3, r7, r3
 8001800:	4213      	tst	r3, r2
 8001802:	f43f ae72 	beq.w	80014ea <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001806:	f7fe fce9 	bl	80001dc <HAL_GetTick>
 800180a:	eba0 0008 	sub.w	r0, r0, r8
 800180e:	2802      	cmp	r0, #2
 8001810:	d9eb      	bls.n	80017ea <HAL_RCC_OscConfig+0x3c6>
 8001812:	e6c3      	b.n	800159c <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001814:	6962      	ldr	r2, [r4, #20]
 8001816:	2501      	movs	r5, #1
 8001818:	49a9      	ldr	r1, [pc, #676]	; (8001ac0 <HAL_RCC_OscConfig+0x69c>)
 800181a:	b302      	cbz	r2, 800185e <HAL_RCC_OscConfig+0x43a>
 800181c:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	440b      	add	r3, r1
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 800182a:	f7fe fcd7 	bl	80001dc <HAL_GetTick>
 800182e:	2602      	movs	r6, #2
 8001830:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	4fa4      	ldr	r7, [pc, #656]	; (8001ac4 <HAL_RCC_OscConfig+0x6a0>)
 8001834:	fa96 f3a6 	rbit	r3, r6
 8001838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800183a:	fa96 f3a6 	rbit	r3, r6
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	fa05 f303 	lsl.w	r3, r5, r3
 800184a:	4213      	tst	r3, r2
 800184c:	f47f ae51 	bne.w	80014f2 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001850:	f7fe fcc4 	bl	80001dc <HAL_GetTick>
 8001854:	eba0 0008 	sub.w	r0, r0, r8
 8001858:	2802      	cmp	r0, #2
 800185a:	d9eb      	bls.n	8001834 <HAL_RCC_OscConfig+0x410>
 800185c:	e69e      	b.n	800159c <HAL_RCC_OscConfig+0x178>
 800185e:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 8001862:	fab3 f383 	clz	r3, r3
 8001866:	440b      	add	r3, r1
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800186c:	f7fe fcb6 	bl	80001dc <HAL_GetTick>
 8001870:	2602      	movs	r6, #2
 8001872:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001874:	4f93      	ldr	r7, [pc, #588]	; (8001ac4 <HAL_RCC_OscConfig+0x6a0>)
 8001876:	fa96 f3a6 	rbit	r3, r6
 800187a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800187c:	fa96 f3a6 	rbit	r3, r6
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	fa05 f303 	lsl.w	r3, r5, r3
 800188c:	4213      	tst	r3, r2
 800188e:	f43f ae30 	beq.w	80014f2 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001892:	f7fe fca3 	bl	80001dc <HAL_GetTick>
 8001896:	eba0 0008 	sub.w	r0, r0, r8
 800189a:	2802      	cmp	r0, #2
 800189c:	d9eb      	bls.n	8001876 <HAL_RCC_OscConfig+0x452>
 800189e:	e67d      	b.n	800159c <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a0:	4b88      	ldr	r3, [pc, #544]	; (8001ac4 <HAL_RCC_OscConfig+0x6a0>)
 80018a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a4:	00d1      	lsls	r1, r2, #3
 80018a6:	d434      	bmi.n	8001912 <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 80018a8:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	4d82      	ldr	r5, [pc, #520]	; (8001ac8 <HAL_RCC_OscConfig+0x6a4>)
 80018be:	682b      	ldr	r3, [r5, #0]
 80018c0:	05da      	lsls	r2, r3, #23
 80018c2:	d528      	bpl.n	8001916 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c4:	68a3      	ldr	r3, [r4, #8]
 80018c6:	4d7f      	ldr	r5, [pc, #508]	; (8001ac4 <HAL_RCC_OscConfig+0x6a0>)
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d134      	bne.n	8001936 <HAL_RCC_OscConfig+0x512>
 80018cc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80018ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80018d4:	f7fe fc82 	bl	80001dc <HAL_GetTick>
 80018d8:	f44f 7500 	mov.w	r5, #512	; 0x200
 80018dc:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018de:	2701      	movs	r7, #1
 80018e0:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8001ac4 <HAL_RCC_OscConfig+0x6a0>
 80018e4:	fa95 f3a5 	rbit	r3, r5
 80018e8:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80018ec:	fa95 f3a5 	rbit	r3, r5
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	f003 031f 	and.w	r3, r3, #31
 80018f8:	fa07 f303 	lsl.w	r3, r7, r3
 80018fc:	4213      	tst	r3, r2
 80018fe:	d04e      	beq.n	800199e <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 8001900:	2e00      	cmp	r6, #0
 8001902:	f43f adfa 	beq.w	80014fa <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001906:	4a6f      	ldr	r2, [pc, #444]	; (8001ac4 <HAL_RCC_OscConfig+0x6a0>)
 8001908:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800190a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800190e:	6253      	str	r3, [r2, #36]	; 0x24
 8001910:	e5f3      	b.n	80014fa <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 8001912:	2600      	movs	r6, #0
 8001914:	e7d2      	b.n	80018bc <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001916:	682b      	ldr	r3, [r5, #0]
 8001918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800191e:	f7fe fc5d 	bl	80001dc <HAL_GetTick>
 8001922:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001924:	682b      	ldr	r3, [r5, #0]
 8001926:	05db      	lsls	r3, r3, #23
 8001928:	d4cc      	bmi.n	80018c4 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192a:	f7fe fc57 	bl	80001dc <HAL_GetTick>
 800192e:	1bc0      	subs	r0, r0, r7
 8001930:	2864      	cmp	r0, #100	; 0x64
 8001932:	d9f7      	bls.n	8001924 <HAL_RCC_OscConfig+0x500>
 8001934:	e632      	b.n	800159c <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001936:	bb23      	cbnz	r3, 8001982 <HAL_RCC_OscConfig+0x55e>
 8001938:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800193a:	f44f 7700 	mov.w	r7, #512	; 0x200
 800193e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001942:	636b      	str	r3, [r5, #52]	; 0x34
 8001944:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001946:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800194e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001950:	f7fe fc44 	bl	80001dc <HAL_GetTick>
 8001954:	4681      	mov	r9, r0
 8001956:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800195c:	fa97 f3a7 	rbit	r3, r7
 8001960:	fab3 f383 	clz	r3, r3
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	fa08 f303 	lsl.w	r3, r8, r3
 800196c:	4213      	tst	r3, r2
 800196e:	d0c7      	beq.n	8001900 <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f7fe fc34 	bl	80001dc <HAL_GetTick>
 8001974:	f241 3388 	movw	r3, #5000	; 0x1388
 8001978:	eba0 0009 	sub.w	r0, r0, r9
 800197c:	4298      	cmp	r0, r3
 800197e:	d9ea      	bls.n	8001956 <HAL_RCC_OscConfig+0x532>
 8001980:	e60c      	b.n	800159c <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001982:	2b05      	cmp	r3, #5
 8001984:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001986:	d103      	bne.n	8001990 <HAL_RCC_OscConfig+0x56c>
 8001988:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198c:	636b      	str	r3, [r5, #52]	; 0x34
 800198e:	e79d      	b.n	80018cc <HAL_RCC_OscConfig+0x4a8>
 8001990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001994:	636b      	str	r3, [r5, #52]	; 0x34
 8001996:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001998:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800199c:	e799      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7fe fc1d 	bl	80001dc <HAL_GetTick>
 80019a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80019a6:	eba0 0009 	sub.w	r0, r0, r9
 80019aa:	4298      	cmp	r0, r3
 80019ac:	d99a      	bls.n	80018e4 <HAL_RCC_OscConfig+0x4c0>
 80019ae:	e5f5      	b.n	800159c <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b0:	4d44      	ldr	r5, [pc, #272]	; (8001ac4 <HAL_RCC_OscConfig+0x6a0>)
 80019b2:	68ab      	ldr	r3, [r5, #8]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b0c      	cmp	r3, #12
 80019ba:	f43f adc8 	beq.w	800154e <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019be:	2a02      	cmp	r2, #2
 80019c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019c4:	d156      	bne.n	8001a74 <HAL_RCC_OscConfig+0x650>
 80019c6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	2200      	movs	r2, #0
 80019d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019d4:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019dc:	f7fe fbfe 	bl	80001dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e0:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 80019e2:	4680      	mov	r8, r0
 80019e4:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e8:	2501      	movs	r5, #1
 80019ea:	fa97 f3a7 	rbit	r3, r7
 80019ee:	6832      	ldr	r2, [r6, #0]
 80019f0:	fa97 f3a7 	rbit	r3, r7
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	fa05 f303 	lsl.w	r3, r5, r3
 8001a00:	4213      	tst	r3, r2
 8001a02:	d130      	bne.n	8001a66 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a04:	68b2      	ldr	r2, [r6, #8]
 8001a06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a08:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001a0a:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	4313      	orrs	r3, r2
 8001a12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a14:	4313      	orrs	r3, r2
 8001a16:	60b3      	str	r3, [r6, #8]
 8001a18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a1c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001a20:	fab3 f383 	clz	r3, r3
 8001a24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a28:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001a30:	f7fe fbd4 	bl	80001dc <HAL_GetTick>
 8001a34:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001a38:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a3a:	2501      	movs	r5, #1
 8001a3c:	4e21      	ldr	r6, [pc, #132]	; (8001ac4 <HAL_RCC_OscConfig+0x6a0>)
 8001a3e:	fa94 f3a4 	rbit	r3, r4
 8001a42:	6832      	ldr	r2, [r6, #0]
 8001a44:	fa94 f3a4 	rbit	r3, r4
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	f003 031f 	and.w	r3, r3, #31
 8001a50:	fa05 f303 	lsl.w	r3, r5, r3
 8001a54:	4213      	tst	r3, r2
 8001a56:	f47f ad54 	bne.w	8001502 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5a:	f7fe fbbf 	bl	80001dc <HAL_GetTick>
 8001a5e:	1bc0      	subs	r0, r0, r7
 8001a60:	2802      	cmp	r0, #2
 8001a62:	d9ec      	bls.n	8001a3e <HAL_RCC_OscConfig+0x61a>
 8001a64:	e59a      	b.n	800159c <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a66:	f7fe fbb9 	bl	80001dc <HAL_GetTick>
 8001a6a:	eba0 0008 	sub.w	r0, r0, r8
 8001a6e:	2802      	cmp	r0, #2
 8001a70:	d9bb      	bls.n	80019ea <HAL_RCC_OscConfig+0x5c6>
 8001a72:	e593      	b.n	800159c <HAL_RCC_OscConfig+0x178>
 8001a74:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a82:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a8a:	f7fe fba7 	bl	80001dc <HAL_GetTick>
 8001a8e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001a92:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a94:	2601      	movs	r6, #1
 8001a96:	fa94 f3a4 	rbit	r3, r4
 8001a9a:	682a      	ldr	r2, [r5, #0]
 8001a9c:	fa94 f3a4 	rbit	r3, r4
 8001aa0:	fab3 f383 	clz	r3, r3
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	fa06 f303 	lsl.w	r3, r6, r3
 8001aac:	4213      	tst	r3, r2
 8001aae:	f43f ad28 	beq.w	8001502 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7fe fb93 	bl	80001dc <HAL_GetTick>
 8001ab6:	1bc0      	subs	r0, r0, r7
 8001ab8:	2802      	cmp	r0, #2
 8001aba:	d9ec      	bls.n	8001a96 <HAL_RCC_OscConfig+0x672>
 8001abc:	e56e      	b.n	800159c <HAL_RCC_OscConfig+0x178>
 8001abe:	bf00      	nop
 8001ac0:	1091c1a0 	.word	0x1091c1a0
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40007000 	.word	0x40007000

08001acc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001acc:	491e      	ldr	r1, [pc, #120]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8001ace:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001ad0:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8001ad2:	f003 020c 	and.w	r2, r3, #12
 8001ad6:	2a08      	cmp	r2, #8
 8001ad8:	d005      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1a>
 8001ada:	2a0c      	cmp	r2, #12
 8001adc:	d005      	beq.n	8001aea <HAL_RCC_GetSysClockFreq+0x1e>
 8001ade:	2a04      	cmp	r2, #4
 8001ae0:	d122      	bne.n	8001b28 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8001ae2:	481a      	ldr	r0, [pc, #104]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x80>)
}
 8001ae4:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001ae6:	481a      	ldr	r0, [pc, #104]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x84>)
 8001ae8:	bd10      	pop	{r4, pc}
 8001aea:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001aee:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001af2:	fab2 f282 	clz	r2, r2
 8001af6:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8001afa:	fa20 f202 	lsr.w	r2, r0, r2
 8001afe:	4815      	ldr	r0, [pc, #84]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x88>)
 8001b00:	5c84      	ldrb	r4, [r0, r2]
 8001b02:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8001b06:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001b0a:	fab0 f280 	clz	r2, r0
 8001b0e:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b12:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001b14:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b16:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8001b18:	bf4c      	ite	mi
 8001b1a:	4b0d      	ldrmi	r3, [pc, #52]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8001b1c:	4b0b      	ldrpl	r3, [pc, #44]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001b1e:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8001b20:	4363      	muls	r3, r4
 8001b22:	fbb3 f0f0 	udiv	r0, r3, r0
 8001b26:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8001b28:	6848      	ldr	r0, [r1, #4]
 8001b2a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8001b3a:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8001b3c:	1c43      	adds	r3, r0, #1
 8001b3e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b42:	4098      	lsls	r0, r3
 8001b44:	bd10      	pop	{r4, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	00f42400 	.word	0x00f42400
 8001b50:	007a1200 	.word	0x007a1200
 8001b54:	08003b7d 	.word	0x08003b7d

08001b58 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b58:	4b6a      	ldr	r3, [pc, #424]	; (8001d04 <HAL_RCC_ClockConfig+0x1ac>)
{
 8001b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b5e:	681a      	ldr	r2, [r3, #0]
{
 8001b60:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b62:	f002 0201 	and.w	r2, r2, #1
 8001b66:	428a      	cmp	r2, r1
{
 8001b68:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b6a:	d330      	bcc.n	8001bce <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6c:	6832      	ldr	r2, [r6, #0]
 8001b6e:	0794      	lsls	r4, r2, #30
 8001b70:	d440      	bmi.n	8001bf4 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b72:	07d0      	lsls	r0, r2, #31
 8001b74:	d446      	bmi.n	8001c04 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b76:	4b63      	ldr	r3, [pc, #396]	; (8001d04 <HAL_RCC_ClockConfig+0x1ac>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	f002 0201 	and.w	r2, r2, #1
 8001b7e:	4295      	cmp	r5, r2
 8001b80:	f0c0 80ae 	bcc.w	8001ce0 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	6832      	ldr	r2, [r6, #0]
 8001b86:	0751      	lsls	r1, r2, #29
 8001b88:	f100 80b3 	bmi.w	8001cf2 <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8c:	0713      	lsls	r3, r2, #28
 8001b8e:	d507      	bpl.n	8001ba0 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b90:	4a5d      	ldr	r2, [pc, #372]	; (8001d08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b92:	6931      	ldr	r1, [r6, #16]
 8001b94:	6893      	ldr	r3, [r2, #8]
 8001b96:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b9a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b9e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ba0:	f7ff ff94 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8001ba4:	4b58      	ldr	r3, [pc, #352]	; (8001d08 <HAL_RCC_ClockConfig+0x1b0>)
 8001ba6:	22f0      	movs	r2, #240	; 0xf0
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	fa92 f2a2 	rbit	r2, r2
 8001bae:	fab2 f282 	clz	r2, r2
 8001bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bb6:	40d3      	lsrs	r3, r2
 8001bb8:	4a54      	ldr	r2, [pc, #336]	; (8001d0c <HAL_RCC_ClockConfig+0x1b4>)
 8001bba:	5cd3      	ldrb	r3, [r2, r3]
 8001bbc:	40d8      	lsrs	r0, r3
 8001bbe:	4b54      	ldr	r3, [pc, #336]	; (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7fe fae2 	bl	800018c <HAL_InitTick>
  return HAL_OK;
 8001bc8:	2000      	movs	r0, #0
}
 8001bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	2901      	cmp	r1, #1
 8001bd0:	bf02      	ittt	eq
 8001bd2:	681a      	ldreq	r2, [r3, #0]
 8001bd4:	f042 0204 	orreq.w	r2, r2, #4
 8001bd8:	601a      	streq	r2, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	f022 0201 	bic.w	r2, r2, #1
 8001be0:	430a      	orrs	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	4299      	cmp	r1, r3
 8001bec:	d0be      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001bee:	2001      	movs	r0, #1
 8001bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf4:	4944      	ldr	r1, [pc, #272]	; (8001d08 <HAL_RCC_ClockConfig+0x1b0>)
 8001bf6:	68b0      	ldr	r0, [r6, #8]
 8001bf8:	688b      	ldr	r3, [r1, #8]
 8001bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bfe:	4303      	orrs	r3, r0
 8001c00:	608b      	str	r3, [r1, #8]
 8001c02:	e7b6      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c04:	6872      	ldr	r2, [r6, #4]
 8001c06:	4940      	ldr	r1, [pc, #256]	; (8001d08 <HAL_RCC_ClockConfig+0x1b0>)
 8001c08:	2a02      	cmp	r2, #2
 8001c0a:	d10f      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xd4>
 8001c0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c10:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001c14:	6808      	ldr	r0, [r1, #0]
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	2101      	movs	r1, #1
 8001c20:	f003 031f 	and.w	r3, r3, #31
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	4203      	tst	r3, r0
 8001c2a:	e013      	b.n	8001c54 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2c:	2a03      	cmp	r2, #3
 8001c2e:	d102      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xde>
 8001c30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c34:	e7ec      	b.n	8001c10 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c36:	2a01      	cmp	r2, #1
 8001c38:	d129      	bne.n	8001c8e <HAL_RCC_ClockConfig+0x136>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c40:	6809      	ldr	r1, [r1, #0]
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001c54:	d0cb      	beq.n	8001bee <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c56:	4c2c      	ldr	r4, [pc, #176]	; (8001d08 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c58:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5c:	68a3      	ldr	r3, [r4, #8]
 8001c5e:	f023 0303 	bic.w	r3, r3, #3
 8001c62:	431a      	orrs	r2, r3
 8001c64:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001c66:	f7fe fab9 	bl	80001dc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6a:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001c6c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d110      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c72:	68a3      	ldr	r3, [r4, #8]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	f43f af7c 	beq.w	8001b76 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7e:	f7fe faad 	bl	80001dc <HAL_GetTick>
 8001c82:	1bc0      	subs	r0, r0, r7
 8001c84:	4540      	cmp	r0, r8
 8001c86:	d9f4      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8001c88:	2003      	movs	r0, #3
 8001c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c92:	e7bd      	b.n	8001c10 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d10b      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c98:	68a3      	ldr	r3, [r4, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b0c      	cmp	r3, #12
 8001ca0:	f43f af69 	beq.w	8001b76 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca4:	f7fe fa9a 	bl	80001dc <HAL_GetTick>
 8001ca8:	1bc0      	subs	r0, r0, r7
 8001caa:	4540      	cmp	r0, r8
 8001cac:	d9f4      	bls.n	8001c98 <HAL_RCC_ClockConfig+0x140>
 8001cae:	e7eb      	b.n	8001c88 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d110      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb4:	68a3      	ldr	r3, [r4, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	f43f af5b 	beq.w	8001b76 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc0:	f7fe fa8c 	bl	80001dc <HAL_GetTick>
 8001cc4:	1bc0      	subs	r0, r0, r7
 8001cc6:	4540      	cmp	r0, r8
 8001cc8:	d9f4      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0x15c>
 8001cca:	e7dd      	b.n	8001c88 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ccc:	f7fe fa86 	bl	80001dc <HAL_GetTick>
 8001cd0:	1bc0      	subs	r0, r0, r7
 8001cd2:	4540      	cmp	r0, r8
 8001cd4:	d8d8      	bhi.n	8001c88 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cd6:	68a3      	ldr	r3, [r4, #8]
 8001cd8:	f013 0f0c 	tst.w	r3, #12
 8001cdc:	d1f6      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x174>
 8001cde:	e74a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	07da      	lsls	r2, r3, #31
 8001cec:	f53f af7f 	bmi.w	8001bee <HAL_RCC_ClockConfig+0x96>
 8001cf0:	e748      	b.n	8001b84 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf2:	4905      	ldr	r1, [pc, #20]	; (8001d08 <HAL_RCC_ClockConfig+0x1b0>)
 8001cf4:	68f0      	ldr	r0, [r6, #12]
 8001cf6:	688b      	ldr	r3, [r1, #8]
 8001cf8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cfc:	4303      	orrs	r3, r0
 8001cfe:	608b      	str	r3, [r1, #8]
 8001d00:	e744      	b.n	8001b8c <HAL_RCC_ClockConfig+0x34>
 8001d02:	bf00      	nop
 8001d04:	40023c00 	.word	0x40023c00
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	08003b65 	.word	0x08003b65
 8001d10:	200000c0 	.word	0x200000c0

08001d14 <HAL_RCC_GetHCLKFreq>:
}
 8001d14:	4b01      	ldr	r3, [pc, #4]	; (8001d1c <HAL_RCC_GetHCLKFreq+0x8>)
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	200000c0 	.word	0x200000c0

08001d20 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	fa92 f2a2 	rbit	r2, r2
 8001d2c:	fab2 f282 	clz	r2, r2
 8001d30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d34:	40d3      	lsrs	r3, r2
 8001d36:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d38:	5cd3      	ldrb	r3, [r2, r3]
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001d3c:	6810      	ldr	r0, [r2, #0]
}    
 8001d3e:	40d8      	lsrs	r0, r3
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800
 8001d48:	08003b75 	.word	0x08003b75
 8001d4c:	200000c0 	.word	0x200000c0

08001d50 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d52:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	fa92 f2a2 	rbit	r2, r2
 8001d5c:	fab2 f282 	clz	r2, r2
 8001d60:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001d64:	40d3      	lsrs	r3, r2
 8001d66:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d68:	5cd3      	ldrb	r3, [r2, r3]
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001d6c:	6810      	ldr	r0, [r2, #0]
} 
 8001d6e:	40d8      	lsrs	r0, r3
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	08003b75 	.word	0x08003b75
 8001d7c:	200000c0 	.word	0x200000c0

08001d80 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8001d84:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d86:	d006      	beq.n	8001d96 <TIM_Base_SetConfig+0x16>
 8001d88:	4a16      	ldr	r2, [pc, #88]	; (8001de4 <TIM_Base_SetConfig+0x64>)
 8001d8a:	4290      	cmp	r0, r2
 8001d8c:	d003      	beq.n	8001d96 <TIM_Base_SetConfig+0x16>
 8001d8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d92:	4290      	cmp	r0, r2
 8001d94:	d10e      	bne.n	8001db4 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001d96:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 8001da0:	ea43 0302 	orr.w	r3, r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001da4:	d011      	beq.n	8001dca <TIM_Base_SetConfig+0x4a>
 8001da6:	4a0f      	ldr	r2, [pc, #60]	; (8001de4 <TIM_Base_SetConfig+0x64>)
 8001da8:	4290      	cmp	r0, r2
 8001daa:	d00e      	beq.n	8001dca <TIM_Base_SetConfig+0x4a>
 8001dac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db0:	4290      	cmp	r0, r2
 8001db2:	d00a      	beq.n	8001dca <TIM_Base_SetConfig+0x4a>
 8001db4:	4a0c      	ldr	r2, [pc, #48]	; (8001de8 <TIM_Base_SetConfig+0x68>)
 8001db6:	4290      	cmp	r0, r2
 8001db8:	d007      	beq.n	8001dca <TIM_Base_SetConfig+0x4a>
 8001dba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dbe:	4290      	cmp	r0, r2
 8001dc0:	d003      	beq.n	8001dca <TIM_Base_SetConfig+0x4a>
 8001dc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dc6:	4290      	cmp	r0, r2
 8001dc8:	d103      	bne.n	8001dd2 <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dca:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dd0:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001dd2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dd4:	688b      	ldr	r3, [r1, #8]
 8001dd6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001dd8:	680b      	ldr	r3, [r1, #0]
 8001dda:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler */
  TIMx->EGR = TIM_EGR_UG;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	6143      	str	r3, [r0, #20]
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40000400 	.word	0x40000400
 8001de8:	40010800 	.word	0x40010800

08001dec <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dec:	6a03      	ldr	r3, [r0, #32]
{
 8001dee:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001df6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001df8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001dfa:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dfc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001dfe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e02:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e04:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001e06:	f023 0302 	bic.w	r3, r3, #2

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e0a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e0c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e0e:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8001e10:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8001e12:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e14:	6203      	str	r3, [r0, #32]
 8001e16:	bd30      	pop	{r4, r5, pc}

08001e18 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e18:	6a03      	ldr	r3, [r0, #32]
{
 8001e1a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e1c:	f023 0310 	bic.w	r3, r3, #16
 8001e20:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e22:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e24:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e26:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001e28:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e2a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001e2e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001e32:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001e34:	f023 0320 	bic.w	r3, r3, #32

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e38:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e3a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e3c:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001e3e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCR2 = OC_Config->Pulse;
 8001e42:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e44:	6203      	str	r3, [r0, #32]
 8001e46:	bd30      	pop	{r4, r5, pc}

08001e48 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001e48:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001e4a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001e4c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001e4e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001e50:	ea23 0304 	bic.w	r3, r3, r4
 8001e54:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001e56:	6a03      	ldr	r3, [r0, #32]
 8001e58:	408a      	lsls	r2, r1
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	6202      	str	r2, [r0, #32]
 8001e5e:	bd10      	pop	{r4, pc}

08001e60 <HAL_TIM_Base_Init>:
{
 8001e60:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001e62:	4604      	mov	r4, r0
 8001e64:	b1a0      	cbz	r0, 8001e90 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e66:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001e6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e6e:	b91b      	cbnz	r3, 8001e78 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e70:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_Base_MspInit(htim);
 8001e74:	f001 f984 	bl	8003180 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001e78:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e7a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001e7c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e80:	1d21      	adds	r1, r4, #4
 8001e82:	f7ff ff7d 	bl	8001d80 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001e86:	2301      	movs	r3, #1
  return HAL_OK;
 8001e88:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001e8a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001e8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e90:	2001      	movs	r0, #1
}
 8001e92:	bd10      	pop	{r4, pc}

08001e94 <HAL_TIM_PWM_MspInit>:
 8001e94:	4770      	bx	lr

08001e96 <HAL_TIM_PWM_Init>:
{
 8001e96:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001e98:	4604      	mov	r4, r0
 8001e9a:	b1a0      	cbz	r0, 8001ec6 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e9c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001ea0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ea4:	b91b      	cbnz	r3, 8001eae <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001ea6:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_PWM_MspInit(htim);
 8001eaa:	f7ff fff3 	bl	8001e94 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001eae:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb0:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001eb2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb6:	1d21      	adds	r1, r4, #4
 8001eb8:	f7ff ff62 	bl	8001d80 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001ebc:	2301      	movs	r3, #1
  return HAL_OK;
 8001ebe:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001ec0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001ec4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ec6:	2001      	movs	r0, #1
}
 8001ec8:	bd10      	pop	{r4, pc}

08001eca <HAL_TIM_IC_Start>:
{
 8001eca:	b510      	push	{r4, lr}
 8001ecc:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ece:	2201      	movs	r2, #1
 8001ed0:	6800      	ldr	r0, [r0, #0]
 8001ed2:	f7ff ffb9 	bl	8001e48 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8001ed6:	6822      	ldr	r2, [r4, #0]
}
 8001ed8:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001eda:	6813      	ldr	r3, [r2, #0]
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6013      	str	r3, [r2, #0]
}
 8001ee2:	bd10      	pop	{r4, pc}

08001ee4 <HAL_TIM_PWM_Start>:
 8001ee4:	f7ff bff1 	b.w	8001eca <HAL_TIM_IC_Start>

08001ee8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8001ee8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8001eec:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001eee:	2b01      	cmp	r3, #1
{
 8001ef0:	4605      	mov	r5, r0
 8001ef2:	460c      	mov	r4, r1
 8001ef4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001ef8:	d025      	beq.n	8001f46 <HAL_TIM_PWM_ConfigChannel+0x5e>
 8001efa:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001efc:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
  __HAL_LOCK(htim);
 8001f00:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  switch (Channel)
 8001f04:	2a0c      	cmp	r2, #12
 8001f06:	d818      	bhi.n	8001f3a <HAL_TIM_PWM_ConfigChannel+0x52>
 8001f08:	e8df f002 	tbb	[pc, r2]
 8001f0c:	17171707 	.word	0x17171707
 8001f10:	1717171e 	.word	0x1717171e
 8001f14:	1717172f 	.word	0x1717172f
 8001f18:	52          	.byte	0x52
 8001f19:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f1a:	6828      	ldr	r0, [r5, #0]
 8001f1c:	f7ff ff66 	bl	8001dec <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f20:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f22:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	f042 0208 	orr.w	r2, r2, #8
 8001f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	f022 0204 	bic.w	r2, r2, #4
 8001f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f34:	699a      	ldr	r2, [r3, #24]
 8001f36:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001f38:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001f3a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001f3c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001f3e:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  __HAL_UNLOCK(htim);
 8001f42:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
}
 8001f46:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f48:	6828      	ldr	r0, [r5, #0]
 8001f4a:	f7ff ff65 	bl	8001e18 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f4e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001f50:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f58:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f5a:	699a      	ldr	r2, [r3, #24]
 8001f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f60:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f68:	e7e6      	b.n	8001f38 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f6a:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= OC_Config->OCMode;
 8001f6c:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f6e:	6a1a      	ldr	r2, [r3, #32]
 8001f70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f74:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8001f76:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001f78:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8001f7a:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8001f7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f80:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f84:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001f86:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8001f88:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001f8a:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001f8c:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001f8e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 8001f92:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8001f94:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f96:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f98:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f9a:	f042 0208 	orr.w	r2, r2, #8
 8001f9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fa0:	69da      	ldr	r2, [r3, #28]
 8001fa2:	f022 0204 	bic.w	r2, r2, #4
 8001fa6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001fac:	61da      	str	r2, [r3, #28]
    break;
 8001fae:	e7c4      	b.n	8001f3a <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fb0:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001fb2:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fb4:	6a1a      	ldr	r2, [r3, #32]
 8001fb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fba:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8001fbc:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001fbe:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8001fc0:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8001fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fc6:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001fca:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001fce:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8001fd0:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001fd2:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001fd4:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001fd6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 8001fda:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8001fdc:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fde:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001fe0:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fe6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001ff0:	69da      	ldr	r2, [r3, #28]
 8001ff2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ff6:	e7d9      	b.n	8001fac <HAL_TIM_PWM_ConfigChannel+0xc4>

08001ff8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001ff8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8001ffc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	f04f 0302 	mov.w	r3, #2
 8002004:	d01c      	beq.n	8002040 <HAL_TIM_ConfigClockSource+0x48>
 8002006:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002008:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  tmpsmcr = htim->Instance->SMCR;
 800200c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800200e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  tmpsmcr = htim->Instance->SMCR;
 8002012:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002014:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002018:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800201c:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800201e:	680a      	ldr	r2, [r1, #0]
 8002020:	2a40      	cmp	r2, #64	; 0x40
 8002022:	d079      	beq.n	8002118 <HAL_TIM_ConfigClockSource+0x120>
 8002024:	d819      	bhi.n	800205a <HAL_TIM_ConfigClockSource+0x62>
 8002026:	2a10      	cmp	r2, #16
 8002028:	f000 8093 	beq.w	8002152 <HAL_TIM_ConfigClockSource+0x15a>
 800202c:	d80a      	bhi.n	8002044 <HAL_TIM_ConfigClockSource+0x4c>
 800202e:	2a00      	cmp	r2, #0
 8002030:	f000 8089 	beq.w	8002146 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8002034:	2301      	movs	r3, #1
 8002036:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_UNLOCK(htim);
 800203a:	2300      	movs	r3, #0
 800203c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(htim);
 8002040:	4618      	mov	r0, r3
}
 8002042:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002044:	2a20      	cmp	r2, #32
 8002046:	f000 808a 	beq.w	800215e <HAL_TIM_ConfigClockSource+0x166>
 800204a:	2a30      	cmp	r2, #48	; 0x30
 800204c:	d1f2      	bne.n	8002034 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 800204e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002050:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002054:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002058:	e036      	b.n	80020c8 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800205a:	2a70      	cmp	r2, #112	; 0x70
 800205c:	d036      	beq.n	80020cc <HAL_TIM_ConfigClockSource+0xd4>
 800205e:	d81b      	bhi.n	8002098 <HAL_TIM_ConfigClockSource+0xa0>
 8002060:	2a50      	cmp	r2, #80	; 0x50
 8002062:	d042      	beq.n	80020ea <HAL_TIM_ConfigClockSource+0xf2>
 8002064:	2a60      	cmp	r2, #96	; 0x60
 8002066:	d1e5      	bne.n	8002034 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002068:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800206a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800206c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002070:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002072:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002074:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002076:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002078:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800207c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8002080:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002084:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002088:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800208a:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800208c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800208e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002092:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002096:	e017      	b.n	80020c8 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002098:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800209c:	d011      	beq.n	80020c2 <HAL_TIM_ConfigClockSource+0xca>
 800209e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80020a2:	d1c7      	bne.n	8002034 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020a4:	688a      	ldr	r2, [r1, #8]
 80020a6:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80020a8:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020aa:	68c9      	ldr	r1, [r1, #12]
 80020ac:	432a      	orrs	r2, r5
  tmpsmcr &= (uint32_t)(~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 80020ae:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020b6:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80020b8:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020c0:	e002      	b.n	80020c8 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	e7b3      	b.n	8002034 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020cc:	688a      	ldr	r2, [r1, #8]
 80020ce:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80020d0:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020d2:	68c9      	ldr	r1, [r1, #12]
 80020d4:	432a      	orrs	r2, r5
  tmpsmcr &= (uint32_t)(~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 80020d6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020de:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80020e0:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80020e2:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020e4:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80020e8:	e7ee      	b.n	80020c8 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ea:	684c      	ldr	r4, [r1, #4]
 80020ec:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80020ee:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020f0:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020f2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020f6:	f025 0501 	bic.w	r5, r5, #1
 80020fa:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020fc:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80020fe:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002100:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002104:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800210a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800210c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800210e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002112:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002116:	e7d7      	b.n	80020c8 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002118:	684c      	ldr	r4, [r1, #4]
 800211a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800211c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800211e:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002120:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002124:	f025 0501 	bic.w	r5, r5, #1
 8002128:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800212a:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800212c:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800212e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002132:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002138:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800213a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800213c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002140:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002144:	e7c0      	b.n	80020c8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002146:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002148:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800214c:	f042 0207 	orr.w	r2, r2, #7
 8002150:	e7ba      	b.n	80020c8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002152:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002154:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002158:	f042 0217 	orr.w	r2, r2, #23
 800215c:	e7b4      	b.n	80020c8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800215e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002160:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002164:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002168:	e7ae      	b.n	80020c8 <HAL_TIM_ConfigClockSource+0xd0>

0800216a <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800216a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 800216e:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002170:	2b01      	cmp	r3, #1
 8002172:	f04f 0302 	mov.w	r3, #2
 8002176:	d018      	beq.n	80021aa <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800217c:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800217e:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002180:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002182:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002184:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002188:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	4322      	orrs	r2, r4
 800218e:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002196:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	430a      	orrs	r2, r1
 800219c:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800219e:	2301      	movs	r3, #1
 80021a0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  __HAL_UNLOCK(htim);
 80021a4:	2300      	movs	r3, #0
 80021a6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(htim);
 80021aa:	4618      	mov	r0, r3

  return HAL_OK;
}
 80021ac:	bd10      	pop	{r4, pc}
	...

080021b0 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021b4:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021b6:	6805      	ldr	r5, [r0, #0]
 80021b8:	68c2      	ldr	r2, [r0, #12]
 80021ba:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021bc:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021c2:	4313      	orrs	r3, r2
 80021c4:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021c6:	6883      	ldr	r3, [r0, #8]
 80021c8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 80021ca:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021cc:	4303      	orrs	r3, r0
 80021ce:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80021d2:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021d6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 80021d8:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021dc:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80021de:	4313      	orrs	r3, r2
 80021e0:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021e2:	696b      	ldr	r3, [r5, #20]
 80021e4:	f8d9 2018 	ldr.w	r2, [r9, #24]
 80021e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ec:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021ee:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021f2:	616b      	str	r3, [r5, #20]
 80021f4:	4b7e      	ldr	r3, [pc, #504]	; (80023f0 <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021f6:	d17f      	bne.n	80022f8 <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 80021f8:	429d      	cmp	r5, r3
 80021fa:	f04f 0419 	mov.w	r4, #25
 80021fe:	d147      	bne.n	8002290 <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002200:	f7ff fda6 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002204:	fb04 f300 	mul.w	r3, r4, r0
 8002208:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800220c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002210:	007f      	lsls	r7, r7, #1
 8002212:	fbb3 f3f7 	udiv	r3, r3, r7
 8002216:	fbb3 f3f8 	udiv	r3, r3, r8
 800221a:	011f      	lsls	r7, r3, #4
 800221c:	f7ff fd98 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002220:	4360      	muls	r0, r4
 8002222:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fbb0 f6f3 	udiv	r6, r0, r3
 800222c:	f7ff fd90 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002230:	4360      	muls	r0, r4
 8002232:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fbb0 f3f3 	udiv	r3, r0, r3
 800223c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002240:	fb08 6313 	mls	r3, r8, r3, r6
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	3332      	adds	r3, #50	; 0x32
 8002248:	fbb3 f3f8 	udiv	r3, r3, r8
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8002252:	f7ff fd7d 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002256:	4360      	muls	r0, r4
 8002258:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800225c:	0052      	lsls	r2, r2, #1
 800225e:	fbb0 faf2 	udiv	sl, r0, r2
 8002262:	f7ff fd75 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002266:	4360      	muls	r0, r4
 8002268:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002272:	fbb3 f3f8 	udiv	r3, r3, r8
 8002276:	fb08 a313 	mls	r3, r8, r3, sl
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	3332      	adds	r3, #50	; 0x32
 800227e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002288:	4433      	add	r3, r6
 800228a:	60ab      	str	r3, [r5, #8]
 800228c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002290:	f7ff fd46 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 8002294:	fb04 f300 	mul.w	r3, r4, r0
 8002298:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800229c:	f04f 0864 	mov.w	r8, #100	; 0x64
 80022a0:	007f      	lsls	r7, r7, #1
 80022a2:	fbb3 f3f7 	udiv	r3, r3, r7
 80022a6:	fbb3 f3f8 	udiv	r3, r3, r8
 80022aa:	011f      	lsls	r7, r3, #4
 80022ac:	f7ff fd38 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 80022b0:	4360      	muls	r0, r4
 80022b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fbb0 f6f3 	udiv	r6, r0, r3
 80022bc:	f7ff fd30 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 80022c0:	4360      	muls	r0, r4
 80022c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022cc:	fbb3 f3f8 	udiv	r3, r3, r8
 80022d0:	fb08 6313 	mls	r3, r8, r3, r6
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	3332      	adds	r3, #50	; 0x32
 80022d8:	fbb3 f3f8 	udiv	r3, r3, r8
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 80022e2:	f7ff fd1d 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 80022e6:	4360      	muls	r0, r4
 80022e8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80022ec:	0052      	lsls	r2, r2, #1
 80022ee:	fbb0 faf2 	udiv	sl, r0, r2
 80022f2:	f7ff fd15 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 80022f6:	e7b6      	b.n	8002266 <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 80022f8:	429d      	cmp	r5, r3
 80022fa:	f04f 0419 	mov.w	r4, #25
 80022fe:	d143      	bne.n	8002388 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002300:	f7ff fd26 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002304:	fb04 f300 	mul.w	r3, r4, r0
 8002308:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800230c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002310:	00b6      	lsls	r6, r6, #2
 8002312:	fbb3 f3f6 	udiv	r3, r3, r6
 8002316:	fbb3 f3f8 	udiv	r3, r3, r8
 800231a:	011e      	lsls	r6, r3, #4
 800231c:	f7ff fd18 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002320:	4360      	muls	r0, r4
 8002322:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	fbb0 f7f3 	udiv	r7, r0, r3
 800232c:	f7ff fd10 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002330:	4360      	muls	r0, r4
 8002332:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	fbb0 f3f3 	udiv	r3, r0, r3
 800233c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002340:	fb08 7313 	mls	r3, r8, r3, r7
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	3332      	adds	r3, #50	; 0x32
 8002348:	fbb3 f3f8 	udiv	r3, r3, r8
 800234c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002350:	f7ff fcfe 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002354:	4360      	muls	r0, r4
 8002356:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	fbb0 faf2 	udiv	sl, r0, r2
 8002360:	f7ff fcf6 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002364:	4360      	muls	r0, r4
 8002366:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002370:	fbb3 f3f8 	udiv	r3, r3, r8
 8002374:	fb08 a313 	mls	r3, r8, r3, sl
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	3332      	adds	r3, #50	; 0x32
 800237c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	433b      	orrs	r3, r7
 8002386:	e77f      	b.n	8002288 <UART_SetConfig+0xd8>
 8002388:	f7ff fcca 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 800238c:	fb04 f300 	mul.w	r3, r4, r0
 8002390:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002394:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002398:	00b6      	lsls	r6, r6, #2
 800239a:	fbb3 f3f6 	udiv	r3, r3, r6
 800239e:	fbb3 f3f8 	udiv	r3, r3, r8
 80023a2:	011e      	lsls	r6, r3, #4
 80023a4:	f7ff fcbc 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 80023a8:	4360      	muls	r0, r4
 80023aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	fbb0 f7f3 	udiv	r7, r0, r3
 80023b4:	f7ff fcb4 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 80023b8:	4360      	muls	r0, r4
 80023ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c4:	fbb3 f3f8 	udiv	r3, r3, r8
 80023c8:	fb08 7313 	mls	r3, r8, r3, r7
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	3332      	adds	r3, #50	; 0x32
 80023d0:	fbb3 f3f8 	udiv	r3, r3, r8
 80023d4:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80023d8:	f7ff fca2 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 80023dc:	4360      	muls	r0, r4
 80023de:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80023e2:	0092      	lsls	r2, r2, #2
 80023e4:	fbb0 faf2 	udiv	sl, r0, r2
 80023e8:	f7ff fc9a 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 80023ec:	e7ba      	b.n	8002364 <UART_SetConfig+0x1b4>
 80023ee:	bf00      	nop
 80023f0:	40013800 	.word	0x40013800

080023f4 <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 80023f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f6:	4604      	mov	r4, r0
 80023f8:	460e      	mov	r6, r1
 80023fa:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 80023fc:	f7fd feee 	bl	80001dc <HAL_GetTick>
 8002400:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8002402:	6822      	ldr	r2, [r4, #0]
 8002404:	6813      	ldr	r3, [r2, #0]
 8002406:	ea36 0303 	bics.w	r3, r6, r3
 800240a:	d101      	bne.n	8002410 <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 800240c:	2000      	movs	r0, #0
}
 800240e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 8002410:	1c6b      	adds	r3, r5, #1
 8002412:	d0f7      	beq.n	8002404 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002414:	b9c5      	cbnz	r5, 8002448 <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002416:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 8002418:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002420:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	f022 0220 	bic.w	r2, r2, #32
 8002428:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002430:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 800243a:	2301      	movs	r3, #1
 800243c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8002440:	2300      	movs	r3, #0
 8002442:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002448:	f7fd fec8 	bl	80001dc <HAL_GetTick>
 800244c:	1bc0      	subs	r0, r0, r7
 800244e:	4285      	cmp	r5, r0
 8002450:	d2d7      	bcs.n	8002402 <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 8002452:	e7e0      	b.n	8002416 <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

08002454 <HAL_UART_Init>:
{
 8002454:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002456:	4604      	mov	r4, r0
 8002458:	b330      	cbz	r0, 80024a8 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 800245a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800245e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002462:	b91b      	cbnz	r3, 800246c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002464:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002468:	f000 ffb2 	bl	80033d0 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 800246c:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 800246e:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8002470:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002474:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002476:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002478:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800247c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800247e:	f7ff fe97 	bl	80021b0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002482:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002484:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800248c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002494:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800249c:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 800249e:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80024a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80024a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80024a8:	2001      	movs	r0, #1
}
 80024aa:	bd10      	pop	{r4, pc}

080024ac <HAL_UART_Transmit>:
{
 80024ac:	b570      	push	{r4, r5, r6, lr}
 80024ae:	460d      	mov	r5, r1
  tmp_state = huart->State;
 80024b0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 80024b4:	4604      	mov	r4, r0
  tmp_state = huart->State;
 80024b6:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 80024b8:	2901      	cmp	r1, #1
{
 80024ba:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 80024bc:	d001      	beq.n	80024c2 <HAL_UART_Transmit+0x16>
 80024be:	2922      	cmp	r1, #34	; 0x22
 80024c0:	d14d      	bne.n	800255e <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 80024c2:	2d00      	cmp	r5, #0
 80024c4:	d049      	beq.n	800255a <HAL_UART_Transmit+0xae>
 80024c6:	2a00      	cmp	r2, #0
 80024c8:	d047      	beq.n	800255a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80024ca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d045      	beq.n	800255e <HAL_UART_Transmit+0xb2>
 80024d2:	2301      	movs	r3, #1
 80024d4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d8:	2300      	movs	r3, #0
 80024da:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80024dc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 80024e0:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80024e2:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80024e4:	bf0c      	ite	eq
 80024e6:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 80024e8:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 80024ea:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 80024ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 80024f0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80024f2:	b98a      	cbnz	r2, 8002518 <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80024f4:	4632      	mov	r2, r6
 80024f6:	2140      	movs	r1, #64	; 0x40
 80024f8:	4620      	mov	r0, r4
 80024fa:	f7ff ff7b 	bl	80023f4 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80024fe:	b9c0      	cbnz	r0, 8002532 <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002500:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002504:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002506:	bf0c      	ite	eq
 8002508:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 800250a:	2301      	movne	r3, #1
 800250c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002510:	2300      	movs	r3, #0
 8002512:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 8002516:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002518:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 800251a:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800251c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 8002520:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002522:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002526:	4632      	mov	r2, r6
 8002528:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800252a:	d10d      	bne.n	8002548 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800252c:	f7ff ff62 	bl	80023f4 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8002530:	b108      	cbz	r0, 8002536 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002532:	2003      	movs	r0, #3
 8002534:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002536:	882b      	ldrh	r3, [r5, #0]
 8002538:	6822      	ldr	r2, [r4, #0]
 800253a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800253e:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002540:	6923      	ldr	r3, [r4, #16]
 8002542:	b943      	cbnz	r3, 8002556 <HAL_UART_Transmit+0xaa>
          pData +=2;
 8002544:	3502      	adds	r5, #2
 8002546:	e7d3      	b.n	80024f0 <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002548:	f7ff ff54 	bl	80023f4 <UART_WaitOnFlagUntilTimeout.constprop.1>
 800254c:	2800      	cmp	r0, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002550:	6823      	ldr	r3, [r4, #0]
 8002552:	782a      	ldrb	r2, [r5, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	3501      	adds	r5, #1
 8002558:	e7ca      	b.n	80024f0 <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 800255a:	2001      	movs	r0, #1
 800255c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800255e:	2002      	movs	r0, #2
}
 8002560:	bd70      	pop	{r4, r5, r6, pc}

08002562 <HAL_UART_TxCpltCallback>:
 8002562:	4770      	bx	lr

08002564 <HAL_UART_RxCpltCallback>:
 8002564:	4770      	bx	lr

08002566 <HAL_UART_ErrorCallback>:
{
 8002566:	4770      	bx	lr

08002568 <HAL_UART_IRQHandler>:
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8002568:	6802      	ldr	r2, [r0, #0]
{
 800256a:	b513      	push	{r0, r1, r4, lr}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 800256c:	6811      	ldr	r1, [r2, #0]
{
 800256e:	4604      	mov	r4, r0
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002570:	07c9      	lsls	r1, r1, #31
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8002572:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002574:	d505      	bpl.n	8002582 <HAL_UART_IRQHandler+0x1a>
 8002576:	05db      	lsls	r3, r3, #23
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002578:	bf42      	ittt	mi
 800257a:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 800257c:	f043 0301 	orrmi.w	r3, r3, #1
 8002580:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8002582:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002584:	6953      	ldr	r3, [r2, #20]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002586:	0788      	lsls	r0, r1, #30
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002588:	f003 0301 	and.w	r3, r3, #1
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800258c:	d504      	bpl.n	8002598 <HAL_UART_IRQHandler+0x30>
 800258e:	b11b      	cbz	r3, 8002598 <HAL_UART_IRQHandler+0x30>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002590:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002592:	f041 0104 	orr.w	r1, r1, #4
 8002596:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8002598:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800259a:	0749      	lsls	r1, r1, #29
 800259c:	d504      	bpl.n	80025a8 <HAL_UART_IRQHandler+0x40>
 800259e:	b11b      	cbz	r3, 80025a8 <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80025a2:	f041 0102 	orr.w	r1, r1, #2
 80025a6:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80025a8:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80025aa:	0708      	lsls	r0, r1, #28
 80025ac:	d504      	bpl.n	80025b8 <HAL_UART_IRQHandler+0x50>
 80025ae:	b11b      	cbz	r3, 80025b8 <HAL_UART_IRQHandler+0x50>
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025b2:	f043 0308 	orr.w	r3, r3, #8
 80025b6:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80025b8:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 80025ba:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80025bc:	0689      	lsls	r1, r1, #26
 80025be:	d533      	bpl.n	8002628 <HAL_UART_IRQHandler+0xc0>
 80025c0:	0698      	lsls	r0, r3, #26
 80025c2:	d531      	bpl.n	8002628 <HAL_UART_IRQHandler+0xc0>
  tmp_state = huart->State; 
 80025c4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80025c8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80025cc:	2b22      	cmp	r3, #34	; 0x22
 80025ce:	d12b      	bne.n	8002628 <HAL_UART_IRQHandler+0xc0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025d0:	68a3      	ldr	r3, [r4, #8]
 80025d2:	6921      	ldr	r1, [r4, #16]
 80025d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025da:	d176      	bne.n	80026ca <HAL_UART_IRQHandler+0x162>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025dc:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80025de:	2900      	cmp	r1, #0
 80025e0:	d16f      	bne.n	80026c2 <HAL_UART_IRQHandler+0x15a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025e6:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1;
 80025ea:	62a3      	str	r3, [r4, #40]	; 0x28
    if(--huart->RxXferCount == 0)
 80025ec:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80025f4:	b9c3      	cbnz	r3, 8002628 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025f6:	6823      	ldr	r3, [r4, #0]
      HAL_UART_RxCpltCallback(huart);
 80025f8:	4620      	mov	r0, r4
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	f022 0220 	bic.w	r2, r2, #32
 8002600:	60da      	str	r2, [r3, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002602:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002606:	2a32      	cmp	r2, #50	; 0x32
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002608:	bf17      	itett	ne
 800260a:	68da      	ldrne	r2, [r3, #12]
        huart->State = HAL_UART_STATE_BUSY_TX;
 800260c:	2312      	moveq	r3, #18
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800260e:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8002612:	60da      	strne	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002614:	bf1f      	itttt	ne
 8002616:	695a      	ldrne	r2, [r3, #20]
 8002618:	f022 0201 	bicne.w	r2, r2, #1
 800261c:	615a      	strne	r2, [r3, #20]
        huart->State = HAL_UART_STATE_READY;
 800261e:	2301      	movne	r3, #1
 8002620:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 8002624:	f7ff ff9e 	bl	8002564 <HAL_UART_RxCpltCallback>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 800262c:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800262e:	0609      	lsls	r1, r1, #24
 8002630:	d522      	bpl.n	8002678 <HAL_UART_IRQHandler+0x110>
 8002632:	0610      	lsls	r0, r2, #24
 8002634:	d520      	bpl.n	8002678 <HAL_UART_IRQHandler+0x110>
  tmp_state = huart->State;
 8002636:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 800263a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800263e:	2a12      	cmp	r2, #18
 8002640:	d11a      	bne.n	8002678 <HAL_UART_IRQHandler+0x110>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002642:	68a2      	ldr	r2, [r4, #8]
 8002644:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002648:	6a22      	ldr	r2, [r4, #32]
 800264a:	d14c      	bne.n	80026e6 <HAL_UART_IRQHandler+0x17e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800264c:	8811      	ldrh	r1, [r2, #0]
 800264e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002652:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002654:	6921      	ldr	r1, [r4, #16]
 8002656:	2900      	cmp	r1, #0
 8002658:	d143      	bne.n	80026e2 <HAL_UART_IRQHandler+0x17a>
        huart->pTxBuffPtr += 2;
 800265a:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1;
 800265c:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0)
 800265e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002660:	3a01      	subs	r2, #1
 8002662:	b292      	uxth	r2, r2
 8002664:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002666:	b93a      	cbnz	r2, 8002678 <HAL_UART_IRQHandler+0x110>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800266e:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002676:	60da      	str	r2, [r3, #12]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8002678:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 800267a:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800267c:	0649      	lsls	r1, r1, #25
 800267e:	d510      	bpl.n	80026a2 <HAL_UART_IRQHandler+0x13a>
 8002680:	0652      	lsls	r2, r2, #25
 8002682:	d50e      	bpl.n	80026a2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002684:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002686:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800268c:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800268e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002692:	2b32      	cmp	r3, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 8002694:	bf0c      	ite	eq
 8002696:	2322      	moveq	r3, #34	; 0x22
    huart->State = HAL_UART_STATE_READY;
 8002698:	2301      	movne	r3, #1
 800269a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800269e:	f7ff ff60 	bl	8002562 <HAL_UART_TxCpltCallback>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026a4:	b15b      	cbz	r3, 80026be <HAL_UART_IRQHandler+0x156>
    __HAL_UART_CLEAR_PEFLAG(huart);
 80026a6:	6823      	ldr	r3, [r4, #0]
    HAL_UART_ErrorCallback(huart);
 80026a8:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_PEFLAG(huart);
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	9201      	str	r2, [sp, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	9b01      	ldr	r3, [sp, #4]
    huart->State = HAL_UART_STATE_READY;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 80026ba:	f7ff ff54 	bl	8002566 <HAL_UART_ErrorCallback>
}
 80026be:	b002      	add	sp, #8
 80026c0:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f823 2b01 	strh.w	r2, [r3], #1
 80026c8:	e78f      	b.n	80025ea <HAL_UART_IRQHandler+0x82>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80026ca:	b921      	cbnz	r1, 80026d6 <HAL_UART_IRQHandler+0x16e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026cc:	1c59      	adds	r1, r3, #1
 80026ce:	6852      	ldr	r2, [r2, #4]
 80026d0:	62a1      	str	r1, [r4, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e78a      	b.n	80025ec <HAL_UART_IRQHandler+0x84>
 80026d6:	6852      	ldr	r2, [r2, #4]
 80026d8:	1c59      	adds	r1, r3, #1
 80026da:	62a1      	str	r1, [r4, #40]	; 0x28
 80026dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026e0:	e7f7      	b.n	80026d2 <HAL_UART_IRQHandler+0x16a>
        huart->pTxBuffPtr += 1;
 80026e2:	3201      	adds	r2, #1
 80026e4:	e7ba      	b.n	800265c <HAL_UART_IRQHandler+0xf4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026e6:	1c51      	adds	r1, r2, #1
 80026e8:	6221      	str	r1, [r4, #32]
 80026ea:	7812      	ldrb	r2, [r2, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	e7b6      	b.n	800265e <HAL_UART_IRQHandler+0xf6>

080026f0 <USBD_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgDesc);
 80026f0:	2322      	movs	r3, #34	; 0x22
 80026f2:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgDesc;
}
 80026f4:	4800      	ldr	r0, [pc, #0]	; (80026f8 <USBD_HID_GetCfgDesc+0x8>)
 80026f6:	4770      	bx	lr
 80026f8:	20000084 	.word	0x20000084

080026fc <USBD_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80026fc:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8002700:	2000      	movs	r0, #0
 8002702:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 8002704:	4770      	bx	lr
	...

08002708 <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8002708:	230a      	movs	r3, #10
 800270a:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
}
 800270c:	4800      	ldr	r0, [pc, #0]	; (8002710 <USBD_HID_GetDeviceQualifierDesc+0x8>)
 800270e:	4770      	bx	lr
 8002710:	200000b4 	.word	0x200000b4

08002714 <USBD_HID_Setup>:
{
 8002714:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002716:	780c      	ldrb	r4, [r1, #0]
{
 8002718:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800271a:	f014 0460 	ands.w	r4, r4, #96	; 0x60
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 800271e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002722:	d023      	beq.n	800276c <USBD_HID_Setup+0x58>
 8002724:	2c20      	cmp	r4, #32
 8002726:	d10c      	bne.n	8002742 <USBD_HID_Setup+0x2e>
    switch (req->bRequest)
 8002728:	784a      	ldrb	r2, [r1, #1]
 800272a:	3a02      	subs	r2, #2
 800272c:	2a09      	cmp	r2, #9
 800272e:	d817      	bhi.n	8002760 <USBD_HID_Setup+0x4c>
 8002730:	e8df f002 	tbb	[pc, r2]
 8002734:	16160913 	.word	0x16160913
 8002738:	16161616 	.word	0x16161616
 800273c:	050f      	.short	0x050f
      hhid->Protocol = (uint8_t)(req->wValue);
 800273e:	788a      	ldrb	r2, [r1, #2]
 8002740:	601a      	str	r2, [r3, #0]
  return USBD_OK;
 8002742:	2400      	movs	r4, #0
 8002744:	e010      	b.n	8002768 <USBD_HID_Setup+0x54>
      USBD_CtlSendData (pdev, 
 8002746:	2201      	movs	r2, #1
 8002748:	4619      	mov	r1, r3
      USBD_CtlSendData (pdev, 
 800274a:	4628      	mov	r0, r5
 800274c:	f000 fb46 	bl	8002ddc <USBD_CtlSendData>
 8002750:	e7f7      	b.n	8002742 <USBD_HID_Setup+0x2e>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8002752:	884a      	ldrh	r2, [r1, #2]
 8002754:	0a12      	lsrs	r2, r2, #8
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	e7f3      	b.n	8002742 <USBD_HID_Setup+0x2e>
      USBD_CtlSendData (pdev, 
 800275a:	2201      	movs	r2, #1
 800275c:	1d19      	adds	r1, r3, #4
 800275e:	e7f4      	b.n	800274a <USBD_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 8002760:	4628      	mov	r0, r5
 8002762:	f000 fb14 	bl	8002d8e <USBD_CtlError>
      return USBD_FAIL; 
 8002766:	2402      	movs	r4, #2
}
 8002768:	4620      	mov	r0, r4
 800276a:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 800276c:	784a      	ldrb	r2, [r1, #1]
 800276e:	2a0a      	cmp	r2, #10
 8002770:	d018      	beq.n	80027a4 <USBD_HID_Setup+0x90>
 8002772:	2a0b      	cmp	r2, #11
 8002774:	d01c      	beq.n	80027b0 <USBD_HID_Setup+0x9c>
 8002776:	2a06      	cmp	r2, #6
 8002778:	d1f6      	bne.n	8002768 <USBD_HID_Setup+0x54>
      if( req->wValue >> 8 == HID_REPORT_DESC)
 800277a:	884b      	ldrh	r3, [r1, #2]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	2b22      	cmp	r3, #34	; 0x22
 8002780:	d105      	bne.n	800278e <USBD_HID_Setup+0x7a>
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 8002782:	88ca      	ldrh	r2, [r1, #6]
        pbuf = HID_MOUSE_ReportDesc;
 8002784:	490c      	ldr	r1, [pc, #48]	; (80027b8 <USBD_HID_Setup+0xa4>)
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 8002786:	2a4a      	cmp	r2, #74	; 0x4a
 8002788:	bf28      	it	cs
 800278a:	224a      	movcs	r2, #74	; 0x4a
 800278c:	e7dd      	b.n	800274a <USBD_HID_Setup+0x36>
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800278e:	2b21      	cmp	r3, #33	; 0x21
 8002790:	d105      	bne.n	800279e <USBD_HID_Setup+0x8a>
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8002792:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_HID_Desc;   
 8002794:	4909      	ldr	r1, [pc, #36]	; (80027bc <USBD_HID_Setup+0xa8>)
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8002796:	2a09      	cmp	r2, #9
 8002798:	bf28      	it	cs
 800279a:	2209      	movcs	r2, #9
 800279c:	e7d5      	b.n	800274a <USBD_HID_Setup+0x36>
  uint8_t  *pbuf = NULL;
 800279e:	4621      	mov	r1, r4
  uint16_t len = 0;
 80027a0:	4622      	mov	r2, r4
 80027a2:	e7d2      	b.n	800274a <USBD_HID_Setup+0x36>
      USBD_CtlSendData (pdev,
 80027a4:	2201      	movs	r2, #1
 80027a6:	f103 0108 	add.w	r1, r3, #8
 80027aa:	f000 fb17 	bl	8002ddc <USBD_CtlSendData>
      break;
 80027ae:	e7db      	b.n	8002768 <USBD_HID_Setup+0x54>
      hhid->AltSetting = (uint8_t)(req->wValue);
 80027b0:	788a      	ldrb	r2, [r1, #2]
 80027b2:	609a      	str	r2, [r3, #8]
      break;
 80027b4:	e7d8      	b.n	8002768 <USBD_HID_Setup+0x54>
 80027b6:	bf00      	nop
 80027b8:	20000000 	.word	0x20000000
 80027bc:	200000a8 	.word	0x200000a8

080027c0 <USBD_HID_DeInit>:
{
 80027c0:	b510      	push	{r4, lr}
 80027c2:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80027c4:	2181      	movs	r1, #129	; 0x81
 80027c6:	f000 ff01 	bl	80035cc <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 80027ca:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80027ce:	b120      	cbz	r0, 80027da <USBD_HID_DeInit+0x1a>
    USBD_free(pdev->pClassData);
 80027d0:	f000 ff66 	bl	80036a0 <USBD_static_free>
    pdev->pClassData = NULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 80027da:	2000      	movs	r0, #0
 80027dc:	bd10      	pop	{r4, pc}

080027de <USBD_HID_Init>:
{
 80027de:	b510      	push	{r4, lr}
  USBD_LL_OpenEP(pdev,
 80027e0:	2304      	movs	r3, #4
 80027e2:	2203      	movs	r2, #3
 80027e4:	2181      	movs	r1, #129	; 0x81
{
 80027e6:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 80027e8:	f000 fee0 	bl	80035ac <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 80027ec:	2010      	movs	r0, #16
 80027ee:	f000 ff53 	bl	8003698 <USBD_static_malloc>
 80027f2:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 80027f6:	b118      	cbz	r0, 8002800 <USBD_HID_Init+0x22>
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	7303      	strb	r3, [r0, #12]
  uint8_t ret = 0;
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd10      	pop	{r4, pc}
    ret = 1; 
 8002800:	2001      	movs	r0, #1
}
 8002802:	bd10      	pop	{r4, pc}

08002804 <USBD_HID_SendReport>:
{
 8002804:	b510      	push	{r4, lr}
 8002806:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8002808:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800280c:	2a03      	cmp	r2, #3
 800280e:	d109      	bne.n	8002824 <USBD_HID_SendReport+0x20>
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8002810:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
    if(hhid->state == HID_IDLE)
 8002814:	7b22      	ldrb	r2, [r4, #12]
 8002816:	b92a      	cbnz	r2, 8002824 <USBD_HID_SendReport+0x20>
      hhid->state = HID_BUSY;
 8002818:	2201      	movs	r2, #1
 800281a:	7322      	strb	r2, [r4, #12]
      USBD_LL_Transmit (pdev, 
 800281c:	460a      	mov	r2, r1
 800281e:	2181      	movs	r1, #129	; 0x81
 8002820:	f000 ff1e 	bl	8003660 <USBD_LL_Transmit>
}
 8002824:	2000      	movs	r0, #0
 8002826:	bd10      	pop	{r4, pc}

08002828 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002828:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800282a:	b180      	cbz	r0, 800284e <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800282c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002830:	b113      	cbz	r3, 8002838 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002832:	2300      	movs	r3, #0
 8002834:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002838:	b109      	cbz	r1, 800283e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800283a:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800283e:	2301      	movs	r3, #1
  pdev->id = id;
 8002840:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002842:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002846:	f000 fe69 	bl	800351c <USBD_LL_Init>
  
  return USBD_OK; 
 800284a:	2000      	movs	r0, #0
 800284c:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800284e:	2002      	movs	r0, #2
}
 8002850:	bd08      	pop	{r3, pc}

08002852 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002852:	b119      	cbz	r1, 800285c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002854:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002858:	2000      	movs	r0, #0
 800285a:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800285c:	2002      	movs	r0, #2
  }
  
  return status;
}
 800285e:	4770      	bx	lr

08002860 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002860:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002862:	f000 fe95 	bl	8003590 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002866:	2000      	movs	r0, #0
 8002868:	bd08      	pop	{r3, pc}

0800286a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800286a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800286c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002870:	b90b      	cbnz	r3, 8002876 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002872:	2002      	movs	r0, #2
 8002874:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4798      	blx	r3
 800287a:	2800      	cmp	r0, #0
 800287c:	d1f9      	bne.n	8002872 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800287e:	bd08      	pop	{r3, pc}

08002880 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002880:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002882:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4798      	blx	r3
  return USBD_OK;
}
 800288a:	2000      	movs	r0, #0
 800288c:	bd08      	pop	{r3, pc}

0800288e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800288e:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002890:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8002894:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002896:	4628      	mov	r0, r5
 8002898:	f000 fa65 	bl	8002d66 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800289c:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800289e:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80028a2:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80028a6:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80028aa:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80028ae:	f001 031f 	and.w	r3, r1, #31
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d00e      	beq.n	80028d4 <USBD_LL_SetupStage+0x46>
 80028b6:	d307      	bcc.n	80028c8 <USBD_LL_SetupStage+0x3a>
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d010      	beq.n	80028de <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80028bc:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80028c0:	4620      	mov	r0, r4
 80028c2:	f000 fe91 	bl	80035e8 <USBD_LL_StallEP>
    break;
 80028c6:	e003      	b.n	80028d0 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80028c8:	4629      	mov	r1, r5
 80028ca:	4620      	mov	r0, r4
 80028cc:	f000 f8d6 	bl	8002a7c <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80028d0:	2000      	movs	r0, #0
 80028d2:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80028d4:	4629      	mov	r1, r5
 80028d6:	4620      	mov	r0, r4
 80028d8:	f000 f9ca 	bl	8002c70 <USBD_StdItfReq>
    break;
 80028dc:	e7f8      	b.n	80028d0 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80028de:	4629      	mov	r1, r5
 80028e0:	4620      	mov	r0, r4
 80028e2:	f000 f9dd 	bl	8002ca0 <USBD_StdEPReq>
    break;
 80028e6:	e7f3      	b.n	80028d0 <USBD_LL_SetupStage+0x42>

080028e8 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80028e8:	b538      	push	{r3, r4, r5, lr}
 80028ea:	4604      	mov	r4, r0
 80028ec:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80028ee:	bb11      	cbnz	r1, 8002936 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80028f0:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d10f      	bne.n	8002918 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80028f8:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80028fc:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002900:	4293      	cmp	r3, r2
 8002902:	d90b      	bls.n	800291c <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002904:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002906:	429a      	cmp	r2, r3
 8002908:	bf28      	it	cs
 800290a:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800290c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002910:	b292      	uxth	r2, r2
 8002912:	4629      	mov	r1, r5
 8002914:	f000 fa77 	bl	8002e06 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002918:	2000      	movs	r0, #0
 800291a:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800291c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	b123      	cbz	r3, 800292e <USBD_LL_DataOutStage+0x46>
 8002924:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002928:	2a03      	cmp	r2, #3
 800292a:	d100      	bne.n	800292e <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 800292c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800292e:	4620      	mov	r0, r4
 8002930:	f000 fa71 	bl	8002e16 <USBD_CtlSendStatus>
 8002934:	e7f0      	b.n	8002918 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8002936:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0eb      	beq.n	8002918 <USBD_LL_DataOutStage+0x30>
 8002940:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002944:	2a03      	cmp	r2, #3
 8002946:	d1e7      	bne.n	8002918 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8002948:	4798      	blx	r3
 800294a:	e7e5      	b.n	8002918 <USBD_LL_DataOutStage+0x30>

0800294c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800294c:	b570      	push	{r4, r5, r6, lr}
 800294e:	4613      	mov	r3, r2
 8002950:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002952:	460e      	mov	r6, r1
 8002954:	2900      	cmp	r1, #0
 8002956:	d13d      	bne.n	80029d4 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002958:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800295c:	2a02      	cmp	r2, #2
 800295e:	d10f      	bne.n	8002980 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002960:	69c5      	ldr	r5, [r0, #28]
 8002962:	6a02      	ldr	r2, [r0, #32]
 8002964:	4295      	cmp	r5, r2
 8002966:	d914      	bls.n	8002992 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002968:	1aaa      	subs	r2, r5, r2
 800296a:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800296c:	4619      	mov	r1, r3
 800296e:	b292      	uxth	r2, r2
 8002970:	f000 fa41 	bl	8002df6 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002974:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002976:	461a      	mov	r2, r3
 8002978:	4619      	mov	r1, r3
 800297a:	4620      	mov	r0, r4
 800297c:	f000 fe7e 	bl	800367c <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002980:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002984:	2b01      	cmp	r3, #1
 8002986:	d102      	bne.n	800298e <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800298e:	2000      	movs	r0, #0
 8002990:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002992:	6983      	ldr	r3, [r0, #24]
 8002994:	fbb3 f5f2 	udiv	r5, r3, r2
 8002998:	fb02 3515 	mls	r5, r2, r5, r3
 800299c:	b965      	cbnz	r5, 80029b8 <USBD_LL_DataInStage+0x6c>
 800299e:	429a      	cmp	r2, r3
 80029a0:	d80a      	bhi.n	80029b8 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80029a2:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d206      	bcs.n	80029b8 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80029aa:	462a      	mov	r2, r5
 80029ac:	f000 fa23 	bl	8002df6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80029b0:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80029b4:	462b      	mov	r3, r5
 80029b6:	e7de      	b.n	8002976 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80029b8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	b12b      	cbz	r3, 80029cc <USBD_LL_DataInStage+0x80>
 80029c0:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80029c4:	2a03      	cmp	r2, #3
 80029c6:	d101      	bne.n	80029cc <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80029c8:	4620      	mov	r0, r4
 80029ca:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80029cc:	4620      	mov	r0, r4
 80029ce:	f000 fa2d 	bl	8002e2c <USBD_CtlReceiveStatus>
 80029d2:	e7d5      	b.n	8002980 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80029d4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0d7      	beq.n	800298e <USBD_LL_DataInStage+0x42>
 80029de:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80029e2:	2a03      	cmp	r2, #3
 80029e4:	d1d3      	bne.n	800298e <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80029e6:	4798      	blx	r3
 80029e8:	e7d1      	b.n	800298e <USBD_LL_DataInStage+0x42>

080029ea <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80029ea:	2200      	movs	r2, #0
{
 80029ec:	b538      	push	{r3, r4, r5, lr}
 80029ee:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80029f0:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80029f2:	4611      	mov	r1, r2
 80029f4:	2340      	movs	r3, #64	; 0x40
 80029f6:	f000 fdd9 	bl	80035ac <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80029fa:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80029fc:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002a00:	2200      	movs	r2, #0
 8002a02:	2180      	movs	r1, #128	; 0x80
 8002a04:	4620      	mov	r0, r4
 8002a06:	f000 fdd1 	bl	80035ac <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002a10:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002a14:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002a16:	b12b      	cbz	r3, 8002a24 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002a18:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002a1c:	7921      	ldrb	r1, [r4, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4620      	mov	r0, r4
 8002a22:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002a24:	2000      	movs	r0, #0
 8002a26:	bd38      	pop	{r3, r4, r5, pc}

08002a28 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002a28:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	4770      	bx	lr

08002a2e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002a2e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002a32:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002a36:	2304      	movs	r3, #4
 8002a38:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	4770      	bx	lr

08002a40 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002a40:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002a44:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002a48:	2000      	movs	r0, #0
 8002a4a:	4770      	bx	lr

08002a4c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002a4c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002a4e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002a52:	2a03      	cmp	r2, #3
 8002a54:	d104      	bne.n	8002a60 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002a56:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	b103      	cbz	r3, 8002a60 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002a5e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002a60:	2000      	movs	r0, #0
 8002a62:	bd08      	pop	{r3, pc}

08002a64 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002a64:	b510      	push	{r4, lr}
 8002a66:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	f000 fdbd 	bl	80035e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002a6e:	4620      	mov	r0, r4
}
 8002a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002a74:	2100      	movs	r1, #0
 8002a76:	f000 bdb7 	b.w	80035e8 <USBD_LL_StallEP>
	...

08002a7c <USBD_StdDevReq>:
{
 8002a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8002a7e:	784b      	ldrb	r3, [r1, #1]
{
 8002a80:	4604      	mov	r4, r0
 8002a82:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002a84:	2b09      	cmp	r3, #9
 8002a86:	d879      	bhi.n	8002b7c <USBD_StdDevReq+0x100>
 8002a88:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002a8c:	00e500c9 	.word	0x00e500c9
 8002a90:	00d90078 	.word	0x00d90078
 8002a94:	006d0078 	.word	0x006d0078
 8002a98:	0078000a 	.word	0x0078000a
 8002a9c:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8002aa0:	884b      	ldrh	r3, [r1, #2]
 8002aa2:	0a1a      	lsrs	r2, r3, #8
 8002aa4:	3a01      	subs	r2, #1
 8002aa6:	2a06      	cmp	r2, #6
 8002aa8:	d868      	bhi.n	8002b7c <USBD_StdDevReq+0x100>
 8002aaa:	e8df f002 	tbb	[pc, r2]
 8002aae:	1c04      	.short	0x1c04
 8002ab0:	49676729 	.word	0x49676729
 8002ab4:	52          	.byte	0x52
 8002ab5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002ab6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002aba:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002abc:	f10d 0106 	add.w	r1, sp, #6
 8002ac0:	7c20      	ldrb	r0, [r4, #16]
 8002ac2:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002ac4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002ac8:	2a00      	cmp	r2, #0
 8002aca:	d067      	beq.n	8002b9c <USBD_StdDevReq+0x120>
 8002acc:	88eb      	ldrh	r3, [r5, #6]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d064      	beq.n	8002b9c <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	bf28      	it	cs
 8002ad6:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8002ad8:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 8002ada:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f000 f97c 	bl	8002ddc <USBD_CtlSendData>
 8002ae4:	e05a      	b.n	8002b9c <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002ae6:	7c02      	ldrb	r2, [r0, #16]
 8002ae8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002aec:	b932      	cbnz	r2, 8002afc <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002af0:	f10d 0006 	add.w	r0, sp, #6
 8002af4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002af6:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002af8:	7043      	strb	r3, [r0, #1]
 8002afa:	e7e3      	b.n	8002ac4 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	e7f7      	b.n	8002af0 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d83a      	bhi.n	8002b7c <USBD_StdDevReq+0x100>
 8002b06:	e8df f003 	tbb	[pc, r3]
 8002b0a:	0703      	.short	0x0703
 8002b0c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002b10:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	e7d1      	b.n	8002abc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002b18:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	e7cd      	b.n	8002abc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002b20:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	e7c9      	b.n	8002abc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002b28:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	e7c5      	b.n	8002abc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002b30:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	e7c1      	b.n	8002abc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002b38:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	e7bd      	b.n	8002abc <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002b40:	7c03      	ldrb	r3, [r0, #16]
 8002b42:	b9db      	cbnz	r3, 8002b7c <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002b44:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002b48:	f10d 0006 	add.w	r0, sp, #6
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4e:	4798      	blx	r3
 8002b50:	e7b8      	b.n	8002ac4 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002b52:	7c03      	ldrb	r3, [r0, #16]
 8002b54:	b993      	cbnz	r3, 8002b7c <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002b56:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002b5a:	f10d 0006 	add.w	r0, sp, #6
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002b62:	2307      	movs	r3, #7
 8002b64:	e7c8      	b.n	8002af8 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002b66:	888b      	ldrh	r3, [r1, #4]
 8002b68:	b943      	cbnz	r3, 8002b7c <USBD_StdDevReq+0x100>
 8002b6a:	88cb      	ldrh	r3, [r1, #6]
 8002b6c:	b933      	cbnz	r3, 8002b7c <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002b6e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002b72:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002b74:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002b76:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002b7a:	d103      	bne.n	8002b84 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f7ff ff71 	bl	8002a64 <USBD_CtlError.constprop.0>
    break;
 8002b82:	e00b      	b.n	8002b9c <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002b84:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002b88:	4629      	mov	r1, r5
 8002b8a:	f000 fd5b 	bl	8003644 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f000 f941 	bl	8002e16 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002b94:	b12d      	cbz	r5, 8002ba2 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002b96:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002b98:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	b003      	add	sp, #12
 8002ba0:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e7f8      	b.n	8002b98 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002ba6:	7889      	ldrb	r1, [r1, #2]
 8002ba8:	4d30      	ldr	r5, [pc, #192]	; (8002c6c <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002baa:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002bac:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002bae:	d8e5      	bhi.n	8002b7c <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8002bb0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d00c      	beq.n	8002bd2 <USBD_StdDevReq+0x156>
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d1df      	bne.n	8002b7c <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8002bbc:	b9b1      	cbnz	r1, 8002bec <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002bbe:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 8002bc0:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002bc2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 8002bc6:	f7ff fe5b 	bl	8002880 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8002bca:	4620      	mov	r0, r4
 8002bcc:	f000 f923 	bl	8002e16 <USBD_CtlSendStatus>
 8002bd0:	e7e4      	b.n	8002b9c <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8002bd2:	2900      	cmp	r1, #0
 8002bd4:	d0f9      	beq.n	8002bca <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8002bd6:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002bd8:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002bda:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002bdc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002be0:	4620      	mov	r0, r4
 8002be2:	f7ff fe42 	bl	800286a <USBD_SetClassConfig>
 8002be6:	2802      	cmp	r0, #2
 8002be8:	d1ef      	bne.n	8002bca <USBD_StdDevReq+0x14e>
 8002bea:	e7c7      	b.n	8002b7c <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002bec:	6841      	ldr	r1, [r0, #4]
 8002bee:	2901      	cmp	r1, #1
 8002bf0:	d0eb      	beq.n	8002bca <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002bf2:	b2c9      	uxtb	r1, r1
 8002bf4:	f7ff fe44 	bl	8002880 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002bf8:	7829      	ldrb	r1, [r5, #0]
 8002bfa:	6061      	str	r1, [r4, #4]
 8002bfc:	e7f0      	b.n	8002be0 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8002bfe:	88ca      	ldrh	r2, [r1, #6]
 8002c00:	2a01      	cmp	r2, #1
 8002c02:	d1bb      	bne.n	8002b7c <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8002c04:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d003      	beq.n	8002c14 <USBD_StdDevReq+0x198>
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d1b5      	bne.n	8002b7c <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8002c10:	1d01      	adds	r1, r0, #4
 8002c12:	e764      	b.n	8002ade <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8002c14:	4601      	mov	r1, r0
 8002c16:	2300      	movs	r3, #0
 8002c18:	f841 3f08 	str.w	r3, [r1, #8]!
 8002c1c:	e75f      	b.n	8002ade <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8002c1e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002c22:	3b02      	subs	r3, #2
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d8a9      	bhi.n	8002b7c <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002c28:	2301      	movs	r3, #1
 8002c2a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002c2c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002c30:	b10b      	cbz	r3, 8002c36 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002c32:	2303      	movs	r3, #3
 8002c34:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002c36:	2202      	movs	r2, #2
 8002c38:	f104 010c 	add.w	r1, r4, #12
 8002c3c:	e74f      	b.n	8002ade <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002c3e:	884b      	ldrh	r3, [r1, #2]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d1ab      	bne.n	8002b9c <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002c44:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002c48:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4620      	mov	r0, r4
 8002c52:	4798      	blx	r3
 8002c54:	e7b9      	b.n	8002bca <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8002c56:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002c5a:	3b02      	subs	r3, #2
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d88d      	bhi.n	8002b7c <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002c60:	884b      	ldrh	r3, [r1, #2]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d19a      	bne.n	8002b9c <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002c66:	2300      	movs	r3, #0
 8002c68:	e7ec      	b.n	8002c44 <USBD_StdDevReq+0x1c8>
 8002c6a:	bf00      	nop
 8002c6c:	200002e4 	.word	0x200002e4

08002c70 <USBD_StdItfReq>:
{
 8002c70:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002c72:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8002c76:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8002c78:	2b03      	cmp	r3, #3
{
 8002c7a:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002c7c:	d10d      	bne.n	8002c9a <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8002c7e:	790b      	ldrb	r3, [r1, #4]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d80a      	bhi.n	8002c9a <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002c84:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002c8c:	88eb      	ldrh	r3, [r5, #6]
 8002c8e:	b913      	cbnz	r3, 8002c96 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002c90:	4620      	mov	r0, r4
 8002c92:	f000 f8c0 	bl	8002e16 <USBD_CtlSendStatus>
}
 8002c96:	2000      	movs	r0, #0
 8002c98:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8002c9a:	f7ff fee3 	bl	8002a64 <USBD_CtlError.constprop.0>
    break;
 8002c9e:	e7fa      	b.n	8002c96 <USBD_StdItfReq+0x26>

08002ca0 <USBD_StdEPReq>:
{
 8002ca0:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002ca2:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002ca4:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8002ca6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002caa:	2a20      	cmp	r2, #32
{
 8002cac:	4604      	mov	r4, r0
 8002cae:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002cb0:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8002cb2:	d105      	bne.n	8002cc0 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002cb4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	4798      	blx	r3
}
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8002cc0:	784a      	ldrb	r2, [r1, #1]
 8002cc2:	2a01      	cmp	r2, #1
 8002cc4:	d01c      	beq.n	8002d00 <USBD_StdEPReq+0x60>
 8002cc6:	d32a      	bcc.n	8002d1e <USBD_StdEPReq+0x7e>
 8002cc8:	2a03      	cmp	r2, #3
 8002cca:	d1f7      	bne.n	8002cbc <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002ccc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002cd0:	2a02      	cmp	r2, #2
 8002cd2:	d040      	beq.n	8002d56 <USBD_StdEPReq+0xb6>
 8002cd4:	2a03      	cmp	r2, #3
 8002cd6:	d002      	beq.n	8002cde <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002cd8:	f7ff fec4 	bl	8002a64 <USBD_CtlError.constprop.0>
      break;
 8002cdc:	e7ee      	b.n	8002cbc <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002cde:	884a      	ldrh	r2, [r1, #2]
 8002ce0:	b922      	cbnz	r2, 8002cec <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002ce2:	065e      	lsls	r6, r3, #25
 8002ce4:	d002      	beq.n	8002cec <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f000 fc7e 	bl	80035e8 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002cec:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f000 f88c 	bl	8002e16 <USBD_CtlSendStatus>
 8002cfe:	e7dd      	b.n	8002cbc <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002d00:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002d04:	2a02      	cmp	r2, #2
 8002d06:	d026      	beq.n	8002d56 <USBD_StdEPReq+0xb6>
 8002d08:	2a03      	cmp	r2, #3
 8002d0a:	d1e5      	bne.n	8002cd8 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002d0c:	884a      	ldrh	r2, [r1, #2]
 8002d0e:	2a00      	cmp	r2, #0
 8002d10:	d1d4      	bne.n	8002cbc <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8002d12:	0659      	lsls	r1, r3, #25
 8002d14:	d0f0      	beq.n	8002cf8 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002d16:	4619      	mov	r1, r3
 8002d18:	f000 fc74 	bl	8003604 <USBD_LL_ClearStallEP>
 8002d1c:	e7e6      	b.n	8002cec <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8002d1e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002d22:	2a02      	cmp	r2, #2
 8002d24:	d017      	beq.n	8002d56 <USBD_StdEPReq+0xb6>
 8002d26:	2a03      	cmp	r2, #3
 8002d28:	d1d6      	bne.n	8002cd8 <USBD_StdEPReq+0x38>
 8002d2a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002d2e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002d32:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002d36:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002d38:	bf14      	ite	ne
 8002d3a:	3514      	addne	r5, #20
 8002d3c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002d40:	f000 fc6e 	bl	8003620 <USBD_LL_IsStallEP>
 8002d44:	b168      	cbz	r0, 8002d62 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8002d46:	2301      	movs	r3, #1
 8002d48:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f000 f844 	bl	8002ddc <USBD_CtlSendData>
      break;
 8002d54:	e7b2      	b.n	8002cbc <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8002d56:	065a      	lsls	r2, r3, #25
 8002d58:	d0b0      	beq.n	8002cbc <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	f000 fc44 	bl	80035e8 <USBD_LL_StallEP>
 8002d60:	e7ac      	b.n	8002cbc <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002d62:	6028      	str	r0, [r5, #0]
 8002d64:	e7f1      	b.n	8002d4a <USBD_StdEPReq+0xaa>

08002d66 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002d66:	780b      	ldrb	r3, [r1, #0]
 8002d68:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002d6a:	784b      	ldrb	r3, [r1, #1]
 8002d6c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002d6e:	78ca      	ldrb	r2, [r1, #3]
 8002d70:	788b      	ldrb	r3, [r1, #2]
 8002d72:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002d76:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002d78:	794a      	ldrb	r2, [r1, #5]
 8002d7a:	790b      	ldrb	r3, [r1, #4]
 8002d7c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002d80:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002d82:	79ca      	ldrb	r2, [r1, #7]
 8002d84:	798b      	ldrb	r3, [r1, #6]
 8002d86:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002d8a:	80c3      	strh	r3, [r0, #6]
 8002d8c:	4770      	bx	lr

08002d8e <USBD_CtlError>:
{
 8002d8e:	b510      	push	{r4, lr}
 8002d90:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8002d92:	2180      	movs	r1, #128	; 0x80
 8002d94:	f000 fc28 	bl	80035e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002d98:	4620      	mov	r0, r4
}
 8002d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002d9e:	2100      	movs	r1, #0
 8002da0:	f000 bc22 	b.w	80035e8 <USBD_LL_StallEP>

08002da4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002da4:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002da6:	b188      	cbz	r0, 8002dcc <USBD_GetString+0x28>
 8002da8:	4605      	mov	r5, r0
 8002daa:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002dac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2c00      	cmp	r4, #0
 8002db4:	d1f9      	bne.n	8002daa <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	3302      	adds	r3, #2
 8002dba:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8002dbc:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	704b      	strb	r3, [r1, #1]
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	3801      	subs	r0, #1
    while (*desc != '\0') 
 8002dc6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002dca:	b905      	cbnz	r5, 8002dce <USBD_GetString+0x2a>
 8002dcc:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	54cd      	strb	r5, [r1, r3]
 8002dd2:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	548c      	strb	r4, [r1, r2]
 8002dda:	e7f4      	b.n	8002dc6 <USBD_GetString+0x22>

08002ddc <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002ddc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002dde:	2202      	movs	r2, #2
{
 8002de0:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002de2:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002de6:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002de8:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002dea:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002dec:	2100      	movs	r1, #0
 8002dee:	f000 fc37 	bl	8003660 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002df2:	2000      	movs	r0, #0
 8002df4:	bd10      	pop	{r4, pc}

08002df6 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002df6:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002df8:	4613      	mov	r3, r2
 8002dfa:	460a      	mov	r2, r1
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	f000 fc2f 	bl	8003660 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002e02:	2000      	movs	r0, #0
 8002e04:	bd08      	pop	{r3, pc}

08002e06 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002e06:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002e08:	4613      	mov	r3, r2
 8002e0a:	460a      	mov	r2, r1
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	f000 fc35 	bl	800367c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002e12:	2000      	movs	r0, #0
 8002e14:	bd08      	pop	{r3, pc}

08002e16 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002e16:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002e18:	2304      	movs	r3, #4
 8002e1a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002e1e:	2300      	movs	r3, #0
 8002e20:	461a      	mov	r2, r3
 8002e22:	4619      	mov	r1, r3
 8002e24:	f000 fc1c 	bl	8003660 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002e28:	2000      	movs	r0, #0
 8002e2a:	bd08      	pop	{r3, pc}

08002e2c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002e2c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002e2e:	2305      	movs	r3, #5
 8002e30:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002e34:	2300      	movs	r3, #0
 8002e36:	461a      	mov	r2, r3
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f000 fc1f 	bl	800367c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002e3e:	2000      	movs	r0, #0
 8002e40:	bd08      	pop	{r3, pc}
	...

08002e44 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <MX_GPIO_Init+0x2c>)
{
 8002e46:	b082      	sub	sp, #8
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	f042 0220 	orr.w	r2, r2, #32
 8002e4e:	61da      	str	r2, [r3, #28]
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	f002 0220 	and.w	r2, r2, #32
 8002e56:	9200      	str	r2, [sp, #0]
 8002e58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5a:	69da      	ldr	r2, [r3, #28]
 8002e5c:	f042 0201 	orr.w	r2, r2, #1
 8002e60:	61da      	str	r2, [r3, #28]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	9b01      	ldr	r3, [sp, #4]

}
 8002e6c:	b002      	add	sp, #8
 8002e6e:	4770      	bx	lr
 8002e70:	40023800 	.word	0x40023800

08002e74 <HandleCommand>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HandleCommand(char * CMD_String, int String_Length)
{
 8002e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e78:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart1, (uint8_t *)CMD_String, String_Length, 100);
 8002e7a:	b28a      	uxth	r2, r1
 8002e7c:	2364      	movs	r3, #100	; 0x64
 8002e7e:	4601      	mov	r1, r0
 8002e80:	4820      	ldr	r0, [pc, #128]	; (8002f04 <HandleCommand+0x90>)
 8002e82:	f7ff fb13 	bl	80024ac <HAL_UART_Transmit>
	//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)CMD_String, String_Length);
	char * single_cmd;
	single_cmd = strtok(CMD_String, ",");
 8002e86:	4620      	mov	r0, r4
 8002e88:	491f      	ldr	r1, [pc, #124]	; (8002f08 <HandleCommand+0x94>)
 8002e8a:	f000 fcc9 	bl	8003820 <strtok>
 8002e8e:	4604      	mov	r4, r0
	while (single_cmd!=NULL)
	{
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)single_cmd, strlen(single_cmd));
 8002e90:	4e1e      	ldr	r6, [pc, #120]	; (8002f0c <HandleCommand+0x98>)

		if (strncmp(single_cmd,"PD",2)==0)
 8002e92:	4f1f      	ldr	r7, [pc, #124]	; (8002f10 <HandleCommand+0x9c>)
					break;
				case 4:
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWM);
					break;
				case 5:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM);
 8002e94:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8002f18 <HandleCommand+0xa4>
	while (single_cmd!=NULL)
 8002e98:	b90c      	cbnz	r4, 8002e9e <HandleCommand+0x2a>
					break;
			}
		}
		single_cmd = strtok (NULL, ",");
	}
}
 8002e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)single_cmd, strlen(single_cmd));
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7fd f96c 	bl	800017c <strlen>
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	b282      	uxth	r2, r0
 8002ea8:	4630      	mov	r0, r6
 8002eaa:	f7ff fcab 	bl	8002804 <USBD_HID_SendReport>
		if (strncmp(single_cmd,"PD",2)==0)
 8002eae:	2202      	movs	r2, #2
 8002eb0:	4639      	mov	r1, r7
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	f000 fca2 	bl	80037fc <strncmp>
 8002eb8:	b998      	cbnz	r0, 8002ee2 <HandleCommand+0x6e>
			int PD_NUMBER = ((int)single_cmd[2] - (int)'1' + 1);
 8002eba:	78a5      	ldrb	r5, [r4, #2]
			int PWM = atoi(&single_cmd[4]);
 8002ebc:	1d20      	adds	r0, r4, #4
 8002ebe:	f000 fc74 	bl	80037aa <atoi>
			switch (PD_NUMBER)
 8002ec2:	f1a5 0331 	sub.w	r3, r5, #49	; 0x31
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d80b      	bhi.n	8002ee2 <HandleCommand+0x6e>
 8002eca:	e8df f003 	tbb	[pc, r3]
 8002ece:	0703      	.short	0x0703
 8002ed0:	1410      	.short	0x1410
 8002ed2:	18          	.byte	0x18
 8002ed3:	00          	.byte	0x00
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <HandleCommand+0xa0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM);
 8002ed8:	6358      	str	r0, [r3, #52]	; 0x34
					break;
 8002eda:	e002      	b.n	8002ee2 <HandleCommand+0x6e>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM);
 8002edc:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <HandleCommand+0xa0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6398      	str	r0, [r3, #56]	; 0x38
		single_cmd = strtok (NULL, ",");
 8002ee2:	4909      	ldr	r1, [pc, #36]	; (8002f08 <HandleCommand+0x94>)
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f000 fc9b 	bl	8003820 <strtok>
 8002eea:	4604      	mov	r4, r0
 8002eec:	e7d4      	b.n	8002e98 <HandleCommand+0x24>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM);
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <HandleCommand+0xa0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	63d8      	str	r0, [r3, #60]	; 0x3c
					break;
 8002ef4:	e7f5      	b.n	8002ee2 <HandleCommand+0x6e>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWM);
 8002ef6:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HandleCommand+0xa0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6418      	str	r0, [r3, #64]	; 0x40
					break;
 8002efc:	e7f1      	b.n	8002ee2 <HandleCommand+0x6e>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM);
 8002efe:	f8d8 3000 	ldr.w	r3, [r8]
 8002f02:	e7e9      	b.n	8002ed8 <HandleCommand+0x64>
 8002f04:	200003c4 	.word	0x200003c4
 8002f08:	08003b60 	.word	0x08003b60
 8002f0c:	20000404 	.word	0x20000404
 8002f10:	08003b62 	.word	0x08003b62
 8002f14:	2000038c 	.word	0x2000038c
 8002f18:	20000354 	.word	0x20000354

08002f1c <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f1c:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <SystemClock_Config+0x7c>)
{
 8002f1e:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f20:	6813      	ldr	r3, [r2, #0]
{
 8002f22:	b092      	sub	sp, #72	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f24:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002f28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f2c:	6013      	str	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f36:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002f38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f3c:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002f3e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002f40:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f44:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f46:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f48:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002f4a:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f4c:	f7fe fa6a 	bl	8001424 <HAL_RCC_OscConfig>
 8002f50:	b100      	cbz	r0, 8002f54 <SystemClock_Config+0x38>
 8002f52:	e7fe      	b.n	8002f52 <SystemClock_Config+0x36>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f54:	220f      	movs	r2, #15
 8002f56:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f58:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f5a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f5c:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f5e:	4621      	mov	r1, r4
 8002f60:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f62:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f66:	f7fe fdf7 	bl	8001b58 <HAL_RCC_ClockConfig>
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	b100      	cbz	r0, 8002f70 <SystemClock_Config+0x54>
 8002f6e:	e7fe      	b.n	8002f6e <SystemClock_Config+0x52>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002f70:	f7fe fed0 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8002f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f78:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f7c:	f7fd f986 	bl	800028c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002f80:	2004      	movs	r0, #4
 8002f82:	f7fd f999 	bl	80002b8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002f86:	4622      	mov	r2, r4
 8002f88:	4621      	mov	r1, r4
 8002f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8e:	f7fd f93d 	bl	800020c <HAL_NVIC_SetPriority>
}
 8002f92:	b012      	add	sp, #72	; 0x48
 8002f94:	bd10      	pop	{r4, pc}
 8002f96:	bf00      	nop
 8002f98:	40007000 	.word	0x40007000

08002f9c <main>:
{
 8002f9c:	b508      	push	{r3, lr}
  HAL_Init();
 8002f9e:	f7fd f909 	bl	80001b4 <HAL_Init>
  SystemClock_Config();
 8002fa2:	f7ff ffbb 	bl	8002f1c <SystemClock_Config>
  MX_GPIO_Init();
 8002fa6:	f7ff ff4d 	bl	8002e44 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002faa:	f000 f931 	bl	8003210 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002fae:	f000 f99d 	bl	80032ec <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002fb2:	f000 f9ed 	bl	8003390 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8002fb6:	f000 fa39 	bl	800342c <MX_USB_DEVICE_Init>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <main+0x54>)
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_ALL);
 8002fbc:	2118      	movs	r1, #24
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8002fbe:	681a      	ldr	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_ALL);
 8002fc0:	480c      	ldr	r0, [pc, #48]	; (8002ff4 <main+0x58>)
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8002fc2:	68d3      	ldr	r3, [r2, #12]
 8002fc4:	f043 0320 	orr.w	r3, r3, #32
 8002fc8:	60d3      	str	r3, [r2, #12]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_ALL);
 8002fca:	f7fe ff8b 	bl	8001ee4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4809      	ldr	r0, [pc, #36]	; (8002ff8 <main+0x5c>)
 8002fd2:	f7fe ff87 	bl	8001ee4 <HAL_TIM_PWM_Start>
  USBD_Init(&hUsbDeviceFS, &FS_Desc, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	4908      	ldr	r1, [pc, #32]	; (8002ffc <main+0x60>)
 8002fda:	4809      	ldr	r0, [pc, #36]	; (8003000 <main+0x64>)
 8002fdc:	f7ff fc24 	bl	8002828 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, USBD_HID_CLASS);
 8002fe0:	4908      	ldr	r1, [pc, #32]	; (8003004 <main+0x68>)
 8002fe2:	4807      	ldr	r0, [pc, #28]	; (8003000 <main+0x64>)
 8002fe4:	f7ff fc35 	bl	8002852 <USBD_RegisterClass>
  USBD_Start(&hUsbDeviceFS);
 8002fe8:	4805      	ldr	r0, [pc, #20]	; (8003000 <main+0x64>)
 8002fea:	f7ff fc39 	bl	8002860 <USBD_Start>
 8002fee:	e7fe      	b.n	8002fee <main+0x52>
 8002ff0:	200003c4 	.word	0x200003c4
 8002ff4:	2000038c 	.word	0x2000038c
 8002ff8:	20000354 	.word	0x20000354
 8002ffc:	200000c4 	.word	0x200000c4
 8003000:	20000404 	.word	0x20000404
 8003004:	2000004c 	.word	0x2000004c

08003008 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8003008:	e7fe      	b.n	8003008 <_Error_Handler>
	...

0800300c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800300c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800300e:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <HAL_MspInit+0x9c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003010:	2003      	movs	r0, #3
  __HAL_RCC_COMP_CLK_ENABLE();
 8003012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003014:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
 800301a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800301c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003020:	9201      	str	r2, [sp, #4]
 8003022:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003024:	6a1a      	ldr	r2, [r3, #32]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	621a      	str	r2, [r3, #32]
 800302c:	6a1a      	ldr	r2, [r3, #32]
 800302e:	f002 0201 	and.w	r2, r2, #1
 8003032:	9202      	str	r2, [sp, #8]
 8003034:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003038:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800303c:	625a      	str	r2, [r3, #36]	; 0x24
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003044:	9303      	str	r3, [sp, #12]
 8003046:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003048:	f7fd f8ce 	bl	80001e8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800304c:	2200      	movs	r2, #0
 800304e:	f06f 000b 	mvn.w	r0, #11
 8003052:	4611      	mov	r1, r2
 8003054:	f7fd f8da 	bl	800020c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003058:	2200      	movs	r2, #0
 800305a:	f06f 000a 	mvn.w	r0, #10
 800305e:	4611      	mov	r1, r2
 8003060:	f7fd f8d4 	bl	800020c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003064:	2200      	movs	r2, #0
 8003066:	f06f 0009 	mvn.w	r0, #9
 800306a:	4611      	mov	r1, r2
 800306c:	f7fd f8ce 	bl	800020c <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003070:	2200      	movs	r2, #0
 8003072:	f06f 0004 	mvn.w	r0, #4
 8003076:	4611      	mov	r1, r2
 8003078:	f7fd f8c8 	bl	800020c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800307c:	2200      	movs	r2, #0
 800307e:	f06f 0003 	mvn.w	r0, #3
 8003082:	4611      	mov	r1, r2
 8003084:	f7fd f8c2 	bl	800020c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003088:	2200      	movs	r2, #0
 800308a:	f06f 0001 	mvn.w	r0, #1
 800308e:	4611      	mov	r1, r2
 8003090:	f7fd f8bc 	bl	800020c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003094:	2200      	movs	r2, #0
 8003096:	f04f 30ff 	mov.w	r0, #4294967295
 800309a:	4611      	mov	r1, r2
 800309c:	f7fd f8b6 	bl	800020c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030a0:	b005      	add	sp, #20
 80030a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800

080030ac <NMI_Handler>:
 80030ac:	4770      	bx	lr

080030ae <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80030ae:	e7fe      	b.n	80030ae <HardFault_Handler>

080030b0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80030b0:	e7fe      	b.n	80030b0 <MemManage_Handler>

080030b2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80030b2:	e7fe      	b.n	80030b2 <BusFault_Handler>

080030b4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80030b4:	e7fe      	b.n	80030b4 <UsageFault_Handler>

080030b6 <SVC_Handler>:
 80030b6:	4770      	bx	lr

080030b8 <DebugMon_Handler>:
 80030b8:	4770      	bx	lr

080030ba <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80030ba:	4770      	bx	lr

080030bc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80030bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030be:	f7fd f885 	bl	80001cc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80030c6:	f7fd b904 	b.w	80002d2 <HAL_SYSTICK_IRQHandler>
	...

080030cc <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80030cc:	4801      	ldr	r0, [pc, #4]	; (80030d4 <USB_LP_IRQHandler+0x8>)
 80030ce:	f7fd be45 	b.w	8000d5c <HAL_PCD_IRQHandler>
 80030d2:	bf00      	nop
 80030d4:	20000628 	.word	0x20000628

080030d8 <USB_HP_IRQHandler>:
 80030d8:	f7ff bff8 	b.w	80030cc <USB_LP_IRQHandler>

080030dc <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 80030dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030de:	4c10      	ldr	r4, [pc, #64]	; (8003120 <USART1_IRQHandler+0x44>)
 80030e0:	4620      	mov	r0, r4
 80030e2:	f7ff fa41 	bl	8002568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_IT_SOURCE(&huart1,UART_IT_RXNE))
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	0692      	lsls	r2, r2, #26
 80030ec:	d517      	bpl.n	800311e <USART1_IRQHandler+0x42>
  {
	  __HAL_UART_CLEAR_FLAG(&huart1,UART_IT_RXNE);
 80030ee:	4a0d      	ldr	r2, [pc, #52]	; (8003124 <USART1_IRQHandler+0x48>)
	  byte_data = USART1->DR;

	  CMD[CMD_Length] = (char)byte_data;
 80030f0:	480d      	ldr	r0, [pc, #52]	; (8003128 <USART1_IRQHandler+0x4c>)
	  __HAL_UART_CLEAR_FLAG(&huart1,UART_IT_RXNE);
 80030f2:	601a      	str	r2, [r3, #0]
	  byte_data = USART1->DR;
 80030f4:	4b0d      	ldr	r3, [pc, #52]	; (800312c <USART1_IRQHandler+0x50>)
 80030f6:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <USART1_IRQHandler+0x54>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	7013      	strb	r3, [r2, #0]
	  CMD[CMD_Length] = (char)byte_data;
 80030fe:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <USART1_IRQHandler+0x58>)

	  if (byte_data==10 || byte_data==13)
 8003100:	2b0a      	cmp	r3, #10
	  CMD[CMD_Length] = (char)byte_data;
 8003102:	6811      	ldr	r1, [r2, #0]
 8003104:	4614      	mov	r4, r2
 8003106:	5443      	strb	r3, [r0, r1]
	  if (byte_data==10 || byte_data==13)
 8003108:	d001      	beq.n	800310e <USART1_IRQHandler+0x32>
 800310a:	2b0d      	cmp	r3, #13
 800310c:	d105      	bne.n	800311a <USART1_IRQHandler+0x3e>
	  {
		//  CMD_Flag = 1;
		  HandleCommand(CMD, CMD_Length);
 800310e:	4806      	ldr	r0, [pc, #24]	; (8003128 <USART1_IRQHandler+0x4c>)
 8003110:	f7ff feb0 	bl	8002e74 <HandleCommand>
		  CMD_Length = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	6023      	str	r3, [r4, #0]
 8003118:	bd10      	pop	{r4, pc}
		//  CMD_Flag = 0;
	  }
	  else
	  {
		  CMD_Length++;
 800311a:	3101      	adds	r1, #1
 800311c:	6011      	str	r1, [r2, #0]
 800311e:	bd10      	pop	{r4, pc}
 8003120:	200003c4 	.word	0x200003c4
 8003124:	efffffdf 	.word	0xefffffdf
 8003128:	20000314 	.word	0x20000314
 800312c:	40013800 	.word	0x40013800
 8003130:	2000030c 	.word	0x2000030c
 8003134:	20000310 	.word	0x20000310

08003138 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8003138:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <SystemInit+0x3c>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003140:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8003142:	6899      	ldr	r1, [r3, #8]
 8003144:	4a0c      	ldr	r2, [pc, #48]	; (8003178 <SystemInit+0x40>)
 8003146:	400a      	ands	r2, r1
 8003148:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8003150:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8003154:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800315c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8003164:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003166:	2200      	movs	r2, #0
 8003168:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800316a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800316e:	4b03      	ldr	r3, [pc, #12]	; (800317c <SystemInit+0x44>)
 8003170:	609a      	str	r2, [r3, #8]
 8003172:	4770      	bx	lr
 8003174:	40023800 	.word	0x40023800
 8003178:	88ffc00c 	.word	0x88ffc00c
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8003180:	6803      	ldr	r3, [r0, #0]
{
 8003182:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d10c      	bne.n	80031a4 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800318a:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800318e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	625a      	str	r2, [r3, #36]	; 0x24
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80031a0:	b002      	add	sp, #8
 80031a2:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM3)
 80031a4:	4a06      	ldr	r2, [pc, #24]	; (80031c0 <HAL_TIM_Base_MspInit+0x40>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d1fa      	bne.n	80031a0 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_TIM_Base_MspInit+0x44>)
 80031ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ae:	f042 0202 	orr.w	r2, r2, #2
 80031b2:	625a      	str	r2, [r3, #36]	; 0x24
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	9301      	str	r3, [sp, #4]
 80031bc:	9b01      	ldr	r3, [sp, #4]
}
 80031be:	e7ef      	b.n	80031a0 <HAL_TIM_Base_MspInit+0x20>
 80031c0:	40000400 	.word	0x40000400
 80031c4:	40023800 	.word	0x40023800

080031c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 80031ca:	6803      	ldr	r3, [r0, #0]
 80031cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d0:	d10f      	bne.n	80031f2 <HAL_TIM_MspPostInit+0x2a>
    PA0-WKUP1     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80031d2:	230f      	movs	r3, #15
 80031d4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031e0:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e2:	a901      	add	r1, sp, #4
 80031e4:	4808      	ldr	r0, [pc, #32]	; (8003208 <HAL_TIM_MspPostInit+0x40>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031e6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e8:	f7fd f878 	bl	80002dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031ec:	b007      	add	sp, #28
 80031ee:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(timHandle->Instance==TIM3)
 80031f2:	4a06      	ldr	r2, [pc, #24]	; (800320c <HAL_TIM_MspPostInit+0x44>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d1f9      	bne.n	80031ec <HAL_TIM_MspPostInit+0x24>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031f8:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fa:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031fc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fe:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003202:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003204:	9204      	str	r2, [sp, #16]
 8003206:	e7ec      	b.n	80031e2 <HAL_TIM_MspPostInit+0x1a>
 8003208:	40020000 	.word	0x40020000
 800320c:	40000400 	.word	0x40000400

08003210 <MX_TIM2_Init>:
  htim2.Instance = TIM2;
 8003210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003214:	4833      	ldr	r0, [pc, #204]	; (80032e4 <MX_TIM2_Init+0xd4>)
{
 8003216:	b500      	push	{lr}
  htim2.Init.Period = 999;
 8003218:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim2.Instance = TIM2;
 800321c:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 800321e:	2300      	movs	r3, #0
{
 8003220:	b08d      	sub	sp, #52	; 0x34
  htim2.Init.Prescaler = 0;
 8003222:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003224:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 999;
 8003226:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003228:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800322a:	f7fe fe19 	bl	8001e60 <HAL_TIM_Base_Init>
 800322e:	b118      	cbz	r0, 8003238 <MX_TIM2_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8003230:	214a      	movs	r1, #74	; 0x4a
 8003232:	482d      	ldr	r0, [pc, #180]	; (80032e8 <MX_TIM2_Init+0xd8>)
 8003234:	f7ff fee8 	bl	8003008 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800323c:	a90c      	add	r1, sp, #48	; 0x30
 800323e:	f841 3d24 	str.w	r3, [r1, #-36]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003242:	4828      	ldr	r0, [pc, #160]	; (80032e4 <MX_TIM2_Init+0xd4>)
 8003244:	f7fe fed8 	bl	8001ff8 <HAL_TIM_ConfigClockSource>
 8003248:	b118      	cbz	r0, 8003252 <MX_TIM2_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 800324a:	2150      	movs	r1, #80	; 0x50
 800324c:	4826      	ldr	r0, [pc, #152]	; (80032e8 <MX_TIM2_Init+0xd8>)
 800324e:	f7ff fedb 	bl	8003008 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003252:	4824      	ldr	r0, [pc, #144]	; (80032e4 <MX_TIM2_Init+0xd4>)
 8003254:	f7fe fe1f 	bl	8001e96 <HAL_TIM_PWM_Init>
 8003258:	b118      	cbz	r0, 8003262 <MX_TIM2_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 800325a:	2155      	movs	r1, #85	; 0x55
 800325c:	4822      	ldr	r0, [pc, #136]	; (80032e8 <MX_TIM2_Init+0xd8>)
 800325e:	f7ff fed3 	bl	8003008 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003262:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003264:	a901      	add	r1, sp, #4
 8003266:	481f      	ldr	r0, [pc, #124]	; (80032e4 <MX_TIM2_Init+0xd4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003268:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800326a:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800326c:	f7fe ff7d 	bl	800216a <HAL_TIMEx_MasterConfigSynchronization>
 8003270:	b118      	cbz	r0, 800327a <MX_TIM2_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 8003272:	215c      	movs	r1, #92	; 0x5c
 8003274:	481c      	ldr	r0, [pc, #112]	; (80032e8 <MX_TIM2_Init+0xd8>)
 8003276:	f7ff fec7 	bl	8003008 <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800327a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800327c:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800327e:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 499;
 8003280:	f240 13f3 	movw	r3, #499	; 0x1f3
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003284:	a907      	add	r1, sp, #28
 8003286:	4817      	ldr	r0, [pc, #92]	; (80032e4 <MX_TIM2_Init+0xd4>)
  sConfigOC.Pulse = 499;
 8003288:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800328a:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800328c:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800328e:	f7fe fe2b 	bl	8001ee8 <HAL_TIM_PWM_ConfigChannel>
 8003292:	b118      	cbz	r0, 800329c <MX_TIM2_Init+0x8c>
    _Error_Handler(__FILE__, __LINE__);
 8003294:	2165      	movs	r1, #101	; 0x65
 8003296:	4814      	ldr	r0, [pc, #80]	; (80032e8 <MX_TIM2_Init+0xd8>)
 8003298:	f7ff feb6 	bl	8003008 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800329c:	2204      	movs	r2, #4
 800329e:	a907      	add	r1, sp, #28
 80032a0:	4810      	ldr	r0, [pc, #64]	; (80032e4 <MX_TIM2_Init+0xd4>)
 80032a2:	f7fe fe21 	bl	8001ee8 <HAL_TIM_PWM_ConfigChannel>
 80032a6:	b118      	cbz	r0, 80032b0 <MX_TIM2_Init+0xa0>
    _Error_Handler(__FILE__, __LINE__);
 80032a8:	216a      	movs	r1, #106	; 0x6a
 80032aa:	480f      	ldr	r0, [pc, #60]	; (80032e8 <MX_TIM2_Init+0xd8>)
 80032ac:	f7ff feac 	bl	8003008 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032b0:	2208      	movs	r2, #8
 80032b2:	a907      	add	r1, sp, #28
 80032b4:	480b      	ldr	r0, [pc, #44]	; (80032e4 <MX_TIM2_Init+0xd4>)
 80032b6:	f7fe fe17 	bl	8001ee8 <HAL_TIM_PWM_ConfigChannel>
 80032ba:	b118      	cbz	r0, 80032c4 <MX_TIM2_Init+0xb4>
    _Error_Handler(__FILE__, __LINE__);
 80032bc:	216f      	movs	r1, #111	; 0x6f
 80032be:	480a      	ldr	r0, [pc, #40]	; (80032e8 <MX_TIM2_Init+0xd8>)
 80032c0:	f7ff fea2 	bl	8003008 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80032c4:	220c      	movs	r2, #12
 80032c6:	a907      	add	r1, sp, #28
 80032c8:	4806      	ldr	r0, [pc, #24]	; (80032e4 <MX_TIM2_Init+0xd4>)
 80032ca:	f7fe fe0d 	bl	8001ee8 <HAL_TIM_PWM_ConfigChannel>
 80032ce:	b118      	cbz	r0, 80032d8 <MX_TIM2_Init+0xc8>
    _Error_Handler(__FILE__, __LINE__);
 80032d0:	2174      	movs	r1, #116	; 0x74
 80032d2:	4805      	ldr	r0, [pc, #20]	; (80032e8 <MX_TIM2_Init+0xd8>)
 80032d4:	f7ff fe98 	bl	8003008 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 80032d8:	4802      	ldr	r0, [pc, #8]	; (80032e4 <MX_TIM2_Init+0xd4>)
 80032da:	f7ff ff75 	bl	80031c8 <HAL_TIM_MspPostInit>
}
 80032de:	b00d      	add	sp, #52	; 0x34
 80032e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80032e4:	2000038c 	.word	0x2000038c
 80032e8:	08003b86 	.word	0x08003b86

080032ec <MX_TIM3_Init>:
  htim3.Instance = TIM3;
 80032ec:	4825      	ldr	r0, [pc, #148]	; (8003384 <MX_TIM3_Init+0x98>)
 80032ee:	4b26      	ldr	r3, [pc, #152]	; (8003388 <MX_TIM3_Init+0x9c>)
{
 80032f0:	b500      	push	{lr}
  htim3.Init.Period = 999;
 80032f2:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim3.Instance = TIM3;
 80032f6:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 0;
 80032f8:	2300      	movs	r3, #0
{
 80032fa:	b08d      	sub	sp, #52	; 0x34
  htim3.Init.Prescaler = 0;
 80032fc:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032fe:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 8003300:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003302:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003304:	f7fe fdac 	bl	8001e60 <HAL_TIM_Base_Init>
 8003308:	b118      	cbz	r0, 8003312 <MX_TIM3_Init+0x26>
    _Error_Handler(__FILE__, __LINE__);
 800330a:	2188      	movs	r1, #136	; 0x88
 800330c:	481f      	ldr	r0, [pc, #124]	; (800338c <MX_TIM3_Init+0xa0>)
 800330e:	f7ff fe7b 	bl	8003008 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003316:	a90c      	add	r1, sp, #48	; 0x30
 8003318:	f841 3d24 	str.w	r3, [r1, #-36]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800331c:	4819      	ldr	r0, [pc, #100]	; (8003384 <MX_TIM3_Init+0x98>)
 800331e:	f7fe fe6b 	bl	8001ff8 <HAL_TIM_ConfigClockSource>
 8003322:	b118      	cbz	r0, 800332c <MX_TIM3_Init+0x40>
    _Error_Handler(__FILE__, __LINE__);
 8003324:	218e      	movs	r1, #142	; 0x8e
 8003326:	4819      	ldr	r0, [pc, #100]	; (800338c <MX_TIM3_Init+0xa0>)
 8003328:	f7ff fe6e 	bl	8003008 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800332c:	4815      	ldr	r0, [pc, #84]	; (8003384 <MX_TIM3_Init+0x98>)
 800332e:	f7fe fdb2 	bl	8001e96 <HAL_TIM_PWM_Init>
 8003332:	b118      	cbz	r0, 800333c <MX_TIM3_Init+0x50>
    _Error_Handler(__FILE__, __LINE__);
 8003334:	2193      	movs	r1, #147	; 0x93
 8003336:	4815      	ldr	r0, [pc, #84]	; (800338c <MX_TIM3_Init+0xa0>)
 8003338:	f7ff fe66 	bl	8003008 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800333c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800333e:	a901      	add	r1, sp, #4
 8003340:	4810      	ldr	r0, [pc, #64]	; (8003384 <MX_TIM3_Init+0x98>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003342:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003344:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003346:	f7fe ff10 	bl	800216a <HAL_TIMEx_MasterConfigSynchronization>
 800334a:	b118      	cbz	r0, 8003354 <MX_TIM3_Init+0x68>
    _Error_Handler(__FILE__, __LINE__);
 800334c:	219a      	movs	r1, #154	; 0x9a
 800334e:	480f      	ldr	r0, [pc, #60]	; (800338c <MX_TIM3_Init+0xa0>)
 8003350:	f7ff fe5a 	bl	8003008 <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003354:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003356:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003358:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 499;
 800335a:	f240 13f3 	movw	r3, #499	; 0x1f3
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800335e:	a907      	add	r1, sp, #28
 8003360:	4808      	ldr	r0, [pc, #32]	; (8003384 <MX_TIM3_Init+0x98>)
  sConfigOC.Pulse = 499;
 8003362:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003364:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003366:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003368:	f7fe fdbe 	bl	8001ee8 <HAL_TIM_PWM_ConfigChannel>
 800336c:	b118      	cbz	r0, 8003376 <MX_TIM3_Init+0x8a>
    _Error_Handler(__FILE__, __LINE__);
 800336e:	21a3      	movs	r1, #163	; 0xa3
 8003370:	4806      	ldr	r0, [pc, #24]	; (800338c <MX_TIM3_Init+0xa0>)
 8003372:	f7ff fe49 	bl	8003008 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8003376:	4803      	ldr	r0, [pc, #12]	; (8003384 <MX_TIM3_Init+0x98>)
 8003378:	f7ff ff26 	bl	80031c8 <HAL_TIM_MspPostInit>
}
 800337c:	b00d      	add	sp, #52	; 0x34
 800337e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003382:	bf00      	nop
 8003384:	20000354 	.word	0x20000354
 8003388:	40000400 	.word	0x40000400
 800338c:	08003b86 	.word	0x08003b86

08003390 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003390:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8003392:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 8003396:	480b      	ldr	r0, [pc, #44]	; (80033c4 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800339a:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 800339c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033a0:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033a2:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033a4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033a6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033a8:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033aa:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033ac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033ae:	f7ff f851 	bl	8002454 <HAL_UART_Init>
 80033b2:	b128      	cbz	r0, 80033c0 <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80033b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80033b8:	214c      	movs	r1, #76	; 0x4c
 80033ba:	4804      	ldr	r0, [pc, #16]	; (80033cc <MX_USART1_UART_Init+0x3c>)
 80033bc:	f7ff be24 	b.w	8003008 <_Error_Handler>
 80033c0:	bd08      	pop	{r3, pc}
 80033c2:	bf00      	nop
 80033c4:	200003c4 	.word	0x200003c4
 80033c8:	40013800 	.word	0x40013800
 80033cc:	08003b93 	.word	0x08003b93

080033d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 80033d2:	6802      	ldr	r2, [r0, #0]
 80033d4:	4b13      	ldr	r3, [pc, #76]	; (8003424 <HAL_UART_MspInit+0x54>)
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d121      	bne.n	800341e <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033da:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80033de:	6a1a      	ldr	r2, [r3, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e0:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80033e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e6:	621a      	str	r2, [r3, #32]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ea:	480f      	ldr	r0, [pc, #60]	; (8003428 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80033ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80033f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033f8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033fe:	2301      	movs	r3, #1
 8003400:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003402:	2303      	movs	r3, #3
 8003404:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003406:	2307      	movs	r3, #7
 8003408:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340a:	f7fc ff67 	bl	80002dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800340e:	2200      	movs	r2, #0
 8003410:	2025      	movs	r0, #37	; 0x25
 8003412:	4611      	mov	r1, r2
 8003414:	f7fc fefa 	bl	800020c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003418:	2025      	movs	r0, #37	; 0x25
 800341a:	f7fc ff2b 	bl	8000274 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800341e:	b007      	add	sp, #28
 8003420:	f85d fb04 	ldr.w	pc, [sp], #4
 8003424:	40013800 	.word	0x40013800
 8003428:	40020000 	.word	0x40020000

0800342c <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */                                        
void MX_USB_DEVICE_Init(void)
{
 800342c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800342e:	4c07      	ldr	r4, [pc, #28]	; (800344c <MX_USB_DEVICE_Init+0x20>)
 8003430:	2200      	movs	r2, #0
 8003432:	4907      	ldr	r1, [pc, #28]	; (8003450 <MX_USB_DEVICE_Init+0x24>)
 8003434:	4620      	mov	r0, r4
 8003436:	f7ff f9f7 	bl	8002828 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);
 800343a:	4620      	mov	r0, r4
 800343c:	4905      	ldr	r1, [pc, #20]	; (8003454 <MX_USB_DEVICE_Init+0x28>)
 800343e:	f7ff fa08 	bl	8002852 <USBD_RegisterClass>

  USBD_Start(&hUsbDeviceFS);
 8003442:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8003448:	f7ff ba0a 	b.w	8002860 <USBD_Start>
 800344c:	20000404 	.word	0x20000404
 8003450:	200000c4 	.word	0x200000c4
 8003454:	2000004c 	.word	0x2000004c

08003458 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003458:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800345a:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <HAL_PCD_MspInit+0x48>)
 800345c:	6802      	ldr	r2, [r0, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d11a      	bne.n	8003498 <HAL_PCD_MspInit+0x40>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003462:	f503 33ee 	add.w	r3, r3, #121856	; 0x1dc00
 8003466:	6a5a      	ldr	r2, [r3, #36]	; 0x24

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 8003468:	2013      	movs	r0, #19
    __HAL_RCC_USB_CLK_ENABLE();
 800346a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800346e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 8003470:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 8003474:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003476:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800347e:	f7fc fec5 	bl	800020c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8003482:	2013      	movs	r0, #19
 8003484:	f7fc fef6 	bl	8000274 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8003488:	2200      	movs	r2, #0
 800348a:	2014      	movs	r0, #20
 800348c:	4611      	mov	r1, r2
 800348e:	f7fc febd 	bl	800020c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8003492:	2014      	movs	r0, #20
 8003494:	f7fc feee 	bl	8000274 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003498:	b003      	add	sp, #12
 800349a:	f85d fb04 	ldr.w	pc, [sp], #4
 800349e:	bf00      	nop
 80034a0:	40005c00 	.word	0x40005c00

080034a4 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80034a4:	f500 71f6 	add.w	r1, r0, #492	; 0x1ec
 80034a8:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80034ac:	f7ff b9ef 	b.w	800288e <USBD_LL_SetupStage>

080034b0 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80034b0:	231c      	movs	r3, #28
 80034b2:	fb03 0301 	mla	r3, r3, r1, r0
 80034b6:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80034ba:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80034be:	f7ff ba13 	b.w	80028e8 <USBD_LL_DataOutStage>

080034c2 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80034c2:	231c      	movs	r3, #28
 80034c4:	fb03 0301 	mla	r3, r3, r1, r0
 80034c8:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80034cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ce:	f7ff ba3d 	b.w	800294c <USBD_LL_DataInStage>

080034d2 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80034d2:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80034d6:	f7ff bab9 	b.w	8002a4c <USBD_LL_SOF>

080034da <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80034da:	b510      	push	{r4, lr}
 80034dc:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 80034de:	2101      	movs	r1, #1
 80034e0:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80034e4:	f7ff faa0 	bl	8002a28 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80034e8:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
}
 80034ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80034f0:	f7ff ba7b 	b.w	80029ea <USBD_LL_Reset>

080034f4 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80034f4:	b510      	push	{r4, lr}
 80034f6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80034f8:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80034fc:	f7ff fa97 	bl	8002a2e <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003500:	69a3      	ldr	r3, [r4, #24]
 8003502:	b123      	cbz	r3, 800350e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003504:	4a02      	ldr	r2, [pc, #8]	; (8003510 <HAL_PCD_SuspendCallback+0x1c>)
 8003506:	6913      	ldr	r3, [r2, #16]
 8003508:	f043 0306 	orr.w	r3, r3, #6
 800350c:	6113      	str	r3, [r2, #16]
 800350e:	bd10      	pop	{r4, pc}
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003514:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8003518:	f7ff ba92 	b.w	8002a40 <USBD_LL_Resume>

0800351c <USBD_LL_Init>:
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800351c:	2308      	movs	r3, #8
{ 
 800351e:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003520:	4918      	ldr	r1, [pc, #96]	; (8003584 <USBD_LL_Init+0x68>)
{ 
 8003522:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003524:	4818      	ldr	r0, [pc, #96]	; (8003588 <USBD_LL_Init+0x6c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8003526:	2203      	movs	r2, #3
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003528:	e880 000a 	stmia.w	r0, {r1, r3}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800352c:	2302      	movs	r3, #2
 800352e:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003530:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003532:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8003534:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.pData = pdev;
 8003538:	f8c0 421c 	str.w	r4, [r0, #540]	; 0x21c
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 800353c:	60c2      	str	r2, [r0, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800353e:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003540:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003542:	f7fc ffc5 	bl	80004d0 <HAL_PCD_Init>
 8003546:	b120      	cbz	r0, 8003552 <USBD_LL_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003548:	f240 1121 	movw	r1, #289	; 0x121
 800354c:	480f      	ldr	r0, [pc, #60]	; (800358c <USBD_LL_Init+0x70>)
 800354e:	f7ff fd5b 	bl	8003008 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003552:	2200      	movs	r2, #0
 8003554:	2318      	movs	r3, #24
 8003556:	4611      	mov	r1, r2
 8003558:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800355c:	f7fd ff08 	bl	8001370 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003560:	2358      	movs	r3, #88	; 0x58
 8003562:	2200      	movs	r2, #0
 8003564:	2180      	movs	r1, #128	; 0x80
 8003566:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800356a:	f7fd ff01 	bl	8001370 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);  
 800356e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003572:	2200      	movs	r2, #0
 8003574:	2181      	movs	r1, #129	; 0x81
 8003576:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800357a:	f7fd fef9 	bl	8001370 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 800357e:	2000      	movs	r0, #0
 8003580:	bd10      	pop	{r4, pc}
 8003582:	bf00      	nop
 8003584:	40005c00 	.word	0x40005c00
 8003588:	20000628 	.word	0x20000628
 800358c:	08003ba6 	.word	0x08003ba6

08003590 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003590:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8003592:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003596:	f7fd fee5 	bl	8001364 <HAL_PCD_Start>
 800359a:	2803      	cmp	r0, #3
 800359c:	bf9a      	itte	ls
 800359e:	4b02      	ldrls	r3, [pc, #8]	; (80035a8 <USBD_LL_Start+0x18>)
 80035a0:	5c18      	ldrbls	r0, [r3, r0]
 80035a2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80035a4:	bd08      	pop	{r3, pc}
 80035a6:	bf00      	nop
 80035a8:	08003ba2 	.word	0x08003ba2

080035ac <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 80035ac:	b510      	push	{r4, lr}
 80035ae:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 80035b0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80035b4:	4613      	mov	r3, r2
 80035b6:	4622      	mov	r2, r4
 80035b8:	f7fc fff4 	bl	80005a4 <HAL_PCD_EP_Open>
 80035bc:	2803      	cmp	r0, #3
 80035be:	bf9a      	itte	ls
 80035c0:	4b01      	ldrls	r3, [pc, #4]	; (80035c8 <USBD_LL_OpenEP+0x1c>)
 80035c2:	5c18      	ldrbls	r0, [r3, r0]
 80035c4:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80035c6:	bd10      	pop	{r4, pc}
 80035c8:	08003ba2 	.word	0x08003ba2

080035cc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80035cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80035ce:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80035d2:	f7fd f95d 	bl	8000890 <HAL_PCD_EP_Close>
 80035d6:	2803      	cmp	r0, #3
 80035d8:	bf9a      	itte	ls
 80035da:	4b02      	ldrls	r3, [pc, #8]	; (80035e4 <USBD_LL_CloseEP+0x18>)
 80035dc:	5c18      	ldrbls	r0, [r3, r0]
 80035de:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80035e0:	bd08      	pop	{r3, pc}
 80035e2:	bf00      	nop
 80035e4:	08003ba2 	.word	0x08003ba2

080035e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80035e8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80035ea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80035ee:	f7fd fe0b 	bl	8001208 <HAL_PCD_EP_SetStall>
 80035f2:	2803      	cmp	r0, #3
 80035f4:	bf9a      	itte	ls
 80035f6:	4b02      	ldrls	r3, [pc, #8]	; (8003600 <USBD_LL_StallEP+0x18>)
 80035f8:	5c18      	ldrbls	r0, [r3, r0]
 80035fa:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80035fc:	bd08      	pop	{r3, pc}
 80035fe:	bf00      	nop
 8003600:	08003ba2 	.word	0x08003ba2

08003604 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003604:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003606:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800360a:	f7fd fe4b 	bl	80012a4 <HAL_PCD_EP_ClrStall>
 800360e:	2803      	cmp	r0, #3
 8003610:	bf9a      	itte	ls
 8003612:	4b02      	ldrls	r3, [pc, #8]	; (800361c <USBD_LL_ClearStallEP+0x18>)
 8003614:	5c18      	ldrbls	r0, [r3, r0]
 8003616:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003618:	bd08      	pop	{r3, pc}
 800361a:	bf00      	nop
 800361c:	08003ba2 	.word	0x08003ba2

08003620 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003620:	221c      	movs	r2, #28
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003622:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003626:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800362a:	bf1b      	ittet	ne
 800362c:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8003630:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003634:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003638:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800363c:	bf08      	it	eq
 800363e:	f891 010a 	ldrbeq.w	r0, [r1, #266]	; 0x10a
  }
}
 8003642:	4770      	bx	lr

08003644 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8003644:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003646:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800364a:	f7fc ff95 	bl	8000578 <HAL_PCD_SetAddress>
 800364e:	2803      	cmp	r0, #3
 8003650:	bf9a      	itte	ls
 8003652:	4b02      	ldrls	r3, [pc, #8]	; (800365c <USBD_LL_SetUSBAddress+0x18>)
 8003654:	5c18      	ldrbls	r0, [r3, r0]
 8003656:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003658:	bd08      	pop	{r3, pc}
 800365a:	bf00      	nop
 800365c:	08003ba2 	.word	0x08003ba2

08003660 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8003660:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003662:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003666:	f7fd fa95 	bl	8000b94 <HAL_PCD_EP_Transmit>
 800366a:	2803      	cmp	r0, #3
 800366c:	bf9a      	itte	ls
 800366e:	4b02      	ldrls	r3, [pc, #8]	; (8003678 <USBD_LL_Transmit+0x18>)
 8003670:	5c18      	ldrbls	r0, [r3, r0]
 8003672:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8003674:	bd08      	pop	{r3, pc}
 8003676:	bf00      	nop
 8003678:	08003ba2 	.word	0x08003ba2

0800367c <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 800367c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800367e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003682:	f7fd f9db 	bl	8000a3c <HAL_PCD_EP_Receive>
 8003686:	2803      	cmp	r0, #3
 8003688:	bf9a      	itte	ls
 800368a:	4b02      	ldrls	r3, [pc, #8]	; (8003694 <USBD_LL_PrepareReceive+0x18>)
 800368c:	5c18      	ldrbls	r0, [r3, r0]
 800368e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003690:	bd08      	pop	{r3, pc}
 8003692:	bf00      	nop
 8003694:	08003ba2 	.word	0x08003ba2

08003698 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003698:	4800      	ldr	r0, [pc, #0]	; (800369c <USBD_static_malloc+0x4>)
 800369a:	4770      	bx	lr
 800369c:	200002e8 	.word	0x200002e8

080036a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80036a0:	4770      	bx	lr
	...

080036a4 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <HAL_PCDEx_SetConnectionState+0x14>)
/* USER CODE BEGIN 5 */
  if (state == 1)
 80036a6:	2901      	cmp	r1, #1
  {
    /* Configure Low Connection State */
	__HAL_SYSCFG_USBPULLUP_ENABLE();
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	bf0c      	ite	eq
 80036ac:	f042 0201 	orreq.w	r2, r2, #1
  }
  else
  {
    /* Configure High Connection State */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 80036b0:	f022 0201 	bicne.w	r2, r2, #1
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	4770      	bx	lr
 80036b8:	40010000 	.word	0x40010000

080036bc <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 80036bc:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80036be:	4801      	ldr	r0, [pc, #4]	; (80036c4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80036c0:	800b      	strh	r3, [r1, #0]
}
 80036c2:	4770      	bx	lr
 80036c4:	200000e0 	.word	0x200000e0

080036c8 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 80036c8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80036ca:	4801      	ldr	r0, [pc, #4]	; (80036d0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length =  sizeof(USBD_LangIDDesc);  
 80036cc:	800b      	strh	r3, [r1, #0]
}
 80036ce:	4770      	bx	lr
 80036d0:	200000f4 	.word	0x200000f4

080036d4 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80036d4:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80036d6:	4c04      	ldr	r4, [pc, #16]	; (80036e8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80036d8:	460a      	mov	r2, r1
 80036da:	4804      	ldr	r0, [pc, #16]	; (80036ec <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80036dc:	4621      	mov	r1, r4
 80036de:	f7ff fb61 	bl	8002da4 <USBD_GetString>
  return USBD_StrDesc;
}
 80036e2:	4620      	mov	r0, r4
 80036e4:	bd10      	pop	{r4, pc}
 80036e6:	bf00      	nop
 80036e8:	20000848 	.word	0x20000848
 80036ec:	08003bd2 	.word	0x08003bd2

080036f0 <USBD_FS_ProductStrDescriptor>:
{
 80036f0:	b510      	push	{r4, lr}
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80036f2:	4c04      	ldr	r4, [pc, #16]	; (8003704 <USBD_FS_ProductStrDescriptor+0x14>)
 80036f4:	460a      	mov	r2, r1
 80036f6:	4804      	ldr	r0, [pc, #16]	; (8003708 <USBD_FS_ProductStrDescriptor+0x18>)
 80036f8:	4621      	mov	r1, r4
 80036fa:	f7ff fb53 	bl	8002da4 <USBD_GetString>
}
 80036fe:	4620      	mov	r0, r4
 8003700:	bd10      	pop	{r4, pc}
 8003702:	bf00      	nop
 8003704:	20000848 	.word	0x20000848
 8003708:	08003be5 	.word	0x08003be5

0800370c <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800370c:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800370e:	4c04      	ldr	r4, [pc, #16]	; (8003720 <USBD_FS_SerialStrDescriptor+0x14>)
 8003710:	460a      	mov	r2, r1
 8003712:	4804      	ldr	r0, [pc, #16]	; (8003724 <USBD_FS_SerialStrDescriptor+0x18>)
 8003714:	4621      	mov	r1, r4
 8003716:	f7ff fb45 	bl	8002da4 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 800371a:	4620      	mov	r0, r4
 800371c:	bd10      	pop	{r4, pc}
 800371e:	bf00      	nop
 8003720:	20000848 	.word	0x20000848
 8003724:	08003bfb 	.word	0x08003bfb

08003728 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003728:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800372a:	4c04      	ldr	r4, [pc, #16]	; (800373c <USBD_FS_ConfigStrDescriptor+0x14>)
 800372c:	460a      	mov	r2, r1
 800372e:	4804      	ldr	r0, [pc, #16]	; (8003740 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003730:	4621      	mov	r1, r4
 8003732:	f7ff fb37 	bl	8002da4 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 8003736:	4620      	mov	r0, r4
 8003738:	bd10      	pop	{r4, pc}
 800373a:	bf00      	nop
 800373c:	20000848 	.word	0x20000848
 8003740:	08003bb9 	.word	0x08003bb9

08003744 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003744:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003746:	4c04      	ldr	r4, [pc, #16]	; (8003758 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003748:	460a      	mov	r2, r1
 800374a:	4804      	ldr	r0, [pc, #16]	; (800375c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800374c:	4621      	mov	r1, r4
 800374e:	f7ff fb29 	bl	8002da4 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 8003752:	4620      	mov	r0, r4
 8003754:	bd10      	pop	{r4, pc}
 8003756:	bf00      	nop
 8003758:	20000848 	.word	0x20000848
 800375c:	08003bc4 	.word	0x08003bc4

08003760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003760:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003762:	e003      	b.n	800376c <LoopCopyDataInit>

08003764 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003766:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003768:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800376a:	3104      	adds	r1, #4

0800376c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800376c:	480a      	ldr	r0, [pc, #40]	; (8003798 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003770:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003772:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003774:	d3f6      	bcc.n	8003764 <CopyDataInit>
  ldr r2, =_sbss
 8003776:	4a0a      	ldr	r2, [pc, #40]	; (80037a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003778:	e002      	b.n	8003780 <LoopFillZerobss>

0800377a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800377a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800377c:	f842 3b04 	str.w	r3, [r2], #4

08003780 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003780:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003782:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003784:	d3f9      	bcc.n	800377a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003786:	f7ff fcd7 	bl	8003138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800378a:	f000 f813 	bl	80037b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800378e:	f7ff fc05 	bl	8002f9c <main>
  bx lr
 8003792:	4770      	bx	lr
  ldr r3, =_sidata
 8003794:	08003d1c 	.word	0x08003d1c
  ldr r0, =_sdata
 8003798:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800379c:	200002c8 	.word	0x200002c8
  ldr r2, =_sbss
 80037a0:	200002c8 	.word	0x200002c8
  ldr r3, = _ebss
 80037a4:	20000a4c 	.word	0x20000a4c

080037a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037a8:	e7fe      	b.n	80037a8 <ADC1_IRQHandler>

080037aa <atoi>:
 80037aa:	220a      	movs	r2, #10
 80037ac:	2100      	movs	r1, #0
 80037ae:	f000 b90b 	b.w	80039c8 <strtol>
	...

080037b4 <__libc_init_array>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	2500      	movs	r5, #0
 80037b8:	4e0c      	ldr	r6, [pc, #48]	; (80037ec <__libc_init_array+0x38>)
 80037ba:	4c0d      	ldr	r4, [pc, #52]	; (80037f0 <__libc_init_array+0x3c>)
 80037bc:	1ba4      	subs	r4, r4, r6
 80037be:	10a4      	asrs	r4, r4, #2
 80037c0:	42a5      	cmp	r5, r4
 80037c2:	d109      	bne.n	80037d8 <__libc_init_array+0x24>
 80037c4:	f000 f9c0 	bl	8003b48 <_init>
 80037c8:	2500      	movs	r5, #0
 80037ca:	4e0a      	ldr	r6, [pc, #40]	; (80037f4 <__libc_init_array+0x40>)
 80037cc:	4c0a      	ldr	r4, [pc, #40]	; (80037f8 <__libc_init_array+0x44>)
 80037ce:	1ba4      	subs	r4, r4, r6
 80037d0:	10a4      	asrs	r4, r4, #2
 80037d2:	42a5      	cmp	r5, r4
 80037d4:	d105      	bne.n	80037e2 <__libc_init_array+0x2e>
 80037d6:	bd70      	pop	{r4, r5, r6, pc}
 80037d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037dc:	4798      	blx	r3
 80037de:	3501      	adds	r5, #1
 80037e0:	e7ee      	b.n	80037c0 <__libc_init_array+0xc>
 80037e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037e6:	4798      	blx	r3
 80037e8:	3501      	adds	r5, #1
 80037ea:	e7f2      	b.n	80037d2 <__libc_init_array+0x1e>
 80037ec:	08003d14 	.word	0x08003d14
 80037f0:	08003d14 	.word	0x08003d14
 80037f4:	08003d14 	.word	0x08003d14
 80037f8:	08003d18 	.word	0x08003d18

080037fc <strncmp>:
 80037fc:	b510      	push	{r4, lr}
 80037fe:	b16a      	cbz	r2, 800381c <strncmp+0x20>
 8003800:	3901      	subs	r1, #1
 8003802:	1884      	adds	r4, r0, r2
 8003804:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003808:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800380c:	4293      	cmp	r3, r2
 800380e:	d103      	bne.n	8003818 <strncmp+0x1c>
 8003810:	42a0      	cmp	r0, r4
 8003812:	d001      	beq.n	8003818 <strncmp+0x1c>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f5      	bne.n	8003804 <strncmp+0x8>
 8003818:	1a98      	subs	r0, r3, r2
 800381a:	bd10      	pop	{r4, pc}
 800381c:	4610      	mov	r0, r2
 800381e:	bd10      	pop	{r4, pc}

08003820 <strtok>:
 8003820:	4b13      	ldr	r3, [pc, #76]	; (8003870 <strtok+0x50>)
 8003822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003826:	681d      	ldr	r5, [r3, #0]
 8003828:	4606      	mov	r6, r0
 800382a:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800382c:	460f      	mov	r7, r1
 800382e:	b9b4      	cbnz	r4, 800385e <strtok+0x3e>
 8003830:	2050      	movs	r0, #80	; 0x50
 8003832:	f000 f8e3 	bl	80039fc <malloc>
 8003836:	65a8      	str	r0, [r5, #88]	; 0x58
 8003838:	6004      	str	r4, [r0, #0]
 800383a:	6044      	str	r4, [r0, #4]
 800383c:	6084      	str	r4, [r0, #8]
 800383e:	60c4      	str	r4, [r0, #12]
 8003840:	6104      	str	r4, [r0, #16]
 8003842:	6144      	str	r4, [r0, #20]
 8003844:	6184      	str	r4, [r0, #24]
 8003846:	6284      	str	r4, [r0, #40]	; 0x28
 8003848:	62c4      	str	r4, [r0, #44]	; 0x2c
 800384a:	6304      	str	r4, [r0, #48]	; 0x30
 800384c:	6344      	str	r4, [r0, #52]	; 0x34
 800384e:	6384      	str	r4, [r0, #56]	; 0x38
 8003850:	63c4      	str	r4, [r0, #60]	; 0x3c
 8003852:	6404      	str	r4, [r0, #64]	; 0x40
 8003854:	6444      	str	r4, [r0, #68]	; 0x44
 8003856:	6484      	str	r4, [r0, #72]	; 0x48
 8003858:	64c4      	str	r4, [r0, #76]	; 0x4c
 800385a:	7704      	strb	r4, [r0, #28]
 800385c:	6244      	str	r4, [r0, #36]	; 0x24
 800385e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003860:	4639      	mov	r1, r7
 8003862:	4630      	mov	r0, r6
 8003864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003868:	2301      	movs	r3, #1
 800386a:	f000 b803 	b.w	8003874 <__strtok_r>
 800386e:	bf00      	nop
 8003870:	200000f8 	.word	0x200000f8

08003874 <__strtok_r>:
 8003874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003876:	b918      	cbnz	r0, 8003880 <__strtok_r+0xc>
 8003878:	6810      	ldr	r0, [r2, #0]
 800387a:	b908      	cbnz	r0, 8003880 <__strtok_r+0xc>
 800387c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800387e:	4620      	mov	r0, r4
 8003880:	4604      	mov	r4, r0
 8003882:	460f      	mov	r7, r1
 8003884:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003888:	f817 6b01 	ldrb.w	r6, [r7], #1
 800388c:	b91e      	cbnz	r6, 8003896 <__strtok_r+0x22>
 800388e:	b965      	cbnz	r5, 80038aa <__strtok_r+0x36>
 8003890:	6015      	str	r5, [r2, #0]
 8003892:	4628      	mov	r0, r5
 8003894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003896:	42b5      	cmp	r5, r6
 8003898:	d1f6      	bne.n	8003888 <__strtok_r+0x14>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ef      	bne.n	800387e <__strtok_r+0xa>
 800389e:	6014      	str	r4, [r2, #0]
 80038a0:	7003      	strb	r3, [r0, #0]
 80038a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a4:	461c      	mov	r4, r3
 80038a6:	e00c      	b.n	80038c2 <__strtok_r+0x4e>
 80038a8:	b915      	cbnz	r5, 80038b0 <__strtok_r+0x3c>
 80038aa:	460e      	mov	r6, r1
 80038ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80038b0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80038b4:	42ab      	cmp	r3, r5
 80038b6:	d1f7      	bne.n	80038a8 <__strtok_r+0x34>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f3      	beq.n	80038a4 <__strtok_r+0x30>
 80038bc:	2300      	movs	r3, #0
 80038be:	f804 3c01 	strb.w	r3, [r4, #-1]
 80038c2:	6014      	str	r4, [r2, #0]
 80038c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038c6 <_strtol_l.isra.0>:
 80038c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ca:	4680      	mov	r8, r0
 80038cc:	4689      	mov	r9, r1
 80038ce:	4692      	mov	sl, r2
 80038d0:	461f      	mov	r7, r3
 80038d2:	468b      	mov	fp, r1
 80038d4:	465d      	mov	r5, fp
 80038d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80038d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80038dc:	f000 f88a 	bl	80039f4 <__locale_ctype_ptr_l>
 80038e0:	4420      	add	r0, r4
 80038e2:	7846      	ldrb	r6, [r0, #1]
 80038e4:	f016 0608 	ands.w	r6, r6, #8
 80038e8:	d10b      	bne.n	8003902 <_strtol_l.isra.0+0x3c>
 80038ea:	2c2d      	cmp	r4, #45	; 0x2d
 80038ec:	d10b      	bne.n	8003906 <_strtol_l.isra.0+0x40>
 80038ee:	2601      	movs	r6, #1
 80038f0:	782c      	ldrb	r4, [r5, #0]
 80038f2:	f10b 0502 	add.w	r5, fp, #2
 80038f6:	b167      	cbz	r7, 8003912 <_strtol_l.isra.0+0x4c>
 80038f8:	2f10      	cmp	r7, #16
 80038fa:	d114      	bne.n	8003926 <_strtol_l.isra.0+0x60>
 80038fc:	2c30      	cmp	r4, #48	; 0x30
 80038fe:	d00a      	beq.n	8003916 <_strtol_l.isra.0+0x50>
 8003900:	e011      	b.n	8003926 <_strtol_l.isra.0+0x60>
 8003902:	46ab      	mov	fp, r5
 8003904:	e7e6      	b.n	80038d4 <_strtol_l.isra.0+0xe>
 8003906:	2c2b      	cmp	r4, #43	; 0x2b
 8003908:	bf04      	itt	eq
 800390a:	782c      	ldrbeq	r4, [r5, #0]
 800390c:	f10b 0502 	addeq.w	r5, fp, #2
 8003910:	e7f1      	b.n	80038f6 <_strtol_l.isra.0+0x30>
 8003912:	2c30      	cmp	r4, #48	; 0x30
 8003914:	d127      	bne.n	8003966 <_strtol_l.isra.0+0xa0>
 8003916:	782b      	ldrb	r3, [r5, #0]
 8003918:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800391c:	2b58      	cmp	r3, #88	; 0x58
 800391e:	d14b      	bne.n	80039b8 <_strtol_l.isra.0+0xf2>
 8003920:	2710      	movs	r7, #16
 8003922:	786c      	ldrb	r4, [r5, #1]
 8003924:	3502      	adds	r5, #2
 8003926:	2e00      	cmp	r6, #0
 8003928:	bf0c      	ite	eq
 800392a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800392e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003932:	2200      	movs	r2, #0
 8003934:	fbb1 fef7 	udiv	lr, r1, r7
 8003938:	4610      	mov	r0, r2
 800393a:	fb07 1c1e 	mls	ip, r7, lr, r1
 800393e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003942:	2b09      	cmp	r3, #9
 8003944:	d811      	bhi.n	800396a <_strtol_l.isra.0+0xa4>
 8003946:	461c      	mov	r4, r3
 8003948:	42a7      	cmp	r7, r4
 800394a:	dd1d      	ble.n	8003988 <_strtol_l.isra.0+0xc2>
 800394c:	1c53      	adds	r3, r2, #1
 800394e:	d007      	beq.n	8003960 <_strtol_l.isra.0+0x9a>
 8003950:	4586      	cmp	lr, r0
 8003952:	d316      	bcc.n	8003982 <_strtol_l.isra.0+0xbc>
 8003954:	d101      	bne.n	800395a <_strtol_l.isra.0+0x94>
 8003956:	45a4      	cmp	ip, r4
 8003958:	db13      	blt.n	8003982 <_strtol_l.isra.0+0xbc>
 800395a:	2201      	movs	r2, #1
 800395c:	fb00 4007 	mla	r0, r0, r7, r4
 8003960:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003964:	e7eb      	b.n	800393e <_strtol_l.isra.0+0x78>
 8003966:	270a      	movs	r7, #10
 8003968:	e7dd      	b.n	8003926 <_strtol_l.isra.0+0x60>
 800396a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800396e:	2b19      	cmp	r3, #25
 8003970:	d801      	bhi.n	8003976 <_strtol_l.isra.0+0xb0>
 8003972:	3c37      	subs	r4, #55	; 0x37
 8003974:	e7e8      	b.n	8003948 <_strtol_l.isra.0+0x82>
 8003976:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800397a:	2b19      	cmp	r3, #25
 800397c:	d804      	bhi.n	8003988 <_strtol_l.isra.0+0xc2>
 800397e:	3c57      	subs	r4, #87	; 0x57
 8003980:	e7e2      	b.n	8003948 <_strtol_l.isra.0+0x82>
 8003982:	f04f 32ff 	mov.w	r2, #4294967295
 8003986:	e7eb      	b.n	8003960 <_strtol_l.isra.0+0x9a>
 8003988:	1c53      	adds	r3, r2, #1
 800398a:	d108      	bne.n	800399e <_strtol_l.isra.0+0xd8>
 800398c:	2322      	movs	r3, #34	; 0x22
 800398e:	4608      	mov	r0, r1
 8003990:	f8c8 3000 	str.w	r3, [r8]
 8003994:	f1ba 0f00 	cmp.w	sl, #0
 8003998:	d107      	bne.n	80039aa <_strtol_l.isra.0+0xe4>
 800399a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800399e:	b106      	cbz	r6, 80039a2 <_strtol_l.isra.0+0xdc>
 80039a0:	4240      	negs	r0, r0
 80039a2:	f1ba 0f00 	cmp.w	sl, #0
 80039a6:	d00c      	beq.n	80039c2 <_strtol_l.isra.0+0xfc>
 80039a8:	b122      	cbz	r2, 80039b4 <_strtol_l.isra.0+0xee>
 80039aa:	3d01      	subs	r5, #1
 80039ac:	f8ca 5000 	str.w	r5, [sl]
 80039b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b4:	464d      	mov	r5, r9
 80039b6:	e7f9      	b.n	80039ac <_strtol_l.isra.0+0xe6>
 80039b8:	2430      	movs	r4, #48	; 0x30
 80039ba:	2f00      	cmp	r7, #0
 80039bc:	d1b3      	bne.n	8003926 <_strtol_l.isra.0+0x60>
 80039be:	2708      	movs	r7, #8
 80039c0:	e7b1      	b.n	8003926 <_strtol_l.isra.0+0x60>
 80039c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080039c8 <strtol>:
 80039c8:	4b08      	ldr	r3, [pc, #32]	; (80039ec <strtol+0x24>)
 80039ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039cc:	681c      	ldr	r4, [r3, #0]
 80039ce:	4d08      	ldr	r5, [pc, #32]	; (80039f0 <strtol+0x28>)
 80039d0:	6a23      	ldr	r3, [r4, #32]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bf08      	it	eq
 80039d6:	462b      	moveq	r3, r5
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	4613      	mov	r3, r2
 80039dc:	460a      	mov	r2, r1
 80039de:	4601      	mov	r1, r0
 80039e0:	4620      	mov	r0, r4
 80039e2:	f7ff ff70 	bl	80038c6 <_strtol_l.isra.0>
 80039e6:	b003      	add	sp, #12
 80039e8:	bd30      	pop	{r4, r5, pc}
 80039ea:	bf00      	nop
 80039ec:	200000f8 	.word	0x200000f8
 80039f0:	2000015c 	.word	0x2000015c

080039f4 <__locale_ctype_ptr_l>:
 80039f4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80039f8:	4770      	bx	lr
	...

080039fc <malloc>:
 80039fc:	4b02      	ldr	r3, [pc, #8]	; (8003a08 <malloc+0xc>)
 80039fe:	4601      	mov	r1, r0
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	f000 b815 	b.w	8003a30 <_malloc_r>
 8003a06:	bf00      	nop
 8003a08:	200000f8 	.word	0x200000f8

08003a0c <__ascii_mbtowc>:
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	b901      	cbnz	r1, 8003a12 <__ascii_mbtowc+0x6>
 8003a10:	a901      	add	r1, sp, #4
 8003a12:	b142      	cbz	r2, 8003a26 <__ascii_mbtowc+0x1a>
 8003a14:	b14b      	cbz	r3, 8003a2a <__ascii_mbtowc+0x1e>
 8003a16:	7813      	ldrb	r3, [r2, #0]
 8003a18:	600b      	str	r3, [r1, #0]
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	1c10      	adds	r0, r2, #0
 8003a1e:	bf18      	it	ne
 8003a20:	2001      	movne	r0, #1
 8003a22:	b002      	add	sp, #8
 8003a24:	4770      	bx	lr
 8003a26:	4610      	mov	r0, r2
 8003a28:	e7fb      	b.n	8003a22 <__ascii_mbtowc+0x16>
 8003a2a:	f06f 0001 	mvn.w	r0, #1
 8003a2e:	e7f8      	b.n	8003a22 <__ascii_mbtowc+0x16>

08003a30 <_malloc_r>:
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	1ccd      	adds	r5, r1, #3
 8003a34:	f025 0503 	bic.w	r5, r5, #3
 8003a38:	3508      	adds	r5, #8
 8003a3a:	2d0c      	cmp	r5, #12
 8003a3c:	bf38      	it	cc
 8003a3e:	250c      	movcc	r5, #12
 8003a40:	2d00      	cmp	r5, #0
 8003a42:	4606      	mov	r6, r0
 8003a44:	db01      	blt.n	8003a4a <_malloc_r+0x1a>
 8003a46:	42a9      	cmp	r1, r5
 8003a48:	d903      	bls.n	8003a52 <_malloc_r+0x22>
 8003a4a:	230c      	movs	r3, #12
 8003a4c:	6033      	str	r3, [r6, #0]
 8003a4e:	2000      	movs	r0, #0
 8003a50:	bd70      	pop	{r4, r5, r6, pc}
 8003a52:	f000 f868 	bl	8003b26 <__malloc_lock>
 8003a56:	4a23      	ldr	r2, [pc, #140]	; (8003ae4 <_malloc_r+0xb4>)
 8003a58:	6814      	ldr	r4, [r2, #0]
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	b991      	cbnz	r1, 8003a84 <_malloc_r+0x54>
 8003a5e:	4c22      	ldr	r4, [pc, #136]	; (8003ae8 <_malloc_r+0xb8>)
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	b91b      	cbnz	r3, 8003a6c <_malloc_r+0x3c>
 8003a64:	4630      	mov	r0, r6
 8003a66:	f000 f841 	bl	8003aec <_sbrk_r>
 8003a6a:	6020      	str	r0, [r4, #0]
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	4630      	mov	r0, r6
 8003a70:	f000 f83c 	bl	8003aec <_sbrk_r>
 8003a74:	1c43      	adds	r3, r0, #1
 8003a76:	d126      	bne.n	8003ac6 <_malloc_r+0x96>
 8003a78:	230c      	movs	r3, #12
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	6033      	str	r3, [r6, #0]
 8003a7e:	f000 f853 	bl	8003b28 <__malloc_unlock>
 8003a82:	e7e4      	b.n	8003a4e <_malloc_r+0x1e>
 8003a84:	680b      	ldr	r3, [r1, #0]
 8003a86:	1b5b      	subs	r3, r3, r5
 8003a88:	d41a      	bmi.n	8003ac0 <_malloc_r+0x90>
 8003a8a:	2b0b      	cmp	r3, #11
 8003a8c:	d90f      	bls.n	8003aae <_malloc_r+0x7e>
 8003a8e:	600b      	str	r3, [r1, #0]
 8003a90:	18cc      	adds	r4, r1, r3
 8003a92:	50cd      	str	r5, [r1, r3]
 8003a94:	4630      	mov	r0, r6
 8003a96:	f000 f847 	bl	8003b28 <__malloc_unlock>
 8003a9a:	f104 000b 	add.w	r0, r4, #11
 8003a9e:	1d23      	adds	r3, r4, #4
 8003aa0:	f020 0007 	bic.w	r0, r0, #7
 8003aa4:	1ac3      	subs	r3, r0, r3
 8003aa6:	d01b      	beq.n	8003ae0 <_malloc_r+0xb0>
 8003aa8:	425a      	negs	r2, r3
 8003aaa:	50e2      	str	r2, [r4, r3]
 8003aac:	bd70      	pop	{r4, r5, r6, pc}
 8003aae:	428c      	cmp	r4, r1
 8003ab0:	bf0b      	itete	eq
 8003ab2:	6863      	ldreq	r3, [r4, #4]
 8003ab4:	684b      	ldrne	r3, [r1, #4]
 8003ab6:	6013      	streq	r3, [r2, #0]
 8003ab8:	6063      	strne	r3, [r4, #4]
 8003aba:	bf18      	it	ne
 8003abc:	460c      	movne	r4, r1
 8003abe:	e7e9      	b.n	8003a94 <_malloc_r+0x64>
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	6849      	ldr	r1, [r1, #4]
 8003ac4:	e7ca      	b.n	8003a5c <_malloc_r+0x2c>
 8003ac6:	1cc4      	adds	r4, r0, #3
 8003ac8:	f024 0403 	bic.w	r4, r4, #3
 8003acc:	42a0      	cmp	r0, r4
 8003ace:	d005      	beq.n	8003adc <_malloc_r+0xac>
 8003ad0:	1a21      	subs	r1, r4, r0
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	f000 f80a 	bl	8003aec <_sbrk_r>
 8003ad8:	3001      	adds	r0, #1
 8003ada:	d0cd      	beq.n	8003a78 <_malloc_r+0x48>
 8003adc:	6025      	str	r5, [r4, #0]
 8003ade:	e7d9      	b.n	8003a94 <_malloc_r+0x64>
 8003ae0:	bd70      	pop	{r4, r5, r6, pc}
 8003ae2:	bf00      	nop
 8003ae4:	200002fc 	.word	0x200002fc
 8003ae8:	20000300 	.word	0x20000300

08003aec <_sbrk_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	2300      	movs	r3, #0
 8003af0:	4c05      	ldr	r4, [pc, #20]	; (8003b08 <_sbrk_r+0x1c>)
 8003af2:	4605      	mov	r5, r0
 8003af4:	4608      	mov	r0, r1
 8003af6:	6023      	str	r3, [r4, #0]
 8003af8:	f000 f818 	bl	8003b2c <_sbrk>
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	d102      	bne.n	8003b06 <_sbrk_r+0x1a>
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	b103      	cbz	r3, 8003b06 <_sbrk_r+0x1a>
 8003b04:	602b      	str	r3, [r5, #0]
 8003b06:	bd38      	pop	{r3, r4, r5, pc}
 8003b08:	20000a48 	.word	0x20000a48

08003b0c <__ascii_wctomb>:
 8003b0c:	b149      	cbz	r1, 8003b22 <__ascii_wctomb+0x16>
 8003b0e:	2aff      	cmp	r2, #255	; 0xff
 8003b10:	bf8b      	itete	hi
 8003b12:	238a      	movhi	r3, #138	; 0x8a
 8003b14:	700a      	strbls	r2, [r1, #0]
 8003b16:	6003      	strhi	r3, [r0, #0]
 8003b18:	2001      	movls	r0, #1
 8003b1a:	bf88      	it	hi
 8003b1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8003b20:	4770      	bx	lr
 8003b22:	4608      	mov	r0, r1
 8003b24:	4770      	bx	lr

08003b26 <__malloc_lock>:
 8003b26:	4770      	bx	lr

08003b28 <__malloc_unlock>:
 8003b28:	4770      	bx	lr
	...

08003b2c <_sbrk>:
 8003b2c:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <_sbrk+0x14>)
 8003b2e:	4602      	mov	r2, r0
 8003b30:	6819      	ldr	r1, [r3, #0]
 8003b32:	b909      	cbnz	r1, 8003b38 <_sbrk+0xc>
 8003b34:	4903      	ldr	r1, [pc, #12]	; (8003b44 <_sbrk+0x18>)
 8003b36:	6019      	str	r1, [r3, #0]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	4402      	add	r2, r0
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	4770      	bx	lr
 8003b40:	20000304 	.word	0x20000304
 8003b44:	20000a4c 	.word	0x20000a4c

08003b48 <_init>:
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4a:	bf00      	nop
 8003b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4e:	bc08      	pop	{r3}
 8003b50:	469e      	mov	lr, r3
 8003b52:	4770      	bx	lr

08003b54 <_fini>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr
